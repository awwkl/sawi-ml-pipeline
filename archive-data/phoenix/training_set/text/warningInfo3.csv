CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/hadoop/hbase/ipc/PhoenixIndexRpcSchedulerTest.java,testIndexPriorityWritesToIndexHandler,52-52,[        queue.poll(20, TimeUnit.SECONDS);],,testIndexPriorityWritesToIndexHandler,58-58,[        queue.poll(20, TimeUnit.SECONDS);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,114-114,[        this.viewConstants = viewConstants;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,88-88,[        this.viewConstants = viewConstants;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,midkey,446-446,[        return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReaderGenerator.java,preStoreFileReaderOpen,96-96,[                if (result == null || result.isEmpty()) return reader;],,preStoreFileReaderOpen,117-117,[                if(indexMaintainers.isEmpty()) return reader;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReaderGenerator.java,preStoreFileReaderOpen,88-88,[            if(scvf != null) scan.setFilter(scvf);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,<init>,160-160,[    this.splitrow = splitrow;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,createDaughters,288-288,[      if (metaEntries == null || metaEntries.isEmpty()) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,getZKNode,548-548,[    } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,transitionZKNode,469-469,[      } catch (Exception e) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/LocalIndexSplitter.java,preRollBackSplit,172-172,[            if (st != null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/hadoop/hbase/regionserver/wal/IndexedWALEditCodec.java,,113-136,[    public CompressedIndexKeyValueDecoder(InputStream is, Decoder compressedDecoder) {,       super(is);,       this.decoder = compressedDecoder;,     }, ,     @Override,     protected Cell parseCell() throws IOException {,       // reader the marker,       int marker = this.in.read();,       if (marker < 0) {,         throw new EOFException(,             "Unexepcted end of stream found while reading next (Indexed) KeyValue");,       }, ,       // do the normal thing, if its a regular kv,       if (marker == REGULAR_KEY_VALUE_MARKER) {,         if (!this.decoder.advance()) {,           throw new IOException("Could not read next key-value from generic KeyValue Decoder!");,         },         return this.decoder.current();,       }, ,       // its an indexedKeyValue, so parse it out specially,       return KeyValueCodec.readKeyValue((DataInput) this.in);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/hadoop/hbase/regionserver/wal/IndexedWALEditCodec.java,,85-98,[  public class IndexKeyValueDecoder extends BaseDecoder {, ,     /**,      * Create a Decoder on the given input stream with the given Decoder to parse,      * generic {@link KeyValue}s.,      * @param is stream to read from,      */,     public IndexKeyValueDecoder(InputStream is){,       super(is);,     }, ,     @Override,     protected KeyValue parseCell() throws IOException{,       return KeyValueCodec.readKeyValue((DataInput) this.in);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,setUp,95-103,[    setupCluster();,     this.conf = HBaseConfiguration.create(UTIL.getConfiguration());,     this.fs = UTIL.getDFSCluster().getFileSystem();,     this.hbaseRootDir = new Path(this.conf.get(HConstants.HBASE_DIR));,     this.oldLogDir = new Path(this.hbaseRootDir, HConstants.HREGION_OLDLOGDIR_NAME);,     this.logDir = new Path(this.hbaseRootDir, HConstants.HREGION_LOGDIR_NAME);,     // reset the log reader to ensure we pull the one from this config,     HLogFactory.resetLogReaderClass();,   }],,setup,44-56,[		props = new Properties();, 		spoolDir =  Files.createTempDir();, 		props.put(QueryServices.SPOOL_DIRECTORY, spoolDir.getPath());,         props.setProperty(QueryServices.SPOOL_THRESHOLD_BYTES_ATTRIB, Integer.toString(1));, 		conn = DriverManager.getConnection(getUrl(), props);, 		Statement stmt = conn.createStatement();, 		stmt.execute("CREATE TABLE test (ID varchar NOT NULL PRIMARY KEY) SPLIT ON ('EA','EZ')");, 		stmt.execute("UPSERT INTO test VALUES ('AA')");, 		stmt.execute("UPSERT INTO test VALUES ('EB')");    , 		stmt.execute("UPSERT INTO test VALUES ('FA')");    , 		stmt.close();, 		conn.commit();, 	}],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,deleteDir,152-152,[    if (this.fs.exists(p)) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/arithmetic/ArithmeticOperationTest.java,testDecimalDivision,300-300,[            evaluated = e.evaluate(null, ptr);],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/cache/GlobalCache.java,getInstance,100-103,[        if (result == null) {,             synchronized(GlobalCache.class) {,                 result = INSTANCE;,                 if(result == null) {],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/cache/GlobalCache.java,getMetaDataCache,71-74,[        if (result == null) {,             synchronized(this) {,                 result = metaDataCache;,                 if(result == null) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/cache/GlobalCache.java,,70-70,[        Cache<ImmutableBytesPtr,PTable> result = metaDataCache;],,,73-73,[                result = metaDataCache;],,,91-91,[                            .build();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/GlobalCache.java,,85-88,[                            .weigher(new Weigher<ImmutableBytesPtr, PTable>() {,                                 @Override,                                 public int weigh(ImmutableBytesPtr key, PTable table) {,                                     return SizedUtil.IMMUTABLE_BYTES_PTR_SIZE + key.getLength() + table.getEstimatedSize();],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,addServerCache,270-270,[        if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Cache " + cacheId + " successfully added to servers.", connection));}],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,removeServerCache,296-296,[    		if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Removing Cache " + cacheId + " from servers.", connection));}],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/ServerCacheClient.java,getId,132-132,[            return id;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/ServerCacheClient.java,<init>,116-116,[            this.id = id;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/TenantCacheImpl.java,,64-68,[                        .removalListener(new RemovalListener<ImmutableBytesPtr, Closeable>(){,                             @Override,                             public void onRemoval(RemovalNotification<ImmutableBytesPtr, Closeable> notification) {,                                 Closeables.closeAllQuietly(Collections.singletonList(notification.getValue()));,                             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/cache/aggcache/SpillFile.java,close,79-79,[                    file.delete();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/cache/aggcache/SpillManager.java,loadEntry,279-279,[        return null;],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_HASHCODE,org/apache/phoenix/cache/aggcache/SpillManager.java,getPartition,251-251,[        return Math.abs(key.hashCode()) % numSpillFiles;],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/phoenix/cache/aggcache/SpillManager.java,getAggregators,201-201,[            input.skip(keyLength);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,81-81,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,72-72,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,87-87,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,<init>,68-68,[            this.aggs = aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,86-86,[            this.aggs = arg0;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,191-191,[        newDirectory = null;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,redistribute,143-143,[        byteMap = null;],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,194-194,[        b2Index = (keyNew.hashCode() & ((1 << globalDepth) - 1)) | (1 << globalDepth);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/cache/aggcache/SpillMap.java,get,208-208,[        if (!(key instanceof ImmutableBytesPtr)) {],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,flushBuffer,383-383,[                buffer = null;],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/aggcache/SpillableGroupByCache.java,next,369-369,[                            + aggs.toString() + " value = " + Bytes.toStringBinary(value));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateIndexCompiler.java,,81-105,[        return new MutationPlan() {, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createIndex(create, splits);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE INDEX"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateSequenceCompiler.java,,234-258,[        return new MutationPlan() {, ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createSequence(sequence, startsWith, incrementBy, cacheSize, minValue, maxValue);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE SEQUENCE"));,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,123-126,[                            new DelegateConnectionQueryServices(connection.getQueryServices()) {,                                 @Override,                                 public PMetaData addTable(PTable table) throws SQLException {,                                     return connection.addTable(table);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,165-195,[        return new MutationPlan() {, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 try {,                     return client.createTable(create, splits, parent, viewStatement, viewType, viewColumnConstants, isViewColumnReferenced);,                 } finally {,                     if (client.getConnection() != connection) {,                         client.getConnection().close();,                     },                 },             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE TABLE"));,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             },             ,             @Override,             public StatementContext getContext() {,                 return context;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,defaultReturn,237-237,[            return null;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,visitLeave,262-262,[                return null;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/DeleteCompiler.java,compile,292-292,[        Set<PTable> immutableIndex = Collections.emptySet();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DeleteCompiler.java,,419-451,[                mutationPlans.add(new MutationPlan() {,     ,                     @Override,                     public ParameterMetaData getParameterMetaData() {,                         return context.getBindManager().getParameterMetaData();,                     },     ,                     @Override,                     public MutationState execute() {,                         // We have a point lookup, so we know we have a simple set of fully qualified,                         // keys for our ranges,                         ScanRanges ranges = context.getScanRanges();,                         Iterator<KeyRange> iterator = ranges.getPointLookupKeyIterator(); ,                         Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutation = Maps.newHashMapWithExpectedSize(ranges.getPointLookupCount());,                         while (iterator.hasNext()) {,                             mutation.put(new ImmutableBytesPtr(iterator.next().getLowerRange()), PRow.DELETE_MARKER);,                         },                         return new MutationState(tableRef, mutation, 0, maxSize, connection);,                     },     ,                     @Override,                     public ExplainPlan getExplainPlan() throws SQLException {,                         return new ExplainPlan(Collections.singletonList("DELETE SINGLE ROW"));,                     },     ,                     @Override,                     public PhoenixConnection getConnection() {,                         return connection;,                     },     ,                     @Override,                     public StatementContext getContext() {,                         return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DeleteCompiler.java,,465-521,[                mutationPlans.add(new MutationPlan() {,     ,                     @Override,                     public PhoenixConnection getConnection() {,                         return connection;,                     },     ,                     @Override,                     public ParameterMetaData getParameterMetaData() {,                         return context.getBindManager().getParameterMetaData();,                     },     ,                     @Override,                     public StatementContext getContext() {,                         return context;,                     },     ,                     @Override,                     public MutationState execute() throws SQLException {,                         // TODO: share this block of code with UPSERT SELECT,                         ImmutableBytesWritable ptr = context.getTempPtr();,                         tableRef.getTable().getIndexMaintainers(ptr);,                         ServerCache cache = null;,                         try {,                             if (ptr.getLength() > 0) {,                                 IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                                 cache = client.addIndexMetadataCache(context.getScanRanges(), ptr);,                                 byte[] uuidValue = cache.getId();,                                 context.getScan().setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             },                             ResultIterator iterator = aggPlan.iterator();,                             try {,                                 Tuple row = iterator.next();,                                 final long mutationCount = (Long)projector.getColumnProjector(0).getValue(row, PLong.INSTANCE, ptr);,                                 return new MutationState(maxSize, connection) {,                                     @Override,                                     public long getUpdateCount() {,                                         return mutationCount;,                                     },                                 };,                             } finally {,                                 iterator.close();,                             },                         } finally {,                             if (cache != null) {,                                 cache.close();,                             },                         },                     },     ,                     @Override,                     public ExplainPlan getExplainPlan() throws SQLException {,                         List<String> queryPlanSteps =  aggPlan.getExplainPlan().getPlanSteps();,                         List<String> planSteps = Lists.newArrayListWithExpectedSize(queryPlanSteps.size()+1);,                         planSteps.add("DELETE ROWS");,                         planSteps.addAll(queryPlanSteps);,                         return new ExplainPlan(planSteps);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/compile/DeleteCompiler.java,,242-274,[        public MultiDeleteMutationPlan(@NotNull List<MutationPlan> plans) {,             Preconditions.checkArgument(!plans.isEmpty());,             this.plans = plans;,             this.firstPlan = plans.get(0);,         },         ,         @Override,         public StatementContext getContext() {,             return firstPlan.getContext();,         }, ,         @Override,         public ParameterMetaData getParameterMetaData() {,             return firstPlan.getParameterMetaData();,         }, ,         @Override,         public ExplainPlan getExplainPlan() throws SQLException {,             return firstPlan.getExplainPlan();,         }, ,         @Override,         public PhoenixConnection getConnection() {,             return firstPlan.getConnection();,         }, ,         @Override,         public MutationState execute() throws SQLException {,             MutationState state = firstPlan.execute();,             for (MutationPlan plan : plans.subList(1, plans.size())) {,                 plan.execute();,             },             return state;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DropSequenceCompiler.java,,44-68,[        return new MutationPlan() {           , ,             @Override,             public MutationState execute() throws SQLException {,                 return client.dropSequence(sequence);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("DROP SEQUENCE"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {                ,                 return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/compile/ExpressionCompiler.java,visitLeave,1233-1233,[        Object[] elements = (Object[]) java.lang.reflect.Array.newInstance(theArrayElemDataType.getJavaClass(), children.size());],,visitLeave,1213-1213,[        if (isChildTypeUnknown && arrayElemDataType != null && arrayElemDataType.isCoercibleTo(],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/compile/ExpressionCompiler.java,getDeterminism,434-434,[        	determinism.combine(e.getDeterminism());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,716-744,[                new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children, final Expression expression) {,                 PDataType type = expression.getDataType();,                 if (type != null && type.isCoercibleTo(PDate.INSTANCE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDecimal.INSTANCE;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,790-790,[                	return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,747-796,[        new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 boolean foundDate = false;,                 Determinism determinism = Determinism.ALWAYS;,                 PDataType theType = null;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue; ,                     } else if (type.isCoercibleTo(PTimestamp.INSTANCE)) {,                         if (foundDate) {,                             throw TypeMismatchException.newException(type, node.toString());,                         },                         if (theType == null || (theType != PTimestamp.INSTANCE && theType != PUnsignedTimestamp.INSTANCE)) {,                             theType = type;,                         },                         foundDate = true;,                     }else if (type == PDecimal.INSTANCE) {,                         if (theType == null || !theType.isCoercibleTo(PTimestamp.INSTANCE)) {,                             theType = PDecimal.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         if (theType == null) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                     return new DecimalAddExpression(children);,                 } else if (theType == PLong.INSTANCE) {,                     return new LongAddExpression(children);,                 } else if (theType == PDouble.INSTANCE) {,                     return new DoubleAddExpression(children);,                 } else if (theType == null) {,                 	return LiteralExpression.newConstant(null, theType, determinism);,                 } else if (theType == PTimestamp.INSTANCE || theType == PUnsignedTimestamp.INSTANCE) {,                     return new TimestampAddExpression(children);,                 } else if (theType.isCoercibleTo(PDate.INSTANCE)) {,                     return new DateAddExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,809-868,[        return visitLeave(node, children, new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children,,                     final Expression expression) {,                 final PDataType type;,                 // If we're binding the first parameter and the second parameter,                 // is a date,                 // we know that the first parameter must be a date type too.,                 if (i == 0 && (type = children.get(1).getDataType()) != null,                         && type.isCoercibleTo(PDate.INSTANCE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return type;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         }                        ,                     };,                 } else if (expression.getDataType() != null,                         && expression.getDataType().isCoercibleTo(,                     PDate.INSTANCE)) {,                     return new PDatum() { // Same as with addition,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDecimal.INSTANCE;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 // Otherwise just go with what was calculated for the expression,                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,963-963,[                	return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,870-969,[        }, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node,,                     List<Expression> children) throws SQLException {,                 int i = 0;,                 PDataType theType = null;,                 Expression e1 = children.get(0);,                 Expression e2 = children.get(1);,                 Determinism determinism = e1.getDeterminism().combine(e2.getDeterminism());,                 PDataType type1 = e1.getDataType();,                 PDataType type2 = e2.getDataType();,                 // TODO: simplify this special case for DATE conversion,                 /**,                  * For date1-date2, we want to coerce to a LONG because this,                  * cannot be compared against another date. It has essentially,                  * become a number. For date1-5, we want to preserve the DATE,                  * type because this can still be compared against another date,                  * and cannot be multiplied or divided. Any other time occurs is,                  * an error. For example, 5-date1 is an error. The nulls occur if,                  * we have bind variables.,                  */,                 boolean isType1Date = ,                         type1 != null ,                         && type1 != PTimestamp.INSTANCE,                         && type1 != PUnsignedTimestamp.INSTANCE,                         && type1.isCoercibleTo(PDate.INSTANCE);,                 boolean isType2Date = ,                         type2 != null,                         && type2 != PTimestamp.INSTANCE,                         && type2 != PUnsignedTimestamp.INSTANCE,                         && type2.isCoercibleTo(PDate.INSTANCE);,                 if (isType1Date || isType2Date) {,                     if (isType1Date && isType2Date) {,                         i = 2;,                         theType = PDecimal.INSTANCE;,                     } else if (isType1Date && type2 != null,                             && type2.isCoercibleTo(PDecimal.INSTANCE)) {,                         i = 2;,                         theType = PDate.INSTANCE;,                     } else if (type1 == null || type2 == null) {,                         /*,                          * FIXME: Could be either a Date or BigDecimal, but we,                          * don't know if we're comparing to a date or a number,                          * which would be disambiguate it.,                          */,                         i = 2;,                         theType = null;,                     },                 } else if(type1 == PTimestamp.INSTANCE || type2 == PTimestamp.INSTANCE) {,                     i = 2;,                     theType = PTimestamp.INSTANCE;,                 } else if(type1 == PUnsignedTimestamp.INSTANCE || type2 == PUnsignedTimestamp.INSTANCE) {,                     i = 2;,                     theType = PUnsignedTimestamp.INSTANCE;,                 },                 ,                 for (; i < children.size(); i++) {,                     // This logic finds the common type to which all child types are coercible,                     // without losing precision.,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type == PDecimal.INSTANCE) {,                         // Coerce return type to DECIMAL from LONG or DOUBLE if DECIMAL child found,,                         // unless we're doing date arithmetic.,                         if (theType == null,                                 || !theType.isCoercibleTo(PDate.INSTANCE)) {,                             theType = PDecimal.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         // Coerce return type to DOUBLE from LONG if DOUBLE child found,,                         // unless we're doing date arithmetic or we've found another child of type DECIMAL,                         if (theType == null,                                 || (theType != PDecimal.INSTANCE && !theType.isCoercibleTo(PDate.INSTANCE) )) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                     return new DecimalSubtractExpression(children);,                 } else if (theType == PLong.INSTANCE) {,                     return new LongSubtractExpression(children);,                 } else if (theType == PDouble.INSTANCE) {,                     return new DoubleSubtractExpression(children);,                 } else if (theType == null) {,                 	return LiteralExpression.newConstant(null, theType, determinism);,                 } else if (theType == PTimestamp.INSTANCE || theType == PUnsignedTimestamp.INSTANCE) {,                     return new TimestampSubtractExpression(children);,                 } else if (theType.isCoercibleTo(PDate.INSTANCE)) {,                     return new DateSubtractExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,982-1014,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 Determinism determinism = Determinism.ALWAYS;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDecimal.INSTANCE) {,                         theType = PDecimal.INSTANCE;,                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         if (theType == null) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                   return new DecimalMultiplyExpression( children);,                 } else if (theType == PLong.INSTANCE) {,                   return new LongMultiplyExpression( children);,                 } else if (theType == PDouble.INSTANCE) {,                   return new DoubleMultiplyExpression( children);,                 } else {,                   return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1042-1074,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 Determinism determinism = Determinism.ALWAYS;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDecimal.INSTANCE) {,                         theType = PDecimal.INSTANCE;,                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         if (theType == null) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                   return new DecimalDivideExpression( children);,                 } else if (theType == PLong.INSTANCE) {,                   return new LongDivideExpression( children);,                 } else if (theType == PDouble.INSTANCE) {,                   return new DoubleDivideExpression(children);,                 } else {,                   return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1087-1098,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 // ensure integer types,                 for(Expression child : children) {,                     PDataType type = child.getDataType();,                     if(type != null && !type.isCoercibleTo(PLong.INSTANCE)) {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 ,                 return new ModulusExpression(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1223-1226,[                            new DelegateDatum(arrayElemChild) {,                     @Override,                     public PDataType getDataType() {,                         return theArrayElemDataType;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/compile/ExpressionProjector.java,getValue,80-80,[                throw (SQLException) e.getCause();],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/compile/FromCompiler.java,getResolverForCompiledDerivedTable,181-181,[        List<Expression> sourceExpressions = new ArrayList<Expression>();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/FromCompiler.java,resolveColumnFamily,528-528,[                    } catch (ColumnFamilyNotFoundException e) {}],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,561-561,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,566-566,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,571-571,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,576-576,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,581-581,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,591-591,[                return lType == null ? rType : lType;],,getCommonType,596-596,[                return lType == null ? rType : lType;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,554-554,[            if (!lType.isComparableTo(rType))],,getCommonType,559-559,[            if ((lType == null || lType.isCoercibleTo(PTinyint.INSTANCE))],,getCommonType,564-564,[            if ((lType == null || lType.isCoercibleTo(PSmallint.INSTANCE))],,getCommonType,569-569,[            if ((lType == null || lType.isCoercibleTo(PInteger.INSTANCE))],,getCommonType,574-574,[            if ((lType == null || lType.isCoercibleTo(PLong.INSTANCE))],,getCommonType,579-579,[            if ((lType == null || lType.isCoercibleTo(PDouble.INSTANCE))],,getCommonType,584-584,[            if ((lType == null || lType.isCoercibleTo(PDecimal.INSTANCE))],,getCommonType,589-589,[            if ((lType == null || lType.isCoercibleTo(PDate.INSTANCE))],,getCommonType,594-594,[            if ((lType == null || lType.isCoercibleTo(PTimestamp.INSTANCE))],,getCommonType,599-599,[            if ((lType == null || lType.isCoercibleTo(PVarchar.INSTANCE))],,getCommonType,604-604,[            if ((lType == null || lType.isCoercibleTo(PBoolean.INSTANCE))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/phoenix/compile/JoinCompiler.java,,445-609,[    public class JoinSpec {,         private final JoinType type;,         private final List<EqualParseNode> onConditions;,         private final JoinTable joinTable;,         private final boolean singleValueOnly;,         private Set<TableRef> dependencies;,         private OnNodeVisitor onNodeVisitor;,         ,         private JoinSpec(JoinType type, ParseNode onNode, JoinTable joinTable, ,                 boolean singleValueOnly, ColumnResolver resolver) throws SQLException {,             this.type = type;,             this.onConditions = new ArrayList<EqualParseNode>();,             this.joinTable = joinTable;,             this.singleValueOnly = singleValueOnly;,             this.dependencies = new HashSet<TableRef>();,             this.onNodeVisitor = new OnNodeVisitor(resolver, onConditions, dependencies, joinTable, statement.getConnection());,             if (onNode != null) {,                 onNode.accept(this.onNodeVisitor);,             },         },         ,         public void addOnCondition(ParseNode node) throws SQLException {,             node.accept(onNodeVisitor);,         },         ,         public JoinType getType() {,             return type;,         },         ,         public List<EqualParseNode> getOnConditions() {,             return onConditions;,         },         ,         public JoinTable getJoinTable() {,             return joinTable;,         },         ,         public boolean isSingleValueOnly() {,             return singleValueOnly;,         },         ,         public Set<TableRef> getDependencies() {,             return dependencies;,         },         ,         public Pair<List<Expression>, List<Expression>> compileJoinConditions(StatementContext lhsCtx, StatementContext rhsCtx, boolean sortExpressions) throws SQLException {,             if (onConditions.isEmpty()) {,                 return new Pair<List<Expression>, List<Expression>>(,                         Collections.<Expression> singletonList(LiteralExpression.newConstant(1)), ,                         Collections.<Expression> singletonList(LiteralExpression.newConstant(1)));,             },             ,             List<Pair<Expression, Expression>> compiled = Lists.<Pair<Expression, Expression>> newArrayListWithExpectedSize(onConditions.size());,             ExpressionCompiler lhsCompiler = new ExpressionCompiler(lhsCtx);,             ExpressionCompiler rhsCompiler = new ExpressionCompiler(rhsCtx);,             for (EqualParseNode condition : onConditions) {,                 lhsCompiler.reset();,                 Expression left = condition.getLHS().accept(lhsCompiler);,                 rhsCompiler.reset();,                 Expression right = condition.getRHS().accept(rhsCompiler);,                 PDataType toType = getCommonType(left.getDataType(), right.getDataType());,                 if (left.getDataType() != toType) {,                     left = CoerceExpression.create(left, toType);,                 },                 if (right.getDataType() != toType) {,                     right = CoerceExpression.create(right, toType);,                 },                 compiled.add(new Pair<Expression, Expression>(left, right));,             },             if (sortExpressions) {,                 Collections.sort(compiled, new Comparator<Pair<Expression, Expression>>() {,                     @Override,                     public int compare(Pair<Expression, Expression> o1, Pair<Expression, Expression> o2) {,                         Expression e1 = o1.getFirst();,                         Expression e2 = o2.getFirst();,                         boolean isFixed1 = e1.getDataType().isFixedWidth();,                         boolean isFixed2 = e2.getDataType().isFixedWidth();,                         boolean isFixedNullable1 = e1.isNullable() &&isFixed1;,                         boolean isFixedNullable2 = e2.isNullable() && isFixed2;,                         if (isFixedNullable1 == isFixedNullable2) {,                             if (isFixed1 == isFixed2) {,                                 return 0;,                             } else if (isFixed1) {,                                 return -1;,                             } else {,                                 return 1;,                             },                         } else if (isFixedNullable1) {,                             return 1;,                         } else {,                             return -1;,                         },                     },                 });,             },             List<Expression> lConditions = Lists.<Expression> newArrayListWithExpectedSize(compiled.size());,             List<Expression> rConditions = Lists.<Expression> newArrayListWithExpectedSize(compiled.size());,             for (Pair<Expression, Expression> pair : compiled) {,                 lConditions.add(pair.getFirst());,                 rConditions.add(pair.getSecond());,             }, ,             return new Pair<List<Expression>, List<Expression>>(lConditions, rConditions);,         },         ,         private PDataType getCommonType(PDataType lType, PDataType rType) throws SQLException {,             if (lType == rType),                 return lType;,             ,             if (!lType.isComparableTo(rType)),                 throw new SQLExceptionInfo.Builder(SQLExceptionCode.TYPE_MISMATCH),                     .setMessage("On-clause LHS expression and RHS expression must be comparable. LHS type: " + lType + ", RHS type: " + rType),                     .build().buildException();, ,             if ((lType == null || lType.isCoercibleTo(PTinyint.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PTinyint.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PSmallint.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PSmallint.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PInteger.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PInteger.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PLong.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PLong.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PDouble.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PDouble.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PDecimal.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PDecimal.INSTANCE))) {,                 return PDecimal.INSTANCE;,             }, ,             if ((lType == null || lType.isCoercibleTo(PDate.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PDate.INSTANCE))) {,                 return lType == null ? rType : lType;,             }, ,             if ((lType == null || lType.isCoercibleTo(PTimestamp.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PTimestamp.INSTANCE))) {,                 return lType == null ? rType : lType;,             }, ,             if ((lType == null || lType.isCoercibleTo(PVarchar.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PVarchar.INSTANCE))) {,                 return PVarchar.INSTANCE;,             }, ,             if ((lType == null || lType.isCoercibleTo(PBoolean.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PBoolean.INSTANCE))) {,                 return PBoolean.INSTANCE;,             }, ,             return PVarbinary.INSTANCE;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/compile/JoinCompiler.java,getStarJoinVector,376-376,[                return null;],,getStarJoinVector,385-385,[                    return null;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/phoenix/schema/ColumnRef.java,equals,84-90,[        if (this == obj) return true;,         if (obj == null) return false;,         if (getClass() != obj.getClass()) return false;,         ColumnRef other = (ColumnRef)obj;,         if (columnPosition != other.columnPosition) return false;,         if (!tableRef.equals(other.tableRef)) return false;,         return true;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/compile/JoinQueryCompilerTest.java,getJoinTable,139-139,[        PhoenixStatement stmt = connection.createStatement().unwrap(PhoenixStatement.class);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,236-236,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,236-236,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/ProjectionCompiler.java,projectAllIndexColumns,202-202,[                        indexColumn = ref.getColumn();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/ProjectionCompiler.java,projectIndexColumnFamily,263-263,[                        indexColumn = ref.getColumn();],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/ProjectionCompiler.java,addElement,580-580,[            isCaseSensitive &= elementCount == 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,543-547,[                expression.accept(new SingleAggregateFunctionVisitor() {,                     @Override,                     public Iterator<Expression> visitEnter(SingleAggregateFunction function) {,                         aggFuncSet.add(function);,                         return Iterators.emptyIterator();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,601-607,[                 children.get(0).accept(new KeyValueExpressionVisitor() {,                      @Override,                      public Void visit(KeyValueColumnExpression expression) {,                          if (expression.getDataType().isArrayType()) {,                              indexKVs.add(expression);,                          },                          return null;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNegativeArrayIndex,1193-1193,[        } catch (Exception e) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testNonArrayColumnWithIndex,1216-1216,[        } catch (Exception e) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testArrayNotLastInMultipartPK,183-183,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testExecuteWithNonEmptyBatch,1344-1344,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArrayElemRefInUpsert,1284-1284,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testVarBinaryNotLastInMultipartPK,162-162,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testVarbinaryArrayNotSupported,1297-1297,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testGroupByLimitOptimization,1430-1430,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidPrimaryKeyDecl,1390-1390,[                conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testNoGroupByLimitOptimization,1451-1451,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,compileQuery,434-434,[            PhoenixPreparedStatement statement = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testCountAggregatorFirst,679-679,[                Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testFunkyColumnNames,656-656,[            compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArithmetic,713-713,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNextValueFor,1323-1323,[                compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testKeyOrderedGroupByOptimization,458-458,[            Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testNotKeyOrderedGroupByOptimization,641-641,[            Scan scan = compileQuery(query, binds);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/compile/QueryMetaDataTest.java,testBasicResultSetMetaData,310-310,[        assertEquals("organization_id".toUpperCase(),md.getColumnName(1));],,testBasicResultSetMetaData,311-311,[        assertEquals("a_string".toUpperCase(),md.getColumnName(2));],,testBasicResultSetMetaData,312-312,[        assertEquals("b_string".toUpperCase(),md.getColumnName(3));],,testBasicResultSetMetaData,313-313,[        assertEquals("i".toUpperCase(),md.getColumnName(4));],,testBasicResultSetMetaData,314-314,[        assertEquals("a_date".toUpperCase(),md.getColumnName(5));],,testBasicResultSetMetaData,322-322,[        assertEquals("atable".toUpperCase(),md.getTableName(1));],,testBasicResultSetMetaData,326-326,[        assertEquals("i".toUpperCase(),md.getColumnLabel(4));],,testBasicResultSetMetaData,327-327,[        assertEquals("a_date".toUpperCase(),md.getColumnLabel(5));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryMetaDataTest.java,testCoerceToDecimalArithmeticMetaData,280-280,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryMetaDataTest.java,testLongArithmeticMetaData,294-294,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryOptimizerTest.java,testAssertQueryAgainstTenantSpecificViewDoesNotGoThroughIndex,531-531,[        Connection conn = DriverManager.getConnection(getUrl(), new Properties());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryOptimizerTest.java,testAssertQueryAgainstTenantSpecificViewGoesThroughIndex,495-495,[        Connection conn = DriverManager.getConnection(getUrl(), new Properties());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryOptimizerTest.java,testAssertQueryPlanDetails,427-427,[            stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,443-443,[            stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,455-455,[            stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,471-471,[                stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,477-477,[                stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,483-483,[                stmt = conn.prepareStatement(sql);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/compile/SequenceManager.java,,178-223,[    private class SequenceValueExpression extends BaseTerminalExpression {,         private final SequenceKey key;,         private final Op op;,         private final int index;, ,         private SequenceValueExpression(SequenceKey key, Op op, int index) {,             this.key = key;,             this.op = op;,             this.index = index;,         }, ,         public int getIndex() {,             return index;,         },         ,         @Override,         public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {,         		byte[] valueBuffer = new byte[PLong.INSTANCE.getByteSize()];,             PLong.INSTANCE.getCodec().encodeLong(tuple.getSequenceValue(index), valueBuffer, 0);,             ptr.set(valueBuffer);,             return true;,         }, ,         @Override,         public PDataType getDataType() {,             return PLong.INSTANCE;,         },         ,         @Override,         public boolean isNullable() {,             return false;,         },         ,         @Override,         public Determinism getDeterminism() {,             return Determinism.PER_ROW;,         },         ,         @Override,         public boolean isStateless() {,             return true;,         }, ,         @Override,         public String toString() {,             return op.getName() + " VALUE FOR " + SchemaUtil.getTableName(key.getSchemaName(),key.getSequenceName());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/SubqueryRewriter.java,,120-129,[        return leaveCompoundNode(node, l, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 if (children.isEmpty()) {,                     return null;,                 },                 if (children.size() == 1) {,                     return children.get(0);,                 },                 return NODE_FACTORY.and(children);],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/phoenix/compile/SubselectRewriter.java,flatten,148-148,[                            && ((TableWildcardParseNode) node).getTableName().equals(tableAlias))) {],,
STYLE,NS_DANGEROUS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,isOrderPreserving,104-104,[            isOrderPreserving &= (entry.getOrderPreserving() != OrderPreserving.NO) && (pos == prevPos || ((pos - 1 == prevPos) && (prevOrderPreserving == OrderPreserving.YES)));],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,addEntry,194-194,[        isOrderPreserving &= (orderPreserving != OrderPreserving.NO);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,,89-92,[            Collections.sort(entries, new Comparator<Entry>() {,                 @Override,                 public int compare(Entry o1, Entry o2) {,                     return o1.getPkPosition()-o2.getPkPosition();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,getPkPosition,238-238,[            return getColumnPKPosition(columnRef);],,getPKPosition,1048-1048,[                return pkPosition;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/UpsertCompiler.java,compile,222-222,[        List<PColumn> allColumnsToBe = Collections.emptyList();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/UpsertCompiler.java,,584-639,[                    return new MutationPlan() {,     ,                         @Override,                         public PhoenixConnection getConnection() {,                             return connection;,                         },     ,                         @Override,                         public ParameterMetaData getParameterMetaData() {,                             return queryPlan.getContext().getBindManager().getParameterMetaData();,                         },     ,                         @Override,                         public StatementContext getContext() {,                             return queryPlan.getContext();,                         }, ,                         @Override,                         public MutationState execute() throws SQLException {,                             ImmutableBytesWritable ptr = context.getTempPtr();,                             tableRef.getTable().getIndexMaintainers(ptr);,                             ServerCache cache = null;,                             try {,                                 if (ptr.getLength() > 0) {,                                     IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                                     cache = client.addIndexMetadataCache(context.getScanRanges(), ptr);,                                     byte[] uuidValue = cache.getId();,                                     scan.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                                 },                                 ResultIterator iterator = aggPlan.iterator();,                                 try {,                                     Tuple row = iterator.next();,                                     final long mutationCount = (Long)aggProjector.getColumnProjector(0).getValue(row, PLong.INSTANCE, ptr);,                                     return new MutationState(maxSize, connection) {,                                         @Override,                                         public long getUpdateCount() {,                                             return mutationCount;,                                         },                                     };,                                 } finally {,                                     iterator.close();,                                 },                             } finally {,                                 if (cache != null) {,                                     cache.close();,                                 },                             },                         },     ,                         @Override,                         public ExplainPlan getExplainPlan() throws SQLException {,                             List<String> queryPlanSteps =  aggPlan.getExplainPlan().getPlanSteps();,                             List<String> planSteps = Lists.newArrayListWithExpectedSize(queryPlanSteps.size()+1);,                             planSteps.add("UPSERT ROWS");,                             planSteps.addAll(queryPlanSteps);,                             return new ExplainPlan(planSteps);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/UpsertCompiler.java,,735-811,[        return new MutationPlan() {, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public StatementContext getContext() {,                 return context;,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 ImmutableBytesWritable ptr = context.getTempPtr();,                 final SequenceManager sequenceManager = context.getSequenceManager();,                 // Next evaluate all the expressions,                 int nodeIndex = nodeIndexOffset;,                 Tuple tuple = sequenceManager.getSequenceCount() == 0 ? null :,                     sequenceManager.newSequenceTuple(null);,                 for (Expression constantExpression : constantExpressions) {,                     PColumn column = allColumns.get(columnIndexes[nodeIndex]);,                     constantExpression.evaluate(tuple, ptr);,                     Object value = null;,                     if (constantExpression.getDataType() != null) {,                         value = constantExpression.getDataType().toObject(ptr, constantExpression.getSortOrder(), constantExpression.getMaxLength(), constantExpression.getScale());,                         if (!constantExpression.getDataType().isCoercibleTo(column.getDataType(), value)) { ,                             throw TypeMismatchException.newException(,                                 constantExpression.getDataType(), column.getDataType(), "expression: ",                                         + constantExpression.toString() + " in column " + column);,                         },                         if (!column.getDataType().isSizeCompatible(ptr, value, constantExpression.getDataType(),,                                 constantExpression.getMaxLength(), constantExpression.getScale(), ,                                 column.getMaxLength(), column.getScale())) { ,                             throw new SQLExceptionInfo.Builder(,                                 SQLExceptionCode.DATA_EXCEEDS_MAX_CAPACITY).setColumnName(column.getName().getString()),                                 .setMessage("value=" + constantExpression.toString()).build().buildException();,                         },                     },                     column.getDataType().coerceBytes(ptr, value,,                             constantExpression.getDataType(), constantExpression.getMaxLength(), constantExpression.getScale(), constantExpression.getSortOrder(),,                             column.getMaxLength(), column.getScale(),column.getSortOrder());,                     if (overlapViewColumns.contains(column) && Bytes.compareTo(ptr.get(), ptr.getOffset(), ptr.getLength(), column.getViewConstant(), 0, column.getViewConstant().length-1) != 0) {,                         throw new SQLExceptionInfo.Builder(,                                 SQLExceptionCode.CANNOT_UPDATE_VIEW_COLUMN),                                 .setColumnName(column.getName().getString()),                                 .setMessage("value=" + constantExpression.toString()).build().buildException();,                     },                     values[nodeIndex] = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     nodeIndex++;,                 },                 // Add columns based on view,                 for (PColumn column : addViewColumns) {,                     if (IndexUtil.getViewConstantValue(column, ptr)) {,                         values[nodeIndex++] = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     } else {,                         throw new IllegalStateException();,                     },                 },                 Map<ImmutableBytesPtr, Map<PColumn, byte[]>> mutation = Maps.newHashMapWithExpectedSize(1);,                 setValues(values, pkSlotIndexes, columnIndexes, tableRef.getTable(), mutation);,                 return new MutationState(tableRef, mutation, 0, maxSize, connection);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 List<String> planSteps = Lists.newArrayListWithExpectedSize(2);,                 if (context.getSequenceManager().getSequenceCount() > 0) {,                     planSteps.add("CLIENT RESERVE " + context.getSequenceManager().getSequenceCount() + " SEQUENCES");,                 },                 planSteps.add("PUT SINGLE ROW");,                 return new ExplainPlan(planSteps);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/compile/ViewCompilerTest.java,testViewInvalidation,91-91,[            conn.createStatement().executeQuery("SELECT * FROM s2.v3");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/ViewCompilerTest.java,assertViewType,62-62,[            conn.createStatement().execute(view);],,assertViewType,70-70,[                conn.createStatement().execute("DROP VIEW " + table.getName().getString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/WhereOptimizer.java,,568-600,[            return new SingleKeySlot(new KeyPart() {, ,                 @Override,                 public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                     KeyRange range = childPart.getKeyRange(op, rhs);,                     byte[] lower = range.getLowerRange();,                     if (!range.lowerUnbound()) {,                         ptr.set(lower);,                         // Do the reverse translation so we can optimize out the coerce expression,                         // For the actual type of the coerceBytes call, we use the node type instead of the rhs type, because,                         // for IN, the rhs type will be VARBINARY and no coerce will be done in that case (and we need it to,                         // be done).,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         lower = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     byte[] upper = range.getUpperRange();,                     if (!range.upperUnbound()) {,                         ptr.set(upper);,                         // Do the reverse translation so we can optimize out the coerce expression,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         upper = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     return KeyRange.getKeyRange(lower, range.isLowerInclusive(), upper, range.isUpperInclusive());,                 }, ,                 @Override,                 public List<Expression> getExtractNodes() {,                     return extractNodes;,                 }, ,                 @Override,                 public PColumn getColumn() {,                     return childPart.getColumn();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/phoenix/compile/WhereOptimizer.java,,1162-1194,[        private class SingleKeySlot implements KeySlots {,             private final KeySlot slot;,             private final KeyRange minMaxRange;,             ,             private SingleKeySlot(KeyPart part, int pkPosition, List<KeyRange> ranges) {,                 this(part, pkPosition, 1, ranges);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, List<KeyRange> ranges, OrderPreserving orderPreserving) {,                 this(part, pkPosition, 1, ranges, orderPreserving);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges) {,                 this(part,pkPosition,pkSpan,ranges, null, null);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges, OrderPreserving orderPreserving) {,                 this(part,pkPosition,pkSpan,ranges, null, orderPreserving);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges, KeyRange minMaxRange, OrderPreserving orderPreserving) {,                 this.slot = new KeySlot(part, pkPosition, pkSpan, ranges, orderPreserving);,                 this.minMaxRange = minMaxRange;,             },             ,             @Override,             public Iterator<KeySlot> iterator() {,                 return Iterators.<KeySlot>singletonIterator(slot);,             }, ,             @Override,             public KeyRange getMinMaxRange() {,                 return minMaxRange;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtEndOfRVC,1381-1381,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtStartOfRVC,1416-1416,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullInMiddleOfRVC,1398-1398,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testFullyQualifiedRVCWithNonTenantSpecificView,1671-1671,[    	Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testFullyQualifiedRVCWithTenantSpecificViewAndConnection,1643-1643,[    	Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testStartKeyStopKey,145-145,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testTrailingIsNull,1780-1780,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testTrailingIsNullWithOr,1800-1800,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/coprocessor/BaseRegionScanner.java,next,37-37,[        return next(results);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java,,165-172,[                scanner = new DelegateRegionScanner(scanner) {,                     @Override,                     public void close() throws IOException {,                         if (child != null) {,                             child.stop();,                         },                         delegate.close();,                     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java,,229-353,[        return new RegionScanner() {, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 try {,                     return s.next(results);,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             @Override,             public boolean next(List<Cell> result, int limit) throws IOException {,                 try {,                     return s.next(result, limit);,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             @Override,             public void close() throws IOException {,                 s.close();,             }, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() throws IOException {,                 return s.isFilterDone();,             }, ,             @Override,             public boolean reseek(byte[] row) throws IOException {,                 return s.reseek(row);,             }, ,             @Override,             public long getMvccReadPoint() {,                 return s.getMvccReadPoint();,             }, ,             @Override,             public boolean nextRaw(List<Cell> result) throws IOException {,                 try {,                     boolean next = s.nextRaw(result);,                     if (result.size() == 0) {,                         return next;,                     },                     if (arrayFuncRefs != null && arrayFuncRefs.length > 0 && arrayKVRefs.size() > 0) {,                         replaceArrayIndexElement(arrayKVRefs, arrayFuncRefs, result);,                     },                     if (ScanUtil.isLocalIndex(scan) && !ScanUtil.isAnalyzeTable(scan)) {,                         IndexUtil.wrapResultUsingOffset(result, offset, dataColumns, tupleProjector, dataRegion, indexMaintainer, viewConstants, ptr);,                     },                     // There is a scanattribute set to retrieve the specific array element,                     return next;,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             @Override,             public boolean nextRaw(List<Cell> result, int limit) throws IOException {,                 try {,                     boolean next = s.nextRaw(result, limit);,                     if (result.size() == 0) {,                         return next;,                     },                     if (arrayFuncRefs != null && arrayFuncRefs.length > 0 && arrayKVRefs.size() > 0) {,                         replaceArrayIndexElement(arrayKVRefs, arrayFuncRefs, result);,                     },                     if ((offset > 0 || ScanUtil.isLocalIndex(scan))  && !ScanUtil.isAnalyzeTable(scan)) {,                         IndexUtil.wrapResultUsingOffset(result, offset, dataColumns, tupleProjector, dataRegion, indexMaintainer, viewConstants, ptr);,                     },                     // There is a scanattribute set to retrieve the specific array element,                     return next;,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             private void replaceArrayIndexElement(final Set<KeyValueColumnExpression> arrayKVRefs,,                     final Expression[] arrayFuncRefs, List<Cell> result) {,                 // make a copy of the results array here, as we're modifying it below,                 MultiKeyValueTuple tuple = new MultiKeyValueTuple(ImmutableList.copyOf(result));,                 // The size of both the arrays would be same?,                 // Using KeyValueSchema to set and retrieve the value,                 // collect the first kv to get the row,                 Cell rowKv = result.get(0);,                 for (KeyValueColumnExpression kvExp : arrayKVRefs) {,                     if (kvExp.evaluate(tuple, ptr)) {,                         for (int idx = tuple.size() - 1; idx >= 0; idx--) {,                             Cell kv = tuple.getValue(idx);,                             if (Bytes.equals(kvExp.getColumnFamily(), 0, kvExp.getColumnFamily().length,,                                     kv.getFamilyArray(), kv.getFamilyOffset(), kv.getFamilyLength()),                                 && Bytes.equals(kvExp.getColumnName(), 0, kvExp.getColumnName().length,,                                         kv.getQualifierArray(), kv.getQualifierOffset(), kv.getQualifierLength())) {,                                 // remove the kv that has the full array values.,                                 result.remove(idx);,                                 break;,                             },                         },                     },                 },                 byte[] value = kvSchema.toBytes(tuple, arrayFuncRefs,,                         kvSchemaBitSet, ptr);,                 // Add a dummy kv with the exact value of the array index,                 result.add(new KeyValue(rowKv.getRowArray(), rowKv.getRowOffset(), rowKv.getRowLength(),,                         QueryConstants.ARRAY_VALUE_COLUMN_FAMILY, 0, QueryConstants.ARRAY_VALUE_COLUMN_FAMILY.length,,                         QueryConstants.ARRAY_VALUE_COLUMN_QUALIFIER, 0,,                         QueryConstants.ARRAY_VALUE_COLUMN_QUALIFIER.length, HConstants.LATEST_TIMESTAMP,,                         Type.codeToType(rowKv.getTypeByte()), value, 0, value.length));,             }, ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/GroupedAggregateRegionObserver.java,,463-558,[        return new BaseRegionScanner() {,             private long rowCount = 0;,             private ImmutableBytesWritable currentKey = null;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public void close() throws IOException {,                 s.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 boolean hasMore;,                 boolean atLimit;,                 boolean aggBoundary = false;,                 MultiKeyValueTuple result = new MultiKeyValueTuple();,                 ImmutableBytesWritable key = null;,                 Aggregator[] rowAggregators = aggregators.getAggregators();,                 // If we're calculating no aggregate functions, we can exit at the,                 // start of a new row. Otherwise, we have to wait until an agg,                 int countOffset = rowAggregators.length == 0 ? 1 : 0;,                 HRegion region = c.getEnvironment().getRegion();,                 region.startRegionOperation();,                 try {,                     do {,                         List<Cell> kvs = new ArrayList<Cell>();,                         // Results are potentially returned even when the return,                         // value of s.next is false,                         // since this is an indication of whether or not there,                         // are more values after the,                         // ones returned,                         hasMore = s.nextRaw(kvs);,                         if (!kvs.isEmpty()) {,                             result.setKeyValues(kvs);,                             key = TupleUtil.getConcatenatedValue(result, expressions);,                             aggBoundary = currentKey != null && currentKey.compareTo(key) != 0;,                             if (!aggBoundary) {,                                 aggregators.aggregate(rowAggregators, result);,                                 if (logger.isDebugEnabled()) {,                                     logger.debug(LogUtil.addCustomAnnotations("Row passed filters: " + kvs,                                             + ", aggregated values: ",                                             + Arrays.asList(rowAggregators), ScanUtil.getCustomAnnotations(scan)));,                                 },                                 currentKey = key;,                             },                         },                         atLimit = rowCount + countOffset >= limit;,                         // Do rowCount + 1 b/c we don't have to wait for a complete,                         // row in the case of a DISTINCT with a LIMIT,                     } while (hasMore && !aggBoundary && !atLimit);,                 } finally {,                     region.closeRegionOperation();,                 }, ,                 if (currentKey != null) {,                     byte[] value = aggregators.toBytes(rowAggregators);,                     KeyValue keyValue =,                             KeyValueUtil.newKeyValue(currentKey.get(), currentKey.getOffset(),,                                 currentKey.getLength(), SINGLE_COLUMN_FAMILY, SINGLE_COLUMN,,                                 AGG_TIMESTAMP, value, 0, value.length);,                     results.add(keyValue);,                     if (logger.isDebugEnabled()) {,                         logger.debug(LogUtil.addCustomAnnotations("Adding new aggregate row: ",                                 + keyValue,                                 + ",for current key ",                                 + Bytes.toStringBinary(currentKey.get(), currentKey.getOffset(),,                                     currentKey.getLength()) + ", aggregated values: ",                                 + Arrays.asList(rowAggregators), ScanUtil.getCustomAnnotations(scan)));,                     },                     // If we're at an aggregation boundary, reset the,                     // aggregators and,                     // aggregate with the current result (which is not a part of,                     // the returned result).,                     if (aggBoundary) {,                         aggregators.reset(rowAggregators);,                         aggregators.aggregate(rowAggregators, result);,                         currentKey = key;,                         rowCount++;,                         atLimit |= rowCount >= limit;,                     },                 },                 // Continue if there are more,                 if (!atLimit && (hasMore || aggBoundary)) {,                     return true;,                 },                 currentKey = null;,                 return false;,             },             ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/coprocessor/HashJoinRegionScanner.java,processResults,118-118,[            resultQueue.offer(tuple);],,processResults,146-146,[                    resultQueue.offer(tuple);],,processResults,153-153,[                resultQueue.offer(tuple);],,processResults,169-169,[                                    resultQueue.offer(lhs);],,processResults,180-180,[                            resultQueue.offer(joined);],,processResults,189-189,[                            resultQueue.offer(joined);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,817-817,[    protected static final byte[] PHYSICAL_TABLE_BYTES = new byte[] {PTable.LinkType.PHYSICAL_TABLE.getSerializedValue()};],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,loadTable,678-678,[        if (table == null],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,createTable,732-732,[                        builder.setTable(PTableImpl.toProto(parentTable));],,createTable,729-729,[                    if (parentTable == null || isTableDeleted(parentTable)) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,1269-1269,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,1447-1447,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,buildTable,678-678,[        if (table == null],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1240-1240,[                                    table.getPKColumn(new String(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,1216-1266,[            MetaDataMutationResult result = mutateColumn(tableMetaData, new ColumnMutator() {,                 @Override,                 public MetaDataMutationResult updateMutation(PTable table, byte[][] rowKeyMetaData,,                         List<Mutation> tableMetaData, HRegion region,,                         List<ImmutableBytesPtr> invalidateList, List<RowLock> locks) {,                     byte[] tenantId = rowKeyMetaData[TENANT_ID_INDEX];,                     byte[] schemaName = rowKeyMetaData[SCHEMA_NAME_INDEX];,                     byte[] tableName = rowKeyMetaData[TABLE_NAME_INDEX];,                     for (Mutation m : tableMetaData) {,                         byte[] key = m.getRow();,                         boolean addingPKColumn = false;,                         int pkCount = getVarChars(key, rowKeyMetaData);,                         if (pkCount > COLUMN_NAME_INDEX,                                 && Bytes.compareTo(schemaName, rowKeyMetaData[SCHEMA_NAME_INDEX]) == 0,                                 && Bytes.compareTo(tableName, rowKeyMetaData[TABLE_NAME_INDEX]) == 0) {,                             try {,                                 if (pkCount > FAMILY_NAME_INDEX,                                         && rowKeyMetaData[PhoenixDatabaseMetaData.FAMILY_NAME_INDEX].length > 0) {,                                     PColumnFamily family =,                                             table.getColumnFamily(rowKeyMetaData[PhoenixDatabaseMetaData.FAMILY_NAME_INDEX]);,                                     family.getColumn(rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX]);,                                 } else if (pkCount > COLUMN_NAME_INDEX,                                         && rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX].length > 0) {,                                     addingPKColumn = true;,                                     table.getPKColumn(new String(,                                             rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX]));,                                 } else {,                                     continue;,                                 },                                 return new MetaDataMutationResult(,                                         MutationCode.COLUMN_ALREADY_EXISTS, EnvironmentEdgeManager,                                                 .currentTimeMillis(), table);,                             } catch (ColumnFamilyNotFoundException e) {,                                 continue;,                             } catch (ColumnNotFoundException e) {,                                 if (addingPKColumn) {,                                     // Add all indexes to invalidate list, as they will all be,                                     // adding the same PK column. No need to lock them, as we,                                     // have the parent table lock at this point.,                                     for (PTable index : table.getIndexes()) {,                                         invalidateList.add(new ImmutableBytesPtr(SchemaUtil,                                                 .getTableKey(tenantId, index.getSchemaName(),                                                         .getBytes(), index.getTableName(),                                                         .getBytes())));,                                     },                                 },                                 continue;,                             },                         },                     },                     return null;],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1237-1237,[                                } else if (pkCount > COLUMN_NAME_INDEX],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1381-1381,[                                        columnToDelete = table.getPKColumn(new String(],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1378-1378,[                                    } else if (pkCount > COLUMN_NAME_INDEX],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getColumnName,148-148,[            return columnName;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getFamilyName,152-152,[            return familyName;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/MetaDataRegionObserver.java,run,185-185,[                    Long disabledTimeStampVal = 0L;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/coprocessor/ScanRegionObserver.java,doPostScannerOpen,198-198,[            indexMaintainer = indexMaintainers.get(0);],,doPostScannerOpen,197-197,[            List<IndexMaintainer> indexMaintainers = localIndexBytes == null ? null : IndexMaintainer.deserialize(localIndexBytes);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/coprocessor/ScanRegionObserver.java,deserializeArrayPostionalExpressionInfoFromScan,136-136,[            return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/ScanRegionObserver.java,,247-289,[        return new BaseRegionScanner() {,             private Tuple tuple = firstTuple;, ,             @Override,             public boolean isFilterDone() {,                 return tuple == null;,             }, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 try {,                     if (isFilterDone()) {,                         return false;,                     }, ,                     for (int i = 0; i < tuple.size(); i++) {,                         results.add(tuple.getValue(i));,                     }, ,                     tuple = iterator.next();,                     return !isFilterDone();,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(region.getRegionNameAsString(), t);,                     return false;,                 },             }, ,             @Override,             public void close() throws IOException {,                 try {,                     s.close();,                 } finally {,                     chunk.close();                },             }, ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/SequenceRegionObserver.java,preAppend,404-404,[                long serverTimestamp = MetaDataUtil.getClientTimeStamp(m);],,preAppend,371-371,[                Mutation m = null;],,preAppend,372-372,[                switch (op) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/SuffixFilter.java,toByteArray,43-43,[        return suffix;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/coprocessor/SuffixFilter.java,<init>,38-38,[        this.suffix = suffix;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,,416-444,[        RegionScanner scanner = new BaseRegionScanner() {,             private boolean done = !hadAny;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return innerScanner.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() {,                 return done;,             }, ,             @Override,             public void close() throws IOException {,                 innerScanner.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 if (done) return false;,                 done = true;,                 results.add(aggKeyValue);,                 return false;,             },             ,             @Override,             public long getMaxResultSize() {,             	return scan.getMaxResultSize();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3467-3467,[    public static com.google.protobuf.Parser<AddColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3698-3698,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,3720-3720,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3683-3683,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4932-4932,[    public static com.google.protobuf.Parser<ClearCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5119-5119,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5106-5106,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5270-5270,[    public static com.google.protobuf.Parser<ClearCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5457-5457,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5444-5444,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,6449-6449,[    public static com.google.protobuf.Parser<ClearTableFromCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6793-6793,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6772-6772,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,7133-7133,[    public static com.google.protobuf.Parser<ClearTableFromCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,7320-7320,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,7307-7307,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2203-2203,[    public static com.google.protobuf.Parser<CreateTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,2438-2438,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,2460-2460,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,2423-2423,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3964-3964,[    public static com.google.protobuf.Parser<DropColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4195-4195,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,4217-4217,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4180-4180,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2739-2739,[    public static com.google.protobuf.Parser<DropTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3072-3072,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3053-3053,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,1406-1406,[    public static com.google.protobuf.Parser<GetTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,1789-1789,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,1766-1766,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5608-5608,[    public static com.google.protobuf.Parser<GetVersionRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5795-5795,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5782-5782,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5962-5962,[    public static com.google.protobuf.Parser<GetVersionResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6189-6189,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6174-6174,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,361-361,[    public static com.google.protobuf.Parser<MetaDataResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,785-785,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4461-4461,[    public static com.google.protobuf.Parser<UpdateIndexStateRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4692-4692,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,4714-4714,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4677-4677,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,368-368,[    public static com.google.protobuf.Parser<PColumn> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,988-988,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,953-953,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,2956-2956,[    public static com.google.protobuf.Parser<PTable> PARSER =],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PTableProtos.java,getTimeStamp,3092-3092,[      return timeStamp_;],,getTimestamp,178-178,[            return timestamp;],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,4105-4105,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,1741-1741,[    public static com.google.protobuf.Parser<PTableStats> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,2117-2117,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,2094-2094,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,,109-109,[    public static com.google.protobuf.Parser<ServerCacheFactory> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,clone,363-363,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,maybeForceBuilderInitialization,348-348,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,814-814,[    public static com.google.protobuf.Parser<AddServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1184-1184,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,1717-1717,[    public static com.google.protobuf.Parser<AddServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1944-1944,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,1929-1929,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,134-134,[    public static com.google.protobuf.Parser<ImmutableBytesWritable> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,439-439,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,420-420,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2174-2174,[    public static com.google.protobuf.Parser<RemoveServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2436-2436,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2419-2419,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2697-2697,[    public static com.google.protobuf.Parser<RemoveServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2924-2924,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2909-2909,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,,119-119,[    public static com.google.protobuf.Parser<StatCollectRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,clone,377-377,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,maybeForceBuilderInitialization,360-360,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,,634-634,[    public static com.google.protobuf.Parser<StatCollectResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,clone,861-861,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,maybeForceBuilderInitialization,846-846,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AggregateQueryIT.java,testSplitWithCachedMeta,122-122,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AggregateQueryIT.java,testSumOverNullIntegerColumn,65-65,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AggregateQueryIT.java,testSumOverNullIntegerColumn,63-63,[        conn.createStatement().execute("UPSERT INTO atable(organization_id,entity_id,a_integer) VALUES('" + getOrganizationId() + "','" + ROW3 + "',NULL)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,843-843,[                rs = conn.createStatement().executeQuery(query);],,testDropColumnsWithImutability,854-854,[                rs = conn.createStatement().executeQuery(query);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,667-667,[            closeConnection(conn);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,644-644,[        Connection conn = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,647-647,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,655-655,[                closeStatement(stmt);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,645-645,[        PreparedStatement stmt = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,652-652,[                stmt = conn.prepareStatement(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,alterTableFromDifferentClient,871-871,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,alterTableFromDifferentClient,873-873,[        PreparedStatement stmtInsert1 = conn1.prepareStatement("upsert into test_simpletable (id, field1) values ( ?, ?)");],,alterTableFromDifferentClient,885-885,[        PreparedStatement pstmt2 = conn1.prepareStatement("upsert into test_simpletable (id, field1, field2) values ( ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddColumnsUsingNewConnection,905-905,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCharColToPK,130-130,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,515-515,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAlterTableWithVarBinaryKey,68-68,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDisableWAL,690-690,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,720-720,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,749-749,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnFromSaltedTable,481-481,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,775-775,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropVarCols,624-624,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetSaltedTableAsImmutable,447-447,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,559-559,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddColsIntoSystemTable,100-100,[          conn.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalArithmeticWithIntAndLong,300-300,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalAveraging,240-240,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertSelect,132-132,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertValue,48-48,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,885-885,[        Double d = new Double(2.0);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,866-866,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,871-871,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,881-881,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCast,898-898,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,903-903,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,913-913,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCastForVarLengthArr,931-931,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,935-935,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,946-946,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithDescOrder,802-802,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,808-808,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,822-822,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithFloatArray,838-838,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,843-843,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,850-850,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testFixedWidthCharArray,966-966,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,971-971,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,978-978,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,989-989,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArray,1585-1585,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1592-1592,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1606-1606,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testScanByArrayValue,144-144,[		Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testScanWithArrayInWhereClause,187-187,[		Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithColumnRef,743-743,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithSelectAsSubQuery1,425-425,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,384-384,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1512-1512,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1549-1549,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1433-1433,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1439-1439,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1453-1453,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithSameArrays,1395-1395,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1402-1402,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1416-1416,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonWithNulls,1471-1471,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1477-1477,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1491-1491,[        conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testArrayRefToLiteral,1654-1654,[            if (conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArrayNotInEnd,1630-1630,[            if (conn != null) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInGroupByClause,1075-1075,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInWhereClause,1044-1044,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testSelectSpecificIndexOfAnArrayAsArrayFunction,309-309,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,401-401,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1529-1529,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1568-1568,[            conn.createArrayOf("VARCHAR", strArr);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRef,644-644,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArray,675-675,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArrayWithNullValue,706-706,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,384-384,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1512-1512,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,analyzeTable,172-172,[		PreparedStatement statement = conn.prepareStatement(analyse);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/end2end/ArrayIT.java,testVariableLengthArrayWithNullValue,1104-1104,[			String[] strArr = new String[1];],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AutoCommitIT.java,testMutationJoin,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseQueryIT.java,analyzeTable,138-138,[        conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseQueryIT.java,initTable,100-100,[            conn.createStatement().execute(indexDDL);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testDateDateSubtract,615-615,[        statement.setDate(3, new Date(date.getTime() + TestUtil.MILLIS_IN_DAY - 1));],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,84-84,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableView,58-58,[            try { conn.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,84-84,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,90-90,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,106-106,[            conn.createStatement().execute("UPSERT INTO v(k2,v1,v2) VALUES(" + i + ",'" + valuePrefix + "v1-" + (i%5) + "','" + valuePrefix + "v2-" + (i%2) + "')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,97-97,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,103-103,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndVerifyIndex,119-119,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN SELECT k1, k2, v2 FROM v WHERE v2='" + valuePrefix + "v2-1'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,verifyViewData,142-142,[        ResultSet rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,63-63,[            conn.createStatement().execute("UPSERT INTO t VALUES(" + (i % 4) + "," + (i+100) + "," + (i > 5 ? 2 : 1) + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,165-165,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,59-59,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,130-130,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BinaryRowKeyIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/CSVCommonsLoaderIT.java,testAllDatatypes,508-508,[                            .toString().toUpperCase());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,186-186,[        Connection conn = DriverManager.getConnection(url, props);],,testUnfoundSingleColumnCaseStatement,191-191,[        Connection upsertConn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,201-201,[        PreparedStatement stmt = upsertConn.prepareStatement(upsertStmt);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testDateDateSubtract,605-605,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testValidArithmetic,168-168,[                PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CoalesceFunctionIT.java,testCoalesce,48-48,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/CoalesceFunctionIT.java,wrongDataTypeOfSecondParameter,232-232,[            conn.createStatement().executeQuery(],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ColumnProjectionOptimizationIT.java,testSelectFromViewOnExistingTable,237-237,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CompareDecimalToLongIT.java,initTableValues,40-40,[        Connection conn = DriverManager.getConnection(url);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/end2end/ConnectionQueryServicesTestImpl.java,,36-36,[    protected int NUM_SLAVES_BASE = 1; // number of slaves for the cluster],,
MALICIOUS_CODE,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,75-75,[        badContextClassloader = new URLClassLoader(new URL[] {],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,setUpBeforeClass,69-69,[        stmt.execute("CREATE TABLE test (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,67-67,[        Connection conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,100-100,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,101-101,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,94-112,[        Runnable target = new Runnable() {, , ,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     ResultSet rs = stmt.executeQuery("select * from test where name = 'name2'");,                     while (rs.next()) {,                         // Just make sure we run over all records,                     },                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,126-126,[                    Connection conn = DriverManager.getConnection(getUrl());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,122-136,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     ResultSet tablesRs = conn.getMetaData().getTables(null, null, null, null);,                     while (tablesRs.next()) {,                         // Just make sure we run over all records,                     },                     tablesRs.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,run,152-152,[                    stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,run,153-153,[                    stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");],,run,154-154,[                    conn.commit();],,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,150-150,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,146-164,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");,                     stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");,                     conn.commit();,                     ResultSet rs = stmt.executeQuery("SELECT * FROM T2");,                     assertTrue(rs.next());,                     assertFalse(rs.next());,                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CreateTableIT.java,testStartKeyStopKey,50-50,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CustomEntityDataIT.java,initTableValues,50-50,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidCharacters,85-85,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('zzxxuuyyzzxxuuyy', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidEncoding,130-130,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'someNonexistFormat')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidLength,100-100,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,nullEncoding,115-115,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', NULL)");],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,471-471,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,339-339,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,411-411,[            } catch (Exception ex) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,446-446,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,433-433,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,306-306,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,287-287,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,376-376,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,361-361,[            Statement stm = con.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DeleteIT.java,assertTableCount,131-131,[        ResultSet rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DeleteIT.java,assertIndexUsed,142-142,[            PreparedStatement stmt = conn.prepareStatement("EXPLAIN " + query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/DerivedTableIT.java,<init>,69-69,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/DerivedTableIT.java,<init>,70-70,[        this.plans = plans;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DerivedTableIT.java,initTable,82-82,[                conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithGroupBy,309-309,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testDerivedTableWithGroupBy,331-331,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testAmbiguousStaticSelect,196-196,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testFakeCFDynamicUpsert,213-213,[            statement.executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicFamilyIT.java,doBeforeTestSetup,99-99,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseInsensitiveDynCol,239-239,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseSensitiveDynCol,264-264,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,doBeforeTestSetup,56-56,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testFullUpsert,138-138,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testMultiUpsert,105-105,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testUpsert,75-75,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testInvalidEncodingType,151-151,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testNullEncodingType,121-121,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, NULL)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testUnsupportedEncodingType,135-135,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, 'HEX')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/EncodeFunctionIT.java,testEncodeHelper,57-57,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/EvaluationOfORIT.java,testPKOrNotPKInOREvaluation,40-40,[	    Connection conn = DriverManager.getConnection(getUrl(), props);	    ],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,121-121,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,224-224,[            statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,167-167,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,132-132,[        PreparedStatement statement = conn.prepareStatement(query);],,testCharPadding,134-134,[        statement = conn.prepareStatement(],,testCharPadding,163-163,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,171-171,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,175-175,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,179-179,[            statement = conn.prepareStatement(query);],,testCharPadding,185-185,[            statement = conn.prepareStatement(query);],,testCharPadding,194-194,[            statement = conn.prepareStatement(upsert);],,testCharPadding,205-205,[            statement = conn.prepareStatement(upsert);],,testCharPadding,212-212,[            assertCharacterPadding(conn.prepareStatement(query), A_VALUE, B_VALUE);            ],,testCharPadding,215-215,[            statement = conn.prepareStatement(upsert);],,testCharPadding,219-219,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,223-223,[            statement = conn.prepareStatement(query);],,testCharPadding,225-225,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,228-228,[            statement = conn.prepareStatement(upsert);],,testCharPadding,234-234,[            assertCharacterPadding(conn.prepareStatement(query), rowKey2, rowKey2);],,testCharPadding,237-237,[            statement = conn.prepareStatement(upsert);],,testCharPadding,243-243,[            statement = conn.prepareStatement(query);],,testCharPadding,254-254,[                statement = conn.prepareStatement(upsert);],,testCharPadding,268-268,[                statement = conn.prepareStatement(upsert);],,testCharPadding,281-281,[            statement = conn.prepareStatement(upsert);],,testCharPadding,287-287,[            assertCharacterPadding(conn.prepareStatement(query), "morning1", "xyz");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,184-184,[        PreparedStatement statement = conn.prepareStatement(query);],,getResultSet,185-185,[        ResultSet rs = statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateFunctions,114-114,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,testDateFunctions,132-132,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateGroupBy,158-158,[            rs = getResultSet(conn, query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testToDateFunctionBind,61-61,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testTypeMismatchToDateFunctionBind,82-82,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,184-184,[        PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/FunkyNamesIT.java,initTableValues,46-46,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testCount,156-156,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testScanUri,126-126,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/GroupByCaseIT.java,executeQuery,169-169,[        PreparedStatement st = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testGroupByCondition,87-87,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByCondition,117-117,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeDeleteUngroupedAggregation,539-539,[        Connection conn = DriverManager.getConnection(url, props);],,testPointInTimeDeleteUngroupedAggregation,556-556,[        Connection futureConn = DriverManager.getConnection(getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 3), props);],,testPointInTimeDeleteUngroupedAggregation,566-566,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,328-328,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,337-337,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,352-352,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedAggregation,425-425,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,449-449,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,461-461,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedLimitedAggregation,484-484,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,501-501,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,513-513,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,332-332,[        stmt.execute(updateStmt); // should commit too],,testPointInTimeGroupedAggregation,354-354,[        ResultSet rs = statement.executeQuery(query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,76-76,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,77-77,[        this.plans = plans;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1326-1326,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1327-1327,[                assertTrue (rs.next());],,testLeftJoin,1368-1368,[            conn.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1325-1325,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,testLeftJoin,1326-1326,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1327-1327,[                assertTrue (rs.next());],,testLeftJoin,1368-1368,[            conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,initTable,95-95,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOnDynamicColumns,2929-2929,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1325-1325,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2647-2647,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithIncomparableJoinKeyTypes,2475-2475,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/HashJoinIT.java,testNonEquiJoin,3703-3703,[                statement.executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOverSaltedTables,2790-2790,[            conn.createStatement().execute("CREATE TABLE " + tempTableNoSalting ],,testJoinOverSaltedTables,2793-2793,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithSalting ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithKeyRangeOptimization,3522-3522,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithCompositePK ],,testJoinWithKeyRangeOptimization,3568-3568,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,3589-3589,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,3619-3619,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,3649-3649,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2650-2650,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testUpsertWithJoin,2657-2657,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,2663-2663,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,2733-2733,[            conn.createStatement().execute("CREATE TABLE " + sourceTable ],,testUpsertWithJoin,2738-2738,[            conn.createStatement().execute("CREATE TABLE " + joinTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,initTable,98-98,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinPlanWithIndex,2521-2521,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinPlanWithIndex,2540-2540,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithLimit,3477-3477,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithLimit,3509-3509,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSkipMergeOptimization,2568-2568,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSubqueryAndAggregation,3238-3238,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithSubqueryAndAggregation,3258-3258,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testJoinWithSubqueryAndAggregation,3287-3287,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,testJoinWithSubqueryAndAggregation,3307-3307,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query4);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithWildcard,2227-2227,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoinWithAggregation,1695-1695,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testLeftJoinWithAggregation,1715-1715,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testLeftJoinWithAggregation,1744-1744,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testNestedSubqueries,3430-3430,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testRightJoinWithAggregation,1786-1786,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testRightJoinWithAggregation,1815-1815,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSelfJoin,2610-2610,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testSelfJoin,2636-2636,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1658-1658,[                    rs = conn.createStatement().executeQuery("EXPLAIN " + query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSubJoin,3109-3109,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOnDynamicColumns,2934-2934,[            stmt = conn.prepareStatement(ddlA);],,testJoinOnDynamicColumns,2938-2938,[            stmt = conn.prepareStatement(ddlB);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOverSaltedTables,2797-2797,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,2806-2806,[            upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,2819-2819,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,2843-2843,[            statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,2882-2882,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithKeyRangeOptimization,3530-3530,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinWithKeyRangeOptimization,3545-3545,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,3575-3575,[            statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,3596-3596,[            statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,3626-3626,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2671-2671,[            PreparedStatement statement = conn.prepareStatement(query);],,testUpsertWithJoin,2745-2745,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testUpsertWithJoin,2769-2769,[            upsertStmt = conn.prepareStatement(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1325-1325,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testMultiLeftJoin,1938-1938,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1618-1618,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,<init>,60-60,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,<init>,61-61,[        this.plans = plans;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,initTable,79-79,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,initTable,82-82,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,testJoinWithLocalIndex,137-137,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithLocalIndex,147-147,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithLocalIndex,157-157,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testLeadingPKWithTrailingRVC,52-52,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testLeadingPKWithTrailingRVC2,74-74,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,182-182,[            Connection baseConn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,205-205,[                            ResultSet rs = conn.createStatement().executeQuery(sql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,initializeAndGetTable,147-147,[            baseConn.createStatement().execute(tableDDL);],,initializeAndGetTable,153-153,[                conn.createStatement().execute(viewDDL);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,195-195,[                            conn.createStatement().execute("UPSERT INTO " + tableName + " " + upsertBody);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/InListIT.java,,230-237,[    List<String> DEFAULT_UPSERT_BODIES = Lists.transform(DEFAULT_UPSERTS, new Function<List<Object>, String>() {,         @Override,         public String apply(List<Object> input) {,             List<Object> pks = input.subList(0, 5);,             Object nonPk = input.get(5);,             ,             return "(pk1, pk2, pk3, pk4, pk5, nonPk) VALUES ( ",                 + Joiner.on(", ").join(pks) + ", '" + nonPk + "')";],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,37-67,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),"IntIntKeyTest",null, ts-2);,         Properties props = new Properties();,         props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 1)); // Execute at timestamp 1,         Connection conn = DriverManager.getConnection(getUrl(), props);,         String upsert = "UPSERT INTO IntIntKeyTest VALUES(4,2)";,         PreparedStatement upsertStmt = conn.prepareStatement(upsert);,         int rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         upsert = "UPSERT INTO IntIntKeyTest VALUES(6)";,         upsertStmt = conn.prepareStatement(upsert);,         rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         conn.commit();,         conn.close();,         ,         props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 1,         conn = DriverManager.getConnection(getUrl(), props);,         String select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NULL";,         ResultSet rs;,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(0,rs.getInt(1));,         assertTrue(rs.wasNull());,         assertFalse(rs.next());,         select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NOT NULL";,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(2,rs.getInt(1));,         assertFalse(rs.next());,     }],,testIsNullInPK,1738-1766,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),PTSDB_NAME,null, ts-2);, ,         // Insert all rows at ts,         String url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + ts;,         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);,         Connection conn = DriverManager.getConnection(url, props);,         conn.setAutoCommit(true);,         PreparedStatement stmt = conn.prepareStatement("upsert into PTSDB VALUES ('', '', ?, 0.5)");,         stmt.setDate(1, D1);,         stmt.execute();,         conn.close();, ,         String query = "SELECT HOST,INST,DATE FROM PTSDB WHERE HOST IS NULL AND INST IS NULL AND DATE=?";,         url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 5); // Run query at timestamp 5,         conn = DriverManager.getConnection(url, props);,         try {,             PreparedStatement statement = conn.prepareStatement(query);,             statement.setDate(1, D1);,             ResultSet rs = statement.executeQuery();,             assertTrue(rs.next());,             assertNull(rs.getString(1));,             assertNull(rs.getString(2));,             assertEquals(D1, rs.getDate(3));,             assertFalse(rs.next());,         } finally {,             conn.close();,         },     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInCompositeKey,74-74,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testIsNullInCompositeKey,79-79,[        conn = DriverManager.getConnection(getUrl(), props);],,testIsNullInCompositeKey,86-86,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,initTableValues,192-192,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,initTableValues,211-211,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testKeyOnly,67-67,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,88-88,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,93-93,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,105-105,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,110-110,[        Connection conn9 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testOr,147-147,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testOr,152-152,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testQueryWithLimitAndStats,174-174,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/KeyOnlyIT.java,testQueryWithLimitAndStats,181-181,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/LpadFunctionIT.java,testLpadHelper,65-65,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,48-48,[      byte[] first = MessageDigest.getInstance("MD5").digest(testString.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,68-68,[      byte[] pk1 = MessageDigest.getInstance("MD5").digest(testString1.getBytes());],,testUpsert,69-69,[      byte[] pk2 = MessageDigest.getInstance("MD5").digest(testString2.getBytes());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,43-43,[      conn.createStatement().execute(dml);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,63-63,[      conn.createStatement().execute(dml);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MinMaxAggregateFunctionIT.java,testMinMaxAggregateFunctions,31-31,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MultiCfQueryExecIT.java,testDefaultCFToDisambiguate,213-213,[        Connection conn = DriverManager.getConnection(url);],,testDefaultCFToDisambiguate,225-225,[        conn = DriverManager.getConnection(url);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/ParallelIteratorsIT.java,initTableValues,182-182,[        stmt.setString(1, new String(KMIN));],,initTableValues,185-185,[        stmt.setString(1, new String(KMAX));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/ParallelIteratorsIT.java,upsert,162-162,[        stmt.setString(1, new String(val[0]));],,upsert,165-165,[        stmt.setString(1, new String(val[1]));],,upsert,168-168,[        stmt.setString(1, new String(val[2]));],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,50-50,[    protected static final byte[] K1  = new byte[] {'a'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,56-56,[    protected static final byte[] K11 = new byte[] {'k'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,57-57,[    protected static final byte[] K12 = new byte[] {'l'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,51-51,[    protected static final byte[] K3  = new byte[] {'c'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,52-52,[    protected static final byte[] K4  = new byte[] {'d'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,53-53,[    protected static final byte[] K5  = new byte[] {'e'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,54-54,[    protected static final byte[] K6  = new byte[] {'f'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,55-55,[    protected static final byte[] K9  = new byte[] {'i'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,58-58,[    protected static final byte[] KMAX  = new byte[] {'~'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,48-48,[    protected static final byte[] KMIN  = new byte[] {'!'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,49-49,[    protected static final byte[] KMIN2  = new byte[] {'.'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,61-61,[    protected static final byte[] KP = new byte[] { 'p' };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,60-60,[    protected static final byte[] KR = new byte[] { 'r' };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,59-59,[    protected static final byte[] KMAX2  = new byte[] {'z'};],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeSequence,156-156,[            rs = conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeScan,64-64,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,81-81,[        Connection conn1 = DriverManager.getConnection(url, props);],,testPointInTimeScan,88-88,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,100-100,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeSequence,132-132,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,139-139,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,146-146,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,154-154,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,165-165,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,172-172,[        conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeSequence,125-125,[            conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testFilterOnTrailingKeyColumn,1580-1580,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testResetColumnInSameTxn,842-842,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testSaltedOrderBy,1982-1982,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ProductMetricsIT.java,helpTestOrderByNullColumns,1550-1550,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToExistingFamily,877-877,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToExistingFamily,886-886,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToNewFamily,908-908,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToNewFamily,913-913,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddPKColumn,935-935,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddPKColumn,946-946,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateDropTable,548-548,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testCreateDropTable,566-566,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,644-644,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateViewOnExistingTable,692-692,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,785-785,[            Connection conn75 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,801-801,[            Connection conn8 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,815-815,[            Connection conn91 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,821-821,[            Connection conn92 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,837-837,[            Connection conn92a = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,844-844,[            Connection conn93 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,855-855,[            Connection conn94 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropAllKVCols,1027-1027,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1034-1034,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1041-1041,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1046-1046,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1053-1053,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1058-1058,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropKVColumn,968-968,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,974-974,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,984-984,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,989-989,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,994-994,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropPKColumn,1008-1008,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testNewerTableDisallowed,1072-1072,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testTableWithScemaMetadataScan,1089-1089,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,646-646,[        ResultSet rs = conn2.createStatement().executeQuery(query);],,testCreateOnExistingTable,651-651,[        rs = conn2.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testIntFilter,81-81,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,91-91,[        upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,97-97,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testNoStringValue,173-173,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testNoStringValue,185-185,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testTimestamp,242-242,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testTimestamp,253-253,[        Connection conn1 = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryIT.java,testValidStringConcatExpression,457-457,[        		PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,testQueryMore,93-93,[        Connection conn = DriverManager.getConnection(getUrl());],,testQueryMore,128-128,[        Connection conn2 = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,192-192,[        Connection conn = queryAgainstTenantView ? getTenantSpecificConnection(tenantId) : DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,219-219,[                conn.createStatement().execute("DROP SEQUENCE " + sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,testQueryMore,94-94,[        conn.createStatement().execute(cursorTableDDL);],,testQueryMore,95-95,[        conn.createStatement().execute(baseDataTableDDL);],,testQueryMore,129-129,[        ResultSet rs = conn2.createStatement().executeQuery("SELECT count(*) from " + cursorTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,219-219,[                conn.createStatement().execute("DROP SEQUENCE " + sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,createTenantSpecificViewIfNecessary,233-233,[        tenantConn.createStatement().execute("CREATE VIEW IF NOT EXISTS " + tenantViewName + " AS SELECT * FROM " + dataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,195-195,[        conn.createStatement().execute("CREATE SEQUENCE " + sequenceName + " CACHE " + Long.MAX_VALUE);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,209-209,[            PreparedStatement stmt = conn.prepareStatement(upsertSelectDML);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,createHistoryTableRows,165-165,[            PreparedStatement stmt = conn.prepareStatement(upsertDML);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,doQueryMore,280-280,[        PreparedStatement stmt = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,getRecordsOutofCursorTable,250-250,[        PreparedStatement stmt = conn.prepareStatement(selectCursorSql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryWithLimitIT.java,testQueryWithLimitAndStats,75-75,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,initTableValues,49-49,[        Connection upsertConn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testConnectionReadIsolationLevel,126-126,[        Connection conn = DriverManager.getConnection(url, PropertiesUtil.deepCopy(TEST_PROPERTIES));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testStatementReadIsolationLevel,73-73,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testStatementReadIsolationLevel,76-76,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RegexpSubstrFunctionIT.java,testGroupByScanWithRegexpSubstr,63-63,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ReverseFunctionIT.java,initTable,36-36,[        conn.createStatement().execute(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReverseScanIT.java,doSetup,58-58,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,92-92,[            closeStmtAndConn(stmt, conn);],,initTable,66-66,[        PreparedStatement stmt = null;],,initTable,68-68,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,92-92,[            closeStmtAndConn(stmt, conn);],,initTable,65-65,[        Connection conn = null;],,initTable,68-68,[            conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithMultiCompKeysForIn,876-876,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testRVCWithMultiCompKeysForIn,881-881,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testForceSkipScan,1238-1238,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithCompositePK],,testForceSkipScan,1276-1276,[            rs = conn.createStatement().executeQuery(explainQuery);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithInListClauseUsingSubsetOfPKColsInOrder,796-796,[                statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testForceSkipScan,1246-1246,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testForceSkipScan,1258-1258,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testNestedRVCBasic,738-738,[                    statement = conn.prepareStatement(queries[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ScanQueryIT.java,testPointInTimeLimitedScan,452-452,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,471-471,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,483-483,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1166-1166,[            ResultSet rs = stmt.executeQuery();],,assertSequenceValuesForSingleRow,1167-1167,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1164-1164,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,assertSequenceValuesForSingleRow,1165-1165,[        for (long seqVal : seqVals) {],,assertSequenceValuesForSingleRow,1166-1166,[            ResultSet rs = stmt.executeQuery();],,assertSequenceValuesForSingleRow,1167-1167,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1181-1181,[        ResultSet rs = stmt.executeQuery();],,assertSequenceValuesMultipleSeq,1182-1182,[        for (long seqVal : seqVals) {],,assertSequenceValuesMultipleSeq,1186-1186,[        assertFalse(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1180-1180,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,assertSequenceValuesMultipleSeq,1181-1181,[        ResultSet rs = stmt.executeQuery();],,assertSequenceValuesMultipleSeq,1182-1182,[        for (long seqVal : seqVals) {],,assertSequenceValuesMultipleSeq,1186-1186,[        assertFalse(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1164-1164,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1180-1180,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConn,467-467,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConnWithStmtClose,505-505,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testExplainPlanValidatesSequences,668-668,[            conn.createStatement().executeQuery("EXPLAIN SELECT NEXT VALUE FOR zzz FROM foo");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testSequenceNotFound,105-105,[			conn.prepareStatement(query).executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ServerExceptionIT.java,testServerExceptionBackToClient,40-40,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanAfterManualSplitIT.java,initTable,79-79,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testInQuery,130-130,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSelectAfterUpsertInQuery,114-114,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSkipScanFilterWhenTableHasMultipleColumnFamilies,308-308,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharParallelListInQuery,151-151,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXInQuery,169-169,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXIntInQuery,196-196,[        Connection conn = DriverManager.getConnection(getUrl());],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SortMergeJoinIT.java,<init>,75-75,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SortMergeJoinIT.java,<init>,76-76,[        this.plans = plans;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,279-279,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,280-280,[                assertTrue (rs.next());],,testLeftJoin,321-321,[            conn.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,278-278,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,testLeftJoin,279-279,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,280-280,[                assertTrue (rs.next());],,testLeftJoin,321-321,[            conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,initTable,94-94,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinOnDynamicColumns,1957-1957,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,278-278,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,testUpsertWithJoin,1675-1675,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinWithIncomparableJoinKeyTypes,1508-1508,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SortMergeJoinIT.java,testNonEquiJoin,2561-2561,[                statement.executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinOverSaltedTables,1818-1818,[            conn.createStatement().execute("CREATE TABLE " + tempTableNoSalting ],,testJoinOverSaltedTables,1821-1821,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithSalting ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testUpsertWithJoin,1678-1678,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testUpsertWithJoin,1685-1685,[            conn.createStatement().execute("UPSERT /*+ USE_SORT_MERGE_JOIN*/ INTO " + tempTable ],,testUpsertWithJoin,1691-1691,[            conn.createStatement().execute("UPSERT /*+ USE_SORT_MERGE_JOIN*/ INTO " + tempTable ],,testUpsertWithJoin,1761-1761,[            conn.createStatement().execute("CREATE TABLE " + sourceTable ],,testUpsertWithJoin,1766-1766,[            conn.createStatement().execute("CREATE TABLE " + joinTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,initTable,97-97,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinWithSkipMergeOptimization,1602-1602,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinOnDynamicColumns,1962-1962,[            stmt = conn.prepareStatement(ddlA);],,testJoinOnDynamicColumns,1966-1966,[            stmt = conn.prepareStatement(ddlB);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinOverSaltedTables,1825-1825,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,1834-1834,[            upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,1847-1847,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,1871-1871,[            statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,1910-1910,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testUpsertWithJoin,1699-1699,[            PreparedStatement statement = conn.prepareStatement(query);],,testUpsertWithJoin,1773-1773,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testUpsertWithJoin,1797-1797,[            upsertStmt = conn.prepareStatement(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,278-278,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testMultiLeftJoin,974-974,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testStarJoin,571-571,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendColumns,373-373,[                appendedColumns += ",";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendPlaceholders,384-384,[                placeholderList += ",";],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderFIT.java,runQuery,391-391,[        PreparedStatement stmt = connection.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderFIT.java,runQueryTest,335-335,[            PreparedStatement stmt = conn.prepareStatement(dml);],,runQueryTest,352-352,[                runQuery(conn, query, expectedRows);],,runQueryTest,360-360,[                runQuery(conn, query, reverse(expectedRows));],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendOrderBy,555-555,[                query += orderBy.columnNames.get(i) + " " + orderBy.directions.get(i).toString() + " ";],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/phoenix/end2end/SpillableGroupByIT.java,testScanUri,129-129,[                int a = Integer.valueOf(rs.getString(6)).intValue();],,testScanUri,130-130,[                int b = Integer.valueOf(rs.getString(7)).intValue();],,testScanUri,131-131,[                assertEquals(Integer.valueOf(uri).intValue(), Math.min(a, b));],,testScanUri,132-132,[                assertEquals(NUM_ROWS_INSERTED / 2 + Integer.valueOf(uri), Math.max(a, b));],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,82-82,[		for (File file : files) {],,testDeleteAllSpooledTmpFiles,81-81,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,91-91,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,90-90,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,103-103,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,102-102,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,114-114,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,113-113,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,122-122,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,121-121,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,128-128,[		for (File file : files) {],,testDeleteAllSpooledTmpFiles,126-126,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,133-133,[		assertTrue(files.length == 0);],,testDeleteAllSpooledTmpFiles,132-132,[		files = dir.listFiles(fnameFilter);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,setup,49-49,[		Statement stmt = conn.createStatement();],,setup,50-50,[		stmt.execute("CREATE TABLE test (ID varchar NOT NULL PRIMARY KEY) SPLIT ON ('EA','EZ')");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,setup,49-49,[		Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,108-108,[		Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,tearDown,61-61,[	        spoolDir.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,83-83,[			file.delete();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,67-67,[		File dir = new File(spoolDir.getPath());],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,accept,73-73,[				return dir.getName().toLowerCase().endsWith(".bin") && ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,,70-74,[		class FilenameFilter implements FileFilter {, 			@Override, 			public boolean accept(File dir) {, 				return dir.getName().toLowerCase().endsWith(".bin") && , 						dir.getName().startsWith("ResultSpooler");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatementHintsIT.java,initTableValues,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,123-123,[        conn = upsertValues(props, "x");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsForTheTable,98-98,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,149-149,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/StatsCollectorIT.java,testCompactUpdatesStats,264-264,[        conn.createStatement().execute("CREATE TABLE " + tableName + "(k CHAR(1) PRIMARY KEY, v INTEGER) " + HColumnDescriptor.KEEP_DELETED_CELLS + "=" + Boolean.FALSE);],,testCompactUpdatesStats,284-284,[            int rowCount = conn.createStatement().executeUpdate("UPDATE STATISTICS " + tableName);],,testCompactUpdatesStats,290-290,[        int nDeletedRows = conn.createStatement().executeUpdate("DELETE FROM " + tableName + " WHERE V < 5");],,testCompactUpdatesStats,304-304,[            int rowCount = conn.createStatement().executeUpdate("UPDATE STATISTICS " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/StatsCollectorIT.java,testCompactUpdatesStats,265-265,[        stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/StatsCollectorIT.java,upsertStmt,229-229,[        stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?,?)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/SubqueryIT.java,testNonCorrelatedSubquery,462-462,[                rs = statement.executeQuery();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryIT.java,<init>,71-71,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryIT.java,<init>,72-72,[        this.plans = plans;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryIT.java,initTable,91-91,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithDelete,788-788,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithUpsert,758-758,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithDelete,791-791,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testSubqueryWithDelete,794-794,[            conn.createStatement().execute("UPSERT INTO " + tempTable + "(item_id, name)"],,testSubqueryWithDelete,804-804,[            conn.createStatement().execute("DELETE FROM " + tempTable + " WHERE item_id IN ("],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithUpsert,761-761,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testSubqueryWithUpsert,764-764,[            conn.createStatement().execute("UPSERT INTO " + tempTable + "(item_id, name)"],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,initTable,94-94,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testComparisonSubquery,655-655,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testExistsSubquery,594-594,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testExistsSubquery,614-614,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testInSubquery,524-524,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testInSubquery,546-546,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testInSubquery,566-566,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithDelete,808-808,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithUpsert,769-769,[            PreparedStatement statement = conn.prepareStatement(query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,<init>,75-75,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,<init>,76-76,[        this.plans = plans;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,initTable,94-94,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testSubqueryWithUpsert,875-875,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testSubqueryWithUpsert,878-878,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testSubqueryWithUpsert,881-881,[            conn.createStatement().execute("UPSERT /*+ USE_SORT_MERGE_JOIN*/ INTO " + tempTable + "(item_id, name)"],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,initTable,97-97,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testComparisonSubquery,772-772,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testExistsSubquery,731-731,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testInSubquery,648-648,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testInSubquery,686-686,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testSubqueryWithUpsert,886-886,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testCreateTenantTableTwice,76-76,[        catch (TableAlreadyExistsException expected) {}],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,250-250,[                rs = conn.createStatement().executeQuery("select tenant_col from TENANT_TABLE");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,207-207,[        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAllowDropParentTableWithCascadeAndSingleTenantTable,365-365,[			connTenant = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testDeletionOfParentTableFailsOnTenantSpecificConnection,115-115,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAllowDropParentTableWithCascadeAndSingleTenantTable,369-369,[	    	if (conn != null) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,70-70,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testNonPaddedTenantId,157-157,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,130-130,[            conn.createStatement().executeQuery("select * from mt_base where (pk1,pk2) IN (('a','b'),('b','b'))");],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,189-193,[        String pattern = "yy.MM.dd G HH:mm:ss z";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         String query = "select pk from " + TO_CHAR_TABLE_NAME + " WHERE to_char(col_timestamp, '" + pattern + "') = '" + expectedString + "'";,         runOneRowFilterQuery(query, 2);,     }],,testTimeStampFilter,250-254,[    	String pattern = "yyMMddHHmmssZ";,         String query = "SELECT a_id FROM " + TO_NUMBER_TABLE_NAME + " WHERE to_number(a_timestamp, '" + pattern + "') = " + row1Timestamp.getTime() ;,         int expectedId = 1;,         runOneRowQueryTest(query, expectedId);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,149-153,[        String pattern = "yyMMddHHmmssZ";,         String query = "select to_char(col_timestamp, '" + pattern + "') from " + TO_CHAR_TABLE_NAME + " WHERE pk = 2";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         runOneRowProjectionQuery(query, expectedString);,     }],,testTimeStampProjection,272-275,[        String query = "select to_number(a_timestamp) from " + TO_NUMBER_TABLE_NAME + " where a_id = 3";,         BigDecimal expectedDecimalValue = new BigDecimal(row3Timestamp.getTime());,         runOneRowQueryTest(query, expectedDecimalValue);,     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToCharFunctionIT.java,initTable,86-86,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateFilter,176-176,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateProjection,136-136,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalFilter,208-208,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalProjection,168-168,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerFilter,200-200,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerProjection,160-160,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeFilter,184-184,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeProjection,144-144,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,192-192,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,152-152,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowFilterQuery,216-216,[    	runOneRowQueryTest(oneRowQuery, pkValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowProjectionQuery,212-212,[    	runOneRowQueryTest(oneRowQuery, null, projectedValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowQueryTest,224-224,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ToDateFunctionIT.java,callToDateFunction,56-56,[        ResultSet rs = stmt.executeQuery(String.format("SELECT %s FROM SYSTEM.CATALOG", invocation));],,callToDateFunction,57-57,[        assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ToDateFunctionIT.java,callToDateFunction,55-55,[        Statement stmt = conn.createStatement();],,callToDateFunction,56-56,[        ResultSet rs = stmt.executeQuery(String.format("SELECT %s FROM SYSTEM.CATALOG", invocation));],,callToDateFunction,57-57,[        assertTrue(rs.next());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ToDateFunctionIT.java,callToDateFunction,56-56,[        ResultSet rs = stmt.executeQuery(String.format("SELECT %s FROM SYSTEM.CATALOG", invocation));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/ToDateFunctionIT.java,tearDown,51-51,[        conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToNumberFunctionIT.java,initTable,96-96,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testDateFilter,221-221,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeFilter,230-230,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeStampFilter,253-253,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,282-282,[    	runOneRowQueryTest(oneRowQuery, true, expectedIntValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,278-278,[    	runOneRowQueryTest(oneRowQuery, false, null, expectedDecimalValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,290-290,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TopNIT.java,testTopNDelete,124-124,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntKV,296-296,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntPK,130-130,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerKV,213-213,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerPK,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectAutoCommitIT.java,testUpsertSelectDoesntSeeUpsertedData,146-146,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,91-91,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,99-99,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,121-121,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,163-163,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectEmptyPKColumn,209-209,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,222-222,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,255-255,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,268-268,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,301-301,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,312-312,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectForAgg,385-385,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectForAgg,424-424,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectLongToInt,460-460,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,469-469,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,478-478,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectOnDescToAsc,560-560,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,569-569,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,579-579,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRowKeyMutationOnSplitedTable,600-600,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,611-611,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,623-623,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRunOnServer,497-497,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,506-506,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,516-516,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,525-525,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,534-534,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,543-543,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithLimit,641-641,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,653-653,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,675-675,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,681-681,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequence,709-709,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequence,728-728,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequenceAndOrderByWithSalting,754-754,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequenceAndOrderByWithSalting,767-767,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequenceAndOrderByWithSalting,782-782,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,92-92,[            conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + indexName + " ON " + TestUtil.ATABLE_NAME + "(a_string)" );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,104-104,[            upsertStmt = conn.prepareStatement("EXPLAIN " + upsert);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,442-442,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,436-436,[        PreparedStatement pstmt = null;],,testBatchedUpsert,438-438,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,442-442,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,435-435,[        Connection conn = null;],,testBatchedUpsert,438-438,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,304-304,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,298-298,[        PreparedStatement stmt = null;],,testTimestampAddSubtractArithmetic,300-300,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,304-304,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,297-297,[        Connection conn = null;],,testTimestampAddSubtractArithmetic,300-300,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,263-263,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,257-257,[        PreparedStatement stmt = null;],,testTimestampSerializedAndDeserializedCorrectly,259-259,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,263-263,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,256-256,[        Connection conn = null;],,testTimestampSerializedAndDeserializedCorrectly,259-259,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,539-539,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,533-533,[        PreparedStatement stmt = null;],,testUpsertDateIntoDescUnsignedDate,535-535,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,539-539,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,532-532,[        Connection conn = null;],,testUpsertDateIntoDescUnsignedDate,535-535,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,402-402,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,396-396,[        PreparedStatement stmt = null;],,testUpsertIntoFloat,398-398,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,402-402,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,395-395,[        Connection conn = null;],,testUpsertIntoFloat,398-398,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,235-235,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,229-229,[        Statement stmt = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,231-231,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,235-235,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,228-228,[        Connection conn = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,231-231,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testGroupByWithLimitOverRowKey,55-55,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByWithLimitOverRowKey,68-68,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDate,145-145,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDate,150-150,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDescExpression,205-205,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDescExpression,210-210,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithExpression,117-117,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertVarCharWithMaxLength,168-168,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,173-173,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,180-180,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,187-187,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,193-193,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateValues,90-90,[        PreparedStatement upsertStmt = conn.prepareStatement("upsert into ptsdb(inst,host,date) values('aaa','bbb',to_date('" + dateString + "'))");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,720-720,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,721-721,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,719-719,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,720-720,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,721-721,[            assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initGroupByRowKeyColumns,72-72,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues,540-540,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues2,573-573,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initTableValues,99-99,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,713-713,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,719-719,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,730-730,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,738-738,[            PreparedStatement s = conn.prepareStatement(sql2);],,testBatchUpsert,746-746,[            PreparedStatement s = conn.prepareStatement(sql3);],,testBatchUpsert,754-754,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,762-762,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,770-770,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,784-784,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testEscapedQuoteScan,502-502,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testILikeOnColumn,1612-1612,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testIsNullInPK,1744-1744,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeFunctionOnRowKeyInWhere,2029-2029,[        Connection conn = DriverManager.getConnection(url);],,testLikeFunctionOnRowKeyInWhere,2034-2034,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeOnColumn,1495-1495,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingKVColumn,927-927,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingPKColumn,887-887,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testNullValueEqualityScan,445-445,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunctionOnRowKeyInWhere,1998-1998,[        Connection conn = DriverManager.getConnection(url);],,testRTrimFunctionOnRowKeyInWhere,2003-2003,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction2,1377-1377,[        Connection conn = DriverManager.getConnection(url, props);],,testRegexpSubstrFunction2,1384-1384,[        conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunctionOnRowKeyInWhere,1971-1971,[        Connection conn = DriverManager.getConnection(url);],,testSubstrFunctionOnRowKeyInWhere,1976-1976,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongKVColumn,1064-1064,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongPKColumn,1027-1027,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortKVColumn,955-955,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortPKColumn,991-991,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testVarLengthPKColScan,472-472,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToCharWithFormatOnDate,849-849,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToDateWithFormatOnDate,870-870,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testInListConstant,1476-1476,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLTrimFunction,1956-1956,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLengthFunction,1798-1798,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeConstant,1433-1433,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLowerFunction,1870-1870,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunction,1913-1913,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexReplaceFunction,1298-1298,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction,1360-1360,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunction,1239-1239,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTrimFunction,2089-2089,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testUpperFunction,1833-1833,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewUsesTableIndex,380-380,[            conn.createStatement().execute("UPSERT INTO t VALUES(" + (i % 4) + "," + (i+100) + "," + (i > 5 ? 2 : 1) + ",'" + s1Values[i%2] + "','bas')");],,testViewUsesTableIndex,396-396,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,validateCannotDropTableWithChildViewsWithoutCascade,349-349,[	        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,validateViewDoesNotExist,360-360,[            conn.createStatement().execute(ddl1);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCoveredColumnUpdates,218-218,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testInFilterOnIndexedTable,1012-1012,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithCaseSensitiveCols,926-926,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithDecimalCol,1035-1035,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithNullableDateCol,161-161,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithNullableFixedWithCols,115-115,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testUpsertingNullForIndexedColumns,1081-1081,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testMultipleUpdatesAcrossRegions,894-894,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesAcrossRegions,904-904,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,createIndexOnTableWithSpecifiedDefaultCF,91-91,[        conn.createStatement().execute(],,createIndexOnTableWithSpecifiedDefaultCF,94-94,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCompoundIndexKey,623-623,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCompoundIndexKey,630-630,[        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,645-645,[        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,664-664,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCoveredColumnUpdates,238-238,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumnUpdates,245-245,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,267-267,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,289-289,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,306-306,[                rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumnUpdates,309-309,[                rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCoveredColumns,511-511,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,518-518,[        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,532-532,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,539-539,[        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,553-553,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,560-560,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testInFilterOnIndexedTable,1022-1022,[	        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithCaseSensitiveCols,954-954,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithCaseSensitiveCols,972-972,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithDecimalCol,1052-1052,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithDecimalCol,1059-1059,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithNullableDateCol,178-178,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,185-185,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithNullableDateCol,195-195,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,202-202,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testIndexWithNullableFixedWithCols,134-134,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableFixedWithCols,141-141,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testMultipleUpdatesToSingleRow,751-751,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesToSingleRow,761-761,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testSelectAllAndAliasWithIndex,357-357,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,364-364,[        rs = conn.createStatement().executeQuery(query);],,testSelectAllAndAliasWithIndex,382-382,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,393-393,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testSelectCF,435-435,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,439-439,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,445-445,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCompoundIndexKey,657-657,[        stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCoveredColumnUpdates,260-260,[            stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME],,testCoveredColumnUpdates,282-282,[            stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,testCoveredColumns,525-525,[        stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + "(k,v2) VALUES(?,?)");],,testCoveredColumns,546-546,[        stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + "(k,v2) VALUES(?,?)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,testWriteFailureDropIndex,146-146,[            conn.createStatement().executeQuery(query);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,doSetup,94-94,[        driver = initAndRegisterDriver(url, new ReadOnlyProps(props.entrySet().iterator()));],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,doSetup,88-88,[        url = JDBC_PROTOCOL + JDBC_PROTOCOL_SEPARATOR + LOCALHOST + JDBC_PROTOCOL_SEPARATOR + clientPort],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,doSetup,85-85,[        util = new HBaseTestingUtility(conf);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,call,166-166,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?,?)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/DropViewIT.java,testDropViewKeepsHTable,82-82,[        conn.createStatement().execute("create view " + HBASE_NATIVE +],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testIndexWithNullableFixedWithCols,164-164,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testIndexWithNullableFixedWithCols,135-135,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/index/IndexHandlerIT.java,cleanup,137-140,[        HBaseAdmin admin = UTIL.getHBaseAdmin();,         admin.disableTable(TestTable.getTableName());,         admin.deleteTable(TestTable.getTableName());,     }],,cleanUp,111-112,[	  TEST_UTIL.cleanupTestDir();,   }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/end2end/index/IndexHandlerIT.java,setPriority,95-95,[                count = new Integer(0);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAlterIndexWithLowerCaseName,347-347,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreateDrop,119-119,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithNullableFixedWidthColInPK,290-290,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithRepeatedColumns,381-381,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithSameColumnNamesInTwoFamily,401-401,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testBinaryNonnullableIndex,461-461,[            conn.createStatement().executeQuery(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertActiveIndex,101-101,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertNoActiveIndex,110-110,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAlterIndexWithLowerCaseName,359-359,[            conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreateDrop,263-263,[            conn.createStatement().execute("CREATE TABLE " + diffTableNameInSameSchema + "(k INTEGER PRIMARY KEY)");],,testIndexCreateDrop,265-265,[                conn.createStatement().execute("DROP INDEX IDX1 ON " + diffTableNameInSameSchema);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAlterIndexWithLowerCaseName,355-355,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,testAlterIndexWithLowerCaseName,366-366,[            stmt = conn.prepareStatement(ddl);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/index/IndexTestUtil.java,readDataTableIndexRow,68-68,[        PreparedStatement stmt = conn.prepareStatement(SELECT_DATA_INDEX_ROW);],,readDataTableIndexRow,69-69,[        stmt.setString(1, schemaName);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testBuildIndexWhenUserTableAlreadyHasData,246-246,[            for(Result r:scanner){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testDropLocalIndexShouldDeleteDataFromLocalIndexTable,551-551,[                for(Result r:scanner){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testPutsToLocalIndexTable,213-213,[            for(Result r:scanner){],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/LocalIndexIT.java,createBaseTable,97-97,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/LocalIndexIT.java,testIndexPlanSelectionIfBothGlobalAndLocalIndexesHasSameColumnsAndOrder,513-513,[        Connection conn1 = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanAfterRegionSplit,702-702,[                conn1.createStatement().execute(],,testLocalIndexScanAfterRegionSplit,744-744,[                rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanAfterRegionSplit,751-751,[                rs = conn1.createStatement().executeQuery("EXPLAIN "+query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexStateWhenSplittingInProgress,779-779,[                conn1.createStatement().execute(],,testLocalIndexStateWhenSplittingInProgress,841-841,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,createBaseTable,106-106,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testIndexPlanSelectionIfBothGlobalAndLocalIndexesHasSameColumnsAndOrder,522-522,[        ResultSet rs1 = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScan,276-276,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,298-298,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,316-316,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,339-339,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScan,346-346,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanJoinColumnsFromDataTable,401-401,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScanJoinColumnsFromDataTable,422-422,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,429-429,[            rs = conn1.createStatement().executeQuery(query);],,testLocalIndexScanJoinColumnsFromDataTable,456-456,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,464-464,[            rs = conn1.createStatement().executeQuery(query);],,testLocalIndexScanJoinColumnsFromDataTable,488-488,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,495-495,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanJoinColumnsFromDataTable,483-483,[            PhoenixPreparedStatement statement = conn1.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,testWriteFailureDisablesIndex,230-230,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testWriteFailureDisablesIndex,232-232,[        rs = conn.createStatement().executeQuery(query);],,testWriteFailureDisablesIndex,257-257,[        rs = conn.createStatement().executeQuery(query);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,doSetup,115-115,[        driver = initAndRegisterDriver(url, ReadOnlyProps.EMPTY_PROPS);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,doSetup,113-113,[        url = JDBC_PROTOCOL + JDBC_PROTOCOL_SEPARATOR + LOCALHOST + JDBC_PROTOCOL_SEPARATOR + clientPort],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,doSetup,110-110,[        util = new HBaseTestingUtility(conf);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,,324-328,[        this.util.waitFor(30000, 200, new Waiter.Predicate<Exception>() {,             @Override,             public boolean evaluate() throws Exception {,               ServerName sn = cluster.getServerHoldingRegion(indexRegion.getRegionName());,               return (sn != null && sn.equals(dstRS));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,run,380-380,[                PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?,?)");],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/index/MutableIndexReplicationIT.java,,91-91,[    protected static Configuration conf1 = HBaseConfiguration.create();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/index/MutableIndexReplicationIT.java,,104-104,[    protected static final byte[] row = Bytes.toBytes("row");],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/index/MutableIndexReplicationIT.java,,103-103,[    protected static final byte[] tableName = Bytes.toBytes("test");],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,176-176,[        expectedPlan = tableSaltBuckets == null ? ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,105-105,[        conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR)  " +  (tableSaltBuckets == null ? "" : " SALT_BUCKETS=" + tableSaltBuckets));],,testMutableTableIndexMaintanence,107-107,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,110-110,[        conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + TestUtil.DEFAULT_INDEX_TABLE_NAME + " ON " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " (v DESC)" + (indexSaltBuckets == null ? "" : " SALT_BUCKETS=" + indexSaltBuckets));],,testMutableTableIndexMaintanence,112-112,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,125-125,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,135-135,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,142-142,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,153-153,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,161-161,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,170-170,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,175-175,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,190-190,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,198-198,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,115-115,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/ViewIndexIT.java,testDeleteViewIndexSequences,78-78,[        HBaseAdmin admin = driver.getConnectionQueryServices(getUrl(), TestUtil.TEST_PROPERTIES).getAdmin();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,58-58,[        Connection conn = DriverManager.getConnection(getUrl());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,59-59,[        String ddl = "CREATE TABLE " + tableName + " (t_id VARCHAR NOT NULL,\n" +],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,66-66,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ViewIndexIT.java,testDeleteViewIndexSequences,75-75,[        conn1.createStatement().execute("CREATE VIEW " + VIEW_NAME + " AS SELECT * FROM " + TestUtil.DEFAULT_DATA_TABLE_NAME);],,testDeleteViewIndexSequences,76-76,[        conn1.createStatement().execute("CREATE INDEX " + TestUtil.DEFAULT_INDEX_TABLE_NAME + " ON " + VIEW_NAME + " (v1)");],,testDeleteViewIndexSequences,77-77,[        conn2.createStatement().executeQuery("SELECT * FROM " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME).next();],,testDeleteViewIndexSequences,79-79,[        conn1.createStatement().execute("DROP VIEW " + VIEW_NAME);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoNormalTableFromSaltedTable,81-81,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoSaltedTableFromNormalTable,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSaltedTableIntoSaltedTable,123-123,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTable,160-160,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTableWithEmptyPKColumn,193-193,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,analyzeTable,117-117,[        conn.createStatement().execute(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,testSelectValueWithPointKeyQuery,69-69,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,UWF_UNWRITTEN_FIELD,org/apache/phoenix/execute/AggregatePlan.java,,94-94,[        return scans;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/execute/BaseQueryPlan.java,iterator,192-192,[        ScanUtil.setCustomAnnotations(scan, customAnnotations == null ? null : customAnnotations.getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/BaseQueryPlan.java,,229-237,[                iterator : new DelegateResultIterator(iterator) {,             @Override,             public void close() throws SQLException {,                 try {,                     super.close();,                 } finally {,                     SQLCloseables.closeAll(dependencies);,                 },             }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/execute/MutationState.java,,75-493,[public class MutationState implements SQLCloseable {,     private static final Logger logger = LoggerFactory.getLogger(MutationState.class);, ,     private PhoenixConnection connection;,     private final long maxSize;,     private final ImmutableBytesPtr tempPtr = new ImmutableBytesPtr();,     private final Map<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> mutations = Maps.newHashMapWithExpectedSize(3); // TODO: Sizing?,     private long sizeOffset;,     private int numRows = 0;, ,     public MutationState(int maxSize, PhoenixConnection connection) {,         this(maxSize,connection,0);,     },     ,     public MutationState(int maxSize, PhoenixConnection connection, long sizeOffset) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,     },     ,     public MutationState(TableRef table, Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutations, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.mutations.put(table, mutations);,         this.sizeOffset = sizeOffset;,         this.numRows = mutations.size();,         throwIfTooBig();,     },     ,     private MutationState(List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> entries, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : entries) {,             numRows += entry.getValue().size();,             this.mutations.put(entry.getKey(), entry.getValue());,         },         throwIfTooBig();,     },     ,     private void throwIfTooBig() {,         if (numRows > maxSize) {,             // TODO: throw SQLException ?,             throw new IllegalArgumentException("MutationState size of " + numRows + " is bigger than max allowed size of " + maxSize);,         },     },     ,     public long getUpdateCount() {,         return sizeOffset + numRows;,     },     ,     /**,      * Combine a newer mutation with this one, where in the event of overlaps,,      * the newer one will take precedence.,      * @param newMutation the newer mutation,      */,     public void join(MutationState newMutation) {,         if (this == newMutation) { // Doesn't make sense,             return;,         },         this.sizeOffset += newMutation.sizeOffset;,         // Merge newMutation with this one, keeping state from newMutation for any overlaps,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : newMutation.mutations.entrySet()) {,             // Replace existing entries for the table with new entries,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             boolean isIndex = table.getType() == PTableType.INDEX;,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> existingRows = this.mutations.put(tableRef, entry.getValue());,             if (existingRows != null) { // Rows for that table already exist,                 // Loop through new rows and replace existing with new,                 for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                     // Replace existing row with new row,                     Map<PColumn,byte[]> existingValues = existingRows.put(rowEntry.getKey(), rowEntry.getValue());,                     if (existingValues != null) {,                         if (existingValues != PRow.DELETE_MARKER) {,                             Map<PColumn,byte[]> newRow = rowEntry.getValue();,                             // if new row is PRow.DELETE_MARKER, it means delete, and we don't need to merge it with existing row. ,                             if (newRow != PRow.DELETE_MARKER) {,                                 // Replace existing column values with new column values,                                 for (Map.Entry<PColumn,byte[]> valueEntry : newRow.entrySet()) {,                                     existingValues.put(valueEntry.getKey(), valueEntry.getValue());,                                 },                                 // Now that the existing row has been merged with the new row, replace it back,                                 // again (since it was replaced with the new one above).,                                 existingRows.put(rowEntry.getKey(), existingValues);,                             },                         },                     } else {,                         if (!isIndex) { // Don't count index rows in row count,                             numRows++;,                         },                     },                 },                 // Put the existing one back now that it's merged,                 this.mutations.put(entry.getKey(), existingRows);,             } else {,                 if (!isIndex) {,                     numRows += entry.getValue().size();,                 },             },         },         throwIfTooBig();,     },     ,     private Iterator<Pair<byte[],List<Mutation>>> addRowMutations(final TableRef tableRef, final Map<ImmutableBytesPtr, Map<PColumn, byte[]>> values, long timestamp, boolean includeMutableIndexes) {,         final Iterator<PTable> indexes = // Only maintain tables with immutable rows through this client-side mechanism,                 (tableRef.getTable().isImmutableRows() || includeMutableIndexes) ? ,                         IndexMaintainer.nonDisabledIndexIterator(tableRef.getTable().getIndexes().iterator()) : ,                         Iterators.<PTable>emptyIterator();,         final List<Mutation> mutations = Lists.newArrayListWithExpectedSize(values.size());,         final List<Mutation> mutationsPertainingToIndex = indexes.hasNext() ? Lists.<Mutation>newArrayListWithExpectedSize(values.size()) : null;,         Iterator<Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>>> iterator = values.entrySet().iterator();,         while (iterator.hasNext()) {,             Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry = iterator.next();,             ImmutableBytesPtr key = rowEntry.getKey();,             PRow row = tableRef.getTable().newRow(connection.getKeyValueBuilder(), timestamp, key);,             List<Mutation> rowMutations, rowMutationsPertainingToIndex;,             if (rowEntry.getValue() == PRow.DELETE_MARKER) { // means delete,                 row.delete();,                 rowMutations = row.toRowMutations();,                 // Row deletes for index tables are processed by running a re-written query,                 // against the index table (as this allows for flexibility in being able to,                 // delete rows).,                 rowMutationsPertainingToIndex = Collections.emptyList();,             } else {,                 for (Map.Entry<PColumn,byte[]> valueEntry : rowEntry.getValue().entrySet()) {,                     row.setValue(valueEntry.getKey(), valueEntry.getValue());,                 },                 rowMutations = row.toRowMutations();,                 rowMutationsPertainingToIndex = rowMutations;,             },             mutations.addAll(rowMutations);,             if (mutationsPertainingToIndex != null) mutationsPertainingToIndex.addAll(rowMutationsPertainingToIndex);,         },         return new Iterator<Pair<byte[],List<Mutation>>>() {,             boolean isFirst = true;, ,             @Override,             public boolean hasNext() {,                 return isFirst || indexes.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (isFirst) {,                     isFirst = false;,                     return new Pair<byte[],List<Mutation>>(tableRef.getTable().getPhysicalName().getBytes(),mutations);,                 },                 PTable index = indexes.next();,                 List<Mutation> indexMutations;,                 try {,                     indexMutations =,                             IndexUtil.generateIndexData(tableRef.getTable(), index, mutationsPertainingToIndex,,                                 tempPtr, connection.getKeyValueBuilder());,                 } catch (SQLException e) {,                     throw new IllegalDataException(e);,                 },                 return new Pair<byte[],List<Mutation>>(index.getPhysicalName().getBytes(),indexMutations);,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },     ,     /**,      * Get the unsorted list of HBase mutations for the tables with uncommitted data.,      * @return list of HBase mutations for uncommitted data.,      */,     public Iterator<Pair<byte[],List<Mutation>>> toMutations() {,         return toMutations(false);,     },     ,     public Iterator<Pair<byte[],List<Mutation>>> toMutations(final boolean includeMutableIndexes) {,         final Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         if (!iterator.hasNext()) {,             return Iterators.emptyIterator();,         },         Long scn = connection.getSCN();,         final long timestamp = scn == null ? HConstants.LATEST_TIMESTAMP : scn;,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             private Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> current = iterator.next();,             private Iterator<Pair<byte[],List<Mutation>>> innerIterator = init();,                     ,             private Iterator<Pair<byte[],List<Mutation>>> init() {,                 return addRowMutations(current.getKey(), current.getValue(), timestamp, includeMutableIndexes);,             },             ,             @Override,             public boolean hasNext() {,                 return innerIterator.hasNext() || iterator.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (!innerIterator.hasNext()) {,                     current = iterator.next();,                 },                 return innerIterator.next();,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },         ,     /**,      * Validates that the meta data is valid against the server meta data if we haven't yet done so.,      * Otherwise, for every UPSERT VALUES call, we'd need to hit the server to see if the meta data,      * has changed.,      * @param connection,      * @return the server time to use for the upsert,      * @throws SQLException if the table or any columns no longer exist,      */,     private long[] validate() throws SQLException {,         int i = 0;,         Long scn = connection.getSCN();,         MetaDataClient client = new MetaDataClient(connection);,         long[] timeStamps = new long[this.mutations.size()];,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : mutations.entrySet()) {,             TableRef tableRef = entry.getKey();,             long serverTimeStamp = tableRef.getTimeStamp();,             PTable table = tableRef.getTable();,             // If we're auto committing, we've already validated the schema when we got the ColumnResolver,,             // so no need to do it again here.,             if (!connection.getAutoCommit()) {,                 MetaDataMutationResult result = client.updateCache(table.getSchemaName().getString(), table.getTableName().getString());,                 long timestamp = result.getMutationTime();,                 if (timestamp != QueryConstants.UNSET_TIMESTAMP) {,                     serverTimeStamp = timestamp;,                     if (result.wasUpdated()) {,                         // TODO: use bitset?,                         table = result.getTable();,                         PColumn[] columns = new PColumn[table.getColumns().size()];,                         for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                             Map<PColumn,byte[]> valueEntry = rowEntry.getValue();,                             if (valueEntry != PRow.DELETE_MARKER) {,                                 for (PColumn column : valueEntry.keySet()) {,                                     columns[column.getPosition()] = column;,                                 },                             },                         },                         for (PColumn column : columns) {,                             if (column != null) {,                                 table.getColumnFamily(column.getFamilyName().getString()).getColumn(column.getName().getString());,                             },                         },                         tableRef.setTable(table);,                     },                 },             },             timeStamps[i++] = scn == null ? serverTimeStamp == QueryConstants.UNSET_TIMESTAMP ? HConstants.LATEST_TIMESTAMP : serverTimeStamp : scn;,         },         return timeStamps;,     },     ,     private static void logMutationSize(HTableInterface htable, List<Mutation> mutations, PhoenixConnection connection) {,         long byteSize = 0;,         int keyValueCount = 0;,         for (Mutation mutation : mutations) {,             if (mutation.getFamilyCellMap() != null) { // Not a Delete of the row,                 for (Entry<byte[], List<Cell>> entry : mutation.getFamilyCellMap().entrySet()) {,                     if (entry.getValue() != null) {,                         for (Cell kv : entry.getValue()) {,                             byteSize += CellUtil.estimatedSizeOf(kv);,                             keyValueCount++;,                         },                     },                 },             },         },         logger.debug(LogUtil.addCustomAnnotations("Sending " + mutations.size() + " mutations for " + Bytes.toString(htable.getTableName()) + " with " + keyValueCount + " key values of total size " + byteSize + " bytes", connection));,     },     ,     @SuppressWarnings("deprecation"),     public void commit() throws SQLException {,         int i = 0;,         byte[] tenantId = connection.getTenantId() == null ? null : connection.getTenantId().getBytes();,         long[] serverTimeStamps = validate();,         Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> committedList = Lists.newArrayListWithCapacity(this.mutations.size());, ,         // add tracing for this operation,         TraceScope trace = Tracing.startNewSpan(connection, "Committing mutations to tables");,         Span span = trace.getSpan();,         while (iterator.hasNext()) {,             Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry = iterator.next();,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> valuesMap = entry.getValue();,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             table.getIndexMaintainers(tempPtr);,             boolean hasIndexMaintainers = tempPtr.getLength() > 0;,             boolean isDataTable = true;,             long serverTimestamp = serverTimeStamps[i++];,             Iterator<Pair<byte[],List<Mutation>>> mutationsIterator = addRowMutations(tableRef, valuesMap, serverTimestamp, false);,             while (mutationsIterator.hasNext()) {,                 Pair<byte[],List<Mutation>> pair = mutationsIterator.next();,                 byte[] htableName = pair.getFirst();,                 List<Mutation> mutations = pair.getSecond();,                 ,                 //create a span per target table,                 //TODO maybe we can be smarter about the table name to string here?,                 Span child = Tracing.child(span,"Writing mutation batch for table: "+Bytes.toString(htableName));, ,                 int retryCount = 0;,                 boolean shouldRetry = false;,                 do {,                     ServerCache cache = null;,                     if (hasIndexMaintainers && isDataTable) {,                         byte[] attribValue = null;,                         byte[] uuidValue;,                         if (IndexMetaDataCacheClient.useIndexMetadataCache(connection, mutations, tempPtr.getLength())) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(mutations, tempPtr);,                             child.addTimelineAnnotation("Updated index metadata cache");,                             uuidValue = cache.getId();,                             // If we haven't retried yet, retry for this case only, as it's possible that,                             // a split will occur after we send the index metadata cache to all known,                             // region servers.,                             shouldRetry = true;,                         } else {,                             attribValue = ByteUtil.copyKeyBytesIfNecessary(tempPtr);,                             uuidValue = ServerCacheClient.generateId();,                         },                         // Either set the UUID to be able to access the index metadata from the cache,                         // or set the index metadata directly on the Mutation,                         for (Mutation mutation : mutations) {,                             if (tenantId != null) {,                                 mutation.setAttribute(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);,                             },                             mutation.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             if (attribValue != null) {,                                 mutation.setAttribute(PhoenixIndexCodec.INDEX_MD, attribValue);,                             },                         },                     },                     ,                     SQLException sqlE = null;,                     HTableInterface hTable = connection.getQueryServices().getTable(htableName);,                     try {,                         if (logger.isDebugEnabled()) logMutationSize(hTable, mutations, connection);,                         long startTime = System.currentTimeMillis();,                         child.addTimelineAnnotation("Attempt " + retryCount);,                         hTable.batch(mutations);,                         child.stop();,                         shouldRetry = false;,                         if (logger.isDebugEnabled()) logger.debug(LogUtil.addCustomAnnotations("Total time for batch call of  " + mutations.size() + " mutations into " + table.getName().getString() + ": " + (System.currentTimeMillis() - startTime) + " ms", connection));,                         committedList.add(entry);,                     } catch (Exception e) {,                         SQLException inferredE = ServerUtil.parseServerExceptionOrNull(e);,                         if (inferredE != null) {,                             if (shouldRetry && retryCount == 0 && inferredE.getErrorCode() == SQLExceptionCode.INDEX_METADATA_NOT_FOUND.getErrorCode()) {,                                 // Swallow this exception once, as it's possible that we split after sending the index metadata,                                 // and one of the region servers doesn't have it. This will cause it to have it the next go around.,                                 // If it fails again, we don't retry.,                                 String msg = "Swallowing exception and retrying after clearing meta cache on connection. " + inferredE;,                                 logger.warn(LogUtil.addCustomAnnotations(msg, connection));,                                 connection.getQueryServices().clearTableRegionCache(htableName);, ,                                 // add a new child span as this one failed,                                 child.addTimelineAnnotation(msg);,                                 child.stop();,                                 child = Tracing.child(span,"Failed batch, attempting retry");, ,                                 continue;,                             },                             e = inferredE;,                         },                         // Throw to client with both what was committed so far and what is left to be committed.,                         // That way, client can either undo what was done or try again with what was not done.,                         sqlE = new CommitException(e, this, new MutationState(committedList, this.sizeOffset, this.maxSize, this.connection));,                     } finally {,                         try {,                             hTable.close();,                         } catch (IOException e) {,                             if (sqlE != null) {,                                 sqlE.setNextException(ServerUtil.parseServerException(e));,                             } else {,                                 sqlE = ServerUtil.parseServerException(e);,                             },                         } finally {,                             try {,                                 if (cache != null) {,                                     cache.close();,                                 },                             } finally {,                                 if (sqlE != null) {,                                     throw sqlE;,                                 },                             },                         },                     },                 } while (shouldRetry && retryCount++ < 1);,                 isDataTable = false;,             },             if (tableRef.getTable().getType() != PTableType.INDEX) {,                 numRows -= entry.getValue().size();,             },             iterator.remove(); // Remove batches as we process them,         },         trace.close();,         assert(numRows==0);,         assert(this.mutations.isEmpty());,     },     ,     public void rollback(PhoenixConnection connection) throws SQLException {,         this.mutations.clear();,         numRows = 0;,     },     ,     @Override,     public void close() throws SQLException {,     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/execute/MutationState.java,,75-493,[public class MutationState implements SQLCloseable {,     private static final Logger logger = LoggerFactory.getLogger(MutationState.class);, ,     private PhoenixConnection connection;,     private final long maxSize;,     private final ImmutableBytesPtr tempPtr = new ImmutableBytesPtr();,     private final Map<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> mutations = Maps.newHashMapWithExpectedSize(3); // TODO: Sizing?,     private long sizeOffset;,     private int numRows = 0;, ,     public MutationState(int maxSize, PhoenixConnection connection) {,         this(maxSize,connection,0);,     },     ,     public MutationState(int maxSize, PhoenixConnection connection, long sizeOffset) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,     },     ,     public MutationState(TableRef table, Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutations, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.mutations.put(table, mutations);,         this.sizeOffset = sizeOffset;,         this.numRows = mutations.size();,         throwIfTooBig();,     },     ,     private MutationState(List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> entries, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : entries) {,             numRows += entry.getValue().size();,             this.mutations.put(entry.getKey(), entry.getValue());,         },         throwIfTooBig();,     },     ,     private void throwIfTooBig() {,         if (numRows > maxSize) {,             // TODO: throw SQLException ?,             throw new IllegalArgumentException("MutationState size of " + numRows + " is bigger than max allowed size of " + maxSize);,         },     },     ,     public long getUpdateCount() {,         return sizeOffset + numRows;,     },     ,     /**,      * Combine a newer mutation with this one, where in the event of overlaps,,      * the newer one will take precedence.,      * @param newMutation the newer mutation,      */,     public void join(MutationState newMutation) {,         if (this == newMutation) { // Doesn't make sense,             return;,         },         this.sizeOffset += newMutation.sizeOffset;,         // Merge newMutation with this one, keeping state from newMutation for any overlaps,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : newMutation.mutations.entrySet()) {,             // Replace existing entries for the table with new entries,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             boolean isIndex = table.getType() == PTableType.INDEX;,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> existingRows = this.mutations.put(tableRef, entry.getValue());,             if (existingRows != null) { // Rows for that table already exist,                 // Loop through new rows and replace existing with new,                 for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                     // Replace existing row with new row,                     Map<PColumn,byte[]> existingValues = existingRows.put(rowEntry.getKey(), rowEntry.getValue());,                     if (existingValues != null) {,                         if (existingValues != PRow.DELETE_MARKER) {,                             Map<PColumn,byte[]> newRow = rowEntry.getValue();,                             // if new row is PRow.DELETE_MARKER, it means delete, and we don't need to merge it with existing row. ,                             if (newRow != PRow.DELETE_MARKER) {,                                 // Replace existing column values with new column values,                                 for (Map.Entry<PColumn,byte[]> valueEntry : newRow.entrySet()) {,                                     existingValues.put(valueEntry.getKey(), valueEntry.getValue());,                                 },                                 // Now that the existing row has been merged with the new row, replace it back,                                 // again (since it was replaced with the new one above).,                                 existingRows.put(rowEntry.getKey(), existingValues);,                             },                         },                     } else {,                         if (!isIndex) { // Don't count index rows in row count,                             numRows++;,                         },                     },                 },                 // Put the existing one back now that it's merged,                 this.mutations.put(entry.getKey(), existingRows);,             } else {,                 if (!isIndex) {,                     numRows += entry.getValue().size();,                 },             },         },         throwIfTooBig();,     },     ,     private Iterator<Pair<byte[],List<Mutation>>> addRowMutations(final TableRef tableRef, final Map<ImmutableBytesPtr, Map<PColumn, byte[]>> values, long timestamp, boolean includeMutableIndexes) {,         final Iterator<PTable> indexes = // Only maintain tables with immutable rows through this client-side mechanism,                 (tableRef.getTable().isImmutableRows() || includeMutableIndexes) ? ,                         IndexMaintainer.nonDisabledIndexIterator(tableRef.getTable().getIndexes().iterator()) : ,                         Iterators.<PTable>emptyIterator();,         final List<Mutation> mutations = Lists.newArrayListWithExpectedSize(values.size());,         final List<Mutation> mutationsPertainingToIndex = indexes.hasNext() ? Lists.<Mutation>newArrayListWithExpectedSize(values.size()) : null;,         Iterator<Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>>> iterator = values.entrySet().iterator();,         while (iterator.hasNext()) {,             Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry = iterator.next();,             ImmutableBytesPtr key = rowEntry.getKey();,             PRow row = tableRef.getTable().newRow(connection.getKeyValueBuilder(), timestamp, key);,             List<Mutation> rowMutations, rowMutationsPertainingToIndex;,             if (rowEntry.getValue() == PRow.DELETE_MARKER) { // means delete,                 row.delete();,                 rowMutations = row.toRowMutations();,                 // Row deletes for index tables are processed by running a re-written query,                 // against the index table (as this allows for flexibility in being able to,                 // delete rows).,                 rowMutationsPertainingToIndex = Collections.emptyList();,             } else {,                 for (Map.Entry<PColumn,byte[]> valueEntry : rowEntry.getValue().entrySet()) {,                     row.setValue(valueEntry.getKey(), valueEntry.getValue());,                 },                 rowMutations = row.toRowMutations();,                 rowMutationsPertainingToIndex = rowMutations;,             },             mutations.addAll(rowMutations);,             if (mutationsPertainingToIndex != null) mutationsPertainingToIndex.addAll(rowMutationsPertainingToIndex);,         },         return new Iterator<Pair<byte[],List<Mutation>>>() {,             boolean isFirst = true;, ,             @Override,             public boolean hasNext() {,                 return isFirst || indexes.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (isFirst) {,                     isFirst = false;,                     return new Pair<byte[],List<Mutation>>(tableRef.getTable().getPhysicalName().getBytes(),mutations);,                 },                 PTable index = indexes.next();,                 List<Mutation> indexMutations;,                 try {,                     indexMutations =,                             IndexUtil.generateIndexData(tableRef.getTable(), index, mutationsPertainingToIndex,,                                 tempPtr, connection.getKeyValueBuilder());,                 } catch (SQLException e) {,                     throw new IllegalDataException(e);,                 },                 return new Pair<byte[],List<Mutation>>(index.getPhysicalName().getBytes(),indexMutations);,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },     ,     /**,      * Get the unsorted list of HBase mutations for the tables with uncommitted data.,      * @return list of HBase mutations for uncommitted data.,      */,     public Iterator<Pair<byte[],List<Mutation>>> toMutations() {,         return toMutations(false);,     },     ,     public Iterator<Pair<byte[],List<Mutation>>> toMutations(final boolean includeMutableIndexes) {,         final Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         if (!iterator.hasNext()) {,             return Iterators.emptyIterator();,         },         Long scn = connection.getSCN();,         final long timestamp = scn == null ? HConstants.LATEST_TIMESTAMP : scn;,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             private Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> current = iterator.next();,             private Iterator<Pair<byte[],List<Mutation>>> innerIterator = init();,                     ,             private Iterator<Pair<byte[],List<Mutation>>> init() {,                 return addRowMutations(current.getKey(), current.getValue(), timestamp, includeMutableIndexes);,             },             ,             @Override,             public boolean hasNext() {,                 return innerIterator.hasNext() || iterator.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (!innerIterator.hasNext()) {,                     current = iterator.next();,                 },                 return innerIterator.next();,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },         ,     /**,      * Validates that the meta data is valid against the server meta data if we haven't yet done so.,      * Otherwise, for every UPSERT VALUES call, we'd need to hit the server to see if the meta data,      * has changed.,      * @param connection,      * @return the server time to use for the upsert,      * @throws SQLException if the table or any columns no longer exist,      */,     private long[] validate() throws SQLException {,         int i = 0;,         Long scn = connection.getSCN();,         MetaDataClient client = new MetaDataClient(connection);,         long[] timeStamps = new long[this.mutations.size()];,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : mutations.entrySet()) {,             TableRef tableRef = entry.getKey();,             long serverTimeStamp = tableRef.getTimeStamp();,             PTable table = tableRef.getTable();,             // If we're auto committing, we've already validated the schema when we got the ColumnResolver,,             // so no need to do it again here.,             if (!connection.getAutoCommit()) {,                 MetaDataMutationResult result = client.updateCache(table.getSchemaName().getString(), table.getTableName().getString());,                 long timestamp = result.getMutationTime();,                 if (timestamp != QueryConstants.UNSET_TIMESTAMP) {,                     serverTimeStamp = timestamp;,                     if (result.wasUpdated()) {,                         // TODO: use bitset?,                         table = result.getTable();,                         PColumn[] columns = new PColumn[table.getColumns().size()];,                         for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                             Map<PColumn,byte[]> valueEntry = rowEntry.getValue();,                             if (valueEntry != PRow.DELETE_MARKER) {,                                 for (PColumn column : valueEntry.keySet()) {,                                     columns[column.getPosition()] = column;,                                 },                             },                         },                         for (PColumn column : columns) {,                             if (column != null) {,                                 table.getColumnFamily(column.getFamilyName().getString()).getColumn(column.getName().getString());,                             },                         },                         tableRef.setTable(table);,                     },                 },             },             timeStamps[i++] = scn == null ? serverTimeStamp == QueryConstants.UNSET_TIMESTAMP ? HConstants.LATEST_TIMESTAMP : serverTimeStamp : scn;,         },         return timeStamps;,     },     ,     private static void logMutationSize(HTableInterface htable, List<Mutation> mutations, PhoenixConnection connection) {,         long byteSize = 0;,         int keyValueCount = 0;,         for (Mutation mutation : mutations) {,             if (mutation.getFamilyCellMap() != null) { // Not a Delete of the row,                 for (Entry<byte[], List<Cell>> entry : mutation.getFamilyCellMap().entrySet()) {,                     if (entry.getValue() != null) {,                         for (Cell kv : entry.getValue()) {,                             byteSize += CellUtil.estimatedSizeOf(kv);,                             keyValueCount++;,                         },                     },                 },             },         },         logger.debug(LogUtil.addCustomAnnotations("Sending " + mutations.size() + " mutations for " + Bytes.toString(htable.getTableName()) + " with " + keyValueCount + " key values of total size " + byteSize + " bytes", connection));,     },     ,     @SuppressWarnings("deprecation"),     public void commit() throws SQLException {,         int i = 0;,         byte[] tenantId = connection.getTenantId() == null ? null : connection.getTenantId().getBytes();,         long[] serverTimeStamps = validate();,         Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> committedList = Lists.newArrayListWithCapacity(this.mutations.size());, ,         // add tracing for this operation,         TraceScope trace = Tracing.startNewSpan(connection, "Committing mutations to tables");,         Span span = trace.getSpan();,         while (iterator.hasNext()) {,             Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry = iterator.next();,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> valuesMap = entry.getValue();,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             table.getIndexMaintainers(tempPtr);,             boolean hasIndexMaintainers = tempPtr.getLength() > 0;,             boolean isDataTable = true;,             long serverTimestamp = serverTimeStamps[i++];,             Iterator<Pair<byte[],List<Mutation>>> mutationsIterator = addRowMutations(tableRef, valuesMap, serverTimestamp, false);,             while (mutationsIterator.hasNext()) {,                 Pair<byte[],List<Mutation>> pair = mutationsIterator.next();,                 byte[] htableName = pair.getFirst();,                 List<Mutation> mutations = pair.getSecond();,                 ,                 //create a span per target table,                 //TODO maybe we can be smarter about the table name to string here?,                 Span child = Tracing.child(span,"Writing mutation batch for table: "+Bytes.toString(htableName));, ,                 int retryCount = 0;,                 boolean shouldRetry = false;,                 do {,                     ServerCache cache = null;,                     if (hasIndexMaintainers && isDataTable) {,                         byte[] attribValue = null;,                         byte[] uuidValue;,                         if (IndexMetaDataCacheClient.useIndexMetadataCache(connection, mutations, tempPtr.getLength())) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(mutations, tempPtr);,                             child.addTimelineAnnotation("Updated index metadata cache");,                             uuidValue = cache.getId();,                             // If we haven't retried yet, retry for this case only, as it's possible that,                             // a split will occur after we send the index metadata cache to all known,                             // region servers.,                             shouldRetry = true;,                         } else {,                             attribValue = ByteUtil.copyKeyBytesIfNecessary(tempPtr);,                             uuidValue = ServerCacheClient.generateId();,                         },                         // Either set the UUID to be able to access the index metadata from the cache,                         // or set the index metadata directly on the Mutation,                         for (Mutation mutation : mutations) {,                             if (tenantId != null) {,                                 mutation.setAttribute(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);,                             },                             mutation.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             if (attribValue != null) {,                                 mutation.setAttribute(PhoenixIndexCodec.INDEX_MD, attribValue);,                             },                         },                     },                     ,                     SQLException sqlE = null;,                     HTableInterface hTable = connection.getQueryServices().getTable(htableName);,                     try {,                         if (logger.isDebugEnabled()) logMutationSize(hTable, mutations, connection);,                         long startTime = System.currentTimeMillis();,                         child.addTimelineAnnotation("Attempt " + retryCount);,                         hTable.batch(mutations);,                         child.stop();,                         shouldRetry = false;,                         if (logger.isDebugEnabled()) logger.debug(LogUtil.addCustomAnnotations("Total time for batch call of  " + mutations.size() + " mutations into " + table.getName().getString() + ": " + (System.currentTimeMillis() - startTime) + " ms", connection));,                         committedList.add(entry);,                     } catch (Exception e) {,                         SQLException inferredE = ServerUtil.parseServerExceptionOrNull(e);,                         if (inferredE != null) {,                             if (shouldRetry && retryCount == 0 && inferredE.getErrorCode() == SQLExceptionCode.INDEX_METADATA_NOT_FOUND.getErrorCode()) {,                                 // Swallow this exception once, as it's possible that we split after sending the index metadata,                                 // and one of the region servers doesn't have it. This will cause it to have it the next go around.,                                 // If it fails again, we don't retry.,                                 String msg = "Swallowing exception and retrying after clearing meta cache on connection. " + inferredE;,                                 logger.warn(LogUtil.addCustomAnnotations(msg, connection));,                                 connection.getQueryServices().clearTableRegionCache(htableName);, ,                                 // add a new child span as this one failed,                                 child.addTimelineAnnotation(msg);,                                 child.stop();,                                 child = Tracing.child(span,"Failed batch, attempting retry");, ,                                 continue;,                             },                             e = inferredE;,                         },                         // Throw to client with both what was committed so far and what is left to be committed.,                         // That way, client can either undo what was done or try again with what was not done.,                         sqlE = new CommitException(e, this, new MutationState(committedList, this.sizeOffset, this.maxSize, this.connection));,                     } finally {,                         try {,                             hTable.close();,                         } catch (IOException e) {,                             if (sqlE != null) {,                                 sqlE.setNextException(ServerUtil.parseServerException(e));,                             } else {,                                 sqlE = ServerUtil.parseServerException(e);,                             },                         } finally {,                             try {,                                 if (cache != null) {,                                     cache.close();,                                 },                             } finally {,                                 if (sqlE != null) {,                                     throw sqlE;,                                 },                             },                         },                     },                 } while (shouldRetry && retryCount++ < 1);,                 isDataTable = false;,             },             if (tableRef.getTable().getType() != PTableType.INDEX) {,                 numRows -= entry.getValue().size();,             },             iterator.remove(); // Remove batches as we process them,         },         trace.close();,         assert(numRows==0);,         assert(this.mutations.isEmpty());,     },     ,     public void rollback(PhoenixConnection connection) throws SQLException {,         this.mutations.clear();,         numRows = 0;,     },     ,     @Override,     public void close() throws SQLException {,     }],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/execute/HashJoinPlan.java,getPreSteps,418-418,[                steps.add("    PARALLEL " + parent.joinInfo.getJoinTypes()[index].toString().toUpperCase()],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/execute/SortMergeJoinPlan.java,getExplainPlan,126-126,[        steps.add("SORT-MERGE-JOIN (" + type.toString().toUpperCase() + ") TABLES");],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/phoenix/execute/SortMergeJoinPlan.java,equals,515-517,[            if (!(other instanceof JoinKey)) ,                 return false;,             return this.compareTo((JoinKey) other) == 0;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/SortMergeJoinPlan.java,,546-550,[            return new Comparator<MappedByteBufferSegmentQueue<Tuple>>() {,                 @Override,                 public int compare(MappedByteBufferSegmentQueue<Tuple> q1, ,                         MappedByteBufferSegmentQueue<Tuple> q2) {,                     return q1.index() - q2.index();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/execute/TupleProjector.java,getExpressions,277-277,[        return expressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/TupleProjector.java,<init>,91-91,[    	this.expressions = expressions;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/execute/TupleProjector.java,,49-49,[    public static final byte[] VALUE_COLUMN_FAMILY = Bytes.toBytes("_v");],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/expression/AndExpression.java,create,53-53,[			determinism.combine(child.getDeterminism());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/expression/ComparisonExpression.java,create,193-196,[                    switch (op) {,                     case GREATER_OR_EQUAL:,                     case LESS: // get next whole number,                       increment = 1;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/expression/InListExpression.java,readFields,209-209,[                offset = readValue(input, valuesBytes, offset, maxValue = new ImmutableBytesPtr());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnFamily,67-67,[        return cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnName,71-71,[        return cq;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/KeyValueColumnExpression.java,<init>,55-55,[        this.cf = cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/KeyValueColumnExpression.java,<init>,56-56,[        this.cq = cq;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/LiteralExpression.java,getBytes,318-318,[        return byteValue;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/expression/LiteralExpression.java,newConstant,166-166,[        value = type.toObject(value, actualType);],,newConstant,181-181,[            maxLength = type == null || !type.isFixedWidth() ? null : type.getMaxLength(value);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/phoenix/expression/LiteralExpression.java,getBooleanLiteralExpression,84-84,[    	return BOOLEAN_EXPRESSIONS[ (bool==Boolean.FALSE ?  0 : Determinism.values().length) + determinism.ordinal()];],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getAggregators,117-117,[        return aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getFunctions,75-75,[        return functions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,51-51,[        this.aggregators = aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,50-50,[        this.functions = functions;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/expression/aggregator/BaseDecimalStddevAggregator.java,evaluate,74-74,[            result.setScale(this.colScale, RoundingMode.HALF_UP);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,aggregate,84-84,[                    in.read(keyBytes, 0, keyLen);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,,129-135,[        Comparator<Object> comparator = new Comparator<Object>() {,             @Override,             public int compare(Object o1, Object o2) {,                 if (ascending) { ,                     return type.compareTo(o1, o2); ,                 },                 return type.compareTo(o2, o1);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,,46-46,[    public static final byte[] COMPRESS_MARKER = new byte[] { (byte)1 };],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,countMapHeapSize,134-134,[            SizedUtil.sizeOfMap(DEFAULT_ESTIMATED_DISTINCT_VALUES,],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/expression/aggregator/FirstLastValueServerAggregator.java,toString,149-149,[            out.append(topValue);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/phoenix/expression/aggregator/FirstLastValueServerAggregator.java,toString,145-145,[                out.append(topValues.get(key));],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/phoenix/expression/function/CountAggregateFunction.java,,49-49,[    public static final List<Expression> STAR = Arrays.<Expression>asList(LiteralExpression.newConstant(1, Determinism.ALWAYS));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/CountAggregateFunction.java,,91-94,[        return new LongSumAggregator() {,             @Override,             public boolean isNullable() {,                 return false;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/DecodeFunction.java,evaluate,75-75,[		String encoding = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,49-49,[    public final static byte[] ONE = PLong.INSTANCE.toBytes(1L);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,48-48,[    public final static byte[] ZERO = PLong.INSTANCE.toBytes(0L);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/EncodeFunction.java,evaluate,67-67,[        String encodingFormat = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/expression/function/FirstLastValueBaseFunction.java,,32-32,[    public static String NAME = null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/InvertFunction.java,,93-108,[        return new KeyPart() {, ,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 KeyRange range = childPart.getKeyRange(op, rhs);,                 return range.invert();,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return childPart.getExtractNodes();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/LowerFunction.java,evaluate,56-56,[        ptr.set(PVarchar.INSTANCE.toBytes(sourceStr.toLowerCase()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MaxAggregateFunction.java,,56-64,[        return new MaxAggregator(child.getSortOrder()) {,             @Override,             public PDataType getDataType() {,                 return type;,             }, ,             @Override,             public Integer getMaxLength() {,                 return maxLength;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MinAggregateFunction.java,,70-77,[        return new MinAggregator(child.getSortOrder()) {,             @Override,             public PDataType getDataType() {,                 return type;,             },             @Override,             public Integer getMaxLength() {,             	return maxLength;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/RTrimFunction.java,,105-144,[        return new KeyPart() {,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 byte[] lowerRange = KeyRange.UNBOUND;,                 byte[] upperRange = KeyRange.UNBOUND;,                 boolean lowerInclusive = true;,                 ,                 PDataType type = getColumn().getDataType();,                 switch (op) {,                 case EQUAL:,                     lowerRange = evaluateExpression(rhs);,                     upperRange = ByteUtil.nextKey(ByteUtil.concat(lowerRange, new byte[] {StringUtil.SPACE_UTF8}));,                     break;,                 case LESS_OR_EQUAL:,                     lowerInclusive = false;,                     upperRange = ByteUtil.nextKey(ByteUtil.concat(evaluateExpression(rhs), new byte[] {StringUtil.SPACE_UTF8}));,                     break;,                 default:,                     return childPart.getKeyRange(op, rhs);,                 },                 Integer length = getColumn().getMaxLength();,                 if (type.isFixedWidth() && length != null) {,                     if (lowerRange != KeyRange.UNBOUND) {,                         lowerRange = StringUtil.padChar(lowerRange, length);,                     },                     if (upperRange != KeyRange.UNBOUND) {,                         upperRange = StringUtil.padChar(upperRange, length);,                     },                 },                 return KeyRange.getKeyRange(lowerRange, lowerInclusive, upperRange, false);,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return Collections.<Expression>emptyList();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/expression/function/RoundDecimalExpression.java,roundAndPreserveOperator,246-247,[                            if(decimal.compareTo(rounded) > 0) {,                                 return stepNextInScale(rounded);],,roundAndPreserveOperator,267-268,[                            if(decimal.compareTo(rounded) > 0) {,                                 return stepNextInScale(rounded);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/expression/function/RoundDecimalExpression.java,roundAndPreserveOperator,253-254,[                            if(decimal.compareTo(rounded) < 0) {,                                 return stepPrevInScale(rounded);],,roundAndPreserveOperator,260-261,[                            if(decimal.compareTo(rounded) < 0) {,                                 return stepPrevInScale(rounded);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,73-76,[          return new DoubleSumAggregator(sortOrder, ptr) {,             @Override,             protected PDataType getInputDataType() {,               return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,80-83,[          return new NumberSumAggregator(sortOrder, ptr) {,             @Override,             protected PDataType getInputDataType() {,               return type;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/UpperFunction.java,evaluate,55-55,[        ptr.set(PVarchar.INSTANCE.toBytes(sourceStr.toUpperCase()));],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/ColumnProjectionFilter.java,<init>,65-65,[        this.emptyCFName = emptyCFName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/RowKeyComparisonFilter.java,<init>,57-57,[        this.essentialCF = essentialCF;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/filter/RowKeyComparisonFilter.java,,84-128,[    private final class RowKeyTuple extends BaseTuple {,         private byte[] buf;,         private int offset;,         private int length;, ,         public void setKey(byte[] buf, int offset, int length) {,             this.buf = buf;,             this.offset = offset;,             this.length = length;,         }, ,         @Override,         public void getKey(ImmutableBytesWritable ptr) {,             ptr.set(buf, offset, length);,         }, ,         @Override,         public KeyValue getValue(byte[] cf, byte[] cq) {,             return null;,         }, ,         @Override,         public boolean isImmutable() {,             return true;,         }, ,         @Override,         public String toString() {,             return Bytes.toStringBinary(buf, offset, length);,         }, ,         @Override,         public int size() {,             return 0;,         }, ,         @Override,         public KeyValue getValue(int index) {,             throw new IndexOutOfBoundsException(Integer.toString(index));,         }, ,         @Override,         public boolean getValue(byte[] family, byte[] qualifier,,                 ImmutableBytesWritable ptr) {,             return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,59-59,[        this.lowerInclusiveKey = lowerInclusiveKey;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,60-60,[        this.upperExclusiveKey = upperExclusiveKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/filter/SkipScanFilterTest.java,,66-90,[                new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return width <= 0;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return width <= 0 ? PVarchar.INSTANCE : PChar.INSTANCE;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return width <= 0 ? null : width;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, , 				@Override, 				public SortOrder getSortOrder() {, 					return SortOrder.getDefault();],,
BAD_PRACTICE,DMI_RANDOM_USED_ONLY_ONCE,org/apache/phoenix/flume/DefaultKeyGenerator.java,generate,57-57,[            return String.valueOf(new Random().nextLong());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,395-395,[        final Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,409-409,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testApacheLogRegex,269-269,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testEventsWithHeaders,347-347,[            if(conn != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,398-398,[            rs  = conn.createStatement().executeQuery("select count(*) from "+fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/SchemaHandler.java,createTable,38-38,[            status = connection.createStatement().execute(createTableDdl);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,191-191,[                position++;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,configure,110-110,[                keyGenerator =  DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,143-143,[                 SchemaHandler.createTable(connection,createTableDdl);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,84-84,[               String payload = new String(payloadBytes);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,136-136,[       } catch(Exception ex){],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,72-72,[       PreparedStatement colUpsert = connection.prepareStatement(upsertStatement);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,76-76,[               eventSerializer =  EventSerializers.valueOf(eventSerializerType.toUpperCase());],,
CORRECTNESS,NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH,org/apache/phoenix/flume/sink/PhoenixSink.java,process,180-180,[            transaction.rollback();],,process,191-191,[            transaction.rollback();],,process,186-186,[            transaction.rollback();],,process,140-140,[        Transaction transaction = null;],,process,144-144,[            transaction = channel.getTransaction();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,89-89,[         Class<? extends EventSerializer> clazz = (Class<? extends EventSerializer>) Class.forName(eventSerializer.getClassName());],,initializeSerializer,74-74,[       EventSerializers eventSerializer = null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,93-93,[       } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/IndexQosRpcControllerFactory.java,,66-83,[        public IndexQosRpcController(PayloadCarryingRpcController delegate, Configuration conf) {,             super(delegate);,             this.conf = conf;,             this.priority = PhoenixIndexRpcSchedulerFactory.getMinPriority(conf);,         }, ,         @Override,         public void setPriority(final TableName tn) {,             // if its an index table, then we override to the index priority,             if (isIndexTable(tn)) {,                 setPriority(this.priority);,             } else {,                 super.setPriority(tn);,             },         }, ,         private boolean isIndexTable(TableName tn) {,             return conf.get(IndexQosCompat.getTableIndexQosConfKey(tn.getNameAsString())) == null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/hbase/index/Indexer.java,start,169-169,[        } catch (Exception ex) {],,
STYLE,EQ_UNUSUAL,org/apache/phoenix/hbase/index/Indexer.java,equals,336-336,[      return o == null ? false : o.hashCode() == this.hashCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/Indexer.java,,292-336,[    public MultiMutation(ImmutableBytesPtr rowkey) {,       this.rowKey = rowkey;,     }, ,     /**,      * @param stored,      */,     public void addAll(Mutation stored) {,       // add all the kvs,       for (Entry<byte[], List<Cell>> kvs : stored.getFamilyCellMap().entrySet()) {,         byte[] family = kvs.getKey();,         List<Cell> list = getKeyValueList(family, kvs.getValue().size());,         list.addAll(kvs.getValue());,         familyMap.put(family, list);,       }, ,       // add all the attributes, not overriding already stored ones,       for (Entry<String, byte[]> attrib : stored.getAttributesMap().entrySet()) {,         if (this.getAttribute(attrib.getKey()) == null) {,           this.setAttribute(attrib.getKey(), attrib.getValue());,         },       },     }, ,     private List<Cell> getKeyValueList(byte[] family, int hint) {,       List<Cell> list = familyMap.get(family);,       if (list == null) {,         list = new ArrayList<Cell>(hint);,       },       return list;,     }, ,     @Override,     public byte[] getRow(){,       return this.rowKey.copyBytesIfNecessary();,     }, ,     @Override,     public int hashCode() {,       return this.rowKey.hashCode();,     }, ,     @Override,     public boolean equals(Object o) {,       return o == null ? false : o.hashCode() == this.hashCode();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancer.java,,72-72,[    public static final byte[] PARENT_TABLE_KEY = Bytes.toBytes("PARENT_TABLE");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,403-403,[        HMaster master = cluster.getMaster();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,insertData,230-230,[        Put p = new Put("a".getBytes());],,insertData,232-232,[        p.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,235-235,[        Put p1 = new Put("b".getBytes());],,insertData,237-237,[        p1.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,240-240,[        Put p2 = new Put("c".getBytes());],,insertData,242-242,[        p2.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,245-245,[        Put p3 = new Put("c1".getBytes());],,insertData,247-247,[        p3.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,250-250,[        Put p4 = new Put("d".getBytes());],,insertData,252-252,[        p4.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRetainAssignmentDuringMasterStartUp,385-387,[        if (admin != null) {,             admin.close();,             admin = new HBaseAdmin(master.getConfiguration());],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,414-416,[        if (admin != null) {,             admin.close();,             admin = new HBaseAdmin(cluster.getMaster().getConfiguration());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRetainAssignmentDuringMasterStartUp,387-387,[            admin = new HBaseAdmin(master.getConfiguration());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,416-416,[            admin = new HBaseAdmin(cluster.getMaster().getConfiguration());],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testBalanceByTable,321-321,[        byte[][] split1 = new byte[12][];],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/hbase/index/builder/BaseIndexBuilder.java,getBatchId,82-82,[    return null;],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/covered/CoveredColumnsIndexBuilder.java,addCurrentStateMutationsForBatch,321-321,[    List<IndexedColumnGroup> columnHints = new ArrayList<IndexedColumnGroup>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/CoveredColumnsIndexBuilder.java,,157-160,[    Collections.sort(sorted, new Comparator<Batch>() {,       @Override,       public int compare(Batch o1, Batch o2) {,         return Longs.compare(o1.getTimestamp(), o2.getTimestamp());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,325-329,[    EnvironmentEdge edge = new EnvironmentEdge() {, ,       @Override,       public long currentTimeMillis() {,         return ts;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,141-167,[    public ListMatchingVerifier(String msg, List<Cell> kvs, ColumnReference... columns) {,       this.expectedKvs = kvs;,       this.columns = columns;,       this.msg = msg;,     }, ,     @Override,     public void verify(TableState state) {,       try {,         Scanner kvs =,             ((LocalTableState) state).getIndexedColumnsTableState(Arrays.asList(columns)).getFirst();, ,         int count = 0;,         KeyValue kv;,         while ((kv = kvs.next()) != null) {,           Cell next = expectedKvs.get(count++);,           assertEquals(,             msg + ": Unexpected kv in table state!\nexpected v1: ",                 + Bytes.toString(next.getValue()) + "\nactual v1:" + Bytes.toString(kv.getValue()),,             next, kv);,         }, ,         assertEquals(msg + ": Didn't find enough kvs in table state!", expectedKvs.size(), count);,       } catch (IOException e) {,         fail(msg + ": Got an exception while reading local table state! " + e.getMessage());,       },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,68-83,[  public class TestState {, ,     private HTable table;,     private long ts;,     private VerifyingIndexCodec codec;, ,     /**,      * @param primary,      * @param codec,      * @param ts,      */,     public TestState(HTable primary, VerifyingIndexCodec codec, long ts) {,       this.table = primary;,       this.ts = ts;,       this.codec = codec;,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,170-190,[  private class VerifyingIndexCodec extends CoveredIndexCodecForTesting {, ,     private Queue<TableStateVerifier> verifiers = new ArrayDeque<TableStateVerifier>();, ,     @Override,     public Iterable<IndexUpdate> getIndexDeletes(TableState state) {,       verify(state);,       return super.getIndexDeletes(state);,     }, ,     @Override,     public Iterable<IndexUpdate> getIndexUpserts(TableState state) {,       verify(state);,       return super.getIndexUpserts(state);,     }, ,     private void verify(TableState state) {,       TableStateVerifier verifier = verifiers.poll();,       if (verifier == null) return;,       verifier.verify(state);,     }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,getTableName,51-51,[    return tableName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,setTable,43-43,[    this.tableName = tableName;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,74-81,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];,         KeyValue kv = new KeyValue(row, fam, qual, ts, Type.Put, stored);,         kv.setMvccVersion(0);,         list.add(kv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,119-125,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,165-171,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/data/LazyValueGetter.java,<init>,49-49,[    this.row = currentRow;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/covered/example/CoveredColumnIndexCodec.java,,47-47,[  public static final byte[] INDEX_ROW_COLUMN_FAMILY = Bytes.toBytes("INDEXED_COLUMNS");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,getNextCellHint,101-101,[    return currentHint.getHint(KeyValueUtil.ensureKeyValue(peeked));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,,202-208,[  class DeleteColumnHinter implements Hinter {, ,     @Override,     public KeyValue getHint(KeyValue kv) {,       return KeyValue.createLastOnRow(kv.getBuffer(), kv.getRowOffset(), kv.getRowLength(),,         kv.getBuffer(), kv.getFamilyOffset(), kv.getFamilyLength(), kv.getBuffer(),,         kv.getQualifierOffset(), kv.getQualifierLength());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getFamily,54-54,[    return this.family;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getQualifier,58-58,[    return this.qualifier;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,<init>,48-48,[    this.family = family;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,<init>,49-49,[    this.qualifier = qualifier;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/update/IndexUpdateManager.java,,45-92,[  class MutationComparator implements Comparator<Mutation> {, ,     @Override,     public int compare(Mutation o1, Mutation o2) {,       // always sort rows first,       int compare = o1.compareTo(o2);,       if (compare != 0) {,         return compare;,       }, ,       // if same row, sort by reverse timestamp (larger first),       compare = Longs.compare(o2.getTimeStamp(), o1.getTimeStamp());,       if (compare != 0) {,         return compare;,       },       // deletes always sort before puts for the same row,       if (o1 instanceof Delete) {,         // same row, same ts == same delete since we only delete rows,         if (o2 instanceof Delete) {,           return 0;,         } else {,           // o2 has to be a put,           return -1;,         },       },       // o1 must be a put,       if (o2 instanceof Delete) {,         return 1;,       } else if (o2 instanceof Put) {,         return comparePuts((Put) o1, (Put) o2);,       }, ,       throw new RuntimeException(,           "Got unexpected mutation types! Can only be Put or Delete, but got: " + o1 + ", and ",               + o2);,     }, ,     private int comparePuts(Put p1, Put p2) {,       int p1Size = p1.size();,       int p2Size = p2.size();,       int compare = p1Size - p2Size;,       if (compare == 0) {,         // TODO: make this a real comparison,         // this is a little cheating, but we don't really need to worry too much about this being,         // the same - chances are that exact matches here are really the same update.,         return Longs.compare(p1.heapSize(), p2.heapSize());,       },       return compare;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/hbase/index/exception/SingleIndexWriteFailureException.java,<init>,49-49,[    super("Failed to make index update:\n\t table: " + targetTableName + "\n\t edits: " + mutations],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/parallel/Task.java,isBatchFailed,38-38,[    return this.batch.isAborted();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/parallel/ThreadPoolManager.java,getExecutor,68-68,[    ((ShutdownOnUnusedThreadPoolExecutor) pool).addReference();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/hbase/index/scanner/FilteredKeyValueScanner.java,seekToNextUnfilteredKeyValue,86-99,[            switch (code) {,             // included, so we are done,             case INCLUDE:,             case INCLUDE_AND_NEXT_COL:,                 return true;,                 // not included, so we need to go to the next row,             case SKIP:,             case NEXT_COL:,             case NEXT_ROW:,                 delegate.next();,                 break;,             // use a seek hint to find out where we should go,             case SEEK_NEXT_USING_HINT:,                 delegate.seek(KeyValueUtil.ensureKeyValue(filter.getNextCellHint(peeked)));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/scanner/ScannerBuilder.java,,125-162,[    return new Scanner() {, ,       @Override,       public KeyValue next() {,         try {,           return kvScanner.next();,         } catch (IOException e) {,           throw new RuntimeException("Error reading kvs from local memstore!");,         },       }, ,       @Override,       public boolean seek(KeyValue next) throws IOException {,         // check to see if the next kv is after the current key, in which case we can use reseek,,         // which will be more efficient,         KeyValue peek = kvScanner.peek();,         // there is another value and its before the requested one - we can do a reseek!,         if (peek != null) {,           int compare = KeyValue.COMPARATOR.compare(peek, next);,           if (compare < 0) {,             return kvScanner.reseek(next);,           } else if (compare == 0) {,             // we are already at the given key!,             return true;,           },         },         return kvScanner.seek(next);,       }, ,       @Override,       public KeyValue peek() throws IOException {,         return kvScanner.peek();,       }, ,       @Override,       public void close() {,         kvScanner.close();,       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/table/CachingHTableFactory.java,,49-66,[    public HTableInterfaceLRUMap(int cacheSize) {,       super(cacheSize);,     }, ,     @Override,     protected boolean removeLRU(LinkEntry entry) {,       HTableInterface table = (HTableInterface) entry.getValue();,       if (LOG.isDebugEnabled()) {,         LOG.debug("Closing connection to table: " + Bytes.toString(table.getTableName()),             + " because it was evicted from the cache.");,       },       try {,         table.close();,       } catch (IOException e) {,         LOG.info("Failed to correctly close HTable: " + Bytes.toString(table.getTableName()),             + " ignoring since being removed from queue.");,       },       return true;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,getQualifierArray,100-100,[        return COLUMN_QUALIFIER;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,,37-37,[    public static final byte [] COLUMN_QUALIFIER = Bytes.toBytes("INDEXEDKEYVALUE_FAKED_COLUMN");],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/hbase/index/write/KillServerOnFailurePolicy.java,handleFailure,76-76,[      System.exit(1);],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/ParallelWriterIndexCommitter.java,write,116-116,[            final List<Mutation> mutations = kvBuilder.cloneIfNecessary((List<Mutation>)entry.getValue());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,105-111,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,179-183,[    }).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         failed[0] = true;,         throw new RuntimeException(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,173-177,[    Mockito.when(table2.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         waitOnAbortedLatch.await();,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,234-246,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         LOG.info("Write started");,         writeStartedLatch.countDown();,         // when we interrupt the thread for shutdown, we should see this throw an interrupt too,         try {,         waitOnAbortedLatch.await();,         } catch (InterruptedException e) {,           LOG.info("Correctly interrupted while writing!");,           throw e;,         },         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,266-275,[    Thread primaryWriter = new Thread() {, ,       @Override,       public void run() {,         try {,           writer.write(indexUpdates);,         } catch (IndexWriteException e) {,           failedWrite[0] = true;,         },       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleIndexWriter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleWriterIndexCommitter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,200-200,[    allowIndexTableToRecover = new CountDownLatch(1);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,204-204,[    List<HRegion> online = new ArrayList<HRegion>();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testAddRemoveSingleRegion,127-127,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleAddsForSingleRegion,155-155,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleRegions,180-180,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,testMultipleRegions,193-193,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,87-87,[            return 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,84-92,[      r1 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 1;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,99-99,[            return 2;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,96-104,[      r2 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 2;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TrackingParallelWriterIndexCommitter.java,write,119-119,[            final List<Mutation> mutations = (List<Mutation>)entry.getValue();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/index/BaseIndexCodec.java,getBatchId,57-57,[    return null;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,buildDataRowKey,482-482,[                indexPosOffset++;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,deserialize,220-220,[        List<IndexMaintainer> maintainers = Collections.emptyList();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getDataEmptyKeyValueCF,1201-1201,[        return dataEmptyKeyValueCF;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getIndexTableName,819-819,[        return indexTableName;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/index/IndexMaintainer.java,hasIndexedColumnChanged,775-775,[        		if (Bytes.compareTo(oldValue.get(), oldValue.getOffset(), oldValue.getLength(), ],,hasIndexedColumnChanged,771-771,[        		if ((oldValue == null && !newValueSetAsNull) || (oldValue != null && newValueSetAsNull)) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,604-628,[            builder.addField(new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return false;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return MetaDataUtil.getViewIndexIdDataType();,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return null;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, ,                 @Override,                 public SortOrder getSortOrder() {,                     return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,650-674,[                builder.addField(new PDatum() {, ,                     @Override,                     public boolean isNullable() {,                         return true;,                     }, ,                     @Override,                     public PDataType getDataType() {,                         return IndexUtil.getIndexColumnDataType(true, dataType);,                     }, ,                     @Override,                     public Integer getMaxLength() {,                         return null;,                     }, ,                     @Override,                     public Integer getScale() {,                         return null;,                     }, ,                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,91-91,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,144-144,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,138-138,[                valueMap.get(ref);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,144-144,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,91-149,[        Connection conn = DriverManager.getConnection(getUrl());,         String fullTableName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier(tableName));,         String fullIndexName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier("idx"));,         conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );,         try {,             conn.createStatement().execute("CREATE INDEX idx ON " + fullTableName + "(" + indexColumns + ") " + (includeColumns.isEmpty() ? "" : "INCLUDE (" + includeColumns + ") ") + (indexProps.isEmpty() ? "" : indexProps));,             PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class);,             PTable table = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(), fullTableName));,             PTable index = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(),fullIndexName));,             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             table.getIndexMaintainers(ptr);,             List<IndexMaintainer> c1 = IndexMaintainer.deserialize(ptr, builder);,             assertEquals(1,c1.size());,             IndexMaintainer im1 = c1.get(0);,             ,             StringBuilder buf = new StringBuilder("UPSERT INTO " + fullTableName  + " VALUES(");,             for (int i = 0; i < values.length; i++) {,                 buf.append("?,");,             },             buf.setCharAt(buf.length()-1, ')');,             PreparedStatement stmt = conn.prepareStatement(buf.toString());,             for (int i = 0; i < values.length; i++) {,                 stmt.setObject(i+1, values[i]);,             },             stmt.execute();,             	Iterator<Pair<byte[],List<KeyValue>>> iterator = PhoenixRuntime.getUncommittedDataIterator(conn);,             List<KeyValue> dataKeyValues = iterator.next().getSecond();,             Map<ColumnReference,byte[]> valueMap = Maps.newHashMapWithExpectedSize(dataKeyValues.size());,             ImmutableBytesWritable rowKeyPtr = new ImmutableBytesWritable(dataKeyValues.get(0).getRow());,             Put dataMutation = new Put(rowKeyPtr.copyBytes());,             for (KeyValue kv : dataKeyValues) {,                 valueMap.put(new ColumnReference(kv.getFamily(),kv.getQualifier()), kv.getValue());,                 dataMutation.add(kv);,             },             ValueGetter valueGetter = newValueGetter(valueMap);,             ,             List<Mutation> indexMutations =,                     IndexTestUtil.generateIndexData(index, table, dataMutation, ptr, builder);,             assertEquals(1,indexMutations.size());,             assertTrue(indexMutations.get(0) instanceof Put);,             Mutation indexMutation = indexMutations.get(0);,             ImmutableBytesWritable indexKeyPtr = new ImmutableBytesWritable(indexMutation.getRow());,             ptr.set(rowKeyPtr.get(), rowKeyPtr.getOffset(), rowKeyPtr.getLength());,             byte[] mutablelndexRowKey = im1.buildRowKey(valueGetter, ptr, null, null);,             byte[] immutableIndexRowKey = indexKeyPtr.copyBytes();,             assertArrayEquals(immutableIndexRowKey, mutablelndexRowKey);,             for (ColumnReference ref : im1.getCoverededColumns()) {,                 valueMap.get(ref);,             },             byte[] dataRowKey = im1.buildDataRowKey(indexKeyPtr, null);,             assertArrayEquals(dataRowKey, dataKeyValues.get(0).getRow());,         } finally {,             try {,                 conn.createStatement().execute("DROP TABLE " + fullTableName);,             } finally {,                 conn.close();,             },         },     }],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,94-94,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,111-111,[            PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMetaDataCacheFactory.java,,50-59,[        return new IndexMetaDataCache() {, ,             @Override,             public void close() throws IOException {,                 chunk.close();,             }, ,             @Override,             public List<IndexMaintainer> getIndexMaintainers() {,                 return maintainers;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/PhoenixIndexFailurePolicy.java,,158-173,[                            new Batch.Call<MetaDataService, MetaDataResponse>() {,                                 @Override,                                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                                     ServerRpcController controller = new ServerRpcController();,                                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                             new BlockingRpcCallback<MetaDataResponse>();,                                     UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                                     for (Mutation m : tableMetadata) {,                                         MutationProto mp = ProtobufUtil.toProto(m);,                                         builder.addTableMetadataMutations(mp.toByteString());,                                     },                                     instance.updateIndexState(controller, builder.build(), rpcCallback);,                                     if (controller.getFailedOn() != null) {,                                         throw controller.getFailedOn();,                                     },                                     return rpcCallback.get();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/iterate/AggregateResultScannerTest.java,getViewConstant,120-120,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,94-125,[        SumAggregateFunction func = new SumAggregateFunction(Arrays.<Expression>asList(new KeyValueColumnExpression(new PLongColumn() {,             @Override,             public PName getName() {,                 return SINGLE_COLUMN_NAME;,             },             @Override,             public PName getFamilyName() {,                 return SINGLE_COLUMN_FAMILY_NAME;,             },             @Override,             public int getPosition() {,                 return 0;,             },             ,             @Override,             public SortOrder getSortOrder() {,             	return SortOrder.getDefault();,             },             ,             @Override,             public Integer getArraySize() {,                 return 0;,             },             ,             @Override,             public byte[] getViewConstant() {,                 return null;,             },             ,             @Override,             public boolean isViewReferenced() {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,129-157,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }, , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/iterate/ConcatResultIterator.java,toString,126-126,[		return "ConcatResultIterator [" + resultIterators == null ? ("iterators=" + iterators) : ("resultIterators=" + resultIterators) ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,59-87,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             },             , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,122-150,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             },             , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/MappedByteBufferQueue.java,clear,268-268,[                file.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,,64-92,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             },             , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/iterate/MergeSortTopNResultIterator.java,compare,69-69,[            return order.isAscending() ? cmp : -cmp;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,<init>,133-133,[                            spoolTo.getFile().delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/SpoolingResultIterator.java,,95-100,[            spoolTo = new DeferredFileOutputStream(size, "ResultSpooler",".bin", new File(spoolDirectory)) {,                 @Override,                 protected void thresholdReached() throws IOException {,                     super.thresholdReached();,                     chunk.close();,                 }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,reachedEnd,248-248,[                file.delete();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/jdbc/PhoenixConnection.java,getURL,371-371,[        return url;],,getUrl,38-38,[],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/jdbc/PhoenixConnection.java,<init>,168-168,[        final PName tenantId = JDBCUtil.getTenantId(url, info);],,<init>,167-167,[        this.info = info == null ? new Properties() : PropertiesUtil.deepCopy(info);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixConnection.java,,189-194,[            this.services = !needsDelegate ? services : new DelegateConnectionQueryServices(services) {,                 final ReadOnlyProps augmentedProps = new ReadOnlyProps(tmpAugmentedProps);,     ,                 @Override,                 public ReadOnlyProps getProps() {,                     return augmentedProps;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,197-197,[    public static final byte[] ARRAY_SIZE_BYTES = Bytes.toBytes(ARRAY_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,231-231,[    public static final byte[] CACHE_SIZE_BYTES = Bytes.toBytes(CACHE_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,142-142,[    public static final byte[] COLUMN_COUNT_BYTES = Bytes.toBytes(COLUMN_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,159-159,[    public static final byte[] COLUMN_SIZE_BYTES = Bytes.toBytes(COLUMN_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,220-220,[    public static final byte[] CURRENT_VALUE_BYTES = Bytes.toBytes(CURRENT_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,233-233,[    public static final byte[] CYCLE_FLAG_BYTES = Bytes.toBytes(CYCLE_FLAG);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,147-147,[    public static final byte[] DATA_TABLE_NAME_BYTES = Bytes.toBytes(DATA_TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,156-156,[    public static final byte[] DATA_TYPE_BYTES = Bytes.toBytes(DATA_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,162-162,[    public static final byte[] DECIMAL_DIGITS_BYTES = Bytes.toBytes(DECIMAL_DIGITS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,183-183,[    public static final byte[] DEFAULT_COLUMN_FAMILY_NAME_BYTES = Bytes.toBytes(DEFAULT_COLUMN_FAMILY_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,187-187,[    public static final byte[] DISABLE_WAL_BYTES = Bytes.toBytes(DISABLE_WAL);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,247-247,[    public static final byte[] GUIDE_POSTS_BYTES = Bytes.toBytes(GUIDE_POSTS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,249-249,[    public static final byte[] GUIDE_POSTS_COUNT_BYTES = Bytes.toBytes(GUIDE_POSTS_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,251-251,[    public static final byte[] GUIDE_POSTS_WIDTH_BYTES = Bytes.toBytes(GUIDE_POSTS_WIDTH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,181-181,[    public static final byte[] IMMUTABLE_ROWS_BYTES = Bytes.toBytes(IMMUTABLE_ROWS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,229-229,[    public static final byte[] INCREMENT_BY_BYTES = Bytes.toBytes(INCREMENT_BY);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,242-242,[    public static final byte[] INDEX_DISABLE_TIMESTAMP_BYTES = Bytes.toBytes(INDEX_DISABLE_TIMESTAMP);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,149-149,[    public static final byte[] INDEX_STATE_BYTES = Bytes.toBytes(INDEX_STATE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,193-193,[    public static final byte[] INDEX_TYPE_BYTES = Bytes.toBytes(INDEX_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,201-201,[    public static final byte[] IS_VIEW_REFERENCED_BYTES = Bytes.toBytes(IS_VIEW_REFERENCED);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,257-257,[    public static final byte[] LAST_STATS_UPDATE_TIME_BYTES = Bytes.toBytes(LAST_STATS_UPDATE_TIME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,235-235,[    public static final byte[] LIMIT_REACHED_FLAG_BYTES = Bytes.toBytes(LIMIT_REACHED_FLAG);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,195-195,[    public static final byte[] LINK_TYPE_BYTES = Bytes.toBytes(LINK_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,227-227,[    public static final byte[] MAX_VALUE_BYTES = Bytes.toBytes(MAX_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,225-225,[    public static final byte[] MIN_VALUE_BYTES = Bytes.toBytes(MIN_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,189-189,[    public static final byte[] MULTI_TENANT_BYTES = Bytes.toBytes(MULTI_TENANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,165-165,[    public static final byte[] NULLABLE_BYTES = Bytes.toBytes(NULLABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,171-171,[    public static final byte[] ORDINAL_POSITION_BYTES = Bytes.toBytes(ORDINAL_POSITION);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,138-138,[    public static final byte[] PK_NAME_BYTES = Bytes.toBytes(PK_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,144-144,[    public static final byte[] SALT_BUCKETS_BYTES = Bytes.toBytes(SALT_BUCKETS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,209-209,[    public static final byte[] SEQUENCE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,216-216,[    public static final byte[] SEQUENCE_FULLNAME_BYTES = Bytes.toBytes(SEQUENCE_FULLNAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,211-211,[    public static final byte[] SEQUENCE_SCHEMA_NAME_BYTES = Bytes.toBytes(SEQUENCE_SCHEMA_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,213-213,[    public static final byte[] SEQUENCE_TABLE_NAME_BYTES = Bytes.toBytes(SEQUENCE_TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,179-179,[    public static final byte[] SORT_ORDER_BYTES = Bytes.toBytes(SORT_ORDER);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,222-222,[    public static final byte[] START_WITH_BYTES = Bytes.toBytes(START_WITH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,115-115,[    public static final byte[] SYSTEM_CATALOG_NAME_BYTES = Bytes.toBytes(SYSTEM_CATALOG_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,110-110,[    public static final byte[] SYSTEM_CATALOG_SCHEMA_BYTES = QueryConstants.SYSTEM_SCHEMA_NAME_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,112-112,[    public static final byte[] SYSTEM_CATALOG_TABLE_BYTES = Bytes.toBytes(SYSTEM_CATALOG_TABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,118-118,[    public static final byte[] SYSTEM_STATS_NAME_BYTES = Bytes.toBytes(SYSTEM_STATS_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,206-206,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,123-123,[    public static final byte[] TABLE_NAME_BYTES = Bytes.toBytes(TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,140-140,[    public static final byte[] TABLE_SEQ_NUM_BYTES = Bytes.toBytes(TABLE_SEQ_NUM);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,125-125,[    public static final byte[] TABLE_TYPE_BYTES = Bytes.toBytes(TABLE_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,199-199,[    public static final byte[] VIEW_CONSTANT_BYTES = Bytes.toBytes(VIEW_CONSTANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,203-203,[    public static final byte[] VIEW_INDEX_ID_BYTES = Bytes.toBytes(VIEW_INDEX_ID);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,185-185,[    public static final byte[] VIEW_STATEMENT_BYTES = Bytes.toBytes(VIEW_STATEMENT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,191-191,[    public static final byte[] VIEW_TYPE_BYTES = Bytes.toBytes(VIEW_TYPE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,237-237,[    public static final byte[] KEY_SEQ_BYTES = Bytes.toBytes(KEY_SEQ);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,255-255,[    public static final byte[] MAX_KEY_BYTES = Bytes.toBytes(MAX_KEY);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,253-253,[    public static final byte[] MIN_KEY_BYTES = Bytes.toBytes(MIN_KEY);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,260-260,[    public static final byte[] PARENT_TENANT_ID_BYTES = Bytes.toBytes(PARENT_TENANT_ID);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,127-127,[    public static final byte[] PHYSICAL_NAME_BYTES = Bytes.toBytes(PHYSICAL_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,245-245,[    public static final byte[] REGION_NAME_BYTES = Bytes.toBytes(REGION_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,152-152,[    public static final byte[] TENANT_ID_BYTES = Bytes.toBytes(TENANT_ID);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getCatalogs,347-347,[        Statement stmt = connection.createStatement();],,getCatalogs,348-348,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,488-488,[            stmt = connection.createStatement();],,getColumns,490-490,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,681-681,[        Statement stmt = connection.createStatement();],,getIndexInfo,682-682,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,827-827,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,889-889,[        Statement stmt = connection.createStatement();],,getSchemas,890-890,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,921-921,[        Statement stmt = connection.createStatement();],,getSuperTables,922-922,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,1029-1029,[        Statement stmt = connection.createStatement();],,getTables,1030-1030,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,490-490,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,682-682,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,827-827,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,890-890,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,922-922,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,1030-1030,[        return stmt.executeQuery(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,473-476,[            stmt = connection.createStatement(new PhoenixStatementFactory() {,                 @Override,                 public PhoenixStatement newStatement(PhoenixConnection connection) {,                     return new PhoenixStatement(connection) {],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,next,523-523,[                inMultiTenantTable = getColumn(tuple, multiTenantIndex) == Boolean.TRUE;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,,84-507,[        super(connection);,         this.statement = parser.nextStatement(new ExecutableNodeFactory());,         if (this.statement == null) { throw new EOFException(); },         this.query = null; // TODO: add toString on SQLStatement,         this.parameterCount = statement.getBindCount();,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixConnection connection, String query) throws SQLException {,         super(connection);,         this.query = query;,         this.statement = parseStatement(query);,         this.parameterCount = statement.getBindCount();,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixPreparedStatement statement) throws SQLException {,         super(statement.connection);,         this.query = statement.query;,         this.statement = statement.statement;,         this.parameterCount = statement.parameters.size();,         this.parameters = new ArrayList<Object>(statement.parameters);,     }, ,     @Override,     public void addBatch() throws SQLException {,         throwIfUnboundParameters();,         batch.add(new PhoenixPreparedStatement(this));,     }, ,     /**,      * Set a bind parameter's value.,      * @param parameterIndex 1-based index of the bind parameter to be set,      * @param value value to be set,      * @throws SQLException if the bind parameter index is invalid,      */,     private void setParameter(int parameterIndex, Object value) throws SQLException {,         if (parameterIndex < 1 || parameterIndex > parameterCount) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND),                     .setMessage("Can't set parameter at index " + parameterIndex + ", " +,                              parameterCount + " bind parameters are defined"),                     .build().buildException();,         },         if (parameterIndex < 1) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND),                     .setMessage("Invalid bind parameter index " + parameterIndex),                     .build().buildException();,         },         this.parameters.set(parameterIndex - 1, value);,     }, , ,     @Override,     public void clearParameters() throws SQLException {,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     @Override,     public List<Object> getParameters() {,         return parameters;,     }, ,     private void throwIfUnboundParameters() throws SQLException {,         int i = 0;,         for (Object param : getParameters()) {,             if (param == BindManager.UNBOUND_PARAMETER) {,                 throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND),                     .setMessage("Parameter " + (i + 1) + " is unbound").build().buildException();,             },             i++;,         },     }, , ,     public QueryPlan compileQuery() throws SQLException {,         return compileQuery(statement, query);,     }, ,     public MutationPlan compileMutation() throws SQLException {,         return compileMutation(statement, query);,     }, ,     boolean execute(boolean batched) throws SQLException {,         throwIfUnboundParameters();,         if (!batched && statement.getOperation().isMutation() && !batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return execute(statement);,     }, ,     @Override,     public boolean execute() throws SQLException {,         return execute(false);,     }, ,     @Override,     public ResultSet executeQuery() throws SQLException {,         throwIfUnboundParameters();,         if (statement.getOperation().isMutation()) {,             throw new ExecuteQueryNotApplicableException(statement.getOperation());,         },         return executeQuery(statement);,     }, ,     @Override,     public int executeUpdate() throws SQLException {,         throwIfUnboundParameters();,         if (!statement.getOperation().isMutation()) {,             throw new ExecuteUpdateNotApplicableException(statement.getOperation());,         },         if (!batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return executeMutation(statement);,     }, ,     public QueryPlan optimizeQuery() throws SQLException {,         throwIfUnboundParameters();,         return optimizeQuery(statement);,     }, ,     @Override,     public ResultSetMetaData getMetaData() throws SQLException {,         if (statement.getOperation().isMutation()) {,             return null;,         },         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             // Just compile top level query without optimizing to get ResultSetMetaData,             QueryPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return new PhoenixResultSetMetaData(this.getConnection(), plan.getProjector());,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public ParameterMetaData getParameterMetaData() throws SQLException {,         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             StatementPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return plan.getParameterMetaData();,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public String toString() {,         return query;,     }, ,     @Override,     public void setArray(int parameterIndex, Array x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setBytes(int parameterIndex, byte[] x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, Blob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBoolean(int parameterIndex, boolean x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setByte(int parameterIndex, byte x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Clob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setDate(int parameterIndex, Date x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex, new Date(cal.getTimeInMillis()));,     }, ,     @Override,     public void setDouble(int parameterIndex, double x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setFloat(int parameterIndex, float x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setInt(int parameterIndex, int x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setLong(int parameterIndex, long x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, NClob value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNString(int parameterIndex, String value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType) throws SQLException {,         setParameter(parameterIndex, null);,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {,         setParameter(parameterIndex, null);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o) throws SQLException {,         setParameter(parameterIndex, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o, int targetSqlType) throws SQLException {,         PDataType targetType = PDataType.fromTypeId(targetSqlType);,         PDataType sourceType = PDataType.fromLiteral(o);,         o = targetType.toObject(o, sourceType);,         setParameter(parameterIndex, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {,         setObject(parameterIndex, x, targetSqlType);,     }, ,     @Override,     public void setRef(int parameterIndex, Ref x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setRowId(int parameterIndex, RowId x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setShort(int parameterIndex, short x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setString(int parameterIndex, String x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex, new Time(cal.getTimeInMillis()));,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex,  DateUtil.getTimestamp(cal.getTimeInMillis(), x.getNanos()));,     }, ,     @Override,     public void setURL(int parameterIndex, URL x) throws SQLException {,         setParameter(parameterIndex, x.toExternalForm()); // Just treat as String,     }, ,     @Override,     public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,setParameter,130-130,[            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND)],,setParameter,129-129,[        if (parameterIndex < 1) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/jdbc/PhoenixPreparedStatementTest.java,testMutationUsingExecuteQueryShouldFail,69-69,[            stmt.executeQuery();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixResultSet.java,next,769-769,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,243-243,[                            throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,289-289,[                                    throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixStatement.java,,389-463,[            return new QueryPlan() {, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;,                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     return new ExplainPlan(Collections.singletonList("EXPLAIN PLAN"));,                 }, ,                 @Override,                 public ResultIterator iterator() throws SQLException {,                     return iterator;,                 }, ,                 @Override,                 public long getEstimatedSize() {,                     return 0;,                 }, ,                 @Override,                 public TableRef getTableRef() {,                     return null;,                 }, ,                 @Override,                 public RowProjector getProjector() {,                     return EXPLAIN_PLAN_ROW_PROJECTOR;,                 }, ,                 @Override,                 public Integer getLimit() {,                     return null;,                 }, ,                 @Override,                 public OrderBy getOrderBy() {,                     return OrderBy.EMPTY_ORDER_BY;,                 }, ,                 @Override,                 public GroupBy getGroupBy() {,                     return GroupBy.EMPTY_GROUP_BY;,                 }, ,                 @Override,                 public List<KeyRange> getSplits() {,                     return Collections.emptyList();,                 }, ,                 @Override,                 public List<List<Scan>> getScans() {,                     return Collections.emptyList();,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return plan.getContext();,                 }, ,                 @Override,                 public FilterableStatement getStatement() {,                     return null;,                 }, ,                 @Override,                 public boolean isDegenerate() {,                     return false;,                 }, ,                 @Override,                 public boolean isRowKeyOrdered() {,                     return true;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/job/AbstractRoundRobinQueue.java,offer,115-115,[        offer(o);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,82-82,[                return new JobFutureTask<T>(runnable, value);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,77-77,[                return new JobFutureTask<T>(call);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/join/HashCacheFactory.java,,73-141,[    private class HashCacheImpl implements HashCache {,         private final Map<ImmutableBytesPtr,List<Tuple>> hashCache;,         private final MemoryChunk memoryChunk;,         private final boolean singleValueOnly;,         ,         private HashCacheImpl(byte[] hashCacheBytes, MemoryChunk memoryChunk) {,             try {,                 this.memoryChunk = memoryChunk;,                 byte[] hashCacheByteArray = hashCacheBytes;,                 int offset = 0;,                 ByteArrayInputStream input = new ByteArrayInputStream(hashCacheByteArray, offset, hashCacheBytes.length);,                 DataInputStream dataInput = new DataInputStream(input);,                 int nExprs = dataInput.readInt();,                 List<Expression> onExpressions = new ArrayList<Expression>(nExprs);,                 for (int i = 0; i < nExprs; i++) {,                     int expressionOrdinal = WritableUtils.readVInt(dataInput);,                     Expression expression = ExpressionType.values()[expressionOrdinal].newInstance();,                     expression.readFields(dataInput);,                     onExpressions.add(expression);                        ,                 },                 boolean singleValueOnly = false;,                 int exprSizeAndSingleValueOnly = dataInput.readInt();,                 int exprSize = exprSizeAndSingleValueOnly;,                 if (exprSize < 0) {,                     exprSize *= -1;,                     singleValueOnly = true;,                 },                 this.singleValueOnly = singleValueOnly;,                 offset += exprSize;,                 int nRows = dataInput.readInt();,                 long estimatedSize = SizedUtil.sizeOfMap(nRows, SizedUtil.IMMUTABLE_BYTES_WRITABLE_SIZE, SizedUtil.RESULT_SIZE) + hashCacheBytes.length;,                 this.memoryChunk.resize(estimatedSize);,                 HashMap<ImmutableBytesPtr,List<Tuple>> hashCacheMap = new HashMap<ImmutableBytesPtr,List<Tuple>>(nRows * 5 / 4);,                 offset += Bytes.SIZEOF_INT;,                 // Build Map with evaluated hash key as key and row as value,                 for (int i = 0; i < nRows; i++) {,                     int resultSize = (int)Bytes.readVLong(hashCacheByteArray, offset);,                     offset += WritableUtils.decodeVIntSize(hashCacheByteArray[offset]);,                     ImmutableBytesWritable value = new ImmutableBytesWritable(hashCacheByteArray,offset,resultSize);,                     Tuple result = new ResultTuple(ResultUtil.toResult(value));,                     ImmutableBytesPtr key = TupleUtil.getConcatenatedValue(result, onExpressions);,                     List<Tuple> tuples = hashCacheMap.get(key);,                     if (tuples == null) {,                         tuples = new LinkedList<Tuple>();,                         hashCacheMap.put(key, tuples);,                     },                     tuples.add(result);,                     offset += resultSize;,                 },                 this.hashCache = Collections.unmodifiableMap(hashCacheMap);,             } catch (IOException e) { // Not possible with ByteArrayInputStream,                 throw new RuntimeException(e);,             },         }, ,         @Override,         public void close() {,             memoryChunk.close();,         },         ,         @Override,         public List<Tuple> get(ImmutableBytesPtr hashKey) throws IOException {,             List<Tuple> ret = hashCache.get(hashKey);,             if (singleValueOnly && ret != null && ret.size() > 1) {,                 SQLException ex = new SQLExceptionInfo.Builder(SQLExceptionCode.SINGLE_ROW_SUBQUERY_RETURNS_MULTIPLE_ROWS).build().buildException();,                 ServerUtil.throwIOException(ex.getMessage(), ex);,             },             ,             return ret;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,earlyEvaluation,109-109,[    	return earlyEvaluation;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getFieldPositions,117-117,[    	return fieldPositions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinExpressions,101-101,[        return joinExpressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinIds,97-97,[        return joinIds;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinTypes,105-105,[        return joinTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getSchemas,113-113,[    	return schemas;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/CsvBulkLoadTool.java,parseOptions,117-117,[        if (cmdLine.hasOption(HELP_OPT.getOpt())) {],,parseOptions,110-110,[        CommandLine cmdLine = null;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/CsvBulkLoadTool.java,run,182-182,[                getJdbcUrl(cmdLine.getOptionValue(ZK_QUORUM_OPT.getOpt())));],,run,174-174,[        CommandLine cmdLine = null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,96-96,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,131-131,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,207-207,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,173-173,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,91-91,[        Statement stmt = conn.createStatement();],,testBasicImport,92-92,[        stmt.execute("CREATE TABLE TABLE1 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,125-125,[        Statement stmt = conn.createStatement();],,testFullOptionImport,126-126,[        stmt.execute("CREATE TABLE TABLE2 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,198-198,[        Statement stmt = conn.createStatement();],,testImportOneIndexTable,199-199,[        stmt.execute("CREATE TABLE TABLE4 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,163-163,[        Statement stmt = conn.createStatement();],,testImportWithIndex,164-164,[        stmt.execute("CREATE TABLE TABLE3 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,91-91,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,125-125,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,198-198,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,163-163,[        Statement stmt = conn.createStatement();],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/mapreduce/CsvToKeyValueMapper.java,apply,261-267,[                                if (input.isEmpty()) {,                                     // An empty string represents a null that was passed in to,                                     // the configuration, which corresponds to an input column,                                     // which is to be skipped,                                     return null;,                                 },                                 return ColumnInfo.fromString(input);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/mapreduce/PhoenixRecordWriter.java,<init>,52-52,[        this.statement = this.conn.prepareStatement(upsertQuery);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/mapreduce/util/ColumnInfoToStringEncoderDecoderTest.java,testEncodeDecodeWithNulls,55-55,[        final String columnInfoStr = ColumnInfoToStringEncoderDecoder.encode(Lists.newArrayList(columnInfo1,columnInfo2));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,76-85,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(50);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,87-96,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 MemoryChunk c3 = rmm2.allocate(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 1000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,118-127,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(40);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,129-139,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 MemoryChunk c3 = rmm2.allocate(10);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 c3.resize(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 2000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,160-170,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c2 = rmm1.allocate(20);,                 sleepFor(4000);,                 c1.resize(20); // resize down to test that other thread is notified,                 sleepFor(2000);,                 c2.close();,                 c1.close();,                 assertTrue(rmm1.getAvailableMemory() == rmm1.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,172-184,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 ChildMemoryManager rmm2 = new ChildMemoryManager(gmm,100);,                 MemoryChunk c3 = rmm2.allocate(10);,                 long startTime = System.currentTimeMillis();,                 c3.resize(60); // Test that resize waits if memory not available,                 assertTrue(c1.getSize() == 20); // c1 was resized not closed,                 assertTrue(System.currentTimeMillis() - startTime >= 2000); // we waited some time before the allocate happened,                 c3.close();,                 assertTrue(rmm2.getAvailableMemory() == rmm2.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/optimize/QueryOptimizer.java,,314-352,[        Collections.sort(bestCandidates, new Comparator<QueryPlan>() {, ,             @Override,             public int compare(QueryPlan plan1, QueryPlan plan2) {,                 PTable table1 = plan1.getTableRef().getTable();,                 PTable table2 = plan2.getTableRef().getTable();,                 // For shared indexes (i.e. indexes on views and local indexes),,                 // a) add back any view constants as these won't be in the index, and,                 // b) ignore the viewIndexId which will be part of the row key columns.,                 int c = (plan2.getContext().getScanRanges().getRanges().size() + (table2.getViewIndexId() == null ? 0 : (boundRanges - 1))) - ,                         (plan1.getContext().getScanRanges().getRanges().size() + (table1.getViewIndexId() == null ? 0 : (boundRanges - 1)));,                 if (c != 0) return c;,                 if (plan1.getGroupBy()!=null && plan2.getGroupBy()!=null) {,                     if (plan1.getGroupBy().isOrderPreserving() != plan2.getGroupBy().isOrderPreserving()) {,                         return plan1.getGroupBy().isOrderPreserving() ? -1 : 1;,                     } ,                 },                 // Use smaller table (table with fewest kv columns),                 c = (table1.getColumns().size() - table1.getPKColumns().size()) - (table2.getColumns().size() - table2.getPKColumns().size());,                 if (c != 0) return c;,                 ,                 // If all things are equal, don't choose local index as it forces scan,                 // on every region (unless there's no start/stop key),                 if (table1.getIndexType() == IndexType.LOCAL) {,                     return plan1.getContext().getScanRanges().getRanges().isEmpty() ? -1 : 1;,                 },                 if (table2.getIndexType() == IndexType.LOCAL) {,                     return plan2.getContext().getScanRanges().getRanges().isEmpty() ? 1 : -1;,                 }, ,                 // All things being equal, just use the table based on the Hint.USE_DATA_OVER_INDEX_TABLE,                 if (table1.getType() == PTableType.INDEX) {,                     return comparisonOfDataVersusIndexTable;,                 },                 if (table2.getType() == PTableType.INDEX) {,                     return -comparisonOfDataVersusIndexTable;,                 },                 ,                 return 0;],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/phoenix/parse/ColumnDef.java,<init>,112-112,[                 scale = scale == null ? PDataType.DEFAULT_SCALE : scale > maxLength ? maxLength : scale; ],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/FunctionParseNode.java,create,248-248,[                throw (SQLException) e.getTargetException();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/FunctionParseNode.java,validate,220-220,[                    if (!args[i].getAllowedValues().contains(value.toString().toUpperCase())) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getAllowedTypes,424-424,[            return allowedTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getArgs,327-327,[            return args;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/HintNode.java,<init>,146-146,[                Hint key = Hint.valueOf(hintWord.toUpperCase());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,209-212,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,299-302,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.like(children.get(0),children.get(1),node.isNegate(), node.getLikeType());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,309-312,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.not(children.get(0));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,319-322,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.exists(children.get(0), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,329-332,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.cast(children.get(0), node.getDataType(), node.getMaxLength(), node.getScale());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,339-342,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.inList(children, node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,350-353,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.in(children.get(0), children.get(1), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,361-364,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.isNull(children.get(0), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,371-374,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.comparison(node.getFilterOp(), children.get(0), children.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,382-388,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 if(node.isNegate()) {,                     return NODE_FACTORY.not(NODE_FACTORY.and(children));,                 } else {,                     return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,453-456,[        return leaveCompoundNode(node, l, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.concat(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,219-222,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,498-501,[        return leaveCompoundNode(node, flattenedChildren, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.rowValueConstructor(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,513-516,[	    return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.upsertStmtArrayNode(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,561-564,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.arrayAny(nodes.get(0), (ComparisonParseNode) nodes.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,572-575,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.arrayAll(nodes.get(0), (ComparisonParseNode) nodes.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,583-586,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.elementRef(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,229-232,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.subtract(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,239-242,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.add(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,249-252,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.multiply(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,259-262,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.divide(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,269-272,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.modulus(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,279-282,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.function(node.getName(),children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,289-292,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.caseWhen(children);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLLexer.java,mML_HINT,3487-3487,[					t = input.LA(1);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mCHAR_ESC,3295-3363,[					switch (alt10) {, 						case 1 :, 							// PhoenixSQL.g:1126:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1127:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1128:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1129:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1130:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1131:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1132:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1133:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1134:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1135:11: '%', 							{, 							match('%'); , 							 setText("\\%"); ],,mCHAR_ESC,3232-3376,[			switch (alt11) {, 				case 1 :, 					// PhoenixSQL.g:1125:9: '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					{, 					match('\\'); , 					// PhoenixSQL.g:1126:9: ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					int alt10=10;, 					switch ( input.LA(1) ) {, 					case 'n':, 						{, 						alt10=1;, 						}, 						break;, 					case 'r':, 						{, 						alt10=2;, 						}, 						break;, 					case 't':, 						{, 						alt10=3;, 						}, 						break;, 					case 'b':, 						{, 						alt10=4;, 						}, 						break;, 					case 'f':, 						{, 						alt10=5;, 						}, 						break;, 					case '\"':, 						{, 						alt10=6;, 						}, 						break;, 					case '\'':, 						{, 						alt10=7;, 						}, 						break;, 					case '\\':, 						{, 						alt10=8;, 						}, 						break;, 					case '_':, 						{, 						alt10=9;, 						}, 						break;, 					case '%':, 						{, 						alt10=10;, 						}, 						break;, 					default:, 						NoViableAltException nvae =, 							new NoViableAltException("", 10, 0, input);, 						throw nvae;, 					}, 					switch (alt10) {, 						case 1 :, 							// PhoenixSQL.g:1126:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1127:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1128:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1129:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1130:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1131:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1132:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1133:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1134:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1135:11: '%', 							{, 							match('%'); , 							 setText("\\%"); , 							}, 							break;, , 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1137:9: '\\'\\'', 					{, 					match("''"); , , 					 setText("\'"); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mDECIMAL,2341-2345,[			switch (alt5) {, 				case 1 :, 					// PhoenixSQL.g:966:9: POSINTEGER, 					{, 					mPOSINTEGER(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mSL_COMMENT,3600-3611,[			switch (alt14) {, 				case 1 :, 					// PhoenixSQL.g:1162:8: SL_COMMENT1, 					{, 					mSL_COMMENT1(); , , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1162:22: SL_COMMENT2, 					{, 					mSL_COMMENT2(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mTokens,3704-4625,[		switch (alt16) {, 			case 1 :, 				// PhoenixSQL.g:1:10: ADD, 				{, 				mADD(); , , 				}, 				break;, 			case 2 :, 				// PhoenixSQL.g:1:14: ALL, 				{, 				mALL(); , , 				}, 				break;, 			case 3 :, 				// PhoenixSQL.g:1:18: ALTER, 				{, 				mALTER(); , , 				}, 				break;, 			case 4 :, 				// PhoenixSQL.g:1:24: AND, 				{, 				mAND(); , , 				}, 				break;, 			case 5 :, 				// PhoenixSQL.g:1:28: ANY, 				{, 				mANY(); , , 				}, 				break;, 			case 6 :, 				// PhoenixSQL.g:1:32: ARRAY, 				{, 				mARRAY(); , , 				}, 				break;, 			case 7 :, 				// PhoenixSQL.g:1:38: AS, 				{, 				mAS(); , , 				}, 				break;, 			case 8 :, 				// PhoenixSQL.g:1:41: ASC, 				{, 				mASC(); , , 				}, 				break;, 			case 9 :, 				// PhoenixSQL.g:1:45: BETWEEN, 				{, 				mBETWEEN(); , , 				}, 				break;, 			case 10 :, 				// PhoenixSQL.g:1:53: BY, 				{, 				mBY(); , , 				}, 				break;, 			case 11 :, 				// PhoenixSQL.g:1:56: CACHE, 				{, 				mCACHE(); , , 				}, 				break;, 			case 12 :, 				// PhoenixSQL.g:1:62: CASCADE, 				{, 				mCASCADE(); , , 				}, 				break;, 			case 13 :, 				// PhoenixSQL.g:1:70: CASE, 				{, 				mCASE(); , , 				}, 				break;, 			case 14 :, 				// PhoenixSQL.g:1:75: CAST, 				{, 				mCAST(); , , 				}, 				break;, 			case 15 :, 				// PhoenixSQL.g:1:80: COLUMN, 				{, 				mCOLUMN(); , , 				}, 				break;, 			case 16 :, 				// PhoenixSQL.g:1:87: COLUMNS, 				{, 				mCOLUMNS(); , , 				}, 				break;, 			case 17 :, 				// PhoenixSQL.g:1:95: CONSTRAINT, 				{, 				mCONSTRAINT(); , , 				}, 				break;, 			case 18 :, 				// PhoenixSQL.g:1:106: CREATE, 				{, 				mCREATE(); , , 				}, 				break;, 			case 19 :, 				// PhoenixSQL.g:1:113: CURRENT, 				{, 				mCURRENT(); , , 				}, 				break;, 			case 20 :, 				// PhoenixSQL.g:1:121: CYCLE, 				{, 				mCYCLE(); , , 				}, 				break;, 			case 21 :, 				// PhoenixSQL.g:1:127: DELETE, 				{, 				mDELETE(); , , 				}, 				break;, 			case 22 :, 				// PhoenixSQL.g:1:134: DESC, 				{, 				mDESC(); , , 				}, 				break;, 			case 23 :, 				// PhoenixSQL.g:1:139: DISABLE, 				{, 				mDISABLE(); , , 				}, 				break;, 			case 24 :, 				// PhoenixSQL.g:1:147: DISTINCT, 				{, 				mDISTINCT(); , , 				}, 				break;, 			case 25 :, 				// PhoenixSQL.g:1:156: DROP, 				{, 				mDROP(); , , 				}, 				break;, 			case 26 :, 				// PhoenixSQL.g:1:161: ELSE, 				{, 				mELSE(); , , 				}, 				break;, 			case 27 :, 				// PhoenixSQL.g:1:166: END, 				{, 				mEND(); , , 				}, 				break;, 			case 28 :, 				// PhoenixSQL.g:1:170: EXISTS, 				{, 				mEXISTS(); , , 				}, 				break;, 			case 29 :, 				// PhoenixSQL.g:1:177: EXPLAIN, 				{, 				mEXPLAIN(); , , 				}, 				break;, 			case 30 :, 				// PhoenixSQL.g:1:185: FALSE, 				{, 				mFALSE(); , , 				}, 				break;, 			case 31 :, 				// PhoenixSQL.g:1:191: FIRST, 				{, 				mFIRST(); , , 				}, 				break;, 			case 32 :, 				// PhoenixSQL.g:1:197: FOR, 				{, 				mFOR(); , , 				}, 				break;, 			case 33 :, 				// PhoenixSQL.g:1:201: FROM, 				{, 				mFROM(); , , 				}, 				break;, 			case 34 :, 				// PhoenixSQL.g:1:206: FULL, 				{, 				mFULL(); , , 				}, 				break;, 			case 35 :, 				// PhoenixSQL.g:1:211: GROUP, 				{, 				mGROUP(); , , 				}, 				break;, 			case 36 :, 				// PhoenixSQL.g:1:217: HAVING, 				{, 				mHAVING(); , , 				}, 				break;, 			case 37 :, 				// PhoenixSQL.g:1:224: IF, 				{, 				mIF(); , , 				}, 				break;, 			case 38 :, 				// PhoenixSQL.g:1:227: ILIKE, 				{, 				mILIKE(); , , 				}, 				break;, 			case 39 :, 				// PhoenixSQL.g:1:233: IN, 				{, 				mIN(); , , 				}, 				break;, 			case 40 :, 				// PhoenixSQL.g:1:236: INCLUDE, 				{, 				mINCLUDE(); , , 				}, 				break;, 			case 41 :, 				// PhoenixSQL.g:1:244: INCREMENT, 				{, 				mINCREMENT(); , , 				}, 				break;, 			case 42 :, 				// PhoenixSQL.g:1:254: INDEX, 				{, 				mINDEX(); , , 				}, 				break;, 			case 43 :, 				// PhoenixSQL.g:1:260: INNER, 				{, 				mINNER(); , , 				}, 				break;, 			case 44 :, 				// PhoenixSQL.g:1:266: INTO, 				{, 				mINTO(); , , 				}, 				break;, 			case 45 :, 				// PhoenixSQL.g:1:271: IS, 				{, 				mIS(); , , 				}, 				break;, 			case 46 :, 				// PhoenixSQL.g:1:274: JOIN, 				{, 				mJOIN(); , , 				}, 				break;, 			case 47 :, 				// PhoenixSQL.g:1:279: KEY, 				{, 				mKEY(); , , 				}, 				break;, 			case 48 :, 				// PhoenixSQL.g:1:283: LAST, 				{, 				mLAST(); , , 				}, 				break;, 			case 49 :, 				// PhoenixSQL.g:1:288: LEFT, 				{, 				mLEFT(); , , 				}, 				break;, 			case 50 :, 				// PhoenixSQL.g:1:293: LIKE, 				{, 				mLIKE(); , , 				}, 				break;, 			case 51 :, 				// PhoenixSQL.g:1:298: LIMIT, 				{, 				mLIMIT(); , , 				}, 				break;, 			case 52 :, 				// PhoenixSQL.g:1:304: LOCAL, 				{, 				mLOCAL(); , , 				}, 				break;, 			case 53 :, 				// PhoenixSQL.g:1:310: MAXVALUE, 				{, 				mMAXVALUE(); , , 				}, 				break;, 			case 54 :, 				// PhoenixSQL.g:1:319: MINVALUE, 				{, 				mMINVALUE(); , , 				}, 				break;, 			case 55 :, 				// PhoenixSQL.g:1:328: NEXT, 				{, 				mNEXT(); , , 				}, 				break;, 			case 56 :, 				// PhoenixSQL.g:1:333: NOT, 				{, 				mNOT(); , , 				}, 				break;, 			case 57 :, 				// PhoenixSQL.g:1:337: NULL, 				{, 				mNULL(); , , 				}, 				break;, 			case 58 :, 				// PhoenixSQL.g:1:342: NULLS, 				{, 				mNULLS(); , , 				}, 				break;, 			case 59 :, 				// PhoenixSQL.g:1:348: ON, 				{, 				mON(); , , 				}, 				break;, 			case 60 :, 				// PhoenixSQL.g:1:351: OR, 				{, 				mOR(); , , 				}, 				break;, 			case 61 :, 				// PhoenixSQL.g:1:354: ORDER, 				{, 				mORDER(); , , 				}, 				break;, 			case 62 :, 				// PhoenixSQL.g:1:360: OUTER, 				{, 				mOUTER(); , , 				}, 				break;, 			case 63 :, 				// PhoenixSQL.g:1:366: PRIMARY, 				{, 				mPRIMARY(); , , 				}, 				break;, 			case 64 :, 				// PhoenixSQL.g:1:374: REBUILD, 				{, 				mREBUILD(); , , 				}, 				break;, 			case 65 :, 				// PhoenixSQL.g:1:382: RIGHT, 				{, 				mRIGHT(); , , 				}, 				break;, 			case 66 :, 				// PhoenixSQL.g:1:388: SELECT, 				{, 				mSELECT(); , , 				}, 				break;, 			case 67 :, 				// PhoenixSQL.g:1:395: SEQUENCE, 				{, 				mSEQUENCE(); , , 				}, 				break;, 			case 68 :, 				// PhoenixSQL.g:1:404: SET, 				{, 				mSET(); , , 				}, 				break;, 			case 69 :, 				// PhoenixSQL.g:1:408: SOME, 				{, 				mSOME(); , , 				}, 				break;, 			case 70 :, 				// PhoenixSQL.g:1:413: SPLIT, 				{, 				mSPLIT(); , , 				}, 				break;, 			case 71 :, 				// PhoenixSQL.g:1:419: START, 				{, 				mSTART(); , , 				}, 				break;, 			case 72 :, 				// PhoenixSQL.g:1:425: STATISTICS, 				{, 				mSTATISTICS(); , , 				}, 				break;, 			case 73 :, 				// PhoenixSQL.g:1:436: TABLE, 				{, 				mTABLE(); , , 				}, 				break;, 			case 74 :, 				// PhoenixSQL.g:1:442: TABLES, 				{, 				mTABLES(); , , 				}, 				break;, 			case 75 :, 				// PhoenixSQL.g:1:449: THEN, 				{, 				mTHEN(); , , 				}, 				break;, 			case 76 :, 				// PhoenixSQL.g:1:454: TRUE, 				{, 				mTRUE(); , , 				}, 				break;, 			case 77 :, 				// PhoenixSQL.g:1:459: UNUSABLE, 				{, 				mUNUSABLE(); , , 				}, 				break;, 			case 78 :, 				// PhoenixSQL.g:1:468: UPDATE, 				{, 				mUPDATE(); , , 				}, 				break;, 			case 79 :, 				// PhoenixSQL.g:1:475: UPSERT, 				{, 				mUPSERT(); , , 				}, 				break;, 			case 80 :, 				// PhoenixSQL.g:1:482: USABLE, 				{, 				mUSABLE(); , , 				}, 				break;, 			case 81 :, 				// PhoenixSQL.g:1:489: VALUE, 				{, 				mVALUE(); , , 				}, 				break;, 			case 82 :, 				// PhoenixSQL.g:1:495: VALUES, 				{, 				mVALUES(); , , 				}, 				break;, 			case 83 :, 				// PhoenixSQL.g:1:502: VIEW, 				{, 				mVIEW(); , , 				}, 				break;, 			case 84 :, 				// PhoenixSQL.g:1:507: WHEN, 				{, 				mWHEN(); , , 				}, 				break;, 			case 85 :, 				// PhoenixSQL.g:1:512: WHERE, 				{, 				mWHERE(); , , 				}, 				break;, 			case 86 :, 				// PhoenixSQL.g:1:518: WITH, 				{, 				mWITH(); , , 				}, 				break;, 			case 87 :, 				// PhoenixSQL.g:1:523: WITHIN, 				{, 				mWITHIN(); , , 				}, 				break;, 			case 88 :, 				// PhoenixSQL.g:1:530: HINT_START, 				{, 				mHINT_START(); , , 				}, 				break;, 			case 89 :, 				// PhoenixSQL.g:1:541: COMMENT_START, 				{, 				mCOMMENT_START(); , , 				}, 				break;, 			case 90 :, 				// PhoenixSQL.g:1:555: COMMENT_AND_HINT_END, 				{, 				mCOMMENT_AND_HINT_END(); , , 				}, 				break;, 			case 91 :, 				// PhoenixSQL.g:1:576: SL_COMMENT1, 				{, 				mSL_COMMENT1(); , , 				}, 				break;, 			case 92 :, 				// PhoenixSQL.g:1:588: SL_COMMENT2, 				{, 				mSL_COMMENT2(); , , 				}, 				break;, 			case 93 :, 				// PhoenixSQL.g:1:600: BIND_NAME, 				{, 				mBIND_NAME(); , , 				}, 				break;, 			case 94 :, 				// PhoenixSQL.g:1:610: NAME, 				{, 				mNAME(); , , 				}, 				break;, 			case 95 :, 				// PhoenixSQL.g:1:615: NUMBER, 				{, 				mNUMBER(); , , 				}, 				break;, 			case 96 :, 				// PhoenixSQL.g:1:622: LONG, 				{, 				mLONG(); , , 				}, 				break;, 			case 97 :, 				// PhoenixSQL.g:1:627: DECIMAL, 				{, 				mDECIMAL(); , , 				}, 				break;, 			case 98 :, 				// PhoenixSQL.g:1:635: DOUBLE, 				{, 				mDOUBLE(); , , 				}, 				break;, 			case 99 :, 				// PhoenixSQL.g:1:642: DOUBLE_QUOTE, 				{, 				mDOUBLE_QUOTE(); , , 				}, 				break;, 			case 100 :, 				// PhoenixSQL.g:1:655: EQ, 				{, 				mEQ(); , , 				}, 				break;, 			case 101 :, 				// PhoenixSQL.g:1:658: LT, 				{, 				mLT(); , , 				}, 				break;, 			case 102 :, 				// PhoenixSQL.g:1:661: GT, 				{, 				mGT(); , , 				}, 				break;, 			case 103 :, 				// PhoenixSQL.g:1:664: DOUBLE_EQ, 				{, 				mDOUBLE_EQ(); , , 				}, 				break;, 			case 104 :, 				// PhoenixSQL.g:1:674: NOEQ1, 				{, 				mNOEQ1(); , , 				}, 				break;, 			case 105 :, 				// PhoenixSQL.g:1:680: NOEQ2, 				{, 				mNOEQ2(); , , 				}, 				break;, 			case 106 :, 				// PhoenixSQL.g:1:686: CONCAT, 				{, 				mCONCAT(); , , 				}, 				break;, 			case 107 :, 				// PhoenixSQL.g:1:693: COMMA, 				{, 				mCOMMA(); , , 				}, 				break;, 			case 108 :, 				// PhoenixSQL.g:1:699: LPAREN, 				{, 				mLPAREN(); , , 				}, 				break;, 			case 109 :, 				// PhoenixSQL.g:1:706: RPAREN, 				{, 				mRPAREN(); , , 				}, 				break;, 			case 110 :, 				// PhoenixSQL.g:1:713: SEMICOLON, 				{, 				mSEMICOLON(); , , 				}, 				break;, 			case 111 :, 				// PhoenixSQL.g:1:723: COLON, 				{, 				mCOLON(); , , 				}, 				break;, 			case 112 :, 				// PhoenixSQL.g:1:729: QUESTION, 				{, 				mQUESTION(); , , 				}, 				break;, 			case 113 :, 				// PhoenixSQL.g:1:738: LSQUARE, 				{, 				mLSQUARE(); , , 				}, 				break;, 			case 114 :, 				// PhoenixSQL.g:1:746: RSQUARE, 				{, 				mRSQUARE(); , , 				}, 				break;, 			case 115 :, 				// PhoenixSQL.g:1:754: LCURLY, 				{, 				mLCURLY(); , , 				}, 				break;, 			case 116 :, 				// PhoenixSQL.g:1:761: RCURLY, 				{, 				mRCURLY(); , , 				}, 				break;, 			case 117 :, 				// PhoenixSQL.g:1:768: AT, 				{, 				mAT(); , , 				}, 				break;, 			case 118 :, 				// PhoenixSQL.g:1:771: TILDE, 				{, 				mTILDE(); , , 				}, 				break;, 			case 119 :, 				// PhoenixSQL.g:1:777: PLUS, 				{, 				mPLUS(); , , 				}, 				break;, 			case 120 :, 				// PhoenixSQL.g:1:782: MINUS, 				{, 				mMINUS(); , , 				}, 				break;, 			case 121 :, 				// PhoenixSQL.g:1:788: ASTERISK, 				{, 				mASTERISK(); , , 				}, 				break;, 			case 122 :, 				// PhoenixSQL.g:1:797: DIVIDE, 				{, 				mDIVIDE(); , , 				}, 				break;, 			case 123 :, 				// PhoenixSQL.g:1:804: PERCENT, 				{, 				mPERCENT(); , , 				}, 				break;, 			case 124 :, 				// PhoenixSQL.g:1:812: OUTER_JOIN, 				{, 				mOUTER_JOIN(); , , 				}, 				break;, 			case 125 :, 				// PhoenixSQL.g:1:823: STRING_LITERAL, 				{, 				mSTRING_LITERAL(); , , 				}, 				break;, 			case 126 :, 				// PhoenixSQL.g:1:838: WS, 				{, 				mWS(); , , 				}, 				break;, 			case 127 :, 				// PhoenixSQL.g:1:841: EOL, 				{, 				mEOL(); , , 				}, 				break;, 			case 128 :, 				// PhoenixSQL.g:1:845: ML_HINT, 				{, 				mML_HINT(); , , 				}, 				break;, 			case 129 :, 				// PhoenixSQL.g:1:853: ML_COMMENT, 				{, 				mML_COMMENT(); , , 				}, 				break;, 			case 130 :, 				// PhoenixSQL.g:1:864: SL_COMMENT, 				{, 				mSL_COMMENT(); , , 				}, 				break;, 			case 131 :, 				// PhoenixSQL.g:1:875: DOT, 				{, 				mDOT(); , , 				}, 				break;, 			case 132 :, 				// PhoenixSQL.g:1:879: OTHER, 				{, 				mOTHER(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/parse/PhoenixSQLLexer.java,,5276-5406,[		public DFA16(BaseRecognizer recognizer) {, 			this.recognizer = recognizer;, 			this.decisionNumber = 16;, 			this.eot = DFA16_eot;, 			this.eof = DFA16_eof;, 			this.min = DFA16_min;, 			this.max = DFA16_max;, 			this.accept = DFA16_accept;, 			this.special = DFA16_special;, 			this.transition = DFA16_transition;, 		}, 		@Override, 		public String getDescription() {, 			return "1:1: Tokens : ( ADD | ALL | ALTER | AND | ANY | ARRAY | AS | ASC | BETWEEN | BY | CACHE | CASCADE | CASE | CAST | COLUMN | COLUMNS | CONSTRAINT | CREATE | CURRENT | CYCLE | DELETE | DESC | DISABLE | DISTINCT | DROP | ELSE | END | EXISTS | EXPLAIN | FALSE | FIRST | FOR | FROM | FULL | GROUP | HAVING | IF | ILIKE | IN | INCLUDE | INCREMENT | INDEX | INNER | INTO | IS | JOIN | KEY | LAST | LEFT | LIKE | LIMIT | LOCAL | MAXVALUE | MINVALUE | NEXT | NOT | NULL | NULLS | ON | OR | ORDER | OUTER | PRIMARY | REBUILD | RIGHT | SELECT | SEQUENCE | SET | SOME | SPLIT | START | STATISTICS | TABLE | TABLES | THEN | TRUE | UNUSABLE | UPDATE | UPSERT | USABLE | VALUE | VALUES | VIEW | WHEN | WHERE | WITH | WITHIN | HINT_START | COMMENT_START | COMMENT_AND_HINT_END | SL_COMMENT1 | SL_COMMENT2 | BIND_NAME | NAME | NUMBER | LONG | DECIMAL | DOUBLE | DOUBLE_QUOTE | EQ | LT | GT | DOUBLE_EQ | NOEQ1 | NOEQ2 | CONCAT | COMMA | LPAREN | RPAREN | SEMICOLON | COLON | QUESTION | LSQUARE | RSQUARE | LCURLY | RCURLY | AT | TILDE | PLUS | MINUS | ASTERISK | DIVIDE | PERCENT | OUTER_JOIN | STRING_LITERAL | WS | EOL | ML_HINT | ML_COMMENT | SL_COMMENT | DOT | OTHER );";, 		}, 		@Override, 		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {, 			IntStream input = _input;, 			int _s = s;, 			switch ( s ) {, 					case 0 : , 						int LA16_115 = input.LA(1);, 						s = -1;, 						if ( ((LA16_115 >= '\u0000' && LA16_115 <= '\uFFFF')) ) {s = 234;}, 						else s = 233;, 						if ( s>=0 ) return s;, 						break;, , 					case 1 : , 						int LA16_119 = input.LA(1);, 						s = -1;, 						if ( ((LA16_119 >= '\u0000' && LA16_119 <= '\uFFFF')) ) {s = 234;}, 						else s = 235;, 						if ( s>=0 ) return s;, 						break;, , 					case 2 : , 						int LA16_230 = input.LA(1);, 						s = -1;, 						if ( ((LA16_230 >= '\u0000' && LA16_230 <= '\uFFFF')) ) {s = 314;}, 						else s = 313;, 						if ( s>=0 ) return s;, 						break;, , 					case 3 : , 						int LA16_114 = input.LA(1);, 						s = -1;, 						if ( (LA16_114=='+') ) {s = 230;}, 						else if ( ((LA16_114 >= '\u0000' && LA16_114 <= '*')||(LA16_114 >= ',' && LA16_114 <= '\uFFFF')) ) {s = 232;}, 						else s = 231;, 						if ( s>=0 ) return s;, 						break;, , 					case 4 : , 						int LA16_28 = input.LA(1);, 						s = -1;, 						if ( ((LA16_28 >= '\u0000' && LA16_28 <= '\uFFFF')) ) {s = 58;}, 						else s = 123;, 						if ( s>=0 ) return s;, 						break;, , 					case 5 : , 						int LA16_49 = input.LA(1);, 						s = -1;, 						if ( ((LA16_49 >= '\u0000' && LA16_49 <= '\uFFFF')) ) {s = 151;}, 						else s = 52;, 						if ( s>=0 ) return s;, 						break;, , 					case 6 : , 						int LA16_0 = input.LA(1);, 						s = -1;, 						if ( (LA16_0=='a') ) {s = 1;}, 						else if ( (LA16_0=='b') ) {s = 2;}, 						else if ( (LA16_0=='c') ) {s = 3;}, 						else if ( (LA16_0=='d') ) {s = 4;}, 						else if ( (LA16_0=='e') ) {s = 5;}, 						else if ( (LA16_0=='f') ) {s = 6;}, 						else if ( (LA16_0=='g') ) {s = 7;}, 						else if ( (LA16_0=='h') ) {s = 8;}, 						else if ( (LA16_0=='i') ) {s = 9;}, 						else if ( (LA16_0=='j') ) {s = 10;}, 						else if ( (LA16_0=='k') ) {s = 11;}, 						else if ( (LA16_0=='l') ) {s = 12;}, 						else if ( (LA16_0=='m') ) {s = 13;}, 						else if ( (LA16_0=='n') ) {s = 14;}, 						else if ( (LA16_0=='o') ) {s = 15;}, 						else if ( (LA16_0=='p') ) {s = 16;}, 						else if ( (LA16_0=='r') ) {s = 17;}, 						else if ( (LA16_0=='s') ) {s = 18;}, 						else if ( (LA16_0=='t') ) {s = 19;}, 						else if ( (LA16_0=='u') ) {s = 20;}, 						else if ( (LA16_0=='v') ) {s = 21;}, 						else if ( (LA16_0=='w') ) {s = 22;}, 						else if ( (LA16_0=='/') ) {s = 23;}, 						else if ( (LA16_0=='*') ) {s = 24;}, 						else if ( (LA16_0=='-') ) {s = 25;}, 						else if ( (LA16_0==':') ) {s = 26;}, 						else if ( ((LA16_0 >= 'A' && LA16_0 <= 'Z')||LA16_0=='q'||(LA16_0 >= 'x' && LA16_0 <= 'z')) ) {s = 27;}, 						else if ( (LA16_0=='\"') ) {s = 28;}, 						else if ( ((LA16_0 >= '0' && LA16_0 <= '9')) ) {s = 29;}, 						else if ( (LA16_0=='.') ) {s = 30;}, 						else if ( (LA16_0=='=') ) {s = 31;}, 						else if ( (LA16_0=='<') ) {s = 32;}, 						else if ( (LA16_0=='>') ) {s = 33;}, 						else if ( (LA16_0=='!') ) {s = 34;}, 						else if ( (LA16_0=='|') ) {s = 35;}, 						else if ( (LA16_0==',') ) {s = 36;}, 						else if ( (LA16_0=='(') ) {s = 37;}, 						else if ( (LA16_0==')') ) {s = 38;}, 						else if ( (LA16_0==';') ) {s = 39;}, 						else if ( (LA16_0=='?') ) {s = 40;}, 						else if ( (LA16_0=='[') ) {s = 41;}, 						else if ( (LA16_0==']') ) {s = 42;}, 						else if ( (LA16_0=='{') ) {s = 43;}, 						else if ( (LA16_0=='}') ) {s = 44;}, 						else if ( (LA16_0=='@') ) {s = 45;}, 						else if ( (LA16_0=='~') ) {s = 46;}, 						else if ( (LA16_0=='+') ) {s = 47;}, 						else if ( (LA16_0=='%') ) {s = 48;}, 						else if ( (LA16_0=='\'') ) {s = 49;}, 						else if ( (LA16_0=='\t'||LA16_0==' ') ) {s = 50;}, 						else if ( (LA16_0=='\n'||LA16_0=='\r') ) {s = 51;}, 						else if ( ((LA16_0 >= '\u0000' && LA16_0 <= '\b')||(LA16_0 >= '\u000B' && LA16_0 <= '\f')||(LA16_0 >= '\u000E' && LA16_0 <= '\u001F')||(LA16_0 >= '#' && LA16_0 <= '$')||LA16_0=='&'||LA16_0=='\\'||(LA16_0 >= '^' && LA16_0 <= '`')||(LA16_0 >= '\u007F' && LA16_0 <= '\uFFFF')) ) {s = 52;}, 						if ( s>=0 ) return s;, 						break;, 			}, 			NoViableAltException nvae =, 				new NoViableAltException(getDescription(), 16, _s, input);, 			error(nvae);, 			throw nvae;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7270-7270,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5512); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7401-7401,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term5654); if (state.failed) return ret;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/PhoenixSQLParser.java,getTokenNames,252-252,[	@Override public String[] getTokenNames() { return PhoenixSQLParser.tokenNames; }],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/parse/PhoenixSQLParser.java,,74-74,[	public static final String[] tokenNames = new String[] {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,add_expression,6681-6681,[			if (state.failed) return ret;],,add_expression,6696-6696,[					match(input,PLUS,FOLLOW_PLUS_in_add_expression5204); if (state.failed) return ret;],,add_expression,6700-6700,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_index_node,2541-2541,[			match(input,ALTER,FOLLOW_ALTER_in_alter_index_node2437); if (state.failed) return ret;],,alter_index_node,2542-2542,[			match(input,INDEX,FOLLOW_INDEX_in_alter_index_node2439); if (state.failed) return ret;],,alter_index_node,2553-2553,[					match(input,IF,FOLLOW_IF_in_alter_index_node2442); if (state.failed) return ret;],,alter_index_node,2563-2563,[			if (state.failed) return ret;],,alter_index_node,2554-2554,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_index_node2446); if (state.failed) return ret;],,alter_index_node,2564-2564,[			match(input,ON,FOLLOW_ON_in_alter_index_node2454); if (state.failed) return ret;],,alter_index_node,2568-2568,[			if (state.failed) return ret;],,alter_index_node,2576-2576,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_table_node,2615-2615,[			match(input,ALTER,FOLLOW_ALTER_in_alter_table_node2508); if (state.failed) return ret;],,alter_table_node,2627-2627,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,2637-2637,[					match(input,TABLE,FOLLOW_TABLE_in_alter_table_node2511); if (state.failed) return ret;],,alter_table_node,2643-2643,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_alter_table_node2517); if (state.failed) return ret;],,alter_table_node,2652-2652,[			if (state.failed) return ret;],,alter_table_node,2672-2672,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,2684-2684,[					match(input,DROP,FOLLOW_DROP_in_alter_table_node2535); if (state.failed) return ret;],,alter_table_node,2717-2717,[					match(input,ADD,FOLLOW_ADD_in_alter_table_node2556); if (state.failed) return ret;],,alter_table_node,2774-2774,[					match(input,SET,FOLLOW_SET_in_alter_table_node2586); if (state.failed) return ret;],,alter_table_node,2685-2685,[					match(input,COLUMN,FOLLOW_COLUMN_in_alter_table_node2537); if (state.failed) return ret;],,alter_table_node,2728-2728,[							match(input,IF,FOLLOW_IF_in_alter_table_node2559); if (state.failed) return ret;],,alter_table_node,2781-2781,[					if (state.failed) return ret;],,alter_table_node,2696-2696,[							match(input,IF,FOLLOW_IF_in_alter_table_node2540); if (state.failed) return ret;],,alter_table_node,2729-2729,[							match(input,NOT,FOLLOW_NOT_in_alter_table_node2561); if (state.failed) return ret;],,alter_table_node,2742-2742,[					if (state.failed) return ret;],,alter_table_node,2706-2706,[					if (state.failed) return ret;],,alter_table_node,2697-2697,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node2544); if (state.failed) return ret;],,alter_table_node,2730-2730,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node2565); if (state.failed) return ret;],,alter_table_node,2758-2758,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,and_expression,5562-5562,[			if (state.failed) return ret;],,and_expression,5577-5577,[					match(input,AND,FOLLOW_AND_in_and_expression4460); if (state.failed) return ret;],,and_expression,5581-5581,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,array_expression,7002-7002,[			if (state.failed) return ret;],,array_expression,7013-7013,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_array_expression5445); if (state.failed) return ret;],,array_expression,7017-7017,[					if (state.failed) return ret;],,array_expression,7018-7018,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_array_expression5451); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_expression,6612-6612,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,8396-8396,[				if (state.backtracking>0) {state.failed=true; return ret;}],,bind_name,8413-8413,[					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name6373); if (state.failed) return ret;],,bind_name,8406-8406,[					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name6360); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,6570-6570,[					match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression5101); if (state.failed) return ret;],,boolean_expression,6571-6571,[					match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5103); if (state.failed) return ret;],,boolean_expression,5959-5959,[					if (state.failed) return ret;],,boolean_expression,5946-5946,[				if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6018-6018,[						if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6315-6315,[							match(input,IS,FOLLOW_IS_in_boolean_expression4725); if (state.failed) return ret;],,boolean_expression,6575-6575,[					if (state.failed) return ret;],,boolean_expression,6576-6576,[					match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5109); if (state.failed) return ret;],,boolean_expression,6033-6033,[							if (state.failed) return ret;],,boolean_expression,6354-6354,[									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4763); if (state.failed) return ret;],,boolean_expression,6384-6384,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6332-6332,[							match(input,NULL,FOLLOW_NULL_in_boolean_expression4732); if (state.failed) return ret;],,boolean_expression,6396-6396,[									match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4768); if (state.failed) return ret;],,boolean_expression,6412-6412,[									match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression4810); if (state.failed) return ret;],,boolean_expression,6428-6428,[									match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4852); if (state.failed) return ret;],,boolean_expression,6452-6452,[									match(input,IN,FOLLOW_IN_in_boolean_expression4901); if (state.failed) return ret;],,boolean_expression,6326-6326,[									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4729); if (state.failed) return ret;],,boolean_expression,6172-6172,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6193-6193,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4640); if (state.failed) return ret;],,boolean_expression,6113-6113,[									if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6157-6157,[									if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6512-6512,[											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4948); if (state.failed) return ret;],,boolean_expression,6529-6529,[											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4995); if (state.failed) return ret;],,boolean_expression,6484-6484,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6220-6220,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6269-6269,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6400-6400,[									if (state.failed) return ret;],,boolean_expression,6416-6416,[									if (state.failed) return ret;],,boolean_expression,6432-6432,[									if (state.failed) return ret;],,boolean_expression,6242-6242,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4664); if (state.failed) return ret;],,boolean_expression,6291-6291,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4689); if (state.failed) return ret;],,boolean_expression,6184-6184,[									if (state.failed) return ret;],,boolean_expression,6230-6230,[											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4655); if (state.failed) return ret;],,boolean_expression,6236-6236,[											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4661); if (state.failed) return ret;],,boolean_expression,6279-6279,[											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4680); if (state.failed) return ret;],,boolean_expression,6285-6285,[											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4686); if (state.failed) return ret;],,boolean_expression,6433-6433,[									match(input,AND,FOLLOW_AND_in_boolean_expression4858); if (state.failed) return ret;],,boolean_expression,6500-6500,[											if (state.failed) return ret;],,boolean_expression,6197-6197,[									if (state.failed) return ret;],,boolean_expression,6516-6516,[											if (state.failed) return ret;],,boolean_expression,6533-6533,[											if (state.failed) return ret;],,boolean_expression,6198-6198,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4646); if (state.failed) return ret;],,boolean_expression,6246-6246,[									if (state.failed) return ret;],,boolean_expression,6295-6295,[									if (state.failed) return ret;],,boolean_expression,6069-6069,[									if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6096-6096,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6140-6140,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6517-6517,[											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4954); if (state.failed) return ret;],,boolean_expression,6534-6534,[											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5001); if (state.failed) return ret;],,boolean_expression,6437-6437,[									if (state.failed) return ret;],,boolean_expression,6247-6247,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4670); if (state.failed) return ret;],,boolean_expression,6296-6296,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4695); if (state.failed) return ret;],,boolean_expression,6469-6469,[											if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,8541-8541,[				if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8551-8551,[					match(input,CASE,FOLLOW_CASE_in_case_statement6456); if (state.failed) return ret;],,case_statement,8621-8621,[					match(input,CASE,FOLLOW_CASE_in_case_statement6500); if (state.failed) return ret;],,case_statement,8636-8636,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement6503); if (state.failed) return ret;],,case_statement,8555-8555,[					if (state.failed) return ret;],,case_statement,8652-8652,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8526-8526,[					if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8669-8669,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement6520); if (state.failed) return ret;],,case_statement,8680-8680,[					match(input,END,FOLLOW_END_in_case_statement6530); if (state.failed) return ret;],,case_statement,8570-8570,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement6463); if (state.failed) return ret;],,case_statement,8640-8640,[							if (state.failed) return ret;],,case_statement,8586-8586,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8641-8641,[							match(input,THEN,FOLLOW_THEN_in_case_statement6509); if (state.failed) return ret;],,case_statement,8603-8603,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement6480); if (state.failed) return ret;],,case_statement,8614-8614,[					match(input,END,FOLLOW_END_in_case_statement6490); if (state.failed) return ret;],,case_statement,8673-8673,[							if (state.failed) return ret;],,case_statement,8574-8574,[							if (state.failed) return ret;],,case_statement,8575-8575,[							match(input,THEN,FOLLOW_THEN_in_case_statement6469); if (state.failed) return ret;],,case_statement,8645-8645,[							if (state.failed) return ret;],,case_statement,8607-8607,[							if (state.failed) return ret;],,case_statement,8579-8579,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_def_name_with_sort_order,1975-1975,[			if (state.failed) return ret;],,col_def_name_with_sort_order,1989-1989,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_def_name_with_sort_order2067); if (state.failed) return ret;],,col_def_name_with_sort_order,1995-1995,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_def_name_with_sort_order2071); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_name_with_sort_order,1819-1819,[			if (state.failed) return ret;],,col_name_with_sort_order,1833-1833,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_name_with_sort_order1962); if (state.failed) return ret;],,col_name_with_sort_order,1839-1839,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_name_with_sort_order1966); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_def,3085-3085,[			if (state.failed) return ret;],,column_def,3089-3089,[			if (state.failed) return ret;],,column_def,3100-3100,[					match(input,LPAREN,FOLLOW_LPAREN_in_column_def2812); if (state.failed) return ret;],,column_def,3135-3135,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_column_def2833); if (state.failed) return ret;],,column_def,3101-3101,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2816); if (state.failed) return ret;],,column_def,3151-3151,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_column_def2839); if (state.failed) return ret;],,column_def,3112-3112,[							match(input,COMMA,FOLLOW_COMMA_in_column_def2819); if (state.failed) return ret;],,column_def,3119-3119,[					match(input,RPAREN,FOLLOW_RPAREN_in_column_def2827); if (state.failed) return ret;],,column_def,3194-3194,[							nn=(Token)match(input,NOT,FOLLOW_NOT_in_column_def2855); if (state.failed) return ret;],,column_def,3200-3200,[					n=(Token)match(input,NULL,FOLLOW_NULL_in_column_def2860); if (state.failed) return ret;],,column_def,3216-3216,[					pk=(Token)match(input,PRIMARY,FOLLOW_PRIMARY_in_column_def2867); if (state.failed) return ret;],,column_def,3168-3168,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_column_def2848); if (state.failed) return ret;],,column_def,3162-3162,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2844); if (state.failed) return ret;],,column_def,3113-3113,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2823); if (state.failed) return ret;],,column_def,3217-3217,[					match(input,KEY,FOLLOW_KEY_in_column_def2869); if (state.failed) return ret;],,column_def,3231-3231,[							order=(Token)match(input,ASC,FOLLOW_ASC_in_column_def2874); if (state.failed) return ret;],,column_def,3237-3237,[							order=(Token)match(input,DESC,FOLLOW_DESC_in_column_def2878); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2251-2251,[				if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2236-2236,[					if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2264-2264,[					if (state.failed) return ret;],,column_name,2274-2274,[					if (state.failed) return ret;],,column_name,2275-2275,[					match(input,DOT,FOLLOW_DOT_in_column_name2249); if (state.failed) return ret;],,column_name,2279-2279,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,comparison_op,5841-5841,[				if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,5850-5850,[					match(input,EQ,FOLLOW_EQ_in_comparison_op4554); if (state.failed) return ret;],,comparison_op,5857-5857,[					match(input,LT,FOLLOW_LT_in_comparison_op4561); if (state.failed) return ret;],,comparison_op,5864-5864,[					match(input,GT,FOLLOW_GT_in_comparison_op4568); if (state.failed) return ret;],,comparison_op,5871-5871,[					match(input,LT,FOLLOW_LT_in_comparison_op4575); if (state.failed) return ret;],,comparison_op,5879-5879,[					match(input,GT,FOLLOW_GT_in_comparison_op4584); if (state.failed) return ret;],,comparison_op,5893-5893,[						if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,5872-5872,[					match(input,EQ,FOLLOW_EQ_in_comparison_op4577); if (state.failed) return ret;],,comparison_op,5880-5880,[					match(input,EQ,FOLLOW_EQ_in_comparison_op4586); if (state.failed) return ret;],,comparison_op,5820-5820,[					if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,5795-5795,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,concat_expression,6807-6807,[			if (state.failed) return ret;],,concat_expression,6822-6822,[					match(input,CONCAT,FOLLOW_CONCAT_in_concat_expression5292); if (state.failed) return ret;],,concat_expression,6826-6826,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_index_node,1212-1212,[			match(input,CREATE,FOLLOW_CREATE_in_create_index_node1495); if (state.failed) return ret;],,create_index_node,1229-1229,[			match(input,INDEX,FOLLOW_INDEX_in_create_index_node1502); if (state.failed) return ret;],,create_index_node,1223-1223,[					l=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_create_index_node1499); if (state.failed) return ret;],,create_index_node,1240-1240,[					match(input,IF,FOLLOW_IF_in_create_index_node1505); if (state.failed) return ret;],,create_index_node,1241-1241,[					match(input,NOT,FOLLOW_NOT_in_create_index_node1507); if (state.failed) return ret;],,create_index_node,1251-1251,[			if (state.failed) return ret;],,create_index_node,1252-1252,[			match(input,ON,FOLLOW_ON_in_create_index_node1519); if (state.failed) return ret;],,create_index_node,1242-1242,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_index_node1511); if (state.failed) return ret;],,create_index_node,1256-1256,[			if (state.failed) return ret;],,create_index_node,1260-1260,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1534); if (state.failed) return ret;],,create_index_node,1264-1264,[			if (state.failed) return ret;],,create_index_node,1265-1265,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1540); if (state.failed) return ret;],,create_index_node,1278-1278,[					match(input,INCLUDE,FOLLOW_INCLUDE_in_create_index_node1552); if (state.failed) return ret;],,create_index_node,1282-1282,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1555); if (state.failed) return ret;],,create_index_node,1324-1324,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_index_node1590); if (state.failed) return ret;],,create_index_node,1308-1308,[					if (state.failed) return ret;],,create_index_node,1325-1325,[					match(input,ON,FOLLOW_ON_in_create_index_node1592); if (state.failed) return ret;],,create_index_node,1286-1286,[					if (state.failed) return ret;],,create_index_node,1287-1287,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1561); if (state.failed) return ret;],,create_index_node,1329-1329,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_sequence_node,1372-1372,[			match(input,CREATE,FOLLOW_CREATE_in_create_sequence_node1632); if (state.failed) return ret;],,create_sequence_node,1373-1373,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_create_sequence_node1634); if (state.failed) return ret;],,create_sequence_node,1384-1384,[					match(input,IF,FOLLOW_IF_in_create_sequence_node1638); if (state.failed) return ret;],,create_sequence_node,1385-1385,[					match(input,NOT,FOLLOW_NOT_in_create_sequence_node1640); if (state.failed) return ret;],,create_sequence_node,1395-1395,[			if (state.failed) return ret;],,create_sequence_node,1386-1386,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_sequence_node1644); if (state.failed) return ret;],,create_sequence_node,1406-1406,[					match(input,START,FOLLOW_START_in_create_sequence_node1661); if (state.failed) return ret;],,create_sequence_node,1442-1442,[					match(input,INCREMENT,FOLLOW_INCREMENT_in_create_sequence_node1681); if (state.failed) return ret;],,create_sequence_node,1478-1478,[					match(input,MINVALUE,FOLLOW_MINVALUE_in_create_sequence_node1701); if (state.failed) return ret;],,create_sequence_node,1417-1417,[							match(input,WITH,FOLLOW_WITH_in_create_sequence_node1663); if (state.failed) return ret;],,create_sequence_node,1498-1498,[					match(input,MAXVALUE,FOLLOW_MAXVALUE_in_create_sequence_node1718); if (state.failed) return ret;],,create_sequence_node,1453-1453,[							match(input,BY,FOLLOW_BY_in_create_sequence_node1683); if (state.failed) return ret;],,create_sequence_node,1426-1426,[					if (state.failed) return ret;],,create_sequence_node,1518-1518,[					cyc=(Token)match(input,CYCLE,FOLLOW_CYCLE_in_create_sequence_node1737); if (state.failed) return ret;],,create_sequence_node,1462-1462,[					if (state.failed) return ret;],,create_sequence_node,1482-1482,[					if (state.failed) return ret;],,create_sequence_node,1534-1534,[					match(input,CACHE,FOLLOW_CACHE_in_create_sequence_node1751); if (state.failed) return ret;],,create_sequence_node,1502-1502,[					if (state.failed) return ret;],,create_sequence_node,1538-1538,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_table_node,919-919,[			match(input,CREATE,FOLLOW_CREATE_in_create_table_node1237); if (state.failed) return ret;],,create_table_node,920-920,[			match(input,TABLE,FOLLOW_TABLE_in_create_table_node1239); if (state.failed) return ret;],,create_table_node,931-931,[					match(input,IF,FOLLOW_IF_in_create_table_node1242); if (state.failed) return ret;],,create_table_node,932-932,[					match(input,NOT,FOLLOW_NOT_in_create_table_node1244); if (state.failed) return ret;],,create_table_node,942-942,[			if (state.failed) return ret;],,create_table_node,946-946,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_table_node1266); if (state.failed) return ret;],,create_table_node,933-933,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_node1248); if (state.failed) return ret;],,create_table_node,950-950,[			if (state.failed) return ret;],,create_table_node,970-970,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_table_node1279); if (state.failed) return ret;],,create_table_node,964-964,[					if (state.failed) return ret;],,create_table_node,1002-1002,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_table_node1306); if (state.failed) return ret;],,create_table_node,986-986,[					if (state.failed) return ret;],,create_table_node,1003-1003,[					match(input,ON,FOLLOW_ON_in_create_table_node1308); if (state.failed) return ret;],,create_table_node,1007-1007,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_view_node,1049-1049,[			match(input,CREATE,FOLLOW_CREATE_in_create_view_node1348); if (state.failed) return ret;],,create_view_node,1050-1050,[			match(input,VIEW,FOLLOW_VIEW_in_create_view_node1350); if (state.failed) return ret;],,create_view_node,1061-1061,[					match(input,IF,FOLLOW_IF_in_create_view_node1353); if (state.failed) return ret;],,create_view_node,1062-1062,[					match(input,NOT,FOLLOW_NOT_in_create_view_node1355); if (state.failed) return ret;],,create_view_node,1072-1072,[			if (state.failed) return ret;],,create_view_node,1063-1063,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_view_node1359); if (state.failed) return ret;],,create_view_node,1083-1083,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_view_node1377); if (state.failed) return ret;],,create_view_node,1123-1123,[					match(input,AS,FOLLOW_AS_in_create_view_node1404); if (state.failed) return ret;],,create_view_node,1124-1124,[					match(input,SELECT,FOLLOW_SELECT_in_create_view_node1406); if (state.failed) return ret;],,create_view_node,1087-1087,[					if (state.failed) return ret;],,create_view_node,1125-1125,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_create_view_node1408); if (state.failed) return ret;],,create_view_node,1169-1169,[					if (state.failed) return ret;],,create_view_node,1126-1126,[					match(input,FROM,FOLLOW_FROM_in_create_view_node1420); if (state.failed) return ret;],,create_view_node,1107-1107,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_view_node1390); if (state.failed) return ret;],,create_view_node,1101-1101,[							if (state.failed) return ret;],,create_view_node,1130-1130,[					if (state.failed) return ret;],,create_view_node,1141-1141,[							match(input,WHERE,FOLLOW_WHERE_in_create_view_node1437); if (state.failed) return ret;],,create_view_node,1145-1145,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,delete_node,4113-4113,[			match(input,DELETE,FOLLOW_DELETE_in_delete_node3533); if (state.failed) return ret;],,delete_node,4133-4133,[			match(input,FROM,FOLLOW_FROM_in_delete_node3542); if (state.failed) return ret;],,delete_node,4127-4127,[					if (state.failed) return ret;],,delete_node,4137-4137,[			if (state.failed) return ret;],,delete_node,4148-4148,[					match(input,WHERE,FOLLOW_WHERE_in_delete_node3557); if (state.failed) return ret;],,delete_node,4168-4168,[					match(input,ORDER,FOLLOW_ORDER_in_delete_node3574); if (state.failed) return ret;],,delete_node,4189-4189,[					match(input,LIMIT,FOLLOW_LIMIT_in_delete_node3593); if (state.failed) return ret;],,delete_node,4169-4169,[					match(input,BY,FOLLOW_BY_in_delete_node3576); if (state.failed) return ret;],,delete_node,4152-4152,[					if (state.failed) return ret;],,delete_node,4193-4193,[					if (state.failed) return ret;],,delete_node,4173-4173,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,double_literal,8349-8349,[			d=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_double_literal6332); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_index_node,2480-2480,[			match(input,DROP,FOLLOW_DROP_in_drop_index_node2386); if (state.failed) return ret;],,drop_index_node,2481-2481,[			match(input,INDEX,FOLLOW_INDEX_in_drop_index_node2388); if (state.failed) return ret;],,drop_index_node,2492-2492,[					match(input,IF,FOLLOW_IF_in_drop_index_node2391); if (state.failed) return ret;],,drop_index_node,2502-2502,[			if (state.failed) return ret;],,drop_index_node,2493-2493,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_index_node2395); if (state.failed) return ret;],,drop_index_node,2503-2503,[			match(input,ON,FOLLOW_ON_in_drop_index_node2403); if (state.failed) return ret;],,drop_index_node,2507-2507,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_sequence_node,1640-1640,[			match(input,DROP,FOLLOW_DROP_in_drop_sequence_node1824); if (state.failed) return ret;],,drop_sequence_node,1641-1641,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_drop_sequence_node1826); if (state.failed) return ret;],,drop_sequence_node,1652-1652,[					match(input,IF,FOLLOW_IF_in_drop_sequence_node1830); if (state.failed) return ret;],,drop_sequence_node,1662-1662,[			if (state.failed) return ret;],,drop_sequence_node,1653-1653,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_sequence_node1834); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_table_node,2377-2377,[			match(input,DROP,FOLLOW_DROP_in_drop_table_node2324); if (state.failed) return ret;],,drop_table_node,2389-2389,[				if (state.backtracking>0) {state.failed=true; return ret;}],,drop_table_node,2405-2405,[					match(input,TABLE,FOLLOW_TABLE_in_drop_table_node2333); if (state.failed) return ret;],,drop_table_node,2399-2399,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_drop_table_node2329); if (state.failed) return ret;],,drop_table_node,2421-2421,[					match(input,IF,FOLLOW_IF_in_drop_table_node2337); if (state.failed) return ret;],,drop_table_node,2431-2431,[			if (state.failed) return ret;],,drop_table_node,2422-2422,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_node2341); if (state.failed) return ret;],,drop_table_node,2442-2442,[					c=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_drop_table_node2352); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_def,3353-3353,[			if (state.failed) return ret;],,dyn_column_def,3357-3357,[			if (state.failed) return ret;],,dyn_column_def,3368-3368,[					match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_def2967); if (state.failed) return ret;],,dyn_column_def,3403-3403,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_def2988); if (state.failed) return ret;],,dyn_column_def,3369-3369,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2971); if (state.failed) return ret;],,dyn_column_def,3419-3419,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_def2994); if (state.failed) return ret;],,dyn_column_def,3380-3380,[							match(input,COMMA,FOLLOW_COMMA_in_dyn_column_def2974); if (state.failed) return ret;],,dyn_column_def,3387-3387,[					match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_def2982); if (state.failed) return ret;],,dyn_column_def,3436-3436,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_def3003); if (state.failed) return ret;],,dyn_column_def,3430-3430,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2999); if (state.failed) return ret;],,dyn_column_def,3381-3381,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2978); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_name_or_def,3485-3485,[			if (state.failed) return ret;],,dyn_column_name_or_def,3499-3499,[					if (state.failed) return ret;],,dyn_column_name_or_def,3510-3510,[							match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_name_or_def3048); if (state.failed) return ret;],,dyn_column_name_or_def,3545-3545,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_name_or_def3069); if (state.failed) return ret;],,dyn_column_name_or_def,3511-3511,[							l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3052); if (state.failed) return ret;],,dyn_column_name_or_def,3561-3561,[							lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_name_or_def3075); if (state.failed) return ret;],,dyn_column_name_or_def,3522-3522,[									match(input,COMMA,FOLLOW_COMMA_in_dyn_column_name_or_def3055); if (state.failed) return ret;],,dyn_column_name_or_def,3529-3529,[							match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_name_or_def3063); if (state.failed) return ret;],,dyn_column_name_or_def,3578-3578,[							match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_name_or_def3084); if (state.failed) return ret;],,dyn_column_name_or_def,3572-3572,[									a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3080); if (state.failed) return ret;],,dyn_column_name_or_def,3523-3523,[									s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3059); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,explain_node,879-879,[			match(input,EXPLAIN,FOLLOW_EXPLAIN_in_explain_node1207); if (state.failed) return ret;],,explain_node,883-883,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,expression,5464-5464,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2130-2130,[				if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2115-2115,[					if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2143-2143,[					if (state.failed) return ret;],,fam_prop_name,2153-2153,[					if (state.failed) return ret;],,fam_prop_name,2154-2154,[					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2167); if (state.failed) return ret;],,fam_prop_name,2158-2158,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,7994-7994,[				if (state.backtracking>0) {state.failed=true; return ret;}],,from_table_name,8007-8007,[					if (state.failed) return ret;],,from_table_name,8017-8017,[					if (state.failed) return ret;],,from_table_name,8018-8018,[					match(input,DOT,FOLLOW_DOT_in_from_table_name6072); if (state.failed) return ret;],,from_table_name,8022-8022,[					if (state.failed) return ret;],,from_table_name,7979-7979,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hintClause,4294-4294,[			c=(Token)match(input,ML_HINT,FOLLOW_ML_HINT_in_hintClause3674); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hinted_select_node,3880-3880,[					if (state.failed) return ret;],,hinted_select_node,3889-3889,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,identifier,8449-8449,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_name,7812-7812,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_pk_constraint,1878-1878,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal,8268-8268,[			n=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_int_literal6278); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1583-1583,[				if (state.backtracking>0) {state.failed=true; return ret;}],,int_literal_or_bind,1596-1596,[					if (state.failed) return ret;],,int_literal_or_bind,1606-1606,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,join_type,5285-5285,[				if (state.backtracking>0) {state.failed=true; return ret;}],,join_type,5316-5316,[					match(input,LEFT,FOLLOW_LEFT_in_join_type4278); if (state.failed) return ret;],,join_type,5339-5339,[					match(input,RIGHT,FOLLOW_RIGHT_in_join_type4295); if (state.failed) return ret;],,join_type,5362-5362,[					match(input,FULL,FOLLOW_FULL_in_join_type4311); if (state.failed) return ret;],,join_type,5304-5304,[							match(input,INNER,FOLLOW_INNER_in_join_type4263); if (state.failed) return ret;],,join_type,5327-5327,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4280); if (state.failed) return ret;],,join_type,5350-5350,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4297); if (state.failed) return ret;],,join_type,5373-5373,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4314); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4238-4238,[				if (state.backtracking>0) {state.failed=true; return ret;}],,limit,4251-4251,[					if (state.failed) return ret;],,limit,4261-4261,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,8162-8162,[				if (state.backtracking>0) {state.failed=true; return ret;}],,literal,8221-8221,[					match(input,NULL,FOLLOW_NULL_in_literal6222); if (state.failed) return ret;],,literal,8228-8228,[					match(input,TRUE,FOLLOW_TRUE_in_literal6234); if (state.failed) return ret;],,literal,8235-8235,[					match(input,FALSE,FOLLOW_FALSE_in_literal6247); if (state.failed) return ret;],,literal,8171-8171,[					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal6154); if (state.failed) return ret;],,literal,8208-8208,[					t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal6210); if (state.failed) return ret;],,literal,8181-8181,[					if (state.failed) return ret;],,literal,8191-8191,[					if (state.failed) return ret;],,literal,8201-8201,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,8077-8077,[					if (state.failed) return ret;],,literal_or_bind,8087-8087,[					if (state.failed) return ret;],,literal_or_bind,8064-8064,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,long_literal,8310-8310,[			l=(Token)match(input,LONG,FOLLOW_LONG_in_long_literal6305); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,multiply_divide_modulo_expression,6872-6872,[			if (state.failed) return ret;],,multiply_divide_modulo_expression,6894-6894,[						if (state.backtracking>0) {state.failed=true; return ret;}],,multiply_divide_modulo_expression,6901-6901,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,negate_expression,6958-6958,[					m=(Token)match(input,MINUS,FOLLOW_MINUS_in_negate_expression5409); if (state.failed) return ret;],,negate_expression,6967-6967,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,nextStatement,427-427,[					match(input,EOF,FOLLOW_EOF_in_nextStatement889); if (state.failed) return ret;],,nextStatement,406-406,[				if (state.backtracking>0) {state.failed=true; return ret;}],,nextStatement,419-419,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,non_select_node,723-723,[				if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,641-641,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,674-674,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,698-698,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,735-735,[					if (state.failed) return ret;],,non_select_node,744-744,[					if (state.failed) return ret;],,non_select_node,753-753,[					if (state.failed) return ret;],,non_select_node,762-762,[					if (state.failed) return ret;],,non_select_node,771-771,[					if (state.failed) return ret;],,non_select_node,780-780,[					if (state.failed) return ret;],,non_select_node,789-789,[					if (state.failed) return ret;],,non_select_node,798-798,[					if (state.failed) return ret;],,non_select_node,807-807,[					if (state.failed) return ret;],,non_select_node,816-816,[					if (state.failed) return ret;],,non_select_node,825-825,[					if (state.failed) return ret;],,non_select_node,834-834,[					if (state.failed) return ret;],,non_select_node,843-843,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,not_expression,5743-5743,[					match(input,LPAREN,FOLLOW_LPAREN_in_not_expression4528); if (state.failed) return ret;],,not_expression,5711-5711,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression4506); if (state.failed) return ret;],,not_expression,5737-5737,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression4525); if (state.failed) return ret;],,not_expression,5720-5720,[					if (state.failed) return ret;],,not_expression,5747-5747,[					if (state.failed) return ret;],,not_expression,5748-5748,[					match(input,RPAREN,FOLLOW_RPAREN_in_not_expression4534); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,552-552,[					match(input,SELECT,FOLLOW_SELECT_in_oneStatement976); if (state.failed) return ret;],,oneStatement,542-542,[				if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,566-566,[					if (state.failed) return ret;],,oneStatement,556-556,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,or_expression,5499-5499,[			if (state.failed) return ret;],,or_expression,5514-5514,[					match(input,OR,FOLLOW_OR_in_or_expression4415); if (state.failed) return ret;],,or_expression,5518-5518,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseAlias,5421-5421,[					match(input,AS,FOLLOW_AS_in_parseAlias4345); if (state.failed) return ret;],,parseAlias,5430-5430,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseFrom,4851-4851,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseNoReserved,8480-8480,[			n=(Token)match(input,NAME,FOLLOW_NAME_in_parseNoReserved6429); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,4737-4737,[			if (state.failed) return ret;],,parseOrderByField,4753-4753,[					match(input,ASC,FOLLOW_ASC_in_parseOrderByField3959); if (state.failed) return ret;],,parseOrderByField,4760-4760,[					match(input,DESC,FOLLOW_DESC_in_parseOrderByField3965); if (state.failed) return ret;],,parseOrderByField,4777-4777,[					match(input,NULLS,FOLLOW_NULLS_in_parseOrderByField3980); if (state.failed) return ret;],,parseOrderByField,4789-4789,[						if (state.backtracking>0) {state.failed=true; return ret;}],,parseOrderByField,4799-4799,[							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField3983); if (state.failed) return ret;],,parseOrderByField,4806-4806,[							match(input,LAST,FOLLOW_LAST_in_parseOrderByField3989); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,pk_constraint,1704-1704,[					match(input,COMMA,FOLLOW_COMMA_in_pk_constraint1869); if (state.failed) return ret;],,pk_constraint,1710-1710,[			match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_pk_constraint1872); if (state.failed) return ret;],,pk_constraint,1714-1714,[			if (state.failed) return ret;],,pk_constraint,1715-1715,[			match(input,PRIMARY,FOLLOW_PRIMARY_in_pk_constraint1878); if (state.failed) return ret;],,pk_constraint,1716-1716,[			match(input,KEY,FOLLOW_KEY_in_pk_constraint1880); if (state.failed) return ret;],,pk_constraint,1717-1717,[			match(input,LPAREN,FOLLOW_LPAREN_in_pk_constraint1882); if (state.failed) return ret;],,pk_constraint,1721-1721,[			if (state.failed) return ret;],,pk_constraint,1722-1722,[			match(input,RPAREN,FOLLOW_RPAREN_in_pk_constraint1888); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_name,2902-2902,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_value,2194-2194,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,query,494-494,[			match(input,SELECT,FOLLOW_SELECT_in_query943); if (state.failed) return ret;],,query,498-498,[			if (state.failed) return ret;],,query,499-499,[			match(input,EOF,FOLLOW_EOF_in_query949); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,recoverFromMismatchedToken,315-315,[	            Object inserted = getMissingSymbol(input, e, ttype, follow);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_expression,3623-3623,[			match(input,SELECT,FOLLOW_SELECT_in_select_expression3122); if (state.failed) return ret;],,select_expression,3627-3627,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_node,3719-3719,[					match(input,ALL,FOLLOW_ALL_in_select_node3197); if (state.failed) return ret;],,select_node,3713-3713,[					d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_select_node3193); if (state.failed) return ret;],,select_node,3728-3728,[			if (state.failed) return ret;],,select_node,3729-3729,[			match(input,FROM,FOLLOW_FROM_in_select_node3213); if (state.failed) return ret;],,select_node,3733-3733,[			if (state.failed) return ret;],,select_node,3744-3744,[					match(input,WHERE,FOLLOW_WHERE_in_select_node3228); if (state.failed) return ret;],,select_node,3764-3764,[					match(input,GROUP,FOLLOW_GROUP_in_select_node3245); if (state.failed) return ret;],,select_node,3785-3785,[					match(input,HAVING,FOLLOW_HAVING_in_select_node3264); if (state.failed) return ret;],,select_node,3765-3765,[					match(input,BY,FOLLOW_BY_in_select_node3247); if (state.failed) return ret;],,select_node,3748-3748,[					if (state.failed) return ret;],,select_node,3805-3805,[					match(input,ORDER,FOLLOW_ORDER_in_select_node3281); if (state.failed) return ret;],,select_node,3826-3826,[					match(input,LIMIT,FOLLOW_LIMIT_in_select_node3300); if (state.failed) return ret;],,select_node,3806-3806,[					match(input,BY,FOLLOW_BY_in_select_node3283); if (state.failed) return ret;],,select_node,3789-3789,[					if (state.failed) return ret;],,select_node,3769-3769,[					if (state.failed) return ret;],,select_node,3830-3830,[					if (state.failed) return ret;],,select_node,3810-3810,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,4525-4525,[					if (state.failed) return ret;],,selectable,4554-4554,[					if (state.failed) return ret;],,selectable,4566-4566,[					if (state.failed) return ret;],,selectable,4555-4555,[					match(input,DOT,FOLLOW_DOT_in_selectable3778); if (state.failed) return ret;],,selectable,4567-4567,[					match(input,DOT,FOLLOW_DOT_in_selectable3797); if (state.failed) return ret;],,selectable,4512-4512,[				if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4556-4556,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3780); if (state.failed) return ret;],,selectable,4539-4539,[							if (state.failed) return ret;],,selectable,4571-4571,[					if (state.failed) return ret;],,selectable,4572-4572,[					match(input,DOT,FOLLOW_DOT_in_selectable3803); if (state.failed) return ret;],,selectable,4573-4573,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3805); if (state.failed) return ret;],,selectable,4497-4497,[					if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4480-4480,[						if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4463-4463,[							if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4446-4446,[								if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,statement,462-462,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subquery_expression,3661-3661,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subtract_expression,6744-6744,[			if (state.failed) return ret;],,subtract_expression,6759-6759,[					match(input,MINUS,FOLLOW_MINUS_in_subtract_expression5248); if (state.failed) return ret;],,subtract_expression,6763-6763,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_factor,5059-5059,[				if (state.backtracking>0) {state.failed=true; return ret;}],,table_factor,5068-5068,[					match(input,LPAREN,FOLLOW_LPAREN_in_table_factor4136); if (state.failed) return ret;],,table_factor,5191-5191,[					match(input,LPAREN,FOLLOW_LPAREN_in_table_factor4218); if (state.failed) return ret;],,table_factor,5192-5192,[					match(input,SELECT,FOLLOW_SELECT_in_table_factor4220); if (state.failed) return ret;],,table_factor,5033-5033,[					if (state.backtracking>0) {state.failed=true; return ret;}],,table_factor,5083-5083,[					if (state.failed) return ret;],,table_factor,5128-5128,[					if (state.failed) return ret;],,table_factor,5072-5072,[					if (state.failed) return ret;],,table_factor,5073-5073,[					match(input,RPAREN,FOLLOW_RPAREN_in_table_factor4142); if (state.failed) return ret;],,table_factor,5196-5196,[					if (state.failed) return ret;],,table_factor,5104-5104,[									match(input,AS,FOLLOW_AS_in_table_factor4160); if (state.failed) return ret;],,table_factor,5149-5149,[									match(input,AS,FOLLOW_AS_in_table_factor4187); if (state.failed) return ret;],,table_factor,5174-5174,[							match(input,LPAREN,FOLLOW_LPAREN_in_table_factor4198); if (state.failed) return ret;],,table_factor,5197-5197,[					match(input,RPAREN,FOLLOW_RPAREN_in_table_factor4226); if (state.failed) return ret;],,table_factor,5113-5113,[							if (state.failed) return ret;],,table_factor,5158-5158,[							if (state.failed) return ret;],,table_factor,5178-5178,[							if (state.failed) return ret;],,table_factor,5218-5218,[									match(input,AS,FOLLOW_AS_in_table_factor4230); if (state.failed) return ret;],,table_factor,5179-5179,[							match(input,RPAREN,FOLLOW_RPAREN_in_table_factor4204); if (state.failed) return ret;],,table_factor,5227-5227,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_list,4886-4886,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,7907-7907,[				if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,7892-7892,[					if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,7875-7875,[						if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,7920-7920,[					if (state.failed) return ret;],,table_name,7930-7930,[					if (state.failed) return ret;],,table_name,7931-7931,[					match(input,DOT,FOLLOW_DOT_in_table_name6024); if (state.failed) return ret;],,table_name,7935-7935,[					if (state.failed) return ret;],,table_name,7858-7858,[							if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_ref,4950-4950,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7241-7241,[				if (state.backtracking>0) {state.failed=true; return ret;}],,term,7427-7427,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5695); if (state.failed) return ret;],,term,7446-7446,[					match(input,CAST,FOLLOW_CAST_in_term5719); if (state.failed) return ret;],,term,7201-7201,[					if (state.backtracking>0) {state.failed=true; return ret;}],,term,7270-7270,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5512); if (state.failed) return ret;],,term,7545-7545,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7185-7185,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7447-7447,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5721); if (state.failed) return ret;],,term,7561-7561,[							match(input,CURRENT,FOLLOW_CURRENT_in_term5795); if (state.failed) return ret;],,term,7567-7567,[					match(input,VALUE,FOLLOW_VALUE_in_term5798); if (state.failed) return ret;],,term,7253-7253,[					if (state.failed) return ret;],,term,7263-7263,[					if (state.failed) return ret;],,term,7286-7286,[					if (state.failed) return ret;],,term,7301-7301,[					if (state.failed) return ret;],,term,7379-7379,[					if (state.failed) return ret;],,term,7399-7399,[					if (state.failed) return ret;],,term,7420-7420,[					if (state.failed) return ret;],,term,7271-7271,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_term5514); if (state.failed) return ret;],,term,7555-7555,[							n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term5791); if (state.failed) return ret;],,term,7568-7568,[					match(input,FOR,FOLLOW_FOR_in_term5800); if (state.failed) return ret;],,term,7287-7287,[					match(input,DOT,FOLLOW_DOT_in_term5536); if (state.failed) return ret;],,term,7302-7302,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5556); if (state.failed) return ret;],,term,7380-7380,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5618); if (state.failed) return ret;],,term,7400-7400,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5650); if (state.failed) return ret;],,term,7431-7431,[					if (state.failed) return ret;],,term,7432-7432,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5701); if (state.failed) return ret;],,term,7451-7451,[					if (state.failed) return ret;],,term,7275-7275,[					if (state.failed) return ret;],,term,7381-7381,[					t=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_term5622); if (state.failed) return ret;],,term,7401-7401,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term5654); if (state.failed) return ret;],,term,7452-7452,[					match(input,AS,FOLLOW_AS_in_term5727); if (state.failed) return ret;],,term,7572-7572,[					if (state.failed) return ret;],,term,7291-7291,[					if (state.failed) return ret;],,term,7306-7306,[					if (state.failed) return ret;],,term,7276-7276,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_term5520); if (state.failed) return ret;],,term,7382-7382,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5624); if (state.failed) return ret;],,term,7307-7307,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5562); if (state.failed) return ret;],,term,7405-7405,[					if (state.failed) return ret;],,term,7456-7456,[					if (state.failed) return ret;],,term,7406-7406,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5660); if (state.failed) return ret;],,term,7318-7318,[							wg=(Token)match(input,WITHIN,FOLLOW_WITHIN_in_term5567); if (state.failed) return ret;],,term,7467-7467,[							match(input,LPAREN,FOLLOW_LPAREN_in_term5734); if (state.failed) return ret;],,term,7319-7319,[							wg=(Token)match(input,GROUP,FOLLOW_GROUP_in_term5569); if (state.failed) return ret;],,term,7523-7523,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5768); if (state.failed) return ret;],,term,7468-7468,[							length=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term5738); if (state.failed) return ret;],,term,7505-7505,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5756); if (state.failed) return ret;],,term,7514-7514,[							ar=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_term5761); if (state.failed) return ret;],,term,7320-7320,[							wg=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_term5571); if (state.failed) return ret;],,term,7515-7515,[							ar=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_term5763); if (state.failed) return ret;],,term,7479-7479,[									match(input,COMMA,FOLLOW_COMMA_in_term5741); if (state.failed) return ret;],,term,7486-7486,[							match(input,RPAREN,FOLLOW_RPAREN_in_term5749); if (state.failed) return ret;],,term,7321-7321,[							wg=(Token)match(input,ORDER,FOLLOW_ORDER_in_term5573); if (state.failed) return ret;],,term,7480-7480,[									scale=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term5745); if (state.failed) return ret;],,term,7322-7322,[							wg=(Token)match(input,BY,FOLLOW_BY_in_term5575); if (state.failed) return ret;],,term,7326-7326,[							if (state.failed) return ret;],,term,7338-7338,[								if (state.backtracking>0) {state.failed=true; return ret;}],,term,7348-7348,[									a=(Token)match(input,ASC,FOLLOW_ASC_in_term5584); if (state.failed) return ret;],,term,7354-7354,[									wg=(Token)match(input,DESC,FOLLOW_DESC_in_term5588); if (state.failed) return ret;],,term,7360-7360,[							wg=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_term5591); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,update_statistics_node,2822-2822,[			match(input,UPDATE,FOLLOW_UPDATE_in_update_statistics_node2625); if (state.failed) return ret;],,update_statistics_node,2823-2823,[			match(input,STATISTICS,FOLLOW_STATISTICS_in_update_statistics_node2627); if (state.failed) return ret;],,update_statistics_node,2827-2827,[			if (state.failed) return ret;],,update_statistics_node,2851-2851,[					s=(Token)match(input,INDEX,FOLLOW_INDEX_in_update_statistics_node2636); if (state.failed) return ret;],,update_statistics_node,2857-2857,[					s=(Token)match(input,ALL,FOLLOW_ALL_in_update_statistics_node2642); if (state.failed) return ret;],,update_statistics_node,2863-2863,[					s=(Token)match(input,COLUMNS,FOLLOW_COLUMNS_in_update_statistics_node2648); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,upsert_node,3924-3924,[			match(input,UPSERT,FOLLOW_UPSERT_in_upsert_node3392); if (state.failed) return ret;],,upsert_node,3944-3944,[			match(input,INTO,FOLLOW_INTO_in_upsert_node3401); if (state.failed) return ret;],,upsert_node,3938-3938,[					if (state.failed) return ret;],,upsert_node,3948-3948,[			if (state.failed) return ret;],,upsert_node,3959-3959,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node3416); if (state.failed) return ret;],,upsert_node,3981-3981,[				if (state.backtracking>0) {state.failed=true; return ret;}],,upsert_node,3994-3994,[					match(input,VALUES,FOLLOW_VALUES_in_upsert_node3436); if (state.failed) return ret;],,upsert_node,3995-3995,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node3438); if (state.failed) return ret;],,upsert_node,3963-3963,[					if (state.failed) return ret;],,upsert_node,4011-4011,[					if (state.failed) return ret;],,upsert_node,3964-3964,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node3422); if (state.failed) return ret;],,upsert_node,3999-3999,[					if (state.failed) return ret;],,upsert_node,4000-4000,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node3444); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,value_expression,6646-6646,[			if (state.failed) return ret;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,8402-8414,[			switch (alt150) {, 				case 1 :, 					// PhoenixSQL.g:916:9: n= BIND_NAME, 					{, 					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name6360); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { String bind = n.getText().substring(1); updateBind(bind); ret = bind; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:917:9: QUESTION, 					{, 					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name6373); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = nextBind(); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,6490-6535,[									switch (alt125) {, 										case 1 :, 											// PhoenixSQL.g:718:38: (r= bind_expression ), 											{, 											// PhoenixSQL.g:718:38: (r= bind_expression ), 											// PhoenixSQL.g:718:39: r= bind_expression, 											{, 											pushFollow(FOLLOW_bind_expression_in_boolean_expression4907);, 											r=bind_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 											}, , 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:719:35: ( LPAREN r= subquery_expression RPAREN ), 											{, 											// PhoenixSQL.g:719:35: ( LPAREN r= subquery_expression RPAREN ), 											// PhoenixSQL.g:719:36: LPAREN r= subquery_expression RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4948); if (state.failed) return ret;, 											pushFollow(FOLLOW_subquery_expression_in_boolean_expression4952);, 											r=subquery_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4954); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 											}, , 											}, 											break;, 										case 3 :, 											// PhoenixSQL.g:720:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											{, 											// PhoenixSQL.g:720:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											// PhoenixSQL.g:720:36: LPAREN v= one_or_more_expressions RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4995); if (state.failed) return ret;, 											pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression4999);, 											v=one_or_more_expressions();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5001); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}],,boolean_expression,6023-6559,[					switch (alt127) {, 						case 1 :, 							// PhoenixSQL.g:713:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							{, 							// PhoenixSQL.g:713:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							// PhoenixSQL.g:713:30: op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							{, 							pushFollow(FOLLOW_comparison_op_in_boolean_expression4630);, 							op=comparison_op();, 							state._fsp--;, 							if (state.failed) return ret;, 							// PhoenixSQL.g:713:47: (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							int alt122=4;, 							switch ( input.LA(1) ) {, 							case ARRAY:, 							case BIND_NAME:, 							case CASE:, 							case CAST:, 							case CURRENT:, 							case DECIMAL:, 							case DOUBLE:, 							case FALSE:, 							case LONG:, 							case MINUS:, 							case NAME:, 							case NEXT:, 							case NULL:, 							case NUMBER:, 							case QUESTION:, 							case STRING_LITERAL:, 							case TRUE:, 								{, 								alt122=1;, 								}, 								break;, 							case LPAREN:, 								{, 								int LA122_2 = input.LA(2);, 								if ( (LA122_2==ARRAY||LA122_2==BIND_NAME||(LA122_2 >= CASE && LA122_2 <= CAST)||LA122_2==CURRENT||LA122_2==DECIMAL||LA122_2==DOUBLE||LA122_2==EXISTS||LA122_2==FALSE||(LA122_2 >= LONG && LA122_2 <= LPAREN)||LA122_2==MINUS||(LA122_2 >= NAME && LA122_2 <= NEXT)||(LA122_2 >= NOT && LA122_2 <= NULL)||LA122_2==NUMBER||LA122_2==QUESTION||LA122_2==STRING_LITERAL||LA122_2==TRUE) ) {, 									alt122=1;, 								}, 								else if ( (LA122_2==SELECT) ) {, 									alt122=2;, 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 122, 2, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ALL:, 								{, 								int LA122_3 = input.LA(2);, 								if ( (LA122_3==LPAREN) ) {, 									int LA122_6 = input.LA(3);, 									if ( (LA122_6==ARRAY||LA122_6==BIND_NAME||(LA122_6 >= CASE && LA122_6 <= CAST)||LA122_6==CURRENT||LA122_6==DECIMAL||LA122_6==DOUBLE||LA122_6==FALSE||(LA122_6 >= LONG && LA122_6 <= LPAREN)||LA122_6==MINUS||(LA122_6 >= NAME && LA122_6 <= NEXT)||LA122_6==NULL||LA122_6==NUMBER||LA122_6==QUESTION||LA122_6==STRING_LITERAL||LA122_6==TRUE) ) {, 										alt122=3;, 									}, 									else if ( (LA122_6==SELECT) ) {, 										alt122=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 122, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 122, 3, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ANY:, 								{, 								int LA122_4 = input.LA(2);, 								if ( (LA122_4==LPAREN) ) {, 									int LA122_6 = input.LA(3);, 									if ( (LA122_6==ARRAY||LA122_6==BIND_NAME||(LA122_6 >= CASE && LA122_6 <= CAST)||LA122_6==CURRENT||LA122_6==DECIMAL||LA122_6==DOUBLE||LA122_6==FALSE||(LA122_6 >= LONG && LA122_6 <= LPAREN)||LA122_6==MINUS||(LA122_6 >= NAME && LA122_6 <= NEXT)||LA122_6==NULL||LA122_6==NUMBER||LA122_6==QUESTION||LA122_6==STRING_LITERAL||LA122_6==TRUE) ) {, 										alt122=3;, 									}, 									else if ( (LA122_6==SELECT) ) {, 										alt122=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 122, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 122, 4, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 122, 0, input);, 								throw nvae;, 							}, 							switch (alt122) {, 								case 1 :, 									// PhoenixSQL.g:713:48: r= value_expression, 									{, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4635);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:713:69: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:713:69: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:713:70: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4640); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4644);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4646); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:713:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									{, 									// PhoenixSQL.g:713:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									// PhoenixSQL.g:713:110: (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN, 									{, 									// PhoenixSQL.g:713:110: (all= ALL |any= ANY ), 									int alt120=2;, 									int LA120_0 = input.LA(1);, 									if ( (LA120_0==ALL) ) {, 										alt120=1;, 									}, 									else if ( (LA120_0==ANY) ) {, 										alt120=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 120, 0, input);, 										throw nvae;, 									}, , 									switch (alt120) {, 										case 1 :, 											// PhoenixSQL.g:713:111: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4655); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:713:121: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4661); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4664); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4668);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4670); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:713:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:713:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:713:168: (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN, 									{, 									// PhoenixSQL.g:713:168: (all= ALL |any= ANY ), 									int alt121=2;, 									int LA121_0 = input.LA(1);, 									if ( (LA121_0==ALL) ) {, 										alt121=1;, 									}, 									else if ( (LA121_0==ANY) ) {, 										alt121=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 121, 0, input);, 										throw nvae;, 									}, , 									switch (alt121) {, 										case 1 :, 											// PhoenixSQL.g:713:169: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4680); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:713:179: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4686); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4689); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4693);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4695); if (state.failed) return ret;, 									}, , 									}, 									break;, , 							}, , 							if ( state.backtracking==0 ) {ret = all != null ? factory.wrapInAll(op, l, r) : any != null ? factory.wrapInAny(op, l, r) : factory.comparison(op,l,r); }, 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:714:22: ( IS (n= NOT )? NULL ), 							{, 							// PhoenixSQL.g:714:22: ( IS (n= NOT )? NULL ), 							// PhoenixSQL.g:714:23: IS (n= NOT )? NULL, 							{, 							match(input,IS,FOLLOW_IS_in_boolean_expression4725); if (state.failed) return ret;, 							// PhoenixSQL.g:714:27: (n= NOT )?, 							int alt123=2;, 							int LA123_0 = input.LA(1);, 							if ( (LA123_0==NOT) ) {, 								alt123=1;, 							}, 							switch (alt123) {, 								case 1 :, 									// PhoenixSQL.g:714:27: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4729); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,NULL,FOLLOW_NULL_in_boolean_expression4732); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.isNull(l,n!=null); }, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:715:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							{, 							// PhoenixSQL.g:715:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							// PhoenixSQL.g:715:24: (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							{, 							// PhoenixSQL.g:715:25: (n= NOT )?, 							int alt124=2;, 							int LA124_0 = input.LA(1);, 							if ( (LA124_0==NOT) ) {, 								alt124=1;, 							}, 							switch (alt124) {, 								case 1 :, 									// PhoenixSQL.g:715:25: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4763); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							// PhoenixSQL.g:715:31: ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							int alt126=4;, 							switch ( input.LA(1) ) {, 							case LIKE:, 								{, 								alt126=1;, 								}, 								break;, 							case ILIKE:, 								{, 								alt126=2;, 								}, 								break;, 							case BETWEEN:, 								{, 								alt126=3;, 								}, 								break;, 							case IN:, 								{, 								alt126=4;, 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 126, 0, input);, 								throw nvae;, 							}, 							switch (alt126) {, 								case 1 :, 									// PhoenixSQL.g:715:32: ( LIKE r= value_expression ), 									{, 									// PhoenixSQL.g:715:32: ( LIKE r= value_expression ), 									// PhoenixSQL.g:715:33: LIKE r= value_expression, 									{, 									match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4768); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4772);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_SENSITIVE); }, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:716:32: ( ILIKE r= value_expression ), 									{, 									// PhoenixSQL.g:716:32: ( ILIKE r= value_expression ), 									// PhoenixSQL.g:716:33: ILIKE r= value_expression, 									{, 									match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression4810); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4814);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_INSENSITIVE); }, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:717:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									{, 									// PhoenixSQL.g:717:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									// PhoenixSQL.g:717:33: BETWEEN r1= value_expression AND r2= value_expression, 									{, 									match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4852); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4856);, 									r1=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,AND,FOLLOW_AND_in_boolean_expression4858); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4862);, 									r2=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.between(l,r1,r2,n!=null); }, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:718:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									{, 									// PhoenixSQL.g:718:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									// PhoenixSQL.g:718:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									{, 									// PhoenixSQL.g:718:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									// PhoenixSQL.g:718:34: IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									{, 									match(input,IN,FOLLOW_IN_in_boolean_expression4901); if (state.failed) return ret;, 									// PhoenixSQL.g:718:37: ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									int alt125=3;, 									int LA125_0 = input.LA(1);, 									if ( (LA125_0==BIND_NAME||LA125_0==QUESTION) ) {, 										alt125=1;, 									}, 									else if ( (LA125_0==LPAREN) ) {, 										int LA125_2 = input.LA(2);, 										if ( (LA125_2==SELECT) ) {, 											alt125=2;, 										}, 										else if ( (LA125_2==ARRAY||LA125_2==BIND_NAME||(LA125_2 >= CASE && LA125_2 <= CAST)||LA125_2==CURRENT||LA125_2==DECIMAL||LA125_2==DOUBLE||LA125_2==EXISTS||LA125_2==FALSE||(LA125_2 >= LONG && LA125_2 <= LPAREN)||LA125_2==MINUS||(LA125_2 >= NAME && LA125_2 <= NEXT)||(LA125_2 >= NOT && LA125_2 <= NULL)||LA125_2==NUMBER||LA125_2==QUESTION||LA125_2==STRING_LITERAL||LA125_2==TRUE) ) {, 											alt125=3;, 										}, , 										else {, 											if (state.backtracking>0) {state.failed=true; return ret;}, 											int nvaeMark = input.mark();, 											try {, 												input.consume();, 												NoViableAltException nvae =, 													new NoViableAltException("", 125, 2, input);, 												throw nvae;, 											} finally {, 												input.rewind(nvaeMark);, 											}, 										}, , 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 125, 0, input);, 										throw nvae;, 									}, , 									switch (alt125) {, 										case 1 :, 											// PhoenixSQL.g:718:38: (r= bind_expression ), 											{, 											// PhoenixSQL.g:718:38: (r= bind_expression ), 											// PhoenixSQL.g:718:39: r= bind_expression, 											{, 											pushFollow(FOLLOW_bind_expression_in_boolean_expression4907);, 											r=bind_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 											}, , 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:719:35: ( LPAREN r= subquery_expression RPAREN ), 											{, 											// PhoenixSQL.g:719:35: ( LPAREN r= subquery_expression RPAREN ), 											// PhoenixSQL.g:719:36: LPAREN r= subquery_expression RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4948); if (state.failed) return ret;, 											pushFollow(FOLLOW_subquery_expression_in_boolean_expression4952);, 											r=subquery_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4954); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 											}, , 											}, 											break;, 										case 3 :, 											// PhoenixSQL.g:720:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											{, 											// PhoenixSQL.g:720:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											// PhoenixSQL.g:720:36: LPAREN v= one_or_more_expressions RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4995); if (state.failed) return ret;, 											pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression4999);, 											v=one_or_more_expressions();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5001); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}, 											}, , 											}, 											break;, , 									}, , 									}, , 									}, , 									}, 									break;, , 							}, , 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:723:23: , 							{, 							if ( state.backtracking==0 ) { ret = l; }],,boolean_expression,5952-6577,[			switch (alt128) {, 				case 1 :, 					// PhoenixSQL.g:713:9: l= value_expression ( (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ) | ( IS (n= NOT )? NULL ) | ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ) |), 					{, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4624);, 					l=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:713:28: ( (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ) | ( IS (n= NOT )? NULL ) | ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ) |), 					int alt127=4;, 					switch ( input.LA(1) ) {, 					case EQ:, 					case GT:, 					case LT:, 					case NOEQ1:, 					case NOEQ2:, 						{, 						alt127=1;, 						}, 						break;, 					case IS:, 						{, 						alt127=2;, 						}, 						break;, 					case BETWEEN:, 					case ILIKE:, 					case IN:, 					case LIKE:, 					case NOT:, 						{, 						alt127=3;, 						}, 						break;, 					case EOF:, 					case AND:, 					case AS:, 					case ASC:, 					case COMMA:, 					case DESC:, 					case ELSE:, 					case END:, 					case FROM:, 					case FULL:, 					case GROUP:, 					case HAVING:, 					case INNER:, 					case JOIN:, 					case LEFT:, 					case LIMIT:, 					case NAME:, 					case NULLS:, 					case OR:, 					case ORDER:, 					case RIGHT:, 					case RPAREN:, 					case RSQUARE:, 					case SEMICOLON:, 					case THEN:, 					case WHEN:, 					case WHERE:, 						{, 						alt127=4;, 						}, 						break;, 					default:, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						NoViableAltException nvae =, 							new NoViableAltException("", 127, 0, input);, 						throw nvae;, 					}, 					switch (alt127) {, 						case 1 :, 							// PhoenixSQL.g:713:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							{, 							// PhoenixSQL.g:713:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							// PhoenixSQL.g:713:30: op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							{, 							pushFollow(FOLLOW_comparison_op_in_boolean_expression4630);, 							op=comparison_op();, 							state._fsp--;, 							if (state.failed) return ret;, 							// PhoenixSQL.g:713:47: (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							int alt122=4;, 							switch ( input.LA(1) ) {, 							case ARRAY:, 							case BIND_NAME:, 							case CASE:, 							case CAST:, 							case CURRENT:, 							case DECIMAL:, 							case DOUBLE:, 							case FALSE:, 							case LONG:, 							case MINUS:, 							case NAME:, 							case NEXT:, 							case NULL:, 							case NUMBER:, 							case QUESTION:, 							case STRING_LITERAL:, 							case TRUE:, 								{, 								alt122=1;, 								}, 								break;, 							case LPAREN:, 								{, 								int LA122_2 = input.LA(2);, 								if ( (LA122_2==ARRAY||LA122_2==BIND_NAME||(LA122_2 >= CASE && LA122_2 <= CAST)||LA122_2==CURRENT||LA122_2==DECIMAL||LA122_2==DOUBLE||LA122_2==EXISTS||LA122_2==FALSE||(LA122_2 >= LONG && LA122_2 <= LPAREN)||LA122_2==MINUS||(LA122_2 >= NAME && LA122_2 <= NEXT)||(LA122_2 >= NOT && LA122_2 <= NULL)||LA122_2==NUMBER||LA122_2==QUESTION||LA122_2==STRING_LITERAL||LA122_2==TRUE) ) {, 									alt122=1;, 								}, 								else if ( (LA122_2==SELECT) ) {, 									alt122=2;, 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 122, 2, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ALL:, 								{, 								int LA122_3 = input.LA(2);, 								if ( (LA122_3==LPAREN) ) {, 									int LA122_6 = input.LA(3);, 									if ( (LA122_6==ARRAY||LA122_6==BIND_NAME||(LA122_6 >= CASE && LA122_6 <= CAST)||LA122_6==CURRENT||LA122_6==DECIMAL||LA122_6==DOUBLE||LA122_6==FALSE||(LA122_6 >= LONG && LA122_6 <= LPAREN)||LA122_6==MINUS||(LA122_6 >= NAME && LA122_6 <= NEXT)||LA122_6==NULL||LA122_6==NUMBER||LA122_6==QUESTION||LA122_6==STRING_LITERAL||LA122_6==TRUE) ) {, 										alt122=3;, 									}, 									else if ( (LA122_6==SELECT) ) {, 										alt122=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 122, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 122, 3, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ANY:, 								{, 								int LA122_4 = input.LA(2);, 								if ( (LA122_4==LPAREN) ) {, 									int LA122_6 = input.LA(3);, 									if ( (LA122_6==ARRAY||LA122_6==BIND_NAME||(LA122_6 >= CASE && LA122_6 <= CAST)||LA122_6==CURRENT||LA122_6==DECIMAL||LA122_6==DOUBLE||LA122_6==FALSE||(LA122_6 >= LONG && LA122_6 <= LPAREN)||LA122_6==MINUS||(LA122_6 >= NAME && LA122_6 <= NEXT)||LA122_6==NULL||LA122_6==NUMBER||LA122_6==QUESTION||LA122_6==STRING_LITERAL||LA122_6==TRUE) ) {, 										alt122=3;, 									}, 									else if ( (LA122_6==SELECT) ) {, 										alt122=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 122, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 122, 4, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 122, 0, input);, 								throw nvae;, 							}, 							switch (alt122) {, 								case 1 :, 									// PhoenixSQL.g:713:48: r= value_expression, 									{, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4635);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:713:69: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:713:69: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:713:70: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4640); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4644);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4646); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:713:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									{, 									// PhoenixSQL.g:713:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									// PhoenixSQL.g:713:110: (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN, 									{, 									// PhoenixSQL.g:713:110: (all= ALL |any= ANY ), 									int alt120=2;, 									int LA120_0 = input.LA(1);, 									if ( (LA120_0==ALL) ) {, 										alt120=1;, 									}, 									else if ( (LA120_0==ANY) ) {, 										alt120=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 120, 0, input);, 										throw nvae;, 									}, , 									switch (alt120) {, 										case 1 :, 											// PhoenixSQL.g:713:111: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4655); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:713:121: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4661); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4664); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4668);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4670); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:713:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:713:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:713:168: (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN, 									{, 									// PhoenixSQL.g:713:168: (all= ALL |any= ANY ), 									int alt121=2;, 									int LA121_0 = input.LA(1);, 									if ( (LA121_0==ALL) ) {, 										alt121=1;, 									}, 									else if ( (LA121_0==ANY) ) {, 										alt121=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 121, 0, input);, 										throw nvae;, 									}, , 									switch (alt121) {, 										case 1 :, 											// PhoenixSQL.g:713:169: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4680); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:713:179: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4686); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4689); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4693);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4695); if (state.failed) return ret;, 									}, , 									}, 									break;, , 							}, , 							if ( state.backtracking==0 ) {ret = all != null ? factory.wrapInAll(op, l, r) : any != null ? factory.wrapInAny(op, l, r) : factory.comparison(op,l,r); }, 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:714:22: ( IS (n= NOT )? NULL ), 							{, 							// PhoenixSQL.g:714:22: ( IS (n= NOT )? NULL ), 							// PhoenixSQL.g:714:23: IS (n= NOT )? NULL, 							{, 							match(input,IS,FOLLOW_IS_in_boolean_expression4725); if (state.failed) return ret;, 							// PhoenixSQL.g:714:27: (n= NOT )?, 							int alt123=2;, 							int LA123_0 = input.LA(1);, 							if ( (LA123_0==NOT) ) {, 								alt123=1;, 							}, 							switch (alt123) {, 								case 1 :, 									// PhoenixSQL.g:714:27: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4729); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,NULL,FOLLOW_NULL_in_boolean_expression4732); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.isNull(l,n!=null); }, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:715:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							{, 							// PhoenixSQL.g:715:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							// PhoenixSQL.g:715:24: (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							{, 							// PhoenixSQL.g:715:25: (n= NOT )?, 							int alt124=2;, 							int LA124_0 = input.LA(1);, 							if ( (LA124_0==NOT) ) {, 								alt124=1;, 							}, 							switch (alt124) {, 								case 1 :, 									// PhoenixSQL.g:715:25: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4763); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							// PhoenixSQL.g:715:31: ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							int alt126=4;, 							switch ( input.LA(1) ) {, 							case LIKE:, 								{, 								alt126=1;, 								}, 								break;, 							case ILIKE:, 								{, 								alt126=2;, 								}, 								break;, 							case BETWEEN:, 								{, 								alt126=3;, 								}, 								break;, 							case IN:, 								{, 								alt126=4;, 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 126, 0, input);, 								throw nvae;, 							}, 							switch (alt126) {, 								case 1 :, 									// PhoenixSQL.g:715:32: ( LIKE r= value_expression ), 									{, 									// PhoenixSQL.g:715:32: ( LIKE r= value_expression ), 									// PhoenixSQL.g:715:33: LIKE r= value_expression, 									{, 									match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4768); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4772);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_SENSITIVE); }, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:716:32: ( ILIKE r= value_expression ), 									{, 									// PhoenixSQL.g:716:32: ( ILIKE r= value_expression ), 									// PhoenixSQL.g:716:33: ILIKE r= value_expression, 									{, 									match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression4810); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4814);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_INSENSITIVE); }, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:717:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									{, 									// PhoenixSQL.g:717:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									// PhoenixSQL.g:717:33: BETWEEN r1= value_expression AND r2= value_expression, 									{, 									match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4852); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4856);, 									r1=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,AND,FOLLOW_AND_in_boolean_expression4858); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression4862);, 									r2=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.between(l,r1,r2,n!=null); }, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:718:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									{, 									// PhoenixSQL.g:718:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									// PhoenixSQL.g:718:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									{, 									// PhoenixSQL.g:718:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									// PhoenixSQL.g:718:34: IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									{, 									match(input,IN,FOLLOW_IN_in_boolean_expression4901); if (state.failed) return ret;, 									// PhoenixSQL.g:718:37: ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									int alt125=3;, 									int LA125_0 = input.LA(1);, 									if ( (LA125_0==BIND_NAME||LA125_0==QUESTION) ) {, 										alt125=1;, 									}, 									else if ( (LA125_0==LPAREN) ) {, 										int LA125_2 = input.LA(2);, 										if ( (LA125_2==SELECT) ) {, 											alt125=2;, 										}, 										else if ( (LA125_2==ARRAY||LA125_2==BIND_NAME||(LA125_2 >= CASE && LA125_2 <= CAST)||LA125_2==CURRENT||LA125_2==DECIMAL||LA125_2==DOUBLE||LA125_2==EXISTS||LA125_2==FALSE||(LA125_2 >= LONG && LA125_2 <= LPAREN)||LA125_2==MINUS||(LA125_2 >= NAME && LA125_2 <= NEXT)||(LA125_2 >= NOT && LA125_2 <= NULL)||LA125_2==NUMBER||LA125_2==QUESTION||LA125_2==STRING_LITERAL||LA125_2==TRUE) ) {, 											alt125=3;, 										}, , 										else {, 											if (state.backtracking>0) {state.failed=true; return ret;}, 											int nvaeMark = input.mark();, 											try {, 												input.consume();, 												NoViableAltException nvae =, 													new NoViableAltException("", 125, 2, input);, 												throw nvae;, 											} finally {, 												input.rewind(nvaeMark);, 											}, 										}, , 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 125, 0, input);, 										throw nvae;, 									}, , 									switch (alt125) {, 										case 1 :, 											// PhoenixSQL.g:718:38: (r= bind_expression ), 											{, 											// PhoenixSQL.g:718:38: (r= bind_expression ), 											// PhoenixSQL.g:718:39: r= bind_expression, 											{, 											pushFollow(FOLLOW_bind_expression_in_boolean_expression4907);, 											r=bind_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 											}, , 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:719:35: ( LPAREN r= subquery_expression RPAREN ), 											{, 											// PhoenixSQL.g:719:35: ( LPAREN r= subquery_expression RPAREN ), 											// PhoenixSQL.g:719:36: LPAREN r= subquery_expression RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4948); if (state.failed) return ret;, 											pushFollow(FOLLOW_subquery_expression_in_boolean_expression4952);, 											r=subquery_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4954); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 											}, , 											}, 											break;, 										case 3 :, 											// PhoenixSQL.g:720:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											{, 											// PhoenixSQL.g:720:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											// PhoenixSQL.g:720:36: LPAREN v= one_or_more_expressions RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4995); if (state.failed) return ret;, 											pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression4999);, 											v=one_or_more_expressions();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5001); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}, 											}, , 											}, 											break;, , 									}, , 									}, , 									}, , 									}, 									break;, , 							}, , 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:723:23: , 							{, 							if ( state.backtracking==0 ) { ret = l; }, 							}, 							break;, , 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:724:9: EXISTS LPAREN s= subquery_expression RPAREN, 					{, 					match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression5101); if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5103); if (state.failed) return ret;, 					pushFollow(FOLLOW_subquery_expression_in_boolean_expression5107);, 					s=subquery_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5109); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.exists(s,false);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,8599-8608,[					switch (alt152) {, 						case 1 :, 							// PhoenixSQL.g:931:107: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement6480); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement6484);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,case_statement,8665-8674,[					switch (alt154) {, 						case 1 :, 							// PhoenixSQL.g:932:73: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement6520); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement6524);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2257-2280,[			switch (alt37) {, 				case 1 :, 					// PhoenixSQL.g:466:9: field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2233);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:467:9: family= identifier DOT field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2247);, 					family=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_column_name2249); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_column_name2253);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(family, field); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,comparison_op,5846-5897,[			switch (alt119) {, 				case 1 :, 					// PhoenixSQL.g:704:4: EQ, 					{, 					match(input,EQ,FOLLOW_EQ_in_comparison_op4554); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.EQUAL; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:705:4: LT, 					{, 					match(input,LT,FOLLOW_LT_in_comparison_op4561); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.LESS; }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:706:4: GT, 					{, 					match(input,GT,FOLLOW_GT_in_comparison_op4568); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.GREATER; }, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:707:4: LT EQ, 					{, 					match(input,LT,FOLLOW_LT_in_comparison_op4575); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_comparison_op4577); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.LESS_OR_EQUAL; }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:708:4: GT EQ, 					{, 					match(input,GT,FOLLOW_GT_in_comparison_op4584); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_comparison_op4586); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.GREATER_OR_EQUAL; }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:709:4: ( NOEQ1 | NOEQ2 ), 					{, 					if ( (input.LA(1) >= NOEQ1 && input.LA(1) <= NOEQ2) ) {, 						input.consume();, 						state.errorRecovery=false;, 						state.failed=false;, 					}, 					else {, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						MismatchedSetException mse = new MismatchedSetException(null,input);, 						throw mse;, 					}, 					if ( state.backtracking==0 ) { ret = CompareOp.NOT_EQUAL; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2136-2159,[			switch (alt36) {, 				case 1 :, 					// PhoenixSQL.g:457:9: propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2151);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(propName); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:458:9: familyName= identifier DOT propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2165);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2167); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2171);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(familyName, propName); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,8000-8023,[			switch (alt147) {, 				case 1 :, 					// PhoenixSQL.g:847:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name6056);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:848:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name6070);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_from_table_name6072); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_from_table_name6076);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1589-1607,[			switch (alt28) {, 				case 1 :, 					// PhoenixSQL.g:415:7: n= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_int_literal_or_bind1786);, 					n=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = n; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:416:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_int_literal_or_bind1798);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = b; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4244-4262,[			switch (alt88) {, 				case 1 :, 					// PhoenixSQL.g:604:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_limit3632);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(b); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:605:7: l= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_limit3644);, 					l=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(l); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,8167-8236,[			switch (alt149) {, 				case 1 :, 					// PhoenixSQL.g:859:9: t= STRING_LITERAL, 					{, 					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal6154); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.literal(t.getText()); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:860:9: l= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_literal6168);, 					l=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:861:9: l= long_literal, 					{, 					pushFollow(FOLLOW_long_literal_in_literal6182);, 					l=long_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:862:9: l= double_literal, 					{, 					pushFollow(FOLLOW_double_literal_in_literal6196);, 					l=double_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:863:9: t= DECIMAL, 					{, 					t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal6210); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {, 					            try {, 					                ret = factory.literal(new BigDecimal(t.getText()));, 					            } catch (NumberFormatException e) { // Shouldn't happen since we just parsed a decimal, 					                throwRecognitionException(t);, 					            }, 					        }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:870:9: NULL, 					{, 					match(input,NULL,FOLLOW_NULL_in_literal6222); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(null);}, 					}, 					break;, 				case 7 :, 					// PhoenixSQL.g:871:9: TRUE, 					{, 					match(input,TRUE,FOLLOW_TRUE_in_literal6234); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(Boolean.TRUE);}, 					}, 					break;, 				case 8 :, 					// PhoenixSQL.g:872:9: FALSE, 					{, 					match(input,FALSE,FOLLOW_FALSE_in_literal6247); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(Boolean.FALSE);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,8070-8088,[			switch (alt148) {, 				case 1 :, 					// PhoenixSQL.g:853:9: e= literal, 					{, 					pushFollow(FOLLOW_literal_in_literal_or_bind6108);, 					e=literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = e; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:854:9: b= bind_name, 					{, 					pushFollow(FOLLOW_bind_name_in_literal_or_bind6122);, 					b=bind_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.bind(b); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,548-567,[			switch (alt2) {, 				case 1 :, 					// PhoenixSQL.g:346:10: SELECT s= hinted_select_node, 					{, 					match(input,SELECT,FOLLOW_SELECT_in_oneStatement976); if (state.failed) return ret;, 					pushFollow(FOLLOW_hinted_select_node_in_oneStatement980);, 					s=hinted_select_node();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret =s;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:347:10: ns= non_select_node, 					{, 					pushFollow(FOLLOW_non_select_node_in_oneStatement996);, 					ns=non_select_node();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret =ns;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,4749-4761,[			switch (alt95) {, 				case 1 :, 					// PhoenixSQL.g:645:10: ASC, 					{, 					match(input,ASC,FOLLOW_ASC_in_parseOrderByField3959); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = true;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:645:38: DESC, 					{, 					match(input,DESC,FOLLOW_DESC_in_parseOrderByField3965); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = false;}],,parseOrderByField,4795-4807,[					switch (alt96) {, 						case 1 :, 							// PhoenixSQL.g:646:17: FIRST, 							{, 							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField3983); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = false;}, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:646:46: LAST, 							{, 							match(input,LAST,FOLLOW_LAST_in_parseOrderByField3989); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = true;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,select_list,4340-4382,[			switch (alt90) {, 				case 1 :, 					// PhoenixSQL.g:615:9: n= selectable ( COMMA n= selectable )*, 					{, 					pushFollow(FOLLOW_selectable_in_select_list3706);, 					n=selectable();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(n);}, 					// PhoenixSQL.g:615:36: ( COMMA n= selectable )*, 					loop89:, 					while (true) {, 						int alt89=2;, 						int LA89_0 = input.LA(1);, 						if ( (LA89_0==COMMA) ) {, 							alt89=1;, 						}, , 						switch (alt89) {, 						case 1 :, 							// PhoenixSQL.g:615:37: COMMA n= selectable, 							{, 							match(input,COMMA,FOLLOW_COMMA_in_select_list3711); if (state.failed) return ret;, 							pushFollow(FOLLOW_selectable_in_select_list3715);, 							n=selectable();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret.add(n);}, 							}, 							break;, , 						default :, 							break loop89;, 						}, 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:616:7: ASTERISK, 					{, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list3727); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = Collections.<AliasedNode>singletonList(factory.aliasedNode(null, factory.wildcard()));}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,4518-4574,[			switch (alt92) {, 				case 1 :, 					// PhoenixSQL.g:621:9: field= expression (a= parseAlias )?, 					{, 					pushFollow(FOLLOW_expression_in_selectable3756);, 					field=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:621:26: (a= parseAlias )?, 					int alt91=2;, 					int LA91_0 = input.LA(1);, 					if ( (LA91_0==AS||LA91_0==NAME) ) {, 						alt91=1;, 					}, 					switch (alt91) {, 						case 1 :, 							// PhoenixSQL.g:621:27: a= parseAlias, 							{, 							pushFollow(FOLLOW_parseAlias_in_selectable3761);, 							a=parseAlias();, 							state._fsp--;, 							if (state.failed) return ret;, 							}, 							break;, , 					}, , 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(a, field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:622:8: familyName= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable3776);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3778); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3780); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.family(familyName));}, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:623:9: s= identifier DOT t= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable3795);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3797); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_selectable3801);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3803); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3805); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.tableWildcard(factory.table(s, t))); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,7913-7936,[			switch (alt146) {, 				case 1 :, 					// PhoenixSQL.g:841:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name6008);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:842:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name6022);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_table_name6024); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_table_name6028);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,update_statistics_node,2830-2843,[			switch ( input.LA(1) ) {, 				case INDEX:, 					{, 					alt49=1;, 					}, 					break;, 				case ALL:, 					{, 					alt49=2;, 					}, 					break;, 				case COLUMNS:, 					{, 					alt49=3;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,zero_or_more_expressions,7675-7683,[			switch (alt143) {, 				case 1 :, 					// PhoenixSQL.g:827:9: v= expression, 					{, 					pushFollow(FOLLOW_expression_in_zero_or_more_expressions5893);, 					v=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(v);}],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,nextStatement,96-96,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseExpression,154-154,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseLiteral,172-172,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseQuery,135-135,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseStatement,116-116,[                throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,125-128,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,140-143,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/pig/PhoenixHBaseLoader.java,initializePhoenixPigConfiguration,145-145,[            this.tableName = pair.getFirst();],,initializePhoenixPigConfiguration,131-131,[        Pair<String,String> pair = null;],,initializePhoenixPigConfiguration,138-138,[             } else if (location.startsWith(PHOENIX_QUERY_SCHEME)) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/pig/PhoenixHBaseLoader.java,getPartitionKeys,244-244,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,dropTable,613-613,[      conn.createStatement().execute(String.format("DROP TABLE IF EXISTS %s",tableFullName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,114-114,[        conn.createStatement().execute(ddl);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,setUp,102-102,[                ConfigurationUtil.toProperties(conf));],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,111-111,[        final String ddl = String.format("CREATE TABLE %s "],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithBinaryDataTypes,239-239,[            assertEquals(i * 5, rs.getInt(2));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithBinaryDataTypes,233-233,[                .executeQuery(String.format("SELECT col1 , col2 , col3 , col4 , col5 , col6, col7  FROM %s ORDER BY col1" , tableName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithDateTime,289-289,[                .executeQuery(String.format("SELECT col1 , col2 , col3 , col4 FROM %s " , tableName));],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,setUp,71-71,[        pigServer = new PigServer(ExecType.LOCAL, getTestClusterConfig());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/QuerySchemaParserFunction.java,,70-73,[                                                            new Function<ColumnProjector,String>() {,                                                                 @Override,                                                                 public String apply(ColumnProjector column) {,                                                                     return column.getName();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunction.java,apply,60-60,[            columnInfos = Lists.newArrayListWithCapacity(projectedColumns.size());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunction.java,,61-64,[            columnInfos = Lists.transform(projectedColumns, new Function<ColumnProjector,ColumnInfo>() {,                 @Override,                 public ColumnInfo apply(final ColumnProjector columnProjector) {,                     return new ColumnInfo(columnProjector.getName(), columnProjector.getExpression().getDataType().getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunctionTest.java,testValidSelectQuery,61-61,[        final List<ColumnInfo> actualColumnInfos = function.apply(selectQuery);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/pig/util/TypeUtil.java,transformToTuple,305-305,[        } catch( Exception ex) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/pig/writable/PhoenixPigDBWritable.java,getFieldSchemas,98-98,[        return fieldSchemas;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/pig/writable/PhoenixPigDBWritable.java,setFieldSchemas,102-102,[        this.fieldSchemas = fieldSchemas;],,
MT_CORRECTNESS,LI_LAZY_INIT_UPDATE_STATIC,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,doTeardown,138-143,[        if (driver != null) {,             try {,                 driver.close();,             } finally {,                 PhoenixTestDriver driver = BaseConnectionlessQueryTest.driver;,                 BaseConnectionlessQueryTest.driver = null;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,128-128,[            A_TIME = new ColumnRef(new TableRef(table), table.getColumn("A_TIME").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,129-129,[            A_TIMESTAMP = new ColumnRef(new TableRef(table), table.getColumn("A_TIMESTAMP").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,122-122,[            ORGANIZATION_ID = new ColumnRef(new TableRef(table), table.getColumn("ORGANIZATION_ID").getPosition()).newColumnExpression();],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/query/BaseTest.java,destroyDriver,494-498,[        if (driver != null) {,             try {,                 assertTrue(destroyDriver(driver));,             } finally {,                 driver = null;],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/query/BaseTest.java,setUpTestDriver,528-529,[        if (driver == null) {,             driver = initAndRegisterDriver(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/query/BaseTest.java,createMultiCFTestTable,1676-1676,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,createMultiCFTestTable,1677-1677,[            conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,821-821,[            conn.createStatement().execute("DROP SEQUENCE " + SchemaUtil.getEscapedTableName(rs.getString(1), rs.getString(2)));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorTables,801-801,[                    conn.createStatement().executeUpdate(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/BaseTest.java,populateMultiCFTestTable,1693-1693,[            PreparedStatement stmt = conn.prepareStatement(upsert);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,46-49,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,56-59,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create(conf);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearTableFromCache,2093-2093,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearCache,1817-1817,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,addColumnsIfNotExists,1625-1625,[            metaConnection.createStatement().executeUpdate("ALTER TABLE " + tableName + " ADD IF NOT EXISTS " + columns );],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,checkAndRetry,846-846,[                        + watch.elapsedMillis()],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,497-504,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.addColumn(tenantId, tableName, columns, tableTimeStamp, tableSeqNum, isImmutableRows);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1580-1595,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     DropColumnRequest.Builder builder = DropColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     instance.dropColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,call,1690-1690,[                                metaConnection.createStatement().executeUpdate(createSequenceTable);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1783-1794,[                        HConstants.EMPTY_END_ROW, new Batch.Call<MetaDataService, ClearCacheResponse>() {,                     @Override,                     public ClearCacheResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<ClearCacheResponse> rpcCallback =,                                 new BlockingRpcCallback<ClearCacheResponse>();,                         ClearCacheRequest.Builder builder = ClearCacheRequest.newBuilder();,                         instance.clearCache(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1853-1868,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         instance.updateIndexState(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,2060-2072,[                        new Batch.Call<MetaDataService, ClearTableFromCacheResponse>() {,                             @Override,                             public ClearTableFromCacheResponse call(MetaDataService instance) throws IOException {,                                 ServerRpcController controller = new ServerRpcController();,                                 BlockingRpcCallback<ClearTableFromCacheResponse> rpcCallback = new BlockingRpcCallback<ClearTableFromCacheResponse>();,                                 ClearTableFromCacheRequest.Builder builder = ClearTableFromCacheRequest.newBuilder();,                                 builder.setTenantId(HBaseZeroCopyByteString.wrap(tenantId));,                                 builder.setTableName(HBaseZeroCopyByteString.wrap(tableName));,                                 builder.setSchemaName(HBaseZeroCopyByteString.wrap(schemaName));,                                 builder.setClientTimestamp(clientTS);,                                 instance.clearTableFromCache(controller, builder.build(), rpcCallback);,                                 if (controller.getFailedOn() != null) { throw controller.getFailedOn(); },                                 return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,522-529,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.removeColumn(tenantId, tableName, columnsToRemove, tableTimeStamp, tableSeqNum);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,774-784,[        checkAndRetry(new RetriableOperation() {, ,             @Override,             public String getOperatioName() {,                 return "UpdateOrNewTableDescriptor";,             }, ,             @Override,             public boolean checkForCompletion() throws TimeoutException, IOException {,                 HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);,                 return newTableDescriptor.equals(tableDesc);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,791-801,[        checkAndRetry(new RetriableOperation() {, ,             @Override,             public String getOperatioName() {,                 return "UpdateOrNewColumnDescriptor";,             }, ,             @Override,             public boolean checkForCompletion() throws TimeoutException, IOException {,                 HTableDescriptor newTableDesc = admin.getTableDescriptor(tableName);,                 return newTableDesc.getFamilies().contains(columnFamilyDesc);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1015-1027,[                    ht.coprocessorService(MetaDataService.class, null, null, new Batch.Call<MetaDataService,Long>() {,                         @Override,                         public Long call(MetaDataService instance) throws IOException {,                             ServerRpcController controller = new ServerRpcController();,                             BlockingRpcCallback<GetVersionResponse> rpcCallback =,                                     new BlockingRpcCallback<GetVersionResponse>();,                             GetVersionRequest.Builder builder = GetVersionRequest.newBuilder();,                             ,                             instance.getVersion(controller, builder.build(), rpcCallback);,                             if(controller.getFailedOn() != null) {,                                 throw controller.getFailedOn();,                             },                             return rpcCallback.get().getVersion();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1293-1308,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,             @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         CreateTableRequest.Builder builder = CreateTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         instance.createTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1320-1337,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     GetTableRequest.Builder builder = GetTableRequest.newBuilder();,                     builder.setTenantId(HBaseZeroCopyByteString.wrap(tenantIdBytes));,                     builder.setSchemaName(HBaseZeroCopyByteString.wrap(schemaBytes));,                     builder.setTableName(HBaseZeroCopyByteString.wrap(tableBytes));,                     builder.setTableTimestamp(tableTimestamp);,                     builder.setClientTimestamp(clientTimestamp);,                     ,                    instance.getTable(controller, builder.build(), rpcCallback);,                    if(controller.getFailedOn() != null) {,                        throw controller.getFailedOn();,                    },                    return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1351-1369,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         DropTableRequest.Builder builder = DropTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setTableType(tableType.getSerializedValue());,                         builder.setCascade(cascade);,                         ,                         instance.dropTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1529-1545,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     AddColumnRequest.Builder builder = AddColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     ,                     instance.addColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionlessQueryServicesImpl.java,init,269-269,[                   metaConnection.createStatement().executeUpdate(createTableStatement);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/ConnectionlessTest.java,testConnectionlessUpsert,105-105,[        PreparedStatement statement = conn.prepareStatement(dmlStmt);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getLowerRange,270-270,[        return lowerRange;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getUpperRange,278-278,[        return upperRange;],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeCoalesceTest.java,,38-158,[    private static final Random RANDOM = new Random(1);,     private final List<KeyRange> expected, input;, ,     public KeyRangeCoalesceTest(List<KeyRange> expected, List<KeyRange> input) {,         this.expected = expected;,         this.input = input;,     }, ,     @Parameters(name="{0} coalesces to {1}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("Z"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("E"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("Z"), false),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                     EMPTY_RANGE,                 )},         });,     },     @Test,     public void coalesce() {,         assertEquals(expected, KeyRange.coalesce(input));,         List<KeyRange> tmp = new ArrayList<KeyRange>(input);,         Collections.reverse(tmp);,         assertEquals(expected, KeyRange.coalesce(input));,         Collections.shuffle(tmp, RANDOM);,         assertEquals(expected, KeyRange.coalesce(input));,     },     ,     private static final List<KeyRange> expect(KeyRange... kr) {,         return asList(kr);,     },     ,     private static final List<KeyRange> input(KeyRange... kr) {,         return asList(kr);],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeIntersectTest.java,,40-95,[    public KeyRangeIntersectTest(KeyRange a, KeyRange b, KeyRange intersection) {,         this.a = a;,         this.b = b;,         this.intersection = intersection;,     }, ,     @Parameters(name="intersection of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("E"), false),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,                 {,                     EVERYTHING_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EMPTY_RANGE,                 },,                 {,                     EMPTY_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,         });,     },     @Test,     public void intersect() {,         assertEquals(intersection, a.intersect(b));,         assertEquals(intersection, b.intersect(a));,     }],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeUnionTest.java,,40-95,[    public KeyRangeUnionTest(KeyRange a, KeyRange b, KeyRange union) {,         this.a = a;,         this.b = b;,         this.union = union;,     }, ,     @Parameters(name="union of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("F"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("F"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     EMPTY_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                 },,                 {,                     EVERYTHING_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EVERYTHING_RANGE,,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,         });,     },     @Test,     public void union() {,         assertEquals(union, a.union(b));,         assertEquals(union, b.union(a));,     }],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,140-140,[    public static final byte[] ARRAY_VALUE_COLUMN_FAMILY = Bytes.toBytes("a");],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,206-206,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,192-192,[    private static final KeyValue EMPTY_KEYVALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, TABLE_FAMILY_BYTES, QueryConstants.EMPTY_COLUMN_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,116-116,[    public final static byte[] NAME_SEPARATOR_BYTES = Bytes.toBytes(NAME_SEPARATOR);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/KeyRange.java,,66-66,[    public static final KeyRange IS_NOT_NULL_RANGE = new KeyRange(ByteUtil.nextKey(QueryConstants.SEPARATOR_BYTE_ARRAY), true, UNBOUND, false);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,129-129,[    public final static byte[] SINGLE_COLUMN = SINGLE_COLUMN_NAME.getBytes();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixStatement.java,,329-329,[    private static final byte[] EXPLAIN_PLAN_FAMILY = QueryConstants.SINGLE_COLUMN_FAMILY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,110-110,[    public static final byte[] SYSTEM_CATALOG_SCHEMA_BYTES = QueryConstants.SYSTEM_SCHEMA_NAME_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,144-144,[    public static final byte[] TRUE = new byte[] {1};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,136-136,[    public final static byte[] UNGROUPED_AGG_ROW_KEY = Bytes.toBytes("a");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/query/QueryPlanTest.java,testTenantSpecificConnWithLimit,196-196,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/QueryPlanTest.java,testExplainPlan,179-179,[                ResultSet rs = statement.executeQuery("EXPLAIN " + query);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/query/QueryServicesOptions.java,,122-122,[    public static boolean DEFAULT_GROUPBY_SPILLABLE = true;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/phoenix/schema/ColumnRef.java,equals,84-90,[        if (this == obj) return true;,         if (obj == null) return false;,         if (getClass() != obj.getClass()) return false;,         ColumnRef other = (ColumnRef)obj;,         if (columnPosition != other.columnPosition) return false;,         if (!tableRef.equals(other.tableRef)) return false;,         return true;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,buildIndex,761-761,[                                scn++;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,dropColumn,2429-2429,[                    table = connection.getMetaDataCache().getTable(new PTableKey(tenantId, fullTableName));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/schema/MetaDataClient.java,deleteFromStatsTable,1820-1820,[        Connection conn = DriverManager.getConnection(connection.getURL(), props);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/MetaDataClient.java,getNewEmptyColumnFamilyOrNull,2264-2264,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,deleteFromStatsTable,1830-1830,[            conn.createStatement().execute(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,dropColumnMutations,2222-2222,[        connection.createStatement().execute(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,updateStatisticsInternal,656-656,[        ResultSet rs = connection.createStatement().executeQuery(query);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,626-633,[                    PTable indexLogicalTable = new DelegateTable(table) {,                         @Override,                         public PName getPhysicalName() {,                             return name;,                         },                         @Override,                         public PTableStats getTableStats() {,                             return PTableStats.EMPTY_STATS;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1512-1519,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public byte[] getViewConstant() {,                                 return viewColumnConstants[columnPosition];,                             },                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1523-1526,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,2224-2227,[        Collections.sort(columnsToDrop,new Comparator<PColumn> () {,             @Override,             public int compare(PColumn left, PColumn right) {,                return Ints.compare(left.getPosition(), right.getPosition());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PColumnImpl.java,getViewConstant,180-180,[        return viewConstant;],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForArrayComparisionsForFixedWidth,971-971,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,testForArrayComparisionsForFixedWidth,978-978,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForArrayComparisionsWithInEqualityForFixedWidth,989-989,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,testForArrayComparisionsWithInEqualityForFixedWidth,997-997,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForBooleanArray,101-101,[		PBooleanArray.INSTANCE.toObject(arr, PBooleanArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForDateArray,852-852,[		PDateArray.INSTANCE.toObject(arr, PDateArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForDecimalArray,779-779,[		PDecimalArray.INSTANCE.toObject(arr, PDecimalArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForDoubleArray,765-765,[		PDoubleArray.INSTANCE.toObject(arr, PDoubleArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForFloatArray,751-751,[		PFloatArray.INSTANCE.toObject(arr, PFloatArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForIntegerArray,87-87,[		PIntegerArray.INSTANCE.toObject(arr, PIntegerArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForLongArray,250-250,[		PLongArray.INSTANCE.toObject(arr, PLongArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForSmallIntArray,264-264,[		PSmallintArray.INSTANCE.toObject(arr, PSmallintArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForTimeArray,822-822,[		PTimeArray.INSTANCE.toObject(arr, PTimeArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForTimeStampArray,793-793,[		PTimestampArray.INSTANCE.toObject(arr, PTimestampArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForTinyIntArray,737-737,[		PTinyintArray.INSTANCE.toObject(arr, PTinyintArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedDateArray,867-867,[		PUnsignedDateArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedDoubleArray,957-957,[		PUnsignedDoubleArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedFloatArray,942-942,[		PUnsignedFloatArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedIntArray,898-898,[				.toObject(arr, PUnsignedIntArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedLongArray,882-882,[		PUnsignedLongArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedSmallIntArray,912-912,[		PUnsignedSmallintArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedTimeStampArray,807-807,[		PUnsignedTimestampArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnSignedTinyIntArray,927-927,[		PUnsignedTinyintArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testForUnsignedTimeArray,836-836,[		PUnsignedTimeArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testGetArrayLengthForFixedLengthArray,709-709,[		PLongArray.INSTANCE.toObject(arr, PLongArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testLongArrayWithIndex,687-687,[		PLongArray.INSTANCE.toObject(arr, PLongArray.INSTANCE);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testVariableLengthArrayWithElementsMoreThanShortMax,359-359,[	            str += "-";],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,getSerializedBytes,46-46,[        return serializedBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,toBytes,50-50,[        return nameBytesValue;],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/phoenix/schema/PMetaDataImpl.java,clone,234-234,[        return new PMetaDataImpl(this.metaData);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PMetaDataImpl.java,,185-199,[                return new Iterator<PTable>() {, ,                     @Override,                     public boolean hasNext() {,                         return iterator.hasNext();,                     }, ,                     @Override,                     public PTable next() {,                         return iterator.next().table;,                     }, ,                     @Override,                     public void remove() {,                         throw new UnsupportedOperationException();],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/schema/PNameImpl.java,getBytesPtr,74-76,[        if (data.ptr == null) {,             synchronized (data.bytesName) {,                 if (data.ptr == null) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/schema/PTable.java,fromToken,108-108,[            return IndexType.valueOf(token.trim().toUpperCase());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,96-96,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,142-142,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,54-54,[            return byteValue;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,57-57,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,66-66,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,53-53,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,62-62,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/SequenceKey.java,getKey,42-42,[        return key;],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getSchemaName,61-61,[            c = this.schemaName == that.getSchemaName() ? 0 : this.schemaName == null ? -1 : that.getSchemaName() == null ? 1 : this.schemaName.compareTo(that.getSchemaName());],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getTenantId,59-59,[        int c = this.tenantId == that.getTenantId() ? 0 : this.tenantId == null ? -1 : that.getTenantId() == null ? 1 : this.tenantId.compareTo(that.getTenantId());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/schema/SortOrderTest.java,descSortOrderTransformsOp,70-90,[	    	switch (op) {, 			case EQUAL:, 				assertSame(CompareOp.EQUAL, oppositeOp);, 				break;, 			case GREATER:, 				assertSame(CompareOp.LESS, oppositeOp);, 				break;, 			case GREATER_OR_EQUAL:, 				assertSame(CompareOp.LESS_OR_EQUAL, oppositeOp);, 				break;, 			case LESS:, 				assertSame(CompareOp.GREATER, oppositeOp);, 				break;, 			case LESS_OR_EQUAL:, 				assertSame(CompareOp.GREATER_OR_EQUAL, oppositeOp);, 				break;, 			case NOT_EQUAL:, 				assertSame(CompareOp.NOT_EQUAL, oppositeOp);, 				break;, 			case NO_OP:, 				assertSame(CompareOp.NO_OP, oppositeOp);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/ValueBitSetTest.java,,37-56,[                PDatum datum = new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return fieldIndex <= nNotNull;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.values()[fieldIndex % PDataType.values().length];,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     }, 					@Override, 					public SortOrder getSortOrder() {, 						return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/ValueBitSetTest.java,,81-105,[            builder.addField(new PDatum() {,                 @Override,                 public boolean isNullable() {,                     // not nullable till index reaches minNullableIndex,                     return fieldIndex < minNullableIndex;,                 }, ,                 @Override,                 public SortOrder getSortOrder() {,                     return SortOrder.getDefault();,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return null;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return PDataType.values()[fieldIndex % PDataType.values().length];],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/schema/stats/GuidePostsInfo.java,fromBytes,96-96,[                            in.read(gp);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/tuple/SingleKeyValueTuple.java,toString,86-86,[        return "SingleKeyValueTuple[" + keyValue == null ? keyPtr.get() == UNITIALIZED_KEY_BUFFER ? "null" : Bytes.toStringBinary(keyPtr.get(),keyPtr.getOffset(),keyPtr.getLength()) : keyValue.toString() + "]";],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PArrayDataType.java,positionAtArrayElement,338-338,[                    count = -count;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/types/PArrayDataType.java,createArrayBytes,455-455,[        return null;],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBinary.java,,31-187,[  public static final PBinary INSTANCE = new PBinary();, ,   private PBinary() {,     super("BINARY", Types.BINARY, byte[].class, null, 23);,   }, ,   @Override,   public void pad(ImmutableBytesWritable ptr, Integer maxLength) {,     if (ptr.getLength() >= maxLength) {,       return;,     },     byte[] newBytes = new byte[maxLength];,     System.arraycopy(ptr.get(), ptr.getOffset(), newBytes, 0, ptr.getLength());,     ptr.set(newBytes);,   }, ,   @Override,   public Object pad(Object object, Integer maxLength) {,     byte[] b = (byte[]) object;,     if (b == null) {,       return null;,     },     if (b.length == maxLength) {,       return object;,     },     if (b.length > maxLength) {,       throw new ValueTypeIncompatibleException(this, maxLength, null);,     },     byte[] newBytes = new byte[maxLength];,     System.arraycopy(b, 0, newBytes, 0, b.length);, ,     return newBytes;,   }, ,   @Override,   public byte[] toBytes(Object object) { // Delegate to VARBINARY,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return PVarbinary.INSTANCE.toBytes(object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return PVarbinary.INSTANCE.toBytes(object, bytes, offset);, ,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     byte[] bytes = toBytes(object);,     if (sortOrder == SortOrder.DESC) {,       return SortOrder.invert(bytes, 0, new byte[bytes.length], 0, bytes.length);,     },     return bytes;,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (!actualType.isCoercibleTo(this)) {,       throwConstraintViolationException(actualType, this);,     },     return PVarbinary.INSTANCE.toObject(bytes, offset, length, actualType, sortOrder);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     return actualType.toBytes(object);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     byte[] value = (byte[]) o;,     return value == null ? 1 : value.length;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PVarbinary.INSTANCE);,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength,,       Integer desiredScale) {,     if (ptr.getLength() != 0 && (,         (srcType.equals(PVarbinary.INSTANCE) && ((String) value).length() != ptr.getLength()) ||,             (maxLength != null && desiredMaxLength != null && maxLength > desiredMaxLength))) {,       return false;,     },     return true;,   }, ,   @Override,   public Integer estimateByteSizeFromLength(Integer length) {,     return length;,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (lhs == null && rhs == null) {,       return 0;,     } else if (lhs == null) {,       return -1;,     } else if (rhs == null) {,       return 1;,     },     if (equalsAny(rhsType, PVarbinary.INSTANCE, PBinary.INSTANCE)) {,       return Bytes.compareTo((byte[]) lhs, (byte[]) rhs);,     } else {,       byte[] rhsBytes = rhsType.toBytes(rhs);,       return Bytes.compareTo((byte[]) lhs, rhsBytes);,     },   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return null;,     },     byte[] value = (byte[]) o;,     return value.length;,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return Base64.decode(value);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     if (formatter == null && b.length == 1) {,       return Integer.toString(0xFF & b[0]);,     },     return PVarbinary.INSTANCE.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return PVarbinary.INSTANCE.getSampleValue(maxLength, arrayLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBinaryArray.java,,27-106,[  public static final PBinaryArray INSTANCE = new PBinaryArray();, ,   private PBinaryArray() {,     super("BINARY ARRAY", PDataType.ARRAY_TYPE_BASE + PBinary.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 28);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PBinary.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     return toObject(bytes, offset, length, PBinary.INSTANCE, sortOrder, maxLength, scale,,         PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] charArr = (Object[]) pArr.array;,     for (Object i : charArr) {,       if (!super.isCoercibleTo(PBinary.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PBinary.INSTANCE, arrayLength, maxLength);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PBoolean.java,toBytes,40-40,[    return ((Boolean) object).booleanValue() ? TRUE_BYTES : FALSE_BYTES;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PBoolean.java,toBytes,59-59,[    return ((Boolean) object).booleanValue() ^ sortOrder == SortOrder.ASC ?],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBoolean.java,,26-138,[public class PBoolean extends PDataType<Boolean> {, ,   public static final PBoolean INSTANCE = new PBoolean();, ,   private PBoolean() {,     super("BOOLEAN", Types.BOOLEAN, Boolean.class, null, 21);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       // TODO: review - return null?,       throw newIllegalDataException(this + " may not be null");,     },     return ((Boolean) object).booleanValue() ? TRUE_BYTES : FALSE_BYTES;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       // TODO: review - return null?,       throw newIllegalDataException(this + " may not be null");,     },     bytes[offset] = ((Boolean) object).booleanValue() ? TRUE_BYTE : FALSE_BYTE;,     return BOOLEAN_LENGTH;,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     if (object == null) {,       // TODO: review - return null?,       throw newIllegalDataException(this + " may not be null");,     },     return ((Boolean) object).booleanValue() ^ sortOrder == SortOrder.ASC ?,         TRUE_BYTES :,         FALSE_BYTES;,   }, ,   @Override,   public Boolean toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     Preconditions.checkNotNull(sortOrder);,     if (length == 0) {,       return null;,     },     if (actualType == this) {,       if (length > 1) {,         throw newIllegalDataException("BOOLEAN may only be a single byte");,       },       return ((bytes[offset] == FALSE_BYTE ^ sortOrder == SortOrder.DESC) ?,           Boolean.FALSE :,           Boolean.TRUE);,     } else if (actualType == PDecimal.INSTANCE) {,       // false translated to the ZERO_BYTE,       return ((bytes[offset] == ZERO_BYTE ^ sortOrder == SortOrder.DESC) ?,           Boolean.FALSE :,           Boolean.TRUE);,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return super.isCoercibleTo(targetType) || targetType.equals(PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     // Allow cast to BOOLEAN so it can be used in an index or group by,     return super.isCastableTo(targetType) || targetType.equals(PDecimal.INSTANCE);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return BOOLEAN_LENGTH;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     return BOOLEAN_LENGTH;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return Booleans.compare((Boolean) lhs, (Boolean) rhs);,   }, ,   @Override,   public Object toObject(String value) {,     return Boolean.parseBoolean(value);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (actualType == this || object == null) {,       return object;,     },     if (actualType == PVarbinary.INSTANCE || actualType == PBinary.INSTANCE) {,       byte[] bytes = (byte[]) object;,       return toObject(bytes, 0, bytes.length);,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextBoolean();],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/schema/types/PBoolean.java,toObject,69-69,[      return null;],,toObject,85-85,[    return null;],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBooleanArray.java,,27-106,[  public static final PBooleanArray INSTANCE = new PBooleanArray();, ,   private PBooleanArray() {,     super("BOOLEAN ARRAY", PDataType.ARRAY_TYPE_BASE + PBoolean.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 25);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PBoolean.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     return toObject(bytes, offset, length, PBoolean.INSTANCE, sortOrder, maxLength, scale,,         PBoolean.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] booleanArr = (Object[]) pArr.array;,     for (Object i : booleanArr) {,       if (!super.isCoercibleTo(PBoolean.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PBoolean.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PChar.java,,36-201,[  public static final PChar INSTANCE = new PChar();, ,   private PChar() {,     super("CHAR", Types.CHAR, String.class, null, 1);,   }, ,     @Override,     public void pad(ImmutableBytesWritable ptr, Integer maxLength) {,       if (ptr.getLength() >= maxLength) {,         return;,       },       byte[] newBytes = new byte[maxLength];,       System.arraycopy(ptr.get(), ptr.getOffset(), newBytes, 0, ptr.getLength());,       Arrays.fill(newBytes, ptr.getLength(), maxLength, StringUtil.SPACE_UTF8);,       ptr.set(newBytes);,     }, ,     @Override,     public Object pad(Object object, Integer maxLength) {,       String s = (String) object;,       if (s == null) {,         return s;,       },       if (s.length() == maxLength) {,         return object;,       },       if (s.length() > maxLength) {,         throw new ValueTypeIncompatibleException(this,maxLength,null);,       },       return Strings.padEnd(s, maxLength, ' ');,     }, ,     @Override,     public byte[] toBytes(Object object) {,       if (object == null) {,         throw newIllegalDataException(this + " may not be null");,       },       byte[] b = PVarchar.INSTANCE.toBytes(object);,       if (b.length != ((String) object).length()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + object + ")");,       },       return b;,     }, ,     @Override,     public int toBytes(Object object, byte[] bytes, int offset) {,       if (object == null) {,         throw newIllegalDataException(this + " may not be null");,       },       int len = PVarchar.INSTANCE.toBytes(object, bytes, offset);,       if (len != ((String) object).length()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + object + ")");,       },       return len;,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,       if (!actualType.isCoercibleTo(this)) { // TODO: have isCoercibleTo that takes bytes, offset?,         throwConstraintViolationException(actualType,this);,       },       if (length == 0) {,         return null;,       },       length = StringUtil.getUnpaddedCharLength(bytes, offset, length, sortOrder);,       if (sortOrder == SortOrder.DESC) {,         bytes = SortOrder.invert(bytes, offset, length);,         offset = 0;,       },       // TODO: UTF-8 decoder that will invert as it decodes,       String s = Bytes.toString(bytes, offset, length);,       if (length != s.length()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + s + ")");,       },       return s;,     }, ,     @Override,     public Object toObject(Object object, PDataType actualType) {,       if (equalsAny(actualType, PVarchar.INSTANCE, this)) {,         String s = (String) object;,         return s == null || s.length() > 0 ? s : null;,       },       return throwConstraintViolationException(actualType,this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,       return equalsAny(targetType, this, PVarchar.INSTANCE, PBinary.INSTANCE, PVarbinary.INSTANCE);,     }, ,     @Override,     public void coerceBytes(ImmutableBytesWritable ptr, Object o, PDataType actualType,,         Integer actualMaxLength, Integer actualScale, SortOrder actualModifier,,         Integer desiredMaxLength, Integer desiredScale, SortOrder expectedModifier) {,       if (o != null && actualType.equals(PVarchar.INSTANCE) && ((String)o).length() != ptr.getLength()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + o + ")");,       },       super.coerceBytes(ptr, o, actualType, actualMaxLength, actualScale, actualModifier, desiredMaxLength, desiredScale, expectedModifier);,     }, ,     @Override,     public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,         Integer maxLength, Integer scale, Integer desiredMaxLength, Integer desiredScale) {,       return PVarchar.INSTANCE.isSizeCompatible(ptr, value, srcType, maxLength, scale, desiredMaxLength, desiredScale);,     }, ,     @Override,     public boolean isFixedWidth() {,       return true;,     }, ,     @Override,     public Integer getByteSize() {,       return null;,     }, ,     @Override,     public Integer getMaxLength(Object o) {,       if (o == null) {,         return null;,       },       String value = (String) o;,       return value.length();,     }, ,     @Override,     public int estimateByteSize(Object o) {,       String value = (String) o;,       return value.length();,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,       return PVarchar.INSTANCE.compareTo(lhs, rhs, rhsType);,     }, ,     @Override,     public Object toObject(String value) {,       if (value == null || value.length() == 0) {,         throw newIllegalDataException(this + " may not be null");,       },       if (StringUtil.hasMultiByteChars(value)) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + value + ")");,       },       return value;,     }, ,     @Override,     public Integer estimateByteSizeFromLength(Integer length) {,       return length;,     }, ,     @Override,     public boolean isBytesComparableWith(PDataType otherType) {,       return super.isBytesComparableWith(otherType) || otherType.equals(PVarchar.INSTANCE);,     }, ,     @Override,     public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,       return PVarchar.INSTANCE.toStringLiteral(b, offset, length, formatter);,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,       return PVarchar.INSTANCE.getSampleValue(maxLength, arrayLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PCharArray.java,,27-106,[  public static final PCharArray INSTANCE = new PCharArray();, ,   private PCharArray() {,     super("CHAR ARRAY", PDataType.ARRAY_TYPE_BASE + PChar.INSTANCE.getSqlType(), PhoenixArray.class,,         null, 29);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PChar.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     return toObject(bytes, offset, length, PChar.INSTANCE, sortOrder, maxLength, scale,,         PChar.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] charArr = (Object[]) pArr.array;,     for (Object i : charArr) {,       if (!super.isCoercibleTo(PChar.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PChar.INSTANCE, arrayLength, maxLength);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PDataType.java,compareTo,182-182,[        lhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PDataType.java,compareTo,170-170,[        rhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PDataType.java,getDecimalPrecisionAndScale,705-705,[      d /= 10;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PDataType.java,getJavaClassNameBytes,1059-1059,[    return clazzNameBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PDataType.java,getSqlTypeNameBytes,1063-1063,[    return sqlTypeNameBytes;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDataType.java,equals,306-307,[    if (o == null) return false;,     return getClass() == o.getClass();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/types/PDataType.java,,496-496,[  public static final byte[] FALSE_BYTES = new byte[] { FALSE_BYTE };],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/types/PDataType.java,,497-497,[  public static final byte[] TRUE_BYTES = new byte[] { TRUE_BYTE };],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PDataTypeFactory.java,getOrderedTypes,112-112,[    return orderedTypes;],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/schema/types/PDataTypeFactory.java,getInstance,38-39,[    if (INSTANCE == null) {,       INSTANCE = new PDataTypeFactory();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PDataTypeFactory.java,,45-48,[    types = new TreeSet<>(new Comparator<PDataType>() {,       @Override,       public int compare(PDataType o1, PDataType o2) {,         return Integer.compare(o1.ordinal(), o2.ordinal());],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/schema/types/PDataTypeTest.java,testIllegalUnsignedDateTime,1591-1591,[            SQLException sqlE = (SQLException)e.getCause();],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDate.java,,30-171,[public class PDate extends PDataType<Date> {, ,   public static final PDate INSTANCE = new PDate();, ,   private PDate() {,     super("DATE", Types.DATE, Date.class,,         new DateCodec(), 11); // After TIMESTAMP and DATE to ensure toLiteral finds those first,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     getCodec().encodeLong(((java.util.Date) object).getTime(), bytes, offset);,     return this.getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PTime.INSTANCE, PUnsignedTime.INSTANCE)) {,       return new Date(((java.sql.Time) object).getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return new Date(((java.sql.Timestamp) object).getTime());,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new Date((Long) object);,     } else if (actualType == PDecimal.INSTANCE) {,       return new Date(((BigDecimal) object).longValueExact());,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Date toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE, PDate.INSTANCE,,         PUnsignedDate.INSTANCE, PTime.INSTANCE, PUnsignedTime.INSTANCE, PLong.INSTANCE,,         PUnsignedLong.INSTANCE)) {,       return new Date(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return new Date(bd.longValueExact());,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return super.isCastableTo(targetType) || equalsAny(targetType, PDecimal.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, PDate.INSTANCE, PTime.INSTANCE, PTimestamp.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       if (equalsAny(targetType, PUnsignedTimestamp.INSTANCE, PUnsignedDate.INSTANCE,,           PUnsignedTime.INSTANCE)) {,         return ((java.util.Date) value).getTime() >= 0;,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PTimestamp.INSTANCE || rhsType == PUnsignedTimestamp.INSTANCE) {,       return -rhsType.compareTo(rhs, lhs, PTime.INSTANCE);,     },     return ((java.util.Date) rhs).compareTo((java.util.Date) lhs);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return DateUtil.parseDate(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType == PTime.INSTANCE;,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     if (formatter == null || formatter == DateUtil.DEFAULT_DATE_FORMATTER) {,       // If default formatter has not been overridden,,       // use one that displays milliseconds.,       formatter = DateUtil.DEFAULT_MS_DATE_FORMATTER;,     },     return "'" + super.toStringLiteral(b, offset, length, formatter) + "'";,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifier, Integer desiredMaxLength, Integer desiredScale,,       SortOrder expectedModifier) {,     if (ptr.getLength() > 0 && actualType == PTimestamp.INSTANCE,         && actualModifier == expectedModifier) {,       ptr.set(ptr.get(), ptr.getOffset(), getByteSize());,       return;,     },     super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,,         desiredScale, expectedModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new Date((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PDate.java,compareTo,128-128,[      return -rhsType.compareTo(rhs, lhs, PTime.INSTANCE);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PDate.java,,183-187,[      return new PhoenixArrayFactory() {, ,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDateArray.java,,28-107,[  public static final PDateArray INSTANCE = new PDateArray();, ,   private PDateArray() {,     super("DATE ARRAY", PDataType.ARRAY_TYPE_BASE + PDate.INSTANCE.getSqlType(), PhoenixArray.class,,         null, 40);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PDate.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     return toObject(bytes, offset, length, PDate.INSTANCE, sortOrder, maxLength, scale,,         PDate.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] dateArr = (Object[]) pArr.array;,     for (Object i : dateArr) {,       if (!super.isCoercibleTo(PDate.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale,SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PDate.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDecimal.java,,35-394,[  public static final PDecimal INSTANCE = new PDecimal();, ,   private static final BigDecimal MIN_DOUBLE_AS_BIG_DECIMAL =,       BigDecimal.valueOf(-Double.MAX_VALUE);,   private static final BigDecimal MAX_DOUBLE_AS_BIG_DECIMAL =,       BigDecimal.valueOf(Double.MAX_VALUE);,   private static final BigDecimal MIN_FLOAT_AS_BIG_DECIMAL =,       BigDecimal.valueOf(-Float.MAX_VALUE);,   private static final BigDecimal MAX_FLOAT_AS_BIG_DECIMAL =,       BigDecimal.valueOf(Float.MAX_VALUE);, ,   private PDecimal() {,     super("DECIMAL", Types.DECIMAL, BigDecimal.class, null, 8);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       return ByteUtil.EMPTY_BYTE_ARRAY;,     },     BigDecimal v = (BigDecimal) object;,     v = NumberUtil.normalize(v);,     int len = getLength(v);,     byte[] result = new byte[Math.min(len, MAX_BIG_DECIMAL_BYTES)];,     PDataType.toBytes(v, result, 0, len);,     return result;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       return 0;,     },     BigDecimal v = (BigDecimal) object;,     v = NumberUtil.normalize(v);,     int len = getLength(v);,     return PDataType.toBytes(v, bytes, offset, len);,   }, ,   private int getLength(BigDecimal v) {,     int signum = v.signum();,     if (signum == 0) { // Special case for zero,       return 1;,     },             /*,              * Size of DECIMAL includes:,              * 1) one byte for exponent,              * 2) one byte for terminal byte if negative,              * 3) one byte for every two digits with the following caveats:,              *    a) add one to round up in the case when there is an odd number of digits,              *    b) add one in the case that the scale is odd to account for 10x of lowest significant digit,              *       (basically done to increase the range of exponents that can be represented),              */,     return (signum < 0 ? 2 : 1) + (v.precision() + 1 + (v.scale() % 2 == 0 ? 0 : 1)) / 2;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     if (o == null) {,       return 1;,     },     BigDecimal v = (BigDecimal) o;,     // TODO: should we strip zeros and round here too?,     return Math.min(getLength(v), MAX_BIG_DECIMAL_BYTES);,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return MAX_PRECISION;,     },     BigDecimal v = (BigDecimal) o;,     return v.precision();,   }, ,   @Override,   public Integer getScale(Object o) {,     return null;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Preconditions.checkNotNull(sortOrder);,     if (l == 0) {,       return null;,     },     if (actualType == PDecimal.INSTANCE) {,       if (sortOrder == SortOrder.DESC) {,         b = SortOrder.invert(b, o, new byte[l], 0, l);,         o = 0;,       },       return toBigDecimal(b, o, l);,     } else if (equalsAny(actualType, PDate.INSTANCE, PTime.INSTANCE, PUnsignedDate.INSTANCE,,         PUnsignedTime.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return BigDecimal.valueOf(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return BigDecimal.valueOf(actualType.getCodec().decodeFloat(b, o, sortOrder));,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       return BigDecimal.valueOf(actualType.getCodec().decodeDouble(b, o, sortOrder));,     } else if (equalsAny(actualType, PTimestamp.INSTANCE,,         PUnsignedTimestamp.INSTANCE)) {,       long millisPart = actualType.getCodec().decodeLong(b, o, sortOrder);,       int nanoPart = PUnsignedInt.INSTANCE.getCodec().decodeInt(b, o + Bytes.SIZEOF_LONG, sortOrder);,       BigDecimal nanosPart = BigDecimal.valueOf(,           (nanoPart % QueryConstants.MILLIS_TO_NANOS_CONVERTOR),               / QueryConstants.MILLIS_TO_NANOS_CONVERTOR);,       return BigDecimal.valueOf(millisPart).add(nanosPart);,     } else if (actualType == PBoolean.INSTANCE) {,       return (Boolean) PBoolean.INSTANCE.toObject(b, o, l, actualType, sortOrder) ?,           BigDecimal.ONE :,           BigDecimal.ZERO;,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PInteger.INSTANCE, PUnsignedInt.INSTANCE)) {,       return BigDecimal.valueOf((Integer) object);,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return BigDecimal.valueOf((Long) object);,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       return BigDecimal.valueOf((Short) object);,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       return BigDecimal.valueOf((Byte) object);,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return BigDecimal.valueOf((Float) object);,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       return BigDecimal.valueOf((Double) object);,     } else if (actualType == PDecimal.INSTANCE) {,       return object;,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE)) {,       java.util.Date d = (java.util.Date) object;,       return BigDecimal.valueOf(d.getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE,,         PUnsignedTimestamp.INSTANCE)) {,       Timestamp ts = (Timestamp) object;,       long millisPart = ts.getTime();,       BigDecimal nanosPart = BigDecimal.valueOf(,           (ts.getNanos() % QueryConstants.MILLIS_TO_NANOS_CONVERTOR),               / QueryConstants.MILLIS_TO_NANOS_CONVERTOR);,       BigDecimal value = BigDecimal.valueOf(millisPart).add(nanosPart);,       return value;,     } else if (actualType == PBoolean.INSTANCE) {,       return ((Boolean) object) ? BigDecimal.ONE : BigDecimal.ZERO;,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public Integer getByteSize() {,     return MAX_BIG_DECIMAL_BYTES;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return ((BigDecimal) lhs).compareTo((BigDecimal) rhs);,     },     return -rhsType.compareTo(rhs, lhs, this);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return super.isCastableTo(targetType) || targetType.isCoercibleTo(,         PTimestamp.INSTANCE) || targetType.equals(PBoolean.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       BigDecimal bd;,       if (equalsAny(targetType, PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE,,           PUnsignedSmallint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,         bd = (BigDecimal) value;,         if (bd.signum() == -1) {,           return false;,         },       } else if (targetType.equals(PLong.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.longValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PInteger.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.intValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PSmallint.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.shortValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PTinyint.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.byteValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PUnsignedFloat.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxFloat = MAX_FLOAT_AS_BIG_DECIMAL;,           boolean isNegtive = (bd.signum() == -1);,           return bd.compareTo(maxFloat) <= 0 && !isNegtive;,         } catch (Exception e) {,           return false;,         },       } else if (targetType.equals(PFloat.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxFloat = MAX_FLOAT_AS_BIG_DECIMAL;,           // Float.MIN_VALUE should not be used here, as this is the,           // smallest in terms of closest to zero.,           BigDecimal minFloat = MIN_FLOAT_AS_BIG_DECIMAL;,           return bd.compareTo(maxFloat) <= 0 && bd.compareTo(minFloat) >= 0;,         } catch (Exception e) {,           return false;,         },       } else if (targetType.equals(PUnsignedDouble.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxDouble = MAX_DOUBLE_AS_BIG_DECIMAL;,           boolean isNegtive = (bd.signum() == -1);,           return bd.compareTo(maxDouble) <= 0 && !isNegtive;,         } catch (Exception e) {,           return false;,         },       } else if (targetType.equals(PDouble.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxDouble = MAX_DOUBLE_AS_BIG_DECIMAL;,           BigDecimal minDouble = MIN_DOUBLE_AS_BIG_DECIMAL;,           return bd.compareTo(maxDouble) <= 0 && bd.compareTo(minDouble) >= 0;,         } catch (Exception e) {,           return false;,         },       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength, Integer desiredScale) {,     if (ptr.getLength() == 0) {,       return true;,     },     // Use the scale from the value if provided, as it prevents a deserialization.,     // The maxLength and scale for the underlying expression are ignored, because they,     // are not relevant in this case: for example a DECIMAL(10,2) may be assigned to a,     // DECIMAL(5,0) as long as the value fits.,     if (value != null) {,       BigDecimal v = (BigDecimal) value;,       maxLength = v.precision();,       scale = v.scale();,     } else {,       int[] v = getDecimalPrecisionAndScale(ptr.get(), ptr.getOffset(), ptr.getLength());,       maxLength = v[0];,       scale = v[1];,     },     if (desiredMaxLength != null && desiredScale != null && maxLength != null && scale != null &&,         ((desiredScale == null && desiredMaxLength < maxLength) ||,             (desiredMaxLength - desiredScale) < (maxLength - scale))) {,       return false;,     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifier, Integer desiredMaxLength, Integer desiredScale,,       SortOrder expectedModifier) {,     if (desiredScale == null) {,       // deiredScale not available, or we do not have scale requirement, delegate to parents.,       super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,,           desiredScale, expectedModifier);,       return;,     },     if (ptr.getLength() == 0) {,       return;,     },     if (scale == null) {,       if (object != null) {,         BigDecimal v = (BigDecimal) object;,         scale = v.scale();,       } else {,         int[] v = getDecimalPrecisionAndScale(ptr.get(), ptr.getOffset(), ptr.getLength());,         scale = v[1];,       },     },     if (this == actualType && scale <= desiredScale) {,       // No coerce and rescale necessary,       return;,     } else {,       BigDecimal decimal;,       // Rescale is necessary.,       if (object != null) { // value object is passed in.,         decimal = (BigDecimal) toObject(object, actualType);,       } else { // only value bytes is passed in, need to convert to object first.,         decimal = (BigDecimal) toObject(ptr);,       },       decimal = decimal.setScale(desiredScale, BigDecimal.ROUND_DOWN);,       ptr.set(toBytes(decimal));,     },   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return new BigDecimal(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Integer estimateByteSizeFromLength(Integer length) {,     // No association of runtime byte size from decimal precision.,     return null;,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     if (formatter == null) {,       BigDecimal o = (BigDecimal) toObject(b, offset, length);,       return o.toPlainString();,     },     return super.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new BigDecimal((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/types/PDecimal.java,isSizeCompatible,312-312,[      maxLength = v.precision();],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/types/PDecimal.java,isSizeCompatible,313-313,[      scale = v.scale();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/types/PDecimal.java,coerceBytes,333-333,[      super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PDecimal.java,isSizeCompatible,319-319,[    if (desiredMaxLength != null && desiredScale != null && maxLength != null && scale != null &&],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/schema/types/PDecimal.java,isCoercibleTo,263-263,[        } catch (Exception e) {],,isCoercibleTo,274-274,[        } catch (Exception e) {],,isCoercibleTo,283-283,[        } catch (Exception e) {],,isCoercibleTo,292-292,[        } catch (Exception e) {],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PDecimal.java,compareTo,206-206,[    return -rhsType.compareTo(rhs, lhs, this);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDecimalArray.java,,28-108,[  public static final PDecimalArray INSTANCE = new PDecimalArray();, ,   private PDecimalArray() {,     super("DECIMAL ARRAY", PDataType.ARRAY_TYPE_BASE + PDecimal.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 35);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PDecimal.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PDecimal.INSTANCE, sortOrder, maxLength, scale,,         PDecimal.INSTANCE);,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] decimalArr = (Object[]) pArr.array;,     for (Object i : decimalArr) {,       if (!super.isCoercibleTo(PDecimal.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PDecimal.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDouble.java,,28-193,[public class PDouble extends PDataType<Double> {, ,   public static final PDouble INSTANCE = new PDouble();, ,   private PDouble() {,     super("DOUBLE", Types.DOUBLE, Double.class, new DoubleCodec(), 7);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));,     },     return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_DOUBLE;,   }, ,   @Override,   public Integer getScale(Object o) {,     if (o == null) {,       return null;,     },     Double v = (Double) o;,     BigDecimal bd = BigDecimal.valueOf(v);,     return bd.scale() == 0 ? null : bd.scale();,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return null;,     },     Double v = (Double) o;,     BigDecimal db = BigDecimal.valueOf(v);,     return db.precision();,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_DOUBLE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeDouble(((Number) object).doubleValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Double.parseDouble(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     double de;,     if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       de = (Float) object;,       return de;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       de = (Long) object;,       return de;,     } else if (equalsAny(actualType, PInteger.INSTANCE, PUnsignedInt.INSTANCE)) {,       de = (Integer) object;,       return de;,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       de = (Byte) object;,       return de;,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       de = (Short) object;,       return de;,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal d = (BigDecimal) object;,       return d.doubleValue();,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Double toObject(byte[] b, int o, int l, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (l <= 0) {,       return null;,     },     if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE, PFloat.INSTANCE,,         PUnsignedFloat.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return actualType.getCodec().decodeDouble(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.doubleValue();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       double d = (Double) value;,       if (targetType.equals(PUnsignedDouble.INSTANCE)) {,         return d >= 0;,       } else if (targetType.equals(PFloat.INSTANCE)) {,         return Double.isNaN(d),             || d == Double.POSITIVE_INFINITY,             || d == Double.NEGATIVE_INFINITY,             || (d >= -Float.MAX_VALUE && d <= Float.MAX_VALUE);,       } else if (targetType.equals(PUnsignedFloat.INSTANCE)) {,         return Double.isNaN(d) || d == Double.POSITIVE_INFINITY,             || (d >= 0 && d <= Float.MAX_VALUE);,       } else if (targetType.equals(PUnsignedLong.INSTANCE)) {,         return (d >= 0 && d <= Long.MAX_VALUE);,       } else if (targetType.equals(PLong.INSTANCE)) {,         return (d >= Long.MIN_VALUE && d <= Long.MAX_VALUE);,       } else if (targetType.equals(PUnsignedInt.INSTANCE)) {,         return (d >= 0 && d <= Integer.MAX_VALUE);,       } else if (targetType.equals(PInteger.INSTANCE)) {,         return (d >= Integer.MIN_VALUE && d <= Integer.MAX_VALUE);,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         return (d >= 0 && d <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         return (d >= Short.MIN_VALUE && d <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         return (d >= Byte.MIN_VALUE && d < Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         return (d >= 0 && d < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PDecimal.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextDouble();],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PDouble.java,compareTo,39-39,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PDouble.java,,303-306,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveDoublePhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDoubleArray.java,,27-106,[  public static final PDoubleArray INSTANCE = new PDoubleArray();, ,   private PDoubleArray() {,     super("DOUBLE ARRAY", PDataType.ARRAY_TYPE_BASE + PDouble.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 34);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PDouble.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     return toObject(bytes, offset, length, PDouble.INSTANCE, sortOrder, maxLength, scale,,         PDouble.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray.PrimitiveDoublePhoenixArray pArr = (PhoenixArray.PrimitiveDoublePhoenixArray) value;,     double[] doubleArr = (double[]) pArr.array;,     for (double i : doubleArr) {,       if (!super.isCoercibleTo(PDouble.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PDouble.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PFloat.java,,27-190,[public class PFloat extends PDataType<Float> {, ,   public static final PFloat INSTANCE = new PFloat();, ,   private PFloat() {,     super("FLOAT", Types.FLOAT, Float.class, new FloatCodec(), 6);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PDouble.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_FLOAT;,   }, ,   @Override,   public Integer getScale(Object o) {,     if (o == null) {,       return null;,     },     Float v = (Float) o;,     BigDecimal bd = BigDecimal.valueOf(v);,     return bd.scale() == 0 ? null : bd.scale();,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return null;,     },     Float v = (Float) o;,     BigDecimal bd = BigDecimal.valueOf(v);,     return bd.precision();,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_FLOAT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeFloat(((Number) object).floatValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Float.parseFloat(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     float f;,     if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       double d = (Double) object;,       if (Double.isNaN(d),           || d == Double.POSITIVE_INFINITY,           || d == Double.NEGATIVE_INFINITY,           || (d >= -Float.MAX_VALUE && d <= Float.MAX_VALUE)) {,         return (float) d;,       } else {,         throw newIllegalDataException(,             actualType + " value " + d + " cannot be cast to Float without changing its value");,       },     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       f = (Long) object;,       return f;,     } else if (equalsAny(actualType, PInteger.INSTANCE, PUnsignedInt.INSTANCE)) {,       f = (Integer) object;,       return f;,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       f = (Byte) object;,       return f;,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       f = (Short) object;,       return f;,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal dl = (BigDecimal) object;,       return dl.floatValue();,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Float toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l <= 0) {,       return null;,     },     if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE, PDouble.INSTANCE,,         PUnsignedDouble.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return actualType.getCodec().decodeFloat(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.floatValue();,     }, ,     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       float f = (Float) value;,       if (targetType.equals(PUnsignedFloat.INSTANCE)) {,         return f >= 0;,       } else if (targetType.equals(PUnsignedLong.INSTANCE)) {,         return (f >= 0 && f <= Long.MAX_VALUE);,       } else if (targetType.equals(PLong.INSTANCE)) {,         return (f >= Long.MIN_VALUE && f <= Long.MAX_VALUE);,       } else if (targetType.equals(PUnsignedInt.INSTANCE)) {,         return (f >= 0 && f <= Integer.MAX_VALUE);,       } else if (targetType.equals(PInteger.INSTANCE)) {,         return (f >= Integer.MIN_VALUE && f <= Integer.MAX_VALUE);,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         return (f >= 0 && f <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         return (f >= Short.MIN_VALUE && f <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         return (f >= Byte.MIN_VALUE && f < Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         return (f >= 0 && f < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PDouble.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextFloat();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PFloat.java,,300-303,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveFloatPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PFloatArray.java,,27-107,[  public static final PFloatArray INSTANCE = new PFloatArray();, ,   private PFloatArray() {,     super("FLOAT ARRAY", PDataType.ARRAY_TYPE_BASE + PFloat.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 33);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PFloat.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PFloat.INSTANCE, sortOrder, maxLength, scale,,         PFloat.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray.PrimitiveFloatPhoenixArray pArr = (PhoenixArray.PrimitiveFloatPhoenixArray) value;,     float[] floatArr = (float[]) pArr.array;,     for (float i : floatArr) {,       if (!super.isCoercibleTo(PFloat.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PFloat.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PInteger.java,,27-158,[public class PInteger extends PDataType<Integer> {, ,   public static final PInteger INSTANCE = new PInteger();, ,   private PInteger() {,     super("INTEGER", Types.INTEGER, Integer.class, new IntCodec(), 3);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_INT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeInt(((Number) object).intValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Object o = PLong.INSTANCE.toObject(object, actualType);,     if (!(o instanceof Long) || o == null) {,       return o;,     },     long l = (Long) o;,     if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {,       throw newIllegalDataException(,           actualType + " value " + l + " cannot be cast to Integer without changing its value");,     },     int v = (int) l;,     return v;,   }, ,   @Override,   public Integer toObject(byte[] b, int o, int l, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE, PFloat.INSTANCE, PUnsignedFloat.INSTANCE, PDouble.INSTANCE,,         PUnsignedDouble.INSTANCE)) {,       return actualType.getCodec().decodeInt(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.intValueExact();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       int i;,       if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,           PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE)) {,         i = (Integer) value;,         return i >= 0;,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         i = (Integer) value;,         return (i >= 0 && i <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         i = (Integer) value;,         return (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         i = (Integer) value;,         return (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         i = (Integer) value;,         return (i >= 0 && i < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PFloat.INSTANCE) || PLong.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_INT;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return INT_PRECISION;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Integer.parseInt(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextInt();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PInteger.java,toObject,58-58,[    if (!(o instanceof Long) || o == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PInteger.java,,267-270,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveIntPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PIntegerArray.java,,27-107,[  public static final PIntegerArray INSTANCE = new PIntegerArray();, ,   private PIntegerArray() {,     super("INTEGER ARRAY", PDataType.ARRAY_TYPE_BASE + PInteger.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 24);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PInteger.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PInteger.INSTANCE, sortOrder, maxLength, scale,,         PInteger.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray.PrimitiveIntPhoenixArray pArr = (PhoenixArray.PrimitiveIntPhoenixArray) value;,     int[] intArr = (int[]) pArr.array;,     for (int i : intArr) {,       if (!super.isCoercibleTo(PInteger.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PInteger.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PLong.java,,29-210,[public class PLong extends PDataType<Long> {, ,   public static final PLong INSTANCE = new PLong();, ,   private PLong() {,     super("BIGINT", Types.BIGINT, Long.class, new LongCodec(), 2);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_LONG];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeLong(((Number) object).longValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     long s;,     if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PUnsignedInt.INSTANCE,,         PInteger.INSTANCE)) {,       s = (Integer) object;,       return s;,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       s = (Byte) object;,       return s;,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       s = (Short) object;,       return s;,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       Float f = (Float) object;,       if (f > Long.MAX_VALUE || f < Long.MIN_VALUE) {,         throw newIllegalDataException(,             actualType + " value " + f + " cannot be cast to Long without changing its value");,       },       s = f.longValue();,       return s;,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       Double de = (Double) object;,       if (de > Long.MAX_VALUE || de < Long.MIN_VALUE) {,         throw newIllegalDataException(,             actualType + " value " + de + " cannot be cast to Long without changing its value");,       },       s = de.longValue();,       return s;,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal d = (BigDecimal) object;,       return d.longValueExact();,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE)) {,       java.util.Date date = (java.util.Date) object;,       return date.getTime();,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Long toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE,,         PInteger.INSTANCE, PUnsignedInt.INSTANCE, PSmallint.INSTANCE,,         PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE, PFloat.INSTANCE,,         PUnsignedFloat.INSTANCE, PDouble.INSTANCE, PUnsignedDouble.INSTANCE, PDate.INSTANCE,,         PUnsignedDate.INSTANCE, PTime.INSTANCE, PUnsignedTime.INSTANCE)) {,       return actualType.getCodec().decodeLong(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.longValueExact();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     // In general, don't allow conversion of LONG to INTEGER. There are times when,     // we check isComparableTo for a more relaxed check and then throw a runtime,     // exception if we overflow,     return equalsAny(targetType, this, PDecimal.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE, PDouble.INSTANCE);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       long l;,       if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,           PUnsignedLong.INSTANCE)) {,         l = (Long) value;,         return l >= 0;,       } else if (targetType.equals(PUnsignedInt.INSTANCE)) {,         l = (Long) value;,         return (l >= 0 && l <= Integer.MAX_VALUE);,       } else if (targetType.equals(PInteger.INSTANCE)) {,         l = (Long) value;,         return (l >= Integer.MIN_VALUE && l <= Integer.MAX_VALUE);,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         l = (Long) value;,         return (l >= 0 && l <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         l = (Long) value;,         return (l >= Short.MIN_VALUE && l <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         l = (Long) value;,         return (l >= Byte.MIN_VALUE && l < Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         l = (Long) value;,         return (l >= 0 && l < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return super.isCastableTo(targetType) || targetType.isCoercibleTo(PTimestamp.INSTANCE);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return LONG_PRECISION;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));,     } else if (equalsAny(rhsType, PDouble.INSTANCE, PFloat.INSTANCE, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,     },     return Longs.compare(((Number) lhs).longValue(), ((Number) rhs).longValue());,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Long.parseLong(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextLong();],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PLong.java,compareTo,189-189,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PLong.java,,323-326,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveLongPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PLongArray.java,,27-107,[  public static final PLongArray INSTANCE = new PLongArray();, ,   private PLongArray() {,     super("BIGINT ARRAY", PDataType.ARRAY_TYPE_BASE + PLong.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 30);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PLong.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PLong.INSTANCE, sortOrder, maxLength, scale,,         PLong.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray.PrimitiveLongPhoenixArray pArr = (PhoenixArray.PrimitiveLongPhoenixArray) value;,     long[] longArr = (long[]) pArr.array;,     for (long i : longArr) {,       if (!super.isCoercibleTo(PLong.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PLong.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PSmallint.java,,27-150,[public class PSmallint extends PDataType<Short> {, ,   public static final PSmallint INSTANCE = new PSmallint();, ,   private PSmallint() {,     super("SMALLINT", Types.SMALLINT, Short.class, new ShortCodec(), 4);,   }, ,   @Override,     public Integer getScale(Object o) {,       return ZERO;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,       return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,     }, ,     @Override,     public boolean isComparableTo(PDataType targetType) {,       return PDecimal.INSTANCE.isComparableTo(targetType);,     }, ,     @Override,     public boolean isFixedWidth() {,       return true;,     }, ,     @Override,     public Integer getByteSize() {,       return Bytes.SIZEOF_SHORT;,     }, ,     @Override,     public Integer getMaxLength(Object o) {,       return SHORT_PRECISION;,     }, ,     @Override,     public byte[] toBytes(Object object) {,       byte[] b = new byte[Bytes.SIZEOF_SHORT];,       toBytes(object, b, 0);,       return b;,     }, ,     @Override,     public int toBytes(Object object, byte[] bytes, int offset) {,       if (object == null) {,         throw newIllegalDataException(this + " may not be null");,       },       return this.getCodec().encodeShort(((Number)object).shortValue(), bytes, offset);,     }, ,     @Override,     public Object toObject(Object object, PDataType actualType) {,       Object o = PLong.INSTANCE.toObject(object, actualType);,       if (!(o instanceof Long) || o == null) {,         return o;,       },       long l = (Long)o;,       if (l < Short.MIN_VALUE || l > Short.MAX_VALUE) {,         throw newIllegalDataException(actualType + " value " + l + " cannot be cast to Short without changing its value");,       },       short s = (short)l;,       return s;,     }, ,     @Override,     public Short toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,       if (l == 0) {,         return null;,       },       if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,           PUnsignedTinyint.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,           PUnsignedInt.INSTANCE, PFloat.INSTANCE, PUnsignedFloat.INSTANCE, PDouble.INSTANCE,,           PUnsignedDouble.INSTANCE)) {,         return actualType.getCodec().decodeShort(b, o, sortOrder);,       } else if (actualType == PDecimal.INSTANCE) {,         BigDecimal bd = (BigDecimal)actualType.toObject(b, o, l, actualType, sortOrder);,         return bd.shortValueExact();,       },       throwConstraintViolationException(actualType,this);,       return null;,     }, ,     @Override,     public Object toObject(String value) {,       if (value == null || value.length() == 0) {,         return null;,       },       try {,         return Short.parseShort(value);,       } catch (NumberFormatException e) {,         throw newIllegalDataException(e);,       },     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,       if (value != null) {,         short i;,         if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,             PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE, PUnsignedSmallint.INSTANCE)) {,           i = (Short) value;,           return i >= 0;,         } else if (targetType == PUnsignedTinyint.INSTANCE) {,           i = (Short) value;,           return (i >= 0 && i <= Byte.MAX_VALUE);,         } else if (targetType == PTinyint.INSTANCE) {,           i = (Short) value;,           return (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE);,         },       },       return super.isCoercibleTo(targetType, value);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,       return this.equals(targetType) || PInteger.INSTANCE.isCoercibleTo(targetType);,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,       return ((Integer) PInteger.INSTANCE.getSampleValue(maxLength, arrayLength)).shortValue();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PSmallint.java,toObject,83-83,[      if (!(o instanceof Long) || o == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PSmallint.java,,251-254,[          return new PhoenixArrayFactory() {,               @Override,               public PhoenixArray newArray(PDataType type, Object[] elements) {,                   return new PhoenixArray.PrimitiveShortPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PSmallintArray.java,,27-107,[  public static final PSmallintArray INSTANCE = new PSmallintArray();, ,   private PSmallintArray() {,     super("SMALLINT ARRAY", PDataType.ARRAY_TYPE_BASE + PSmallint.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 31);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PSmallint.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PSmallint.INSTANCE, sortOrder, maxLength, scale,,         PSmallint.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray.PrimitiveShortPhoenixArray pArr = (PhoenixArray.PrimitiveShortPhoenixArray) value;,     short[] shortArr = (short[]) pArr.array;,     for (short i : shortArr) {,       if (!super.isCoercibleTo(PSmallint.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PSmallint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTime.java,,29-135,[public class PTime extends PDataType<Time> {, ,   public static final PTime INSTANCE = new PTime();, ,   private PTime() {,     super("TIME", Types.TIME, java.sql.Time.class, new PDate.DateCodec(), 10);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return PDate.INSTANCE.toBytes(object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     return PDate.INSTANCE.toBytes(object, bytes, offset);,   }, ,   @Override,   public java.sql.Time toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE, PDate.INSTANCE,,         PUnsignedDate.INSTANCE, PTime.INSTANCE, PUnsignedTime.INSTANCE, PLong.INSTANCE,,         PUnsignedLong.INSTANCE)) {,       return new java.sql.Time(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return new java.sql.Time(bd.longValueExact());,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE)) {,       return new java.sql.Time(((java.util.Date) object).getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return new java.sql.Time(((java.sql.Timestamp) object).getTime());,     } else if (equalsAny(actualType, PTime.INSTANCE, PUnsignedTime.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new java.sql.Time((Long) object);,     } else if (actualType == PDecimal.INSTANCE) {,       return new java.sql.Time(((BigDecimal) object).longValueExact());,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return PDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return PDate.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PDate.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return DateUtil.parseTime(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType.equals(PDate.INSTANCE);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     // TODO: different default formatter for TIME?,     return PDate.INSTANCE.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Time((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTimeArray.java,,28-108,[  public static final PTimeArray INSTANCE = new PTimeArray();, ,   private PTimeArray() {,     super("TIME ARRAY", PDataType.ARRAY_TYPE_BASE + PTime.INSTANCE.getSqlType(), PhoenixArray.class,,         null, 38);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PTime.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PTime.INSTANCE, sortOrder, maxLength, scale,,         PTime.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] timeArr = (Object[]) pArr.array;,     for (Object i : timeArr) {,       if (!super.isCoercibleTo(PTime.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PTime.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTimestamp.java,,31-207,[public class PTimestamp extends PDataType<Timestamp> {, ,   public static final PTimestamp INSTANCE = new PTimestamp();, ,   private PTimestamp() {,     super("TIMESTAMP", Types.TIMESTAMP, java.sql.Timestamp.class,,         new PDate.DateCodec(), 9);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     java.sql.Timestamp value = (java.sql.Timestamp) object;,     PDate.INSTANCE.getCodec().encodeLong(value.getTime(), bytes, offset);, ,             /*,              * By not getting the stuff that got spilled over from the millis part,,              * it leaves the timestamp's byte representation saner - 8 bytes of millis | 4 bytes of nanos.,              * Also, it enables timestamp bytes to be directly compared with date/time bytes.,              */,     Bytes.putInt(bytes, offset + Bytes.SIZEOF_LONG, value.getNanos() % 1000000);,     return getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE)) {,       return new java.sql.Timestamp(((java.util.Date) object).getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new java.sql.Timestamp((Long) object);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) object;,       long ms = bd.longValue();,       int nanos =,           (bd.remainder(BigDecimal.ONE).multiply(QueryConstants.BD_MILLIS_NANOS_CONVERSION)),               .intValue();,       return DateUtil.getTimestamp(ms, nanos);,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public java.sql.Timestamp toObject(byte[] b, int o, int l, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (actualType == null || l == 0) {,       return null;,     },     java.sql.Timestamp v;,     if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       long millisDeserialized =,           (actualType == PTimestamp.INSTANCE ? PDate.INSTANCE : PUnsignedDate.INSTANCE).getCodec(),               .decodeLong(b, o, sortOrder);,       v = new java.sql.Timestamp(millisDeserialized);,       int nanosDeserialized =,           PUnsignedInt.INSTANCE.getCodec().decodeInt(b, o + Bytes.SIZEOF_LONG, sortOrder);,                 /*,                  * There was a bug in serialization of timestamps which was causing the sub-second millis part,                  * of time stamp to be present both in the LONG and INT bytes. Having the <100000 check,                  * makes this serialization fix backward compatible.,                  */,       v.setNanos(,           nanosDeserialized < 1000000 ? v.getNanos() + nanosDeserialized : nanosDeserialized);,       return v;,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new java.sql.Timestamp(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       long ms = bd.longValue();,       int nanos = (bd.remainder(BigDecimal.ONE).multiply(QueryConstants.BD_MILLIS_NANOS_CONVERSION)),           .intValue();,       v = DateUtil.getTimestamp(ms, nanos);,       return v;,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       if (targetType.equals(PUnsignedTimestamp.INSTANCE)) {,         return ((java.util.Date) value).getTime() >= 0;,       } else if (equalsAny(targetType, PUnsignedDate.INSTANCE, PUnsignedTime.INSTANCE)) {,         return ((java.util.Date) value).getTime() >= 0,             && ((java.sql.Timestamp) value).getNanos() == 0;,       } else if (equalsAny(targetType, PDate.INSTANCE, PTime.INSTANCE)) {,         return ((java.sql.Timestamp) value).getNanos() == 0;,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return MAX_TIMESTAMP_BYTES;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (equalsAny(rhsType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return ((java.sql.Timestamp) lhs).compareTo((java.sql.Timestamp) rhs);,     },     int c = ((java.util.Date) rhs).compareTo((java.util.Date) lhs);,     if (c != 0) return c;,     return ((java.sql.Timestamp) lhs).getNanos();,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return DateUtil.parseTimestamp(value);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     java.sql.Timestamp value = (java.sql.Timestamp) toObject(b, offset, length);,     if (formatter == null || formatter == DateUtil.DEFAULT_DATE_FORMATTER) {,       // If default formatter has not been overridden,,       // use one that displays milliseconds.,       formatter = DateUtil.DEFAULT_MS_DATE_FORMATTER;,     },     return "'" + super.toStringLiteral(b, offset, length, formatter) + "." + value.getNanos() + "'";,   }, ,   @Override,   public int getNanos(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     int nanos = PUnsignedInt.INSTANCE.getCodec(),         .decodeInt(ptr.get(), ptr.getOffset() + PLong.INSTANCE.getByteSize(), sortOrder);,     return nanos;,   }, ,   @Override,   public long getMillis(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     long millis = PLong.INSTANCE.getCodec().decodeLong(ptr.get(), ptr.getOffset(), sortOrder);,     return millis;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Timestamp(,         (Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTimestampArray.java,,27-107,[  public static final PTimestampArray INSTANCE = new PTimestampArray();, ,   private PTimestampArray() {,     super("TIMESTAMP ARRAY", PDataType.ARRAY_TYPE_BASE + PTimestamp.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 36);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PTimestamp.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PTimestamp.INSTANCE, sortOrder, maxLength, scale,,         PTimestamp.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] timeStampArr = (Object[]) pArr.array;,     for (Object i : timeStampArr) {,       if (!super.isCoercibleTo(PTimestamp.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PTimestamp.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTinyint.java,,27-147,[public class PTinyint extends PDataType<Byte> {, ,   public static final PTinyint INSTANCE = new PTinyint();, ,   private PTinyint() {,     super("TINYINT", Types.TINYINT, Byte.class, new ByteCodec(), 5);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_BYTE;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return BYTE_PRECISION;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_BYTE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeByte(((Number) object).byteValue(), bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Byte b = Byte.parseByte(value);,       return b;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Object o = PLong.INSTANCE.toObject(object, actualType);,     if (!(o instanceof Long) || o == null) {,       return o;,     },     long l = (Long) o;,     if (l < Byte.MIN_VALUE || l > Byte.MAX_VALUE) {,       throw newIllegalDataException(,           actualType + " value " + l + " cannot be cast to Byte without changing its value");,     },     return (byte) l;,   }, ,   @Override,   public Byte toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE, PFloat.INSTANCE,,         PUnsignedFloat.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return actualType.getCodec().decodeByte(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.byteValueExact();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       if (equalsAny(targetType, this, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,           PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE, PUnsignedSmallint.INSTANCE,,           PUnsignedTinyint.INSTANCE)) {,         byte i = (Byte) value;,         return i >= 0;,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PSmallint.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return ((Integer) PInteger.INSTANCE.getSampleValue(maxLength, arrayLength)),         .byteValue();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PTinyint.java,toObject,96-96,[    if (!(o instanceof Long) || o == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PTinyint.java,,245-248,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveBytePhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTinyintArray.java,,27-107,[  public static final PTinyintArray INSTANCE = new PTinyintArray();, ,   private PTinyintArray() {,     super("TINYINT ARRAY", PDataType.ARRAY_TYPE_BASE + PTinyint.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 32);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PTinyint.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PTinyint.INSTANCE, sortOrder, maxLength, scale,,         PTinyint.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray.PrimitiveBytePhoenixArray pArr = (PhoenixArray.PrimitiveBytePhoenixArray) value;,     byte[] byteArr = (byte[]) pArr.array;,     for (byte i : byteArr) {,       if (!super.isCoercibleTo(PTinyint.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PTinyint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDate.java,,30-143,[  public static final PUnsignedDate INSTANCE = new PUnsignedDate();, ,   private PUnsignedDate() {,     super("UNSIGNED_DATE", 19, Date.class,,         new UnsignedDateCodec(), 14); // After TIMESTAMP and DATE to ensure toLiteral finds those first,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     getCodec().encodeLong(((java.util.Date) object).getTime(), bytes, offset);,     return this.getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Date d = (Date) PDate.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeDate(d);,     return d;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     Date d = (Date) PDate.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeDate(d);,     return d;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PUnsignedTime.INSTANCE, PUnsignedTimestamp.INSTANCE),         || PDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PDate.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return PDate.INSTANCE.getByteSize();,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PDate.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     return PDate.INSTANCE.toObject(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType.equals(PUnsignedTime.INSTANCE);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     // Can't delegate, as the super.toStringLiteral calls this.toBytes,     if (formatter == null || formatter == DateUtil.DEFAULT_DATE_FORMATTER) {,       // If default formatter has not been overridden,,       // use one that displays milliseconds.,       formatter = DateUtil.DEFAULT_MS_DATE_FORMATTER;,     },     return "'" + super.toStringLiteral(b, offset, length, formatter) + "'";,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifier,,       Integer desiredMaxLength, Integer desiredScale,,       SortOrder expectedModifier) {,     if (ptr.getLength() > 0 && actualType == PUnsignedTimestamp.INSTANCE,         && actualModifier == expectedModifier) {,       ptr.set(ptr.get(), ptr.getOffset(), getByteSize());,       return;,     },     super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,,         desiredScale, expectedModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.DATE;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new Date((Long) PUnsignedLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PUnsignedDate.java,,155-159,[      return new PhoenixArrayFactory() {, ,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDateArray.java,,28-108,[  public static final PUnsignedDateArray INSTANCE = new PUnsignedDateArray();, ,   private PUnsignedDateArray() {,     super("UNSIGNED_DATE ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedDate.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 41);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedDate.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedDate.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedDate.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] dateArr = (Object[]) pArr.array;,     for (Object i : dateArr) {,       if (!super.isCoercibleTo(PUnsignedDate.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedDate.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDouble.java,,29-129,[  public static final PUnsignedDouble INSTANCE = new PUnsignedDouble();, ,   private PUnsignedDouble() {,     super("UNSIGNED_DOUBLE", 15, Double.class, new UnsignedDoubleCodec(), 20);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));,     },     return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_DOUBLE;,   }, ,   @Override,   public Integer getScale(Object o) {,     return PDouble.INSTANCE.getScale(o);,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return PDouble.INSTANCE.getMaxLength(o);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_DOUBLE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeDouble(((Number) object).doubleValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Double d = Double.parseDouble(value);,       if (d.doubleValue() < 0) {,         throw newIllegalDataException("Value may not be negative(",             + d + ")");,       },       return d;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Double v = (Double) PDouble.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Double v = (Double) PDouble.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PDouble.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PDouble.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PDouble.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Double) PDouble.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PUnsignedDouble.java,compareTo,38-38,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDoubleArray.java,,27-110,[  public static final PUnsignedDoubleArray INSTANCE = new PUnsignedDoubleArray();, ,   private PUnsignedDoubleArray() {,     super("UNSIGNED_DOUBLE ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedDouble.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 47);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedDouble.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedDouble.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedDouble.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] doubleArr = (Object[]) pArr.array;,     for (Object i : doubleArr) {,       if (!super.isCoercibleTo(PUnsignedDouble.INSTANCE, i) && (!super.isCoercibleTo(,           PUnsignedTimestamp.INSTANCE, i)),           && (!super.isCoercibleTo(PUnsignedTime.INSTANCE, i)) && (!super,           .isCoercibleTo(PUnsignedDate.INSTANCE, i))) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedDouble.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedFloat.java,,26-123,[  public static final PUnsignedFloat INSTANCE = new PUnsignedFloat();, ,   private PUnsignedFloat() {,     super("UNSIGNED_FLOAT", 14, Float.class, new UnsignedFloatCodec(), 19);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PFloat.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_FLOAT;,   }, ,   @Override,   public Integer getScale(Object o) {,     return PFloat.INSTANCE.getScale(o);,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return PFloat.INSTANCE.getMaxLength(o);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_FLOAT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeFloat(((Number) object).floatValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Float f = Float.parseFloat(value);,       if (f.floatValue() < 0) {,         throw newIllegalDataException("Value may not be negative(",             + f + ")");,       },       return f;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Float v = (Float) PFloat.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Float v = (Float) PFloat.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType) || PFloat.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PUnsignedDouble.INSTANCE.isCoercibleTo(targetType) || PFloat.INSTANCE,         .isCoercibleTo(targetType);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PFloat.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Float) PFloat.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedFloatArray.java,,27-107,[  public static final PUnsignedFloatArray INSTANCE = new PUnsignedFloatArray();, ,   private PUnsignedFloatArray() {,     super("UNSIGNED_FLOAT ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedFloat.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 46);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedFloat.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedFloat.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedFloat.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] floatArr = (Object[]) pArr.array;,     for (Object i : floatArr) {,       if (!super.isCoercibleTo(PUnsignedFloat.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedFloat.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedInt.java,,35-149,[  public static final PUnsignedInt INSTANCE = new PUnsignedInt();, ,   private PUnsignedInt() {,     super("UNSIGNED_INT", 9 /* no constant available in Types */, Integer.class,,         new UnsignedIntCodec(), 16);,   }, ,   @Override,   public boolean isOrderPreserving() {,     return true;,   }, ,   @Override,   public Order getOrder() {,     return Order.ASCENDING;,   }, ,   @Override,   public boolean isSkippable() {,     return true;,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_INT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeInt(((Number) object).intValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Integer v = (Integer) PInteger.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Integer v =,         (Integer) PInteger.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || targetType.equals(PUnsignedFloat.INSTANCE),         || PUnsignedLong.INSTANCE.isCoercibleTo(targetType),         || PInteger.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PInteger.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_INT;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Integer i = Integer.parseInt(value);,       if (i.intValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + i + ")");,       },       return i;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public int getResultSetSqlType() {,     return PInteger.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Integer) PInteger.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedIntArray.java,,27-107,[  public static final PUnsignedIntArray INSTANCE = new PUnsignedIntArray();, ,   private PUnsignedIntArray() {,     super("UNSIGNED_INT ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedInt.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 43);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedInt.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedInt.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedInt.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] intArr = (Object[]) pArr.array;,     for (Object i : intArr) {,       if (!super.isCoercibleTo(PUnsignedInt.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedInt.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedLong.java,,39-156,[  public static final PUnsignedLong INSTANCE = new PUnsignedLong();, ,   private PUnsignedLong() {,     super("UNSIGNED_LONG", 10 /* no constant available in Types */, Long.class,,         new UnsignedLongCodec(), 15);,   }, ,   @Override,   public boolean isOrderPreserving() {,     return true;,   }, ,   @Override,   public Order getOrder() {,     return Order.ASCENDING;,   }, ,   @Override,   public boolean isSkippable() {,     return true;,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_LONG];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeLong(((Number) object).longValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Long v = (Long) PLong.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Long v = (Long) PLong.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType == this || targetType == PUnsignedDouble.INSTANCE || PLong.INSTANCE,         .isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PLong.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));,     } else if (equalsAny(rhsType, PDouble.INSTANCE, PFloat.INSTANCE, PUnsignedDouble.INSTANCE,,         PUnsignedFloat.INSTANCE)) {,       return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,     },     return Longs.compare(((Number) lhs).longValue(), ((Number) rhs).longValue());,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Long l = Long.parseLong(value);,       if (l.longValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + l + ")");,       },       return l;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public int getResultSetSqlType() {,     return PLong.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PUnsignedLong.java,compareTo,120-120,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedLongArray.java,,27-107,[  public static final PUnsignedLongArray INSTANCE = new PUnsignedLongArray();, ,   private PUnsignedLongArray() {,     super("UNSIGNED_LONG ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedLong.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 42);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedLong.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedLong.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedLong.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] longArr = (Object[]) pArr.array;,     for (Object i : longArr) {,       if (!super.isCoercibleTo(PUnsignedLong.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedLong.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedSmallint.java,,26-130,[  public static final PUnsignedSmallint INSTANCE = new PUnsignedSmallint();, ,   private PUnsignedSmallint() {,     super("UNSIGNED_SMALLINT", 13, Short.class, new UnsignedShortCodec(), 17);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_SHORT;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return SHORT_PRECISION;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] b = new byte[Bytes.SIZEOF_SHORT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeShort(((Number) object).shortValue(), bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Short b = Short.parseShort(value);,       if (b.shortValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + b + ")");,       },       return b;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Short v = (Short) PSmallint.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Short v = (Short) PSmallint.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || PUnsignedInt.INSTANCE.isCoercibleTo(targetType) || PSmallint.INSTANCE,         .isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PSmallint.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PSmallint.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return ((Integer) RANDOM.get().nextInt(Short.MAX_VALUE)).shortValue();],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedSmallintArray.java,,27-108,[  public static final PUnsignedSmallintArray INSTANCE = new PUnsignedSmallintArray();, ,   private PUnsignedSmallintArray() {,     super("UNSIGNED_SMALLINT ARRAY",,         PDataType.ARRAY_TYPE_BASE + PUnsignedSmallint.INSTANCE.getSqlType(), PhoenixArray.class,,         null, 44);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedSmallint.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedSmallint.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedSmallint.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] shortArr = (Object[]) pArr.array;,     for (Object i : shortArr) {,       if (!super.isCoercibleTo(PUnsignedSmallint.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedSmallint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTime.java,,29-113,[  public static final PUnsignedTime INSTANCE = new PUnsignedTime();, ,   private PUnsignedTime() {,     super("UNSIGNED_TIME", 18, java.sql.Time.class, new PUnsignedDate.UnsignedDateCodec(), 13);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return PUnsignedDate.INSTANCE.toBytes(object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     return PUnsignedDate.INSTANCE.toBytes(object, bytes, offset);,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     java.sql.Time t = (java.sql.Time) PTime.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeDate(t);,     return t;,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     java.sql.Time t = (java.sql.Time) PTime.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeDate(t);,     return t;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PUnsignedDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return PUnsignedDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PTime.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PTime.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     return PTime.INSTANCE.toObject(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType == PUnsignedDate.INSTANCE;,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     return PUnsignedDate.INSTANCE.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.TIME;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Time(,         (Long) PUnsignedLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTimeArray.java,,27-107,[  public static final PUnsignedTimeArray INSTANCE = new PUnsignedTimeArray();, ,   private PUnsignedTimeArray() {,     super("UNSIGNED_TIME ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedTime.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 39);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedTime.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedTime.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedTime.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] timeArr = (Object[]) pArr.array;,     for (Object i : timeArr) {,       if (!super.isCoercibleTo(PUnsignedTime.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedTime.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTimestamp.java,,31-149,[  public static final PUnsignedTimestamp INSTANCE = new PUnsignedTimestamp();, ,   private PUnsignedTimestamp() {,     super("UNSIGNED_TIMESTAMP", 19, java.sql.Timestamp.class, null, 12);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     java.sql.Timestamp value = (java.sql.Timestamp) object;,     PUnsignedDate.INSTANCE.getCodec().encodeLong(value.getTime(), bytes, offset);, ,             /*,              * By not getting the stuff that got spilled over from the millis part,,              * it leaves the timestamp's byte representation saner - 8 bytes of millis | 4 bytes of nanos.,              * Also, it enables timestamp bytes to be directly compared with date/time bytes.,              */,     Bytes.putInt(bytes, offset + Bytes.SIZEOF_LONG, value.getNanos() % 1000000);,     return getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     java.sql.Timestamp ts = (java.sql.Timestamp) PTimestamp.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeDate(ts);,     return ts;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     java.sql.Timestamp ts =,         (java.sql.Timestamp) PTimestamp.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeDate(ts);,     return ts;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PUnsignedDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || PUnsignedDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PTimestamp.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return PTimestamp.INSTANCE.getByteSize();,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PTimestamp.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     return PTimestamp.INSTANCE.toObject(value);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     java.sql.Timestamp value = (java.sql.Timestamp) toObject(b, offset, length);,     if (formatter == null || formatter == DateUtil.DEFAULT_DATE_FORMATTER) {,       // If default formatter has not been overridden,,       // use one that displays milliseconds.,       formatter = DateUtil.DEFAULT_MS_DATE_FORMATTER;,     },     return "'" + super.toStringLiteral(b, offset, length, formatter) + "." + value.getNanos() + "'";,   }, ,   @Override,   public int getNanos(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     int nanos = PUnsignedInt.INSTANCE.getCodec(),         .decodeInt(ptr.get(), ptr.getOffset() + PLong.INSTANCE.getByteSize(), sortOrder);,     return nanos;,   }, ,   @Override,   public long getMillis(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     long millis =,         PUnsignedLong.INSTANCE.getCodec().decodeLong(ptr.get(), ptr.getOffset(), sortOrder);,     return millis;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.TIMESTAMP;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Timestamp(,         (Long) PUnsignedLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTimestampArray.java,,27-108,[  public static final PUnsignedTimestampArray INSTANCE = new PUnsignedTimestampArray();, ,   private PUnsignedTimestampArray() {,     super("UNSIGNED_TIMESTAMP ARRAY",,         PDataType.ARRAY_TYPE_BASE + PUnsignedTimestamp.INSTANCE.getSqlType(), PhoenixArray.class,,         null, 37);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedTimestamp.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedTimestamp.INSTANCE, sortOrder,,         maxLength, scale, PUnsignedTimestamp.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] timeStampArr = (Object[]) pArr.array;,     for (Object i : timeStampArr) {,       if (!super.isCoercibleTo(PUnsignedTimestamp.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedTimestamp.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTinyint.java,,26-127,[  public static final PUnsignedTinyint INSTANCE = new PUnsignedTinyint();, ,   private PUnsignedTinyint() {,     super("UNSIGNED_TINYINT", 11, Byte.class, new UnsignedByteCodec(), 18);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_BYTE;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return BYTE_PRECISION;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_BYTE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeByte(((Number) object).byteValue(), bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Byte b = Byte.parseByte(value);,       if (b.byteValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + b + ")");,       },       return b;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Byte v = (Byte) PTinyint.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Byte v = (Byte) PTinyint.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || PUnsignedSmallint.INSTANCE.isCoercibleTo(targetType),         || PTinyint.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PTinyint.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PTinyint.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return ((Integer) RANDOM.get().nextInt(Byte.MAX_VALUE)).byteValue();],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTinyintArray.java,,27-108,[  public static final PUnsignedTinyintArray INSTANCE = new PUnsignedTinyintArray();, ,   private PUnsignedTinyintArray() {,     super("UNSIGNED_TINYINT ARRAY",,         PDataType.ARRAY_TYPE_BASE + PUnsignedTinyint.INSTANCE.getSqlType(), PhoenixArray.class,,         null, 45);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PUnsignedTinyint.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PUnsignedTinyint.INSTANCE, sortOrder, maxLength,,         scale, PUnsignedTinyint.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] byteArr = (Object[]) pArr.array;,     for (Object i : byteArr) {,       if (!super.isCoercibleTo(PUnsignedTinyint.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PUnsignedTinyint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarbinary.java,,31-169,[  public static final PVarbinary INSTANCE = new PVarbinary();, ,   private PVarbinary() {,     super("VARBINARY", Types.VARBINARY, byte[].class, null, 22);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       return ByteUtil.EMPTY_BYTE_ARRAY;,     },     return (byte[]) object;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       return 0;,     },     byte[] o = (byte[]) object;,     // assumes there's enough room,     System.arraycopy(bytes, offset, o, 0, o.length);,     return o.length;,   }, ,   /**,    * Override because we must always create a new byte array,    */,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     byte[] bytes = toBytes(object);,     // Override because we need to allocate a new buffer in this case,     if (sortOrder == SortOrder.DESC) {,       return SortOrder.invert(bytes, 0, new byte[bytes.length], 0, bytes.length);,     },     return bytes;,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (length == 0) {,       return null;,     },     if (offset == 0 && bytes.length == length && sortOrder == SortOrder.ASC) {,       return bytes;,     },     byte[] bytesCopy = new byte[length];,     System.arraycopy(bytes, offset, bytesCopy, 0, length);,     if (sortOrder == SortOrder.DESC) {,       bytesCopy = SortOrder.invert(bytes, offset, bytesCopy, 0, length);,       offset = 0;,     },     return bytesCopy;,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     return actualType.toBytes(object);,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     byte[] value = (byte[]) o;,     return value == null ? 1 : value.length;,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength,,       Integer desiredScale) {,     if (ptr.getLength() != 0 && srcType.equals(PBinary.INSTANCE) && maxLength != null,         && desiredMaxLength != null) {,       return maxLength <= desiredMaxLength;,     },     return true;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (lhs == null && rhs == null) {,       return 0;,     } else if (lhs == null) {,       return -1;,     } else if (rhs == null) {,       return 1;,     },     if (equalsAny(rhsType, this, PBinary.INSTANCE)) {,       return Bytes.compareTo((byte[]) lhs, (byte[]) rhs);,     } else {,       byte[] rhsBytes = rhsType.toBytes(rhs);,       return Bytes.compareTo((byte[]) lhs, rhsBytes);,     },   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return Base64.decode(value);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int o, int length, Format formatter) {,     if (formatter != null) {,       return formatter.format(b);,     },     StringBuilder buf = new StringBuilder();,     buf.append('[');,     for (int i = 0; i < b.length; i++) {,       buf.append(0xFF & b[i]);,       buf.append(',');,     },     buf.setCharAt(buf.length() - 1, ']');,     return buf.toString();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     int length = maxLength != null && maxLength > 0 ? maxLength : 1;,     byte[] b = new byte[length];,     RANDOM.get().nextBytes(b);,     return b;],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarbinaryArray.java,,27-107,[  public static final PVarbinaryArray INSTANCE = new PVarbinaryArray();, ,   private PVarbinaryArray() {,     super("VARBINARY ARRAY", PDataType.ARRAY_TYPE_BASE + PVarbinary.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 27);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PVarbinary.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PVarbinary.INSTANCE, sortOrder, maxLength, scale,,         PVarbinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] charArr = (Object[]) pArr.array;,     for (Object i : charArr) {,       if (!super.isCoercibleTo(PVarbinary.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PVarbinary.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarchar.java,,31-163,[  public static final PVarchar INSTANCE = new PVarchar();, ,   private PVarchar() {,     super("VARCHAR", Types.VARCHAR, String.class, null, 0);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     // TODO: consider using avro UTF8 object instead of String,     // so that we get get the size easily,     if (object == null) {,       return ByteUtil.EMPTY_BYTE_ARRAY;,     },     return Bytes.toBytes((String) object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       return 0;,     },     byte[] b = toBytes(object); // TODO: no byte[] allocation: use CharsetEncoder,     System.arraycopy(b, 0, bytes, offset, b.length);,     return b.length;,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (!actualType.isCoercibleTo(this)) {,       throwConstraintViolationException(actualType, this);,     },     if (length == 0) {,       return null;,     },     if (sortOrder == SortOrder.DESC) {,       bytes = SortOrder.invert(bytes, offset, length);,       offset = 0;,     },     return Bytes.toString(bytes, offset, length);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (equalsAny(actualType, this, PChar.INSTANCE)) {,       String s = (String) object;,       return s == null || s.length() > 0 ? s : null;,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PChar.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (isCoercibleTo(targetType)) {,       if (targetType.equals(PChar.INSTANCE)) {,         return value != null;,       },       return true;,     },     return false;,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength,,       Integer desiredScale) {,     if (ptr.getLength() != 0 && maxLength != null && desiredMaxLength != null) {,       return maxLength <= desiredMaxLength;,     },     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     String value = (String) o;,     return value == null ? 1 : value.length();,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return ((String) lhs).compareTo((String) rhs);,   }, ,   @Override,   public Object toObject(String value) {,     return value;,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType == PChar.INSTANCE;,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     while (b[length - 1] == 0) {,       length--;,     },     if (formatter != null) {,       Object o = toObject(b, offset, length);,       return "'" + formatter.format(o) + "'";,     },     return "'" + Bytes.toStringBinary(b, offset, length) + "'";,   }, ,   private char[] sampleChars = new char[1];, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     Preconditions.checkArgument(maxLength == null || maxLength >= 0);,     int length = maxLength != null ? maxLength : 1;,     if (length != sampleChars.length) {,       sampleChars = new char[length];,     },     for (int i = 0; i < length; i++) {,       sampleChars[i] = (char) RANDOM.get().nextInt(Byte.MAX_VALUE);,     },     return new String(sampleChars);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarcharArray.java,,27-107,[  public static final PVarcharArray INSTANCE = new PVarcharArray();, ,   private PVarcharArray() {,     super("VARCHAR ARRAY", PDataType.ARRAY_TYPE_BASE + PVarchar.INSTANCE.getSqlType(),,         PhoenixArray.class, null, 26);,   }, ,   @Override,   public boolean isArrayType() {,     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return compareTo(lhs, rhs);,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return toBytes(object, SortOrder.ASC);,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     return toBytes(object, PVarchar.INSTANCE, sortOrder);,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length,,       PDataType actualType, SortOrder sortOrder, Integer maxLength,,       Integer scale) {,     return toObject(bytes, offset, length, PVarchar.INSTANCE, sortOrder, maxLength, scale,,         PVarchar.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return isCoercibleTo(targetType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value == null) {,       return true;,     },     PhoenixArray pArr = (PhoenixArray) value;,     Object[] charArr = (Object[]) pArr.array;,     for (Object i : charArr) {,       if (!super.isCoercibleTo(PVarchar.INSTANCE, i)) {,         return false;,       },     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifer, Integer desiredMaxLength,,       Integer desiredScale, SortOrder desiredModifier) {,     coerceBytes(ptr, object, actualType, maxLength, scale, desiredMaxLength, desiredScale,,         this, actualModifer, desiredModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.ARRAY;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return getSampleValue(PVarchar.INSTANCE, arrayLength, maxLength);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PhoenixArray.java,boundaryCheck,157-157,[		if ((--index) + count > arr.length) {],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/schema/types/PhoenixArray.java,<init>,97-97,[		this.numElements = elements.length;],,<init>,89-89,[    		    if (elements != null && elements.length > 0) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,605-605,[      return booleanArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,610-610,[			return this.baseType.estimateByteSize(booleanArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,615-615,[			return this.baseType.toBytes(booleanArr[pos]);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,550-550,[      return byteArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,555-555,[			return this.baseType.estimateByteSize(byteArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,560-560,[			return this.baseType.toBytes(byteArr[pos]);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,440-440,[      return doubleArr;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,495-495,[      return floatArr;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,276-276,[      return intArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,281-281,[			return this.baseType.estimateByteSize(intArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,286-286,[			return this.baseType.toBytes(intArr[pos]);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,386-386,[      return longArr;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,331-331,[      return shortArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,336-336,[			return this.baseType.estimateByteSize(shortArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,341-341,[			return this.baseType.toBytes(shortArr[pos]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,65-65,[    return conn.prepareStatement(sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,230-230,[    return conn.prepareStatement(sql, autoGeneratedKeys);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,161-161,[    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,219-219,[    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,235-235,[    return conn.prepareStatement(sql, columnIndexes);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,240-240,[    return conn.prepareStatement(sql, columnNames);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/trace/PhoenixMetricsSink.java,lazyInitialize,124-124,[            } catch (Exception e) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/PhoenixMetricsSink.java,createTable,173-173,[        PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/PhoenixMetricsSink.java,putMetrics,265-265,[            PreparedStatement ps = conn.prepareStatement(stmt);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/trace/PhoenixTableMetricsWriterIT.java,testCreatesTable,54-54,[        } catch (Exception e) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/trace/PhoenixTracingEndToEndIT.java,testClientServerIndexingTracing,198-198,[        updated.await(200, TimeUnit.SECONDS);// should be way more than GC pauses],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/trace/TraceMetricSource.java,,130-130,[    marker.add(new MetricsTag(new MetricsInfoImpl("stat", "num spans"), Integer],,,135-135,[      for (Metric span : spans) {],,,147-147,[      spans = new ArrayList<Metric>();],,,120-120,[      spans.add(builder);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/trace/TraceReader.java,getDynamicCountColumns,219-219,[        ResultSet results = conn.createStatement().executeQuery(request);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/TraceReader.java,readAll,94-94,[        ResultSet results = conn.prepareStatement(query).executeQuery();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/trace/TraceReader.java,hashCode,318-318,[            return new Long(id).hashCode();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/trace/TraceReader.java,hashCode,251-251,[            return new Long(traceid).hashCode();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/PhoenixTableMetricsWriterIT.java,writeMetrics,104-104,[        assertEquals("Didn't get expected orphaned spans!" + trace.orphans, 1, trace.orphans.size());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/TraceReader.java,toString,282-282,[            if (orphans.size() > 0) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/trace/TracingUtils.java,addAnnotation,37-37,[        span.addKVAnnotation(message.getBytes(), Bytes.toBytes(Integer.toString(value)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/trace/TracingUtils.java,readAnnotation,41-41,[        return new Pair<String, String>(new String(key), Bytes.toString(value));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/trace/util/NullSpan.java,,33-33,[  public static Span INSTANCE = new NullSpan();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/util/Tracing.java,after,299-299,[            scope.close();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/Base62Encoder.java,,25-25,[    public static final char[] digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/BitSet.java,<init>,110-110,[        this.bits = bits;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,nextKey,394-394,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,previousKey,435-435,[            return null;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ColumnInfoTest.java,testFromString_InvalidDataType,48-48,[            SQLException sqlE = (SQLException)e.getCause();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/util/FirstLastNthValueDataContainer.java,,58-58,[        this.offset = offset;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/FirstLastNthValueDataContainer.java,getPayload,135-135,[        Entry<byte[], LinkedList<byte[]>> firstEntry = data.firstEntry();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/GeneratePerformanceData.java,main,54-54,[                        "\n").getBytes());],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/IndexUtil.java,,88-88,[    public static final byte[] INDEX_COLUMN_NAME_SEP_BYTES = Bytes.toBytes(INDEX_COLUMN_NAME_SEP);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/IndexUtil.java,deserializeDataTableColumnsToJoin,320-320,[        if (columnsBytes == null) return null;],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/phoenix/util/KeyValueUtil.java,,165-205,[	private static class SearchComparator implements Comparator<Cell> {, 	  private final KeyValueBuilder kvBuilder;,     private final byte[] row;,     private final byte[] family;,     private final byte[] qualifier;,     private final int rowOff;,     private final int rowLen;, ,     public SearchComparator(KeyValueBuilder kvBuilder, byte[] r, int rOff, int rLen, byte[] f, byte[] q) {,       this.kvBuilder = kvBuilder;,       row = r;,       family = f;,       qualifier = q;,       rowOff = rOff;,       rowLen = rLen;,     }, , 		@Override,     public int compare(final Cell l, final Cell ignored) {, 			assert ignored == null;,       KVComparator comparator = kvBuilder.getKeyValueComparator();, 			// row, 			int val = comparator.compareRows(l.getRowArray(), l.getRowOffset(), , 			  l.getRowLength(), row, rowOff, rowLen);, 			if (val != 0) {, 				return val;, 			}, 			// family, 			val = kvBuilder.compareFamily(l, family, 0, family.length);, 			if (val != 0) {, 				return val;, 			}, 			// qualifier,       val = kvBuilder.compareQualifier(l, qualifier, 0, qualifier.length);, 			if (val != 0) {, 				return val;, 			}, 			// We want the latest TS and type, so we get the first one., 			// This assumes they KV are passed in ordered from latest to earliest,, 			// as that's the order the server sends them., 			return 1;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,417-417,[    public static final byte[] IS_LOCAL_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_LOCAL_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,414-414,[    public static final byte[] IS_VIEW_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_VIEW_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,74-74,[    public static final byte[] LOCAL_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(LOCAL_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,72-72,[    public static final byte[] VIEW_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,77-77,[    public static final byte[] VIEW_INDEX_SEQUENCE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_SEQUENCE_PREFIX);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,80-80,[    public static final byte[] PARENT_TABLE_KEY_BYTES = Bytes.toBytes("PARENT_TABLE");],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/MetaDataUtil.java,getParentTableName,145-145,[            return null;],,getParentTableName,155-155,[            return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/MetaDataUtil.java,deleteViewIndexSequences,358-358,[        connection.createStatement().executeUpdate("DELETE FROM " + PhoenixDatabaseMetaData.SEQUENCE_FULLNAME_ESCAPED + ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/PhoenixContextExecutorTest.java,,35-41,[            PhoenixContextExecutor.callWithoutPropagation(new Callable<Object>() {,                 @Override,                 public Object call() {,                     assertEquals(,                             PhoenixContextExecutor.class.getClassLoader(),,                             Thread.currentThread().getContextClassLoader());,                     return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/PhoenixRuntime.java,main,171-171,[                    PhoenixRuntime.executeStatements(conn,],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/util/PhoenixRuntime.java,usageError,555-555,[            System.exit(-1);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/util/PhoenixRuntimeTest.java,testGetPkColsDataTypes,154-154,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/PhoenixRuntimeTest.java,testGetPkColsDataTypes,128-128,[                conn.createStatement().execute(sb.toString());],,testGetPkColsDataTypes,152-152,[                conn.createStatement().execute(sb.toString());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/PhoenixRuntimeTest.java,testGetPkColsDataTypes,131-131,[                PreparedStatement stmt = conn.prepareStatement("SELECT * FROM " + tableName + " WHERE " + columnName  + " = ?");],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/util/PropertiesUtilTest.java,verifyValidCopy,50-50,[        copy.containsKey(PhoenixRuntime.TENANT_ID_ATTRIB); //This checks the map and NOT the defaults in java.util.Properties],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/util/QueryUtil.java,apply,113-113,[                                        return getEscapedFullColumnName(columnInfo.getColumnName());],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ScanUtil.java,newScan,117-117,[            TreeMap<byte [], NavigableSet<byte []>> existingMap = (TreeMap<byte[], NavigableSet<byte[]>>)scan.getFamilyMap();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/compile/ScanRanges.java,,47-47,[    public static final ScanRanges EVERYTHING = new ScanRanges(null,ScanUtil.SINGLE_COLUMN_SLOT_SPAN,EVERYTHING_RANGES, KeyRange.EVERYTHING_RANGE, KeyRange.EVERYTHING_RANGE, false, false, null);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/ScanUtilTest.java,<init>,109-109,[        this.expectedKey = expectedKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,60-79,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PChar.INSTANCE;,                     },                     @Override,                     public Integer getMaxLength() {,                         return width;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,83-102,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PVarchar.INSTANCE;,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/SchemaUtil.java,normalizeIdentifier,173-173,[        return name.toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/SchemaUtil.java,addMetaDataColumn,485-485,[                stmt.executeUpdate("ALTER TABLE SYSTEM.\"TABLE\" ADD IF NOT EXISTS " + columnDef);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,44-44,[    public final static String[] LIKE_ESCAPE_SEQS = new String[]{"\\"+SINGLE_CHAR_LIKE, "\\"+MULTI_CHAR_LIKE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,45-45,[    public final static String[] LIKE_UNESCAPED_SEQS = new String[]{""+SINGLE_CHAR_LIKE, ""+MULTI_CHAR_LIKE};],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/StringUtilTest.java,testLpad,26-26,[        byte[] input = inputString.getBytes();],,testLpad,27-27,[        byte[] fill = fillString.getBytes();],,testLpad,29-29,[        assertArrayEquals("Incorrect output of lpad", expectedOutput.getBytes(), output);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,146-146,[    public final static List<String> ENTITYHISTIDS = Lists.newArrayList(ENTITYHISTID1, ENTITYHISTID2, ENTITYHISTID3, ENTITYHISTID4, ENTITYHISTID5, ENTITYHISTID6, ENTITYHISTID7, ENTITYHISTID8, ENTITYHISTID9);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,134-134,[    public final static List<String> PARENTIDS = Lists.newArrayList(PARENTID1, PARENTID2, PARENTID3, PARENTID4, PARENTID5, PARENTID6, PARENTID7, PARENTID8, PARENTID9);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,104-104,[    public final static byte[] A = Bytes.toBytes(A_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,106-106,[    public final static byte[] B = Bytes.toBytes(B_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,108-108,[    public final static byte[] C = Bytes.toBytes(C_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,99-99,[    public static final byte[] CF = Bytes.toBytes(CF_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,110-110,[    public final static byte[] D = Bytes.toBytes(D_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,112-112,[    public final static byte[] E = Bytes.toBytes(E_VALUE);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/util/TestUtil.java,analyzeTable,528-528,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,analyzeTable,503-503,[        conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,analyzeTableIndex,508-508,[        conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,createTable,442-442,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,getSplits,481-481,[        PhoenixPreparedStatement pstmt = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,upsertRow,417-417,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,getBuffer,36-36,[        return buf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,toByteArray,41-41,[            return buf;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,testExecute_NullField,126-126,[        verify(preparedStatement).setNull(3, columnInfoList.get(2).getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,tearDown,74-74,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,tearDown,48-48,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_EmptyString,53-53,[        Array emptyArray = converter.toArray("");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_MultipleElements,68-68,[        Array multiElementArray = converter.toArray("one:two");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_SingleElement,60-60,[        Array singleElementArray = converter.toArray("value");],,

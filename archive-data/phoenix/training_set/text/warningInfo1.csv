BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_SUPERCLASS,com/salesforce/phoenix/schema/MetaDataSplitPolicy.java,,29-29,[public class MetaDataSplitPolicy extends org.apache.phoenix.schema.MetaDataSplitPolicy {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/commons/csv/CSVFormat.java,getHeader,423-423,[        return header != null ? header.clone() : null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/commons/csv/CSVParser.java,parse,152-152,[        return new CSVParser(new FileReader(file), format);],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/commons/csv/CSVPrinter.java,printComment,303-307,[                    i++;,                 },                 //$FALL-THROUGH$ break intentionally excluded.,             case LF:,                 println();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/hadoop/hbase/regionserver/wal/IndexedWALEditCodec.java,,113-136,[    public CompressedIndexKeyValueDecoder(InputStream is, Decoder compressedDecoder) {,       super(is);,       this.decoder = compressedDecoder;,     }, ,     @Override,     protected Cell parseCell() throws IOException {,       // reader the marker,       int marker = this.in.read();,       if (marker < 0) {,         throw new EOFException(,             "Unexepcted end of stream found while reading next (Indexed) KeyValue");,       }, ,       // do the normal thing, if its a regular kv,       if (marker == REGULAR_KEY_VALUE_MARKER) {,         if (!this.decoder.advance()) {,           throw new IOException("Could not read next key-value from generic KeyValue Decoder!");,         },         return this.decoder.current();,       }, ,       // its an indexedKeyValue, so parse it out specially,       return KeyValueCodec.readKeyValue((DataInput) this.in);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/hadoop/hbase/regionserver/wal/IndexedWALEditCodec.java,,85-98,[  public class IndexKeyValueDecoder extends BaseDecoder {, ,     /**,      * Create a Decoder on the given input stream with the given Decoder to parse,      * generic {@link KeyValue}s.,      * @param is stream to read from,      */,     public IndexKeyValueDecoder(InputStream is){,       super(is);,     }, ,     @Override,     protected KeyValue parseCell() throws IOException{,       return KeyValueCodec.readKeyValue((DataInput) this.in);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,setUp,92-100,[    setupCluster();,     this.conf = HBaseConfiguration.create(UTIL.getConfiguration());,     this.fs = UTIL.getDFSCluster().getFileSystem();,     this.hbaseRootDir = new Path(this.conf.get(HConstants.HBASE_DIR));,     this.oldLogDir = new Path(this.hbaseRootDir, HConstants.HREGION_OLDLOGDIR_NAME);,     this.logDir = new Path(this.hbaseRootDir, HConstants.HREGION_LOGDIR_NAME);,     // reset the log reader to ensure we pull the one from this config,     HLogFactory.resetLogReaderClass();,   }],,setup,116-117,[    this.state = setupTest(TestTable.getTableNameString());,   }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,deleteDir,149-149,[    if (this.fs.exists(p)) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/arithmetic/ArithmeticOperationTest.java,testDecimalDivision,297-297,[            evaluated = e.evaluate(null, ptr);],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/cache/GlobalCache.java,getInstance,97-100,[        if (result == null) {,             synchronized(GlobalCache.class) {,                 result = INSTANCE;,                 if(result == null) {],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/cache/GlobalCache.java,getMetaDataCache,71-74,[        if (result == null) {,             synchronized(this) {,                 result = metaDataCache;,                 if(result == null) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/cache/GlobalCache.java,,70-70,[        Cache<ImmutableBytesPtr,PTable> result = metaDataCache;],,,73-73,[                result = metaDataCache;],,,88-88,[                            .build();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/GlobalCache.java,,82-85,[                            .weigher(new Weigher<ImmutableBytesPtr, PTable>() {,                                 @Override,                                 public int weigh(ImmutableBytesPtr key, PTable table) {,                                     return SizedUtil.IMMUTABLE_BYTES_PTR_SIZE + key.getLength() + table.getEstimatedSize();],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,addServerCache,259-259,[        if (LOG.isDebugEnabled()) {LOG.debug("Cache " + cacheId + " successfully added to servers.");}],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,removeServerCache,284-284,[        if (LOG.isDebugEnabled()) {LOG.debug("Removing Cache " + cacheId + " from servers.");}],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/ServerCacheClient.java,getId,127-127,[            return id;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/ServerCacheClient.java,<init>,111-111,[            this.id = id;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/TenantCacheImpl.java,,64-68,[                        .removalListener(new RemovalListener<ImmutableBytesPtr, Closeable>(){,                             @Override,                             public void onRemoval(RemovalNotification<ImmutableBytesPtr, Closeable> notification) {,                                 Closeables.closeAllQuietly(Collections.singletonList(notification.getValue()));,                             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/cache/aggcache/SpillFile.java,close,77-77,[                    file.delete();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/cache/aggcache/SpillManager.java,loadEntry,275-275,[        return null;],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_HASHCODE,org/apache/phoenix/cache/aggcache/SpillManager.java,getPartition,247-247,[        return Math.abs(key.hashCode()) % numSpillFiles;],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/phoenix/cache/aggcache/SpillManager.java,getAggregators,197-197,[            input.skip(keyLength);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,79-79,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,70-70,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,85-85,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,<init>,66-66,[            this.aggs = aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,84-84,[            this.aggs = arg0;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,191-191,[        newDirectory = null;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,redistribute,143-143,[        byteMap = null;],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,194-194,[        b2Index = (keyNew.hashCode() & ((1 << globalDepth) - 1)) | (1 << globalDepth);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/cache/aggcache/SpillMap.java,get,208-208,[        if (!(key instanceof ImmutableBytesPtr)) {],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,flushBuffer,383-383,[                buffer = null;],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/aggcache/SpillableGroupByCache.java,next,369-369,[                            + aggs.toString() + " value = " + Bytes.toStringBinary(value));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateIndexCompiler.java,,62-86,[        return new MutationPlan() {, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createIndex(create, splits);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE INDEX"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateSequenceCompiler.java,,174-198,[        return new MutationPlan() {           , ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createSequence(sequence, startsWith, incrementBy, cacheSize);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE SEQUENCE"));,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {                ,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,131-134,[                            new DelegateConnectionQueryServices(connection.getQueryServices()) {,                                 @Override,                                 public PMetaData addTable(PTable table) throws SQLException {,                                     return connection.addTable(table);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,173-203,[        return new MutationPlan() {, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 try {,                     return client.createTable(create, splits, parent, viewStatement, viewType, viewColumnConstants, isViewColumnReferenced);,                 } finally {,                     if (client.getConnection() != connection) {,                         client.getConnection().close();,                     },                 },             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE TABLE"));,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             },             ,             @Override,             public StatementContext getContext() {,                 return context;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,defaultReturn,245-245,[            return null;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,visitLeave,269-269,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DeleteCompiler.java,,236-268,[            return new MutationPlan() {, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return context.getBindManager().getParameterMetaData();,                 }, ,                 @Override,                 public MutationState execute() {,                     // We have a point lookup, so we know we have a simple set of fully qualified,                     // keys for our ranges,                     ScanRanges ranges = context.getScanRanges();,                     Iterator<KeyRange> iterator = ranges.getPointLookupKeyIterator(); ,                     Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutation = Maps.newHashMapWithExpectedSize(ranges.getPointLookupCount());,                     while (iterator.hasNext()) {,                         mutation.put(new ImmutableBytesPtr(iterator.next().getLowerRange()), PRow.DELETE_MARKER);,                     },                     return new MutationState(tableRef, mutation, 0, maxSize, connection);,                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     return new ExplainPlan(Collections.singletonList("DELETE SINGLE ROW"));,                 }, ,                 @Override,                 public PhoenixConnection getConnection() {,                     return connection;,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DeleteCompiler.java,,282-338,[            return new MutationPlan() {, ,                 @Override,                 public PhoenixConnection getConnection() {,                     return connection;,                 }, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return context.getBindManager().getParameterMetaData();,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return context;,                 }, ,                 @Override,                 public MutationState execute() throws SQLException {,                     // TODO: share this block of code with UPSERT SELECT,                     ImmutableBytesWritable ptr = context.getTempPtr();,                     tableRef.getTable().getIndexMaintainers(ptr);,                     ServerCache cache = null;,                     try {,                         if (ptr.getLength() > 0) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(context.getScanRanges(), ptr);,                             byte[] uuidValue = cache.getId();,                             context.getScan().setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                         },                         ResultIterator iterator = aggPlan.iterator();,                         try {,                             Tuple row = iterator.next();,                             final long mutationCount = (Long)projector.getColumnProjector(0).getValue(row, PDataType.LONG, ptr);,                             return new MutationState(maxSize, connection) {,                                 @Override,                                 public long getUpdateCount() {,                                     return mutationCount;,                                 },                             };,                         } finally {,                             iterator.close();,                         },                     } finally {,                         if (cache != null) {,                             cache.close();,                         },                     },                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     List<String> queryPlanSteps =  aggPlan.getExplainPlan().getPlanSteps();,                     List<String> planSteps = Lists.newArrayListWithExpectedSize(queryPlanSteps.size()+1);,                     planSteps.add("DELETE ROWS");,                     planSteps.addAll(queryPlanSteps);,                     return new ExplainPlan(planSteps);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DropSequenceCompiler.java,,44-68,[        return new MutationPlan() {           , ,             @Override,             public MutationState execute() throws SQLException {,                 return client.dropSequence(sequence);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("DROP SEQUENCE"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {                ,                 return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,673-732,[        return visitLeave(node, children, new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children,,                     final Expression expression) {,                 final PDataType type;,                 // If we're binding the first parameter and the second parameter,                 // is a date,                 // we know that the first parameter must be a date type too.,                 if (i == 0 && (type = children.get(1).getDataType()) != null,                         && type.isCoercibleTo(PDataType.DATE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return type;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         }                        ,                     };,                 } else if (expression.getDataType() != null,                         && expression.getDataType().isCoercibleTo(,                                 PDataType.DATE)) {,                     return new PDatum() { // Same as with addition,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDataType.DECIMAL;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 // Otherwise just go with what was calculated for the expression,                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,827-827,[                    return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,734-833,[        }, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node,,                     List<Expression> children) throws SQLException {,                 int i = 0;,                 PDataType theType = null;,                 Expression e1 = children.get(0);,                 Expression e2 = children.get(1);,                 boolean isDeterministic = e1.isDeterministic() && e2.isDeterministic();,                 PDataType type1 = e1.getDataType();,                 PDataType type2 = e2.getDataType();,                 // TODO: simplify this special case for DATE conversion,                 /**,                  * For date1-date2, we want to coerce to a LONG because this,                  * cannot be compared against another date. It has essentially,                  * become a number. For date1-5, we want to preserve the DATE,                  * type because this can still be compared against another date,                  * and cannot be multiplied or divided. Any other time occurs is,                  * an error. For example, 5-date1 is an error. The nulls occur if,                  * we have bind variables.,                  */,                 boolean isType1Date = ,                         type1 != null ,                         && type1 != PDataType.TIMESTAMP,                         && type1 != PDataType.UNSIGNED_TIMESTAMP,                         && type1.isCoercibleTo(PDataType.DATE);,                 boolean isType2Date = ,                         type2 != null,                         && type2 != PDataType.TIMESTAMP,                         && type2 != PDataType.UNSIGNED_TIMESTAMP,                         && type2.isCoercibleTo(PDataType.DATE);,                 if (isType1Date || isType2Date) {,                     if (isType1Date && isType2Date) {,                         i = 2;,                         theType = PDataType.LONG;,                     } else if (isType1Date && type2 != null,                             && type2.isCoercibleTo(PDataType.DECIMAL)) {,                         i = 2;,                         theType = PDataType.DATE;,                     } else if (type1 == null || type2 == null) {,                         /*,                          * FIXME: Could be either a Date or BigDecimal, but we,                          * don't know if we're comparing to a date or a number,                          * which would be disambiguate it.,                          */,                         i = 2;,                         theType = null;,                     },                 } else if(type1 == PDataType.TIMESTAMP || type2 == PDataType.TIMESTAMP) {,                     i = 2;,                     theType = PDataType.TIMESTAMP;,                 } else if(type1 == PDataType.UNSIGNED_TIMESTAMP || type2 == PDataType.UNSIGNED_TIMESTAMP) {,                     i = 2;,                     theType = PDataType.UNSIGNED_TIMESTAMP;,                 },                 ,                 for (; i < children.size(); i++) {,                     // This logic finds the common type to which all child types are coercible,                     // without losing precision.,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type == PDataType.DECIMAL) {,                         // Coerce return type to DECIMAL from LONG or DOUBLE if DECIMAL child found,,                         // unless we're doing date arithmetic.,                         if (theType == null,                                 || !theType.isCoercibleTo(PDataType.DATE)) {,                             theType = PDataType.DECIMAL;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         // Coerce return type to DOUBLE from LONG if DOUBLE child found,,                         // unless we're doing date arithmetic or we've found another child of type DECIMAL,                         if (theType == null,                                 || (theType != PDataType.DECIMAL && !theType.isCoercibleTo(PDataType.DATE) )) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDataType.DECIMAL) {,                     return new DecimalSubtractExpression(children);,                 } else if (theType == PDataType.LONG) {,                     return new LongSubtractExpression(children);,                 } else if (theType == PDataType.DOUBLE) {,                     return new DoubleSubtractExpression(children);,                 } else if (theType == null) {,                     return LiteralExpression.newConstant(null, theType, isDeterministic);,                 } else if (theType == PDataType.TIMESTAMP || theType == PDataType.UNSIGNED_TIMESTAMP) {,                     return new TimestampSubtractExpression(children);,                 } else if (theType.isCoercibleTo(PDataType.DATE)) {,                     return new DateSubtractExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,847-875,[                new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children, final Expression expression) {,                 PDataType type = expression.getDataType();,                 if (type != null && type.isCoercibleTo(PDataType.DATE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDataType.DECIMAL;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,921-921,[                    return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,878-927,[        new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 boolean foundDate = false;,                 boolean isDeterministic = true;,                 PDataType theType = null;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue; ,                     } else if (type.isCoercibleTo(PDataType.TIMESTAMP)) {,                         if (foundDate) {,                             throw TypeMismatchException.newException(type, node.toString());,                         },                         if (theType == null || (theType != PDataType.TIMESTAMP && theType != PDataType.UNSIGNED_TIMESTAMP)) {,                             theType = type;,                         },                         foundDate = true;,                     }else if (type == PDataType.DECIMAL) {,                         if (theType == null || !theType.isCoercibleTo(PDataType.TIMESTAMP)) {,                             theType = PDataType.DECIMAL;,                         },                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         if (theType == null) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDataType.DECIMAL) {,                     return new DecimalAddExpression(children);,                 } else if (theType == PDataType.LONG) {,                     return new LongAddExpression(children);,                 } else if (theType == PDataType.DOUBLE) {,                     return new DoubleAddExpression(children);,                 } else if (theType == null) {,                     return LiteralExpression.newConstant(null, theType, isDeterministic);,                 } else if (theType == PDataType.TIMESTAMP || theType == PDataType.UNSIGNED_TIMESTAMP) {,                     return new TimestampAddExpression(children);,                 } else if (theType.isCoercibleTo(PDataType.DATE)) {,                     return new DateAddExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,940-973,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 boolean isDeterministic = true;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDataType.DECIMAL) {,                         theType = PDataType.DECIMAL;,                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         if (theType == null) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 switch (theType) {,                 case DECIMAL:,                     return new DecimalMultiplyExpression( children);,                 case LONG:,                     return new LongMultiplyExpression( children);,                 case DOUBLE:,                     return new DoubleMultiplyExpression( children);,                 default:,                     return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1001-1034,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 boolean isDeterministic = true;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDataType.DECIMAL) {,                         theType = PDataType.DECIMAL;,                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         if (theType == null) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 switch (theType) {,                 case DECIMAL:,                     return new DecimalDivideExpression( children);,                 case LONG:,                     return new LongDivideExpression( children);,                 case DOUBLE:,                     return new DoubleDivideExpression(children);,                 default:,                     return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1129-1132,[                            new DelegateDatum(arrayElemChild) {,                     @Override,                     public PDataType getDataType() {,                         return theArrayElemDataType;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/compile/ExpressionProjector.java,getValue,80-80,[                throw (SQLException) e.getCause();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/FromCompiler.java,resolveColumnFamily,472-472,[                    } catch (ColumnFamilyNotFoundException e) {}],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,534-534,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,539-539,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,544-544,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,549-549,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,554-554,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,564-564,[                return lType == null ? rType : lType;],,getCommonType,569-569,[                return lType == null ? rType : lType;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,527-527,[            if (!lType.isComparableTo(rType))],,getCommonType,532-532,[            if ((lType == null || lType.isCoercibleTo(PDataType.TINYINT))],,getCommonType,537-537,[            if ((lType == null || lType.isCoercibleTo(PDataType.SMALLINT))],,getCommonType,542-542,[            if ((lType == null || lType.isCoercibleTo(PDataType.INTEGER))],,getCommonType,547-547,[            if ((lType == null || lType.isCoercibleTo(PDataType.LONG))],,getCommonType,552-552,[            if ((lType == null || lType.isCoercibleTo(PDataType.DOUBLE))],,getCommonType,557-557,[            if ((lType == null || lType.isCoercibleTo(PDataType.DECIMAL))],,getCommonType,562-562,[            if ((lType == null || lType.isCoercibleTo(PDataType.DATE))],,getCommonType,567-567,[            if ((lType == null || lType.isCoercibleTo(PDataType.TIMESTAMP))],,getCommonType,572-572,[            if ((lType == null || lType.isCoercibleTo(PDataType.VARCHAR))],,getCommonType,577-577,[            if ((lType == null || lType.isCoercibleTo(PDataType.BOOLEAN))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/JoinCompiler.java,,489-509,[            Collections.sort(compiled, new Comparator<Pair<Expression, Expression>>() {,                 @Override,                 public int compare(Pair<Expression, Expression> o1, Pair<Expression, Expression> o2) {,                     Expression e1 = o1.getFirst();,                     Expression e2 = o2.getFirst();,                     boolean isFixed1 = e1.getDataType().isFixedWidth();,                     boolean isFixed2 = e2.getDataType().isFixedWidth();,                     boolean isFixedNullable1 = e1.isNullable() &&isFixed1;,                     boolean isFixedNullable2 = e2.isNullable() && isFixed2;,                     if (isFixedNullable1 == isFixedNullable2) {,                         if (isFixed1 == isFixed2) {,                             return 0;,                         } else if (isFixed1) {,                             return -1;,                         } else {,                             return 1;,                         },                     } else if (isFixedNullable1) {,                         return 1;,                     } else {,                         return -1;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/compile/JoinCompiler.java,getStarJoinVector,372-372,[                return null;],,getStarJoinVector,379-379,[                    return null;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/compile/JoinQueryCompilerTest.java,getJoinTable,135-135,[        PhoenixStatement stmt = connection.createStatement().unwrap(PhoenixStatement.class);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,234-234,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,234-234,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/ProjectionCompiler.java,addElement,544-544,[            isCaseSensitive &= elementCount == 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,507-511,[                expression.accept(new SingleAggregateFunctionVisitor() {,                     @Override,                     public Iterator<Expression> visitEnter(SingleAggregateFunction function) {,                         aggFuncSet.add(function);,                         return Iterators.emptyIterator();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,565-571,[                 children.get(0).accept(new KeyValueExpressionVisitor() {,                      @Override,                      public Void visit(KeyValueColumnExpression expression) {,                          if (expression.getDataType().isArrayType()) {,                              indexKVs.add(expression);,                          },                          return null;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNegativeArrayIndex,1183-1183,[        } catch (Exception e) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testNonArrayColumnWithIndex,1206-1206,[        } catch (Exception e) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testArrayNotLastInMultipartPK,183-183,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testExecuteWithNonEmptyBatch,1322-1322,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArrayElemRefInUpsert,1274-1274,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testVarBinaryNotLastInMultipartPK,162-162,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testGroupByLimitOptimization,1408-1408,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidPrimaryKeyDecl,1368-1368,[                conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testNoGroupByLimitOptimization,1429-1429,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,compileQuery,434-434,[            PhoenixPreparedStatement statement = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testCountAggregatorFirst,679-679,[                Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testFunkyColumnNames,656-656,[            compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArithmetic,713-713,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNextValueFor,1301-1301,[                compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testKeyOrderedGroupByOptimization,458-458,[            Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testNotKeyOrderedGroupByOptimization,641-641,[            Scan scan = compileQuery(query, binds);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/compile/QueryMetaDataTest.java,testBasicResultSetMetaData,310-310,[        assertEquals("organization_id".toUpperCase(),md.getColumnName(1));],,testBasicResultSetMetaData,311-311,[        assertEquals("a_string".toUpperCase(),md.getColumnName(2));],,testBasicResultSetMetaData,312-312,[        assertEquals("b_string".toUpperCase(),md.getColumnName(3));],,testBasicResultSetMetaData,313-313,[        assertEquals("i".toUpperCase(),md.getColumnName(4));],,testBasicResultSetMetaData,314-314,[        assertEquals("a_date".toUpperCase(),md.getColumnName(5));],,testBasicResultSetMetaData,322-322,[        assertEquals("atable".toUpperCase(),md.getTableName(1));],,testBasicResultSetMetaData,326-326,[        assertEquals("i".toUpperCase(),md.getColumnLabel(4));],,testBasicResultSetMetaData,327-327,[        assertEquals("a_date".toUpperCase(),md.getColumnLabel(5));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/compile/SequenceManager.java,validateSequences,151-151,[            if (isNextSequence.get(entry.getValue().getIndex())) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/compile/SequenceManager.java,setSequenceValues,71-71,[                dstSequenceValues[sequencePosition[i]] = srcSequenceValues[i];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/compile/SequenceManager.java,,175-211,[    private class SequenceValueExpression extends BaseTerminalExpression {,         private final int index;,         private final byte[] valueBuffer = new byte[PDataType.LONG.getByteSize()];, ,         private SequenceValueExpression(int index) {,             this.index = index;,         }, ,         public int getIndex() {,             return index;,         },         ,         @Override,         public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {,             PDataType.LONG.getCodec().encodeLong(tuple.getSequenceValue(index), valueBuffer, 0);,             ptr.set(valueBuffer);,             return true;,         }, ,         @Override,         public PDataType getDataType() {,             return PDataType.LONG;,         },         ,         @Override,         public boolean isNullable() {,             return false;,         },         ,         @Override,         public boolean isDeterministic() {,             return false;,         },         ,         @Override,         public boolean isStateless() {,             return true;],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/phoenix/compile/SubselectRewriter.java,flatten,142-142,[                            && ((TableWildcardParseNode) node).getTableName().equals(tableAlias))) {],,
STYLE,NS_DANGEROUS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,isOrderPreserving,101-101,[            isOrderPreserving &= (entry.getOrderPreserving() != OrderPreserving.NO) && (pos == prevPos || ((pos - 1 == prevPos) && (prevOrderPreserving == OrderPreserving.YES)));],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,addEntry,180-180,[        isOrderPreserving &= (orderPreserving != OrderPreserving.NO);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,,86-89,[            Collections.sort(entries, new Comparator<Entry>() {,                 @Override,                 public int compare(Entry o1, Entry o2) {,                     return o1.getPkPosition()-o2.getPkPosition();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,getPkPosition,224-224,[            return columnRef.getPKSlotPosition();],,getPKPosition,834-834,[                return pkPosition;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/UpsertCompiler.java,,516-571,[                    return new MutationPlan() {,     ,                         @Override,                         public PhoenixConnection getConnection() {,                             return connection;,                         },     ,                         @Override,                         public ParameterMetaData getParameterMetaData() {,                             return queryPlan.getContext().getBindManager().getParameterMetaData();,                         },     ,                         @Override,                         public StatementContext getContext() {,                             return queryPlan.getContext();,                         }, ,                         @Override,                         public MutationState execute() throws SQLException {,                             ImmutableBytesWritable ptr = context.getTempPtr();,                             tableRef.getTable().getIndexMaintainers(ptr);,                             ServerCache cache = null;,                             try {,                                 if (ptr.getLength() > 0) {,                                     IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                                     cache = client.addIndexMetadataCache(context.getScanRanges(), ptr);,                                     byte[] uuidValue = cache.getId();,                                     scan.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                                 },                                 ResultIterator iterator = aggPlan.iterator();,                                 try {,                                     Tuple row = iterator.next();,                                     final long mutationCount = (Long)aggProjector.getColumnProjector(0).getValue(row, PDataType.LONG, ptr);,                                     return new MutationState(maxSize, connection) {,                                         @Override,                                         public long getUpdateCount() {,                                             return mutationCount;,                                         },                                     };,                                 } finally {,                                     iterator.close();,                                 },                             } finally {,                                 if (cache != null) {,                                     cache.close();,                                 },                             },                         },     ,                         @Override,                         public ExplainPlan getExplainPlan() throws SQLException {,                             List<String> queryPlanSteps =  aggPlan.getExplainPlan().getPlanSteps();,                             List<String> planSteps = Lists.newArrayListWithExpectedSize(queryPlanSteps.size()+1);,                             planSteps.add("UPSERT ROWS");,                             planSteps.addAll(queryPlanSteps);,                             return new ExplainPlan(planSteps);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/UpsertCompiler.java,,665-741,[        return new MutationPlan() {, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public StatementContext getContext() {,                 return context;,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 ImmutableBytesWritable ptr = context.getTempPtr();,                 final SequenceManager sequenceManager = context.getSequenceManager();,                 // Next evaluate all the expressions,                 int nodeIndex = nodeIndexOffset;,                 Tuple tuple = sequenceManager.getSequenceCount() == 0 ? null :,                     sequenceManager.newSequenceTuple(null);,                 for (Expression constantExpression : constantExpressions) {,                     PColumn column = allColumns.get(columnIndexes[nodeIndex]);,                     constantExpression.evaluate(tuple, ptr);,                     Object value = null;,                     if (constantExpression.getDataType() != null) {,                         value = constantExpression.getDataType().toObject(ptr, constantExpression.getSortOrder(), constantExpression.getMaxLength(), constantExpression.getScale());,                         if (!constantExpression.getDataType().isCoercibleTo(column.getDataType(), value)) { ,                             throw TypeMismatchException.newException(,                                 constantExpression.getDataType(), column.getDataType(), "expression: ",                                         + constantExpression.toString() + " in column " + column);,                         },                         if (!column.getDataType().isSizeCompatible(ptr, value, constantExpression.getDataType(),,                                 constantExpression.getMaxLength(), constantExpression.getScale(), ,                                 column.getMaxLength(), column.getScale())) { ,                             throw new SQLExceptionInfo.Builder(,                                 SQLExceptionCode.DATA_EXCEEDS_MAX_CAPACITY).setColumnName(column.getName().getString()),                                 .setMessage("value=" + constantExpression.toString()).build().buildException();,                         },                     },                     column.getDataType().coerceBytes(ptr, value,,                             constantExpression.getDataType(), constantExpression.getMaxLength(), constantExpression.getScale(), constantExpression.getSortOrder(),,                             column.getMaxLength(), column.getScale(),column.getSortOrder());,                     if (overlapViewColumns.contains(column) && Bytes.compareTo(ptr.get(), ptr.getOffset(), ptr.getLength(), column.getViewConstant(), 0, column.getViewConstant().length-1) != 0) {,                         throw new SQLExceptionInfo.Builder(,                                 SQLExceptionCode.CANNOT_UPDATE_VIEW_COLUMN),                                 .setColumnName(column.getName().getString()),                                 .setMessage("value=" + constantExpression.toString()).build().buildException();,                     },                     values[nodeIndex] = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     nodeIndex++;,                 },                 // Add columns based on view,                 for (PColumn column : addViewColumns) {,                     if (IndexUtil.getViewConstantValue(column, ptr)) {,                         values[nodeIndex++] = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     } else {,                         throw new IllegalStateException();,                     },                 },                 Map<ImmutableBytesPtr, Map<PColumn, byte[]>> mutation = Maps.newHashMapWithExpectedSize(1);,                 setValues(values, pkSlotIndexes, columnIndexes, tableRef.getTable(), mutation);,                 return new MutationState(tableRef, mutation, 0, maxSize, connection);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 List<String> planSteps = Lists.newArrayListWithExpectedSize(2);,                 if (context.getSequenceManager().getSequenceCount() > 0) {,                     planSteps.add("CLIENT RESERVE " + context.getSequenceManager().getSequenceCount() + " SEQUENCES");,                 },                 planSteps.add("PUT SINGLE ROW");,                 return new ExplainPlan(planSteps);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/compile/ViewCompilerTest.java,testViewInvalidation,87-87,[            conn.createStatement().executeQuery("SELECT * FROM v3");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/ViewCompilerTest.java,assertViewType,61-61,[            conn.createStatement().execute(view);],,assertViewType,68-68,[                conn.createStatement().execute("DROP VIEW " + table.getName().getString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/WhereOptimizer.java,,380-412,[            return new SingleKeySlot(new KeyPart() {, ,                 @Override,                 public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                     KeyRange range = childPart.getKeyRange(op, rhs);,                     byte[] lower = range.getLowerRange();,                     if (!range.lowerUnbound()) {,                         ptr.set(lower);,                         // Do the reverse translation so we can optimize out the coerce expression,                         // For the actual type of the coerceBytes call, we use the node type instead of the rhs type, because,                         // for IN, the rhs type will be VARBINARY and no coerce will be done in that case (and we need it to,                         // be done).,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         lower = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     byte[] upper = range.getUpperRange();,                     if (!range.upperUnbound()) {,                         ptr.set(upper);,                         // Do the reverse translation so we can optimize out the coerce expression,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         upper = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     return KeyRange.getKeyRange(lower, range.isLowerInclusive(), upper, range.isUpperInclusive());,                 }, ,                 @Override,                 public List<Expression> getExtractNodes() {,                     return childPart.getExtractNodes();,                 }, ,                 @Override,                 public PColumn getColumn() {,                     return childPart.getColumn();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtEndOfRVC,1321-1321,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtStartOfRVC,1355-1355,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullInMiddleOfRVC,1338-1338,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testStartKeyStopKey,110-110,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/coprocessor/BaseRegionScanner.java,next,37-37,[        return next(results);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/GroupedAggregateRegionObserver.java,,430-525,[        return new BaseRegionScanner() {,             private long rowCount = 0;,             private ImmutableBytesWritable currentKey = null;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public void close() throws IOException {,                 s.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 boolean hasMore;,                 boolean atLimit;,                 boolean aggBoundary = false;,                 MultiKeyValueTuple result = new MultiKeyValueTuple();,                 ImmutableBytesWritable key = null;,                 Aggregator[] rowAggregators = aggregators.getAggregators();,                 // If we're calculating no aggregate functions, we can exit at the,                 // start of a new row. Otherwise, we have to wait until an agg,                 int countOffset = rowAggregators.length == 0 ? 1 : 0;,                 HRegion region = c.getEnvironment().getRegion();,                 region.startRegionOperation();,                 try {,                     do {,                         List<Cell> kvs = new ArrayList<Cell>();,                         // Results are potentially returned even when the return,                         // value of s.next is false,                         // since this is an indication of whether or not there,                         // are more values after the,                         // ones returned,                         hasMore = s.nextRaw(kvs);,                         if (!kvs.isEmpty()) {,                             result.setKeyValues(kvs);,                             key = TupleUtil.getConcatenatedValue(result, expressions);,                             aggBoundary = currentKey != null && currentKey.compareTo(key) != 0;,                             if (!aggBoundary) {,                                 aggregators.aggregate(rowAggregators, result);,                                 if (logger.isDebugEnabled()) {,                                     logger.debug("Row passed filters: " + kvs,                                             + ", aggregated values: ",                                             + Arrays.asList(rowAggregators));,                                 },                                 currentKey = key;,                             },                         },                         atLimit = rowCount + countOffset >= limit;,                         // Do rowCount + 1 b/c we don't have to wait for a complete,                         // row in the case of a DISTINCT with a LIMIT,                     } while (hasMore && !aggBoundary && !atLimit);,                 } finally {,                     region.closeRegionOperation();,                 }, ,                 if (currentKey != null) {,                     byte[] value = aggregators.toBytes(rowAggregators);,                     KeyValue keyValue =,                             KeyValueUtil.newKeyValue(currentKey.get(), currentKey.getOffset(),,                                 currentKey.getLength(), SINGLE_COLUMN_FAMILY, SINGLE_COLUMN,,                                 AGG_TIMESTAMP, value, 0, value.length);,                     results.add(keyValue);,                     if (logger.isDebugEnabled()) {,                         logger.debug("Adding new aggregate row: ",                                 + keyValue,                                 + ",for current key ",                                 + Bytes.toStringBinary(currentKey.get(), currentKey.getOffset(),,                                     currentKey.getLength()) + ", aggregated values: ",                                 + Arrays.asList(rowAggregators));,                     },                     // If we're at an aggregation boundary, reset the,                     // aggregators and,                     // aggregate with the current result (which is not a part of,                     // the returned result).,                     if (aggBoundary) {,                         aggregators.reset(rowAggregators);,                         aggregators.aggregate(rowAggregators, result);,                         currentKey = key;,                         rowCount++;,                         atLimit |= rowCount >= limit;,                     },                 },                 // Continue if there are more,                 if (!atLimit && (hasMore || aggBoundary)) {,                     return true;,                 },                 currentKey = null;,                 return false;,             },             ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/coprocessor/HashJoinRegionScanner.java,processResults,112-112,[            resultQueue.offer(tuple);],,processResults,139-139,[                    resultQueue.offer(tuple);],,processResults,146-146,[                resultQueue.offer(tuple);],,processResults,159-159,[                                    resultQueue.offer(lhs);],,processResults,170-170,[                            resultQueue.offer(joined);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,loadTable,709-709,[        if (table == null],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,createTable,763-763,[                        builder.setTable(PTableImpl.toProto(parentTable));],,createTable,760-760,[                    if (parentTable == null || isTableDeleted(parentTable)) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,1236-1236,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,1349-1349,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,buildTable,709-709,[        if (table == null],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1204-1204,[                                    table.getPKColumn(new String(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,1180-1233,[            MetaDataMutationResult result = mutateColumn(tableMetaData, new ColumnMutator() {,                 @Override,                 public MetaDataMutationResult updateMutation(PTable table, byte[][] rowKeyMetaData,,                         List<Mutation> tableMetaData, HRegion region,,                         List<ImmutableBytesPtr> invalidateList, List<RowLock> locks) {,                     byte[] tenantId = rowKeyMetaData[TENANT_ID_INDEX];,                     byte[] schemaName = rowKeyMetaData[SCHEMA_NAME_INDEX];,                     byte[] tableName = rowKeyMetaData[TABLE_NAME_INDEX];,                     for (Mutation m : tableMetaData) {,                         byte[] key = m.getRow();,                         boolean addingPKColumn = false;,                         int pkCount = getVarChars(key, rowKeyMetaData);,                         if (pkCount > COLUMN_NAME_INDEX,                                 && Bytes.compareTo(schemaName, rowKeyMetaData[SCHEMA_NAME_INDEX]) == 0,                                 && Bytes.compareTo(tableName, rowKeyMetaData[TABLE_NAME_INDEX]) == 0) {,                             try {,                                 if (pkCount > FAMILY_NAME_INDEX,                                         && rowKeyMetaData[PhoenixDatabaseMetaData.FAMILY_NAME_INDEX].length > 0) {,                                     PColumnFamily family =,                                             table.getColumnFamily(rowKeyMetaData[PhoenixDatabaseMetaData.FAMILY_NAME_INDEX]);,                                     family.getColumn(rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX]);,                                 } else if (pkCount > COLUMN_NAME_INDEX,                                         && rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX].length > 0) {,                                     addingPKColumn = true;,                                     table.getPKColumn(new String(,                                             rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX]));,                                 } else {,                                     continue;,                                 },                                 return new MetaDataMutationResult(,                                         MutationCode.COLUMN_ALREADY_EXISTS, EnvironmentEdgeManager,                                                 .currentTimeMillis(), table);,                             } catch (ColumnFamilyNotFoundException e) {,                                 continue;,                             } catch (ColumnNotFoundException e) {,                                 if (addingPKColumn) {,                                     // Add all indexes to invalidate list, as they will all be,                                     // adding,                                     // the same PK column,                                     // No need to lock them, as we have the parent table lock at,                                     // this,                                     // point,                                     for (PTable index : table.getIndexes()) {,                                         invalidateList.add(new ImmutableBytesPtr(SchemaUtil,                                                 .getTableKey(tenantId, index.getSchemaName(),                                                         .getBytes(), index.getTableName(),                                                         .getBytes())));,                                     },                                 },                                 continue;,                             },                         },                     },                     return null;],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1201-1201,[                                } else if (pkCount > COLUMN_NAME_INDEX],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1283-1283,[                                        columnToDelete = table.getPKColumn(new String(],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1280-1280,[                                    } else if (pkCount > COLUMN_NAME_INDEX],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getColumnName,144-144,[            return columnName;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getFamilyName,148-148,[            return familyName;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/coprocessor/ScanRegionObserver.java,deserializeArrayPostionalExpressionInfoFromScan,138-138,[            return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/ScanRegionObserver.java,,227-269,[        return new BaseRegionScanner() {,             private Tuple tuple = firstTuple;,             ,             @Override,             public boolean isFilterDone() {,                 return tuple == null; ,             }, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 try {,                     if (isFilterDone()) {,                         return false;,                     },                     ,                     for (int i = 0; i < tuple.size(); i++) {,                         results.add(tuple.getValue(i));,                     },                     ,                     tuple = iterator.next();,                     return !isFilterDone();,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(region.getRegionNameAsString(), t);,                     return false;,                 },             }, ,             @Override,             public void close() throws IOException {,                 try {,                     s.close();,                 } finally {,                     chunk.close();                },             },             ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/SequenceRegionObserver.java,preAppend,282-282,[                long serverTimestamp = MetaDataUtil.getClientTimeStamp(m);],,preAppend,249-249,[                Mutation m = null;],,preAppend,250-250,[                switch (op) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,,314-342,[        RegionScanner scanner = new BaseRegionScanner() {,             private boolean done = !hadAny;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return innerScanner.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() {,                 return done;,             }, ,             @Override,             public void close() throws IOException {,                 innerScanner.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 if (done) return false;,                 done = true;,                 results.add(aggKeyValue);,                 return false;,             },             ,             @Override,             public long getMaxResultSize() {,             	return scan.getMaxResultSize();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3377-3377,[    public static com.google.protobuf.Parser<AddColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3608-3608,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,3630-3630,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3593-3593,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4842-4842,[    public static com.google.protobuf.Parser<ClearCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5029-5029,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5016-5016,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5180-5180,[    public static com.google.protobuf.Parser<ClearCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5367-5367,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5354-5354,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2203-2203,[    public static com.google.protobuf.Parser<CreateTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,2438-2438,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,2460-2460,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,2423-2423,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3874-3874,[    public static com.google.protobuf.Parser<DropColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4105-4105,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,4127-4127,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4090-4090,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2724-2724,[    public static com.google.protobuf.Parser<DropTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3022-3022,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3005-3005,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,1406-1406,[    public static com.google.protobuf.Parser<GetTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,1789-1789,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,1766-1766,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5518-5518,[    public static com.google.protobuf.Parser<GetVersionRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5705-5705,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5692-5692,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5872-5872,[    public static com.google.protobuf.Parser<GetVersionResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6099-6099,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6084-6084,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,361-361,[    public static com.google.protobuf.Parser<MetaDataResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,785-785,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4371-4371,[    public static com.google.protobuf.Parser<UpdateIndexStateRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4602-4602,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,4624-4624,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4587-4587,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,368-368,[    public static com.google.protobuf.Parser<PColumn> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,988-988,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,953-953,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,2728-2728,[    public static com.google.protobuf.Parser<PTable> PARSER =],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PTableProtos.java,getTimeStamp,2864-2864,[      return timeStamp_;],,getTimestamp,54-54,[    return this.timestamp;],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,3807-3807,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,1701-1701,[    public static com.google.protobuf.Parser<PTableStats> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,1999-1999,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,1982-1982,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,,109-109,[    public static com.google.protobuf.Parser<ServerCacheFactory> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,clone,363-363,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,maybeForceBuilderInitialization,348-348,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,814-814,[    public static com.google.protobuf.Parser<AddServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1184-1184,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,1717-1717,[    public static com.google.protobuf.Parser<AddServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1944-1944,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,1929-1929,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,134-134,[    public static com.google.protobuf.Parser<ImmutableBytesWritable> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,439-439,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,420-420,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2174-2174,[    public static com.google.protobuf.Parser<RemoveServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2436-2436,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2419-2419,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2697-2697,[    public static com.google.protobuf.Parser<RemoveServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2924-2924,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2909-2909,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,792-792,[                rs = conn.createStatement().executeQuery(query);],,testDropColumnsWithImutability,803-803,[                rs = conn.createStatement().executeQuery(query);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,616-616,[            closeConnection(conn);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,593-593,[        Connection conn = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,596-596,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,604-604,[                closeStatement(stmt);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,594-594,[        PreparedStatement stmt = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,601-601,[                stmt = conn.prepareStatement(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCharColToPK,87-87,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,464-464,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAlterTableWithVarBinaryKey,64-64,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDisableWAL,639-639,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,669-669,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,698-698,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnFromSaltedTable,430-430,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,724-724,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropVarCols,573-573,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetSaltedTableAsImmutable,396-396,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,508-508,[                conn.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalArithmeticWithIntAndLong,300-300,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalAveraging,240-240,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertSelect,132-132,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertValue,48-48,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,621-621,[        Double d = new Double(2.0);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,602-602,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,607-607,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,617-617,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCast,634-634,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,639-639,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,649-649,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCastForVarLengthArr,667-667,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,671-671,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,682-682,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithDescOrder,538-538,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,544-544,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,558-558,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithFloatArray,574-574,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,579-579,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,586-586,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testFixedWidthCharArray,702-702,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,707-707,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,714-714,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,725-725,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArray,1325-1325,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1332-1332,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1346-1346,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithColumnRef,479-479,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithSelectAsSubQuery1,340-340,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,299-299,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1252-1252,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1289-1289,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1173-1173,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1179-1179,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1193-1193,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithSameArrays,1135-1135,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1142-1142,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1156-1156,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonWithNulls,1211-1211,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1217-1217,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1231-1231,[        conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testArrayRefToLiteral,1394-1394,[            if (conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArrayNotInEnd,1370-1370,[            if (conn != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/end2end/ArrayIT.java,testWithOutOfRangeIndex,1040-1040,[		} catch (Exception e) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInGroupByClause,811-811,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInWhereClause,780-780,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testSelectSpecificIndexOfAnArrayAsArrayFunction,224-224,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,316-316,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1269-1269,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1308-1308,[            conn.createArrayOf("VARCHAR", strArr);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRef,380-380,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArray,411-411,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArrayWithNullValue,442-442,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,299-299,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1252-1252,[            PreparedStatement statement = conn.prepareStatement(query);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/end2end/ArrayIT.java,testVariableLengthArrayWithNullValue,840-840,[			String[] strArr = new String[1];],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AutoCommitIT.java,testMutationJoin,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/end2end/BaseClientManagedTimeIT.java,setUpTestDriver,81-82,[            if (driver == null) {,                 driver = initAndRegisterDriver(url, props);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/end2end/BaseHBaseManagedTimeIT.java,setUpTestDriver,79-80,[            if (driver == null) {,                 driver = initAndRegisterDriver(url, props);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,initTableValues,78-78,[        stmt.setString(1, new String(KMIN));],,initTableValues,81-81,[        stmt.setString(1, new String(KMAX));],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,46-46,[    protected static final byte[] K1  = new byte[] {'a'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,52-52,[    protected static final byte[] K11 = new byte[] {'k'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,53-53,[    protected static final byte[] K12 = new byte[] {'l'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,47-47,[    protected static final byte[] K3  = new byte[] {'c'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,48-48,[    protected static final byte[] K4  = new byte[] {'d'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,49-49,[    protected static final byte[] K5  = new byte[] {'e'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,50-50,[    protected static final byte[] K6  = new byte[] {'f'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,51-51,[    protected static final byte[] K9  = new byte[] {'i'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,54-54,[    protected static final byte[] KMAX  = new byte[] {'~'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,55-55,[    protected static final byte[] KMAX2  = new byte[] {'z'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,44-44,[    protected static final byte[] KMIN  = new byte[] {'!'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,45-45,[    protected static final byte[] KMIN2  = new byte[] {'.'};],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,initTableValues,75-75,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,73-73,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableView,51-51,[            try { conn.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,73-73,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,79-79,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,95-95,[            conn.createStatement().execute("UPSERT INTO v(k2,v1,v2) VALUES(" + i + ",'" + valuePrefix + "v1-" + (i%5) + "','" + valuePrefix + "v2-" + (i%2) + "')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,86-86,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,92-92,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndVerifyIndex,104-104,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN SELECT k1, k2, v2 FROM v WHERE v2='" + valuePrefix + "v2-1'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,verifyViewData,121-121,[        ResultSet rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,63-63,[            conn.createStatement().execute("UPSERT INTO t VALUES(" + (i % 4) + "," + (i+100) + "," + (i > 5 ? 2 : 1) + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,128-128,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,59-59,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,114-114,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BinaryRowKeyIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/CSVCommonsLoaderIT.java,testAllDatatypes,458-458,[                            .toString().toUpperCase());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,187-187,[        Connection conn = DriverManager.getConnection(url, props);],,testUnfoundSingleColumnCaseStatement,192-192,[        Connection upsertConn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,202-202,[        PreparedStatement stmt = upsertConn.prepareStatement(upsertStmt);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testValidArithmetic,167-167,[                PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CoalesceFunctionIT.java,testCoalesce,45-45,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ColumnProjectionOptimizationIT.java,testSelectFromViewOnExistingTable,232-232,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CompareDecimalToLongIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(url);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/end2end/ConnectionQueryServicesTestImpl.java,,36-36,[    protected int NUM_SLAVES_BASE = 1; // number of slaves for the cluster],,
MALICIOUS_CODE,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,75-75,[        badContextClassloader = new URLClassLoader(new URL[] {],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,setUpBeforeClass,69-69,[        stmt.execute("CREATE TABLE test (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,67-67,[        Connection conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,100-100,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,101-101,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,94-112,[        Runnable target = new Runnable() {, , ,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     ResultSet rs = stmt.executeQuery("select * from test where name = 'name2'");,                     while (rs.next()) {,                         // Just make sure we run over all records,                     },                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,126-126,[                    Connection conn = DriverManager.getConnection(getUrl());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,122-136,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     ResultSet tablesRs = conn.getMetaData().getTables(null, null, null, null);,                     while (tablesRs.next()) {,                         // Just make sure we run over all records,                     },                     tablesRs.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,run,152-152,[                    stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,run,153-153,[                    stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");],,run,154-154,[                    conn.commit();],,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,150-150,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,146-164,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");,                     stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");,                     conn.commit();,                     ResultSet rs = stmt.executeQuery("SELECT * FROM T2");,                     assertTrue(rs.next());,                     assertFalse(rs.next());,                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CreateTableIT.java,testStartKeyStopKey,51-51,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CustomEntityDataIT.java,initTableValues,50-50,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidCharacters,83-83,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('zzxxuuyyzzxxuuyy', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidEncoding,131-131,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'someNonexistFormat')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidLength,99-99,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,nullEncoding,115-115,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', NULL)");],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,421-421,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,298-298,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,361-361,[            } catch (Exception ex) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,396-396,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,383-383,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,268-268,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,254-254,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,326-326,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,311-311,[            Statement stm = con.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DeleteIT.java,assertTableCount,131-131,[        ResultSet rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DeleteIT.java,assertIndexUsed,142-142,[            PreparedStatement stmt = conn.prepareStatement("EXPLAIN " + query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithAggregate,512-512,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithAggregate,521-521,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithAggregate,530-530,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithDistinct,456-456,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithDistinct,465-465,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithDistinct,474-474,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithGroupBy,230-230,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithLimit,392-392,[                statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithOrderBy,325-325,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithWhere,186-186,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithWhere,195-195,[                conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DerivedTableIT.java,initTable,80-80,[            conn.createStatement().execute(indexDDL);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testAmbiguousStaticSelect,195-195,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testFakeCFDynamicUpsert,212-212,[            statement.executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicFamilyIT.java,doBeforeTestSetup,98-98,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseInsensitiveDynCol,237-237,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseSensitiveDynCol,262-262,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,doBeforeTestSetup,56-56,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testFullUpsert,138-138,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testMultiUpsert,105-105,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testUpsert,75-75,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testInvalidEncodingType,151-151,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testNullEncodingType,121-121,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, NULL)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testUnsupportedEncodingType,135-135,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, 'HEX')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/EncodeFunctionIT.java,testEncodeHelper,57-57,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,122-122,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,225-225,[            statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,168-168,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,133-133,[        PreparedStatement statement = conn.prepareStatement(query);],,testCharPadding,135-135,[        statement = conn.prepareStatement(],,testCharPadding,164-164,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,172-172,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,176-176,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,180-180,[            statement = conn.prepareStatement(query);],,testCharPadding,186-186,[            statement = conn.prepareStatement(query);],,testCharPadding,195-195,[            statement = conn.prepareStatement(upsert);],,testCharPadding,206-206,[            statement = conn.prepareStatement(upsert);],,testCharPadding,213-213,[            assertCharacterPadding(conn.prepareStatement(query), A_VALUE, B_VALUE);            ],,testCharPadding,216-216,[            statement = conn.prepareStatement(upsert);],,testCharPadding,220-220,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,224-224,[            statement = conn.prepareStatement(query);],,testCharPadding,226-226,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,229-229,[            statement = conn.prepareStatement(upsert);],,testCharPadding,235-235,[            assertCharacterPadding(conn.prepareStatement(query), rowKey2, rowKey2);],,testCharPadding,238-238,[            statement = conn.prepareStatement(upsert);],,testCharPadding,244-244,[            statement = conn.prepareStatement(query);],,testCharPadding,255-255,[                statement = conn.prepareStatement(upsert);],,testCharPadding,269-269,[                statement = conn.prepareStatement(upsert);],,testCharPadding,282-282,[            statement = conn.prepareStatement(upsert);],,testCharPadding,288-288,[            assertCharacterPadding(conn.prepareStatement(query), "morning1", "xyz");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,184-184,[        PreparedStatement statement = conn.prepareStatement(query);],,getResultSet,185-185,[        ResultSet rs = statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateFunctions,114-114,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,testDateFunctions,132-132,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateGroupBy,158-158,[            rs = getResultSet(conn, query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testToDateFunctionBind,61-61,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testTypeMismatchToDateFunctionBind,82-82,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,184-184,[        PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/FunkyNamesIT.java,initTableValues,46-46,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testCount,156-156,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testScanUri,126-126,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/GroupByCaseIT.java,executeQuery,169-169,[        PreparedStatement st = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testGroupByCondition,72-72,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByCondition,102-102,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeDeleteUngroupedAggregation,524-524,[        Connection conn = DriverManager.getConnection(url, props);],,testPointInTimeDeleteUngroupedAggregation,541-541,[        Connection futureConn = DriverManager.getConnection(getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 3), props);],,testPointInTimeDeleteUngroupedAggregation,551-551,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,313-313,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,322-322,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,337-337,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedAggregation,410-410,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,434-434,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,446-446,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedLimitedAggregation,469-469,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,486-486,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,498-498,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,317-317,[        stmt.execute(updateStmt); // should commit too],,testPointInTimeGroupedAggregation,339-339,[        ResultSet rs = statement.executeQuery(query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,75-75,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,76-76,[        this.plans = plans;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1140-1140,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1141-1141,[                assertTrue (rs.next());],,testLeftJoin,1182-1182,[            conn.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1139-1139,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,testLeftJoin,1140-1140,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1141-1141,[                assertTrue (rs.next());],,testLeftJoin,1182-1182,[            conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,initTable,96-96,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOnDynamicColumns,2607-2607,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1139-1139,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2374-2374,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithIncomparableJoinKeyTypes,2202-2202,[            statement.executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOverSaltedTables,2468-2468,[            conn.createStatement().execute("CREATE TABLE " + tempTableNoSalting ],,testJoinOverSaltedTables,2471-2471,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithSalting ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2377-2377,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testUpsertWithJoin,2384-2384,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,2390-2390,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,initTable,99-99,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinPlanWithIndex,2248-2248,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinPlanWithIndex,2267-2267,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithLimit,3125-3125,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithLimit,3157-3157,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSkipMergeOptimization,2295-2295,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSubqueryAndAggregation,2886-2886,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithSubqueryAndAggregation,2906-2906,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testJoinWithSubqueryAndAggregation,2935-2935,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,testJoinWithSubqueryAndAggregation,2955-2955,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query4);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithWildcard,1954-1954,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoinWithAggregation,1498-1498,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testLeftJoinWithAggregation,1518-1518,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testLeftJoinWithAggregation,1547-1547,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testNestedSubqueries,3078-3078,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testRightJoinWithAggregation,1589-1589,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testRightJoinWithAggregation,1618-1618,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSelfJoin,2337-2337,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testSelfJoin,2363-2363,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1462-1462,[                rs = conn.createStatement().executeQuery("EXPLAIN " + query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSubJoin,2787-2787,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOnDynamicColumns,2612-2612,[            stmt = conn.prepareStatement(ddlA);],,testJoinOnDynamicColumns,2616-2616,[            stmt = conn.prepareStatement(ddlB);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOverSaltedTables,2475-2475,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,2484-2484,[            upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,2497-2497,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,2521-2521,[            statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,2560-2560,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2398-2398,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1139-1139,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testMultiLeftJoin,1741-1741,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1423-1423,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,38-68,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),"IntIntKeyTest",null, ts-2);,         Properties props = new Properties();,         props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 1)); // Execute at timestamp 1,         Connection conn = DriverManager.getConnection(getUrl(), props);,         String upsert = "UPSERT INTO IntIntKeyTest VALUES(4,2)";,         PreparedStatement upsertStmt = conn.prepareStatement(upsert);,         int rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         upsert = "UPSERT INTO IntIntKeyTest VALUES(6)";,         upsertStmt = conn.prepareStatement(upsert);,         rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         conn.commit();,         conn.close();,         ,         props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 1,         conn = DriverManager.getConnection(getUrl(), props);,         String select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NULL";,         ResultSet rs;,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(0,rs.getInt(1));,         assertTrue(rs.wasNull());,         assertFalse(rs.next());,         select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NOT NULL";,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(2,rs.getInt(1));,         assertFalse(rs.next());,     }],,testIsNullInPK,1593-1621,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),PTSDB_NAME,null, ts-2);, ,         // Insert all rows at ts,         String url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + ts;,         Properties props = new Properties(TEST_PROPERTIES);,         Connection conn = DriverManager.getConnection(url, props);,         conn.setAutoCommit(true);,         PreparedStatement stmt = conn.prepareStatement("upsert into PTSDB VALUES ('', '', ?, 0.5)");,         stmt.setDate(1, D1);,         stmt.execute();,         conn.close();, ,         String query = "SELECT HOST,INST,DATE FROM PTSDB WHERE HOST IS NULL AND INST IS NULL AND DATE=?";,         url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 5); // Run query at timestamp 5,         conn = DriverManager.getConnection(url, props);,         try {,             PreparedStatement statement = conn.prepareStatement(query);,             statement.setDate(1, D1);,             ResultSet rs = statement.executeQuery();,             assertTrue(rs.next());,             assertNull(rs.getString(1));,             assertNull(rs.getString(2));,             assertEquals(D1, rs.getDate(3));,             assertFalse(rs.next());,         } finally {,             conn.close();,         },     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInCompositeKey,75-75,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testIsNullInCompositeKey,80-80,[        conn = DriverManager.getConnection(getUrl(), props);],,testIsNullInCompositeKey,87-87,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,42-42,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,initTableValues,129-129,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testKeyOnly,46-46,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,60-60,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,65-65,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,77-77,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testOr,114-114,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/LpadFunctionIT.java,testLpadHelper,64-64,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,49-49,[      byte[] first = MessageDigest.getInstance("MD5").digest(testString.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,69-69,[      byte[] pk1 = MessageDigest.getInstance("MD5").digest(testString1.getBytes());],,testUpsert,70-70,[      byte[] pk2 = MessageDigest.getInstance("MD5").digest(testString2.getBytes());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,44-44,[      conn.createStatement().execute(dml);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,64-64,[      conn.createStatement().execute(dml);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MultiCfQueryExecIT.java,testDefaultCFToDisambiguate,183-183,[        Connection conn = DriverManager.getConnection(url);],,testDefaultCFToDisambiguate,193-193,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testFilterOnTrailingKeyColumn,1580-1580,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testResetColumnInSameTxn,842-842,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testSaltedOrderBy,1982-1982,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ProductMetricsIT.java,helpTestOrderByNullColumns,1550-1550,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToExistingFamily,856-856,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToExistingFamily,865-865,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToNewFamily,887-887,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToNewFamily,892-892,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddPKColumn,914-914,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddPKColumn,925-925,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateDropTable,528-528,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testCreateDropTable,546-546,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,623-623,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateViewOnExistingTable,671-671,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,764-764,[            Connection conn75 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,780-780,[            Connection conn8 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,794-794,[            Connection conn91 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,800-800,[            Connection conn92 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,816-816,[            Connection conn92a = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,823-823,[            Connection conn93 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,834-834,[            Connection conn94 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropAllKVCols,1006-1006,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1013-1013,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1020-1020,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1025-1025,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1032-1032,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1037-1037,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropKVColumn,947-947,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,953-953,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,963-963,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,968-968,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,973-973,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropPKColumn,987-987,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testNewerTableDisallowed,1051-1051,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,625-625,[        ResultSet rs = conn2.createStatement().executeQuery(query);],,testCreateOnExistingTable,630-630,[        rs = conn2.createStatement().executeQuery(query);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeSequence,455-455,[            rs = conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/end2end/QueryIT.java,testSplitWithCachedMeta,911-911,[            admin.close();],,testSplitWithCachedMeta,860-860,[        HBaseAdmin admin = null;],,testSplitWithCachedMeta,862-862,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testIntFilter,223-223,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,234-234,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testNoStringValue,330-330,[        Connection upsertConn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeScan,368-368,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,387-387,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,399-399,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeSequence,431-431,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,438-438,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,445-445,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,453-453,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,464-464,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,471-471,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testSplitWithCachedMeta,859-859,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testTimestamp,518-518,[        Connection upsertConn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeSequence,424-424,[            conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryIT.java,initTable,133-133,[            conn.createStatement().execute(indexDDL);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryIT.java,testValidStringConcatExpression,785-785,[        		PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryPlanIT.java,testExplainPlan,192-192,[                ResultSet rs = statement.executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,initTableValues,49-49,[        Connection upsertConn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testConnectionReadIsolationLevel,126-126,[        Connection conn = DriverManager.getConnection(url, TEST_PROPERTIES);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testStatementReadIsolationLevel,73-73,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testStatementReadIsolationLevel,76-76,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ReverseFunctionIT.java,initTable,37-37,[        conn.createStatement().execute(ddl);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,93-93,[            closeStmtAndConn(stmt, conn);],,initTable,67-67,[        PreparedStatement stmt = null;],,initTable,69-69,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,93-93,[            closeStmtAndConn(stmt, conn);],,initTable,66-66,[        Connection conn = null;],,initTable,69-69,[            conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithMultiCompKeysForIn,875-875,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testRVCWithMultiCompKeysForIn,880-880,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithInListClauseUsingSubsetOfPKColsInOrder,795-795,[                statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testNestedRVCBasic,737-737,[                    statement = conn.prepareStatement(queries[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ScanQueryIT.java,testPointInTimeLimitedScan,452-452,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,471-471,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,483-483,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConn,381-381,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConnWithStmtClose,419-419,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testExplainPlanValidatesSequences,582-582,[            conn.createStatement().executeQuery("EXPLAIN SELECT NEXT VALUE FOR zzz FROM foo");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testSequenceNotFound,95-95,[			conn.prepareStatement(query).executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ServerExceptionIT.java,testServerExceptionBackToClient,40-40,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
PERFORMANCE,DM_STRING_CTOR,org/apache/phoenix/end2end/SkipRangeParallelIteratorRegionSplitterIT.java,initTableValues,314-314,[        stmt.setString(1, new String("a1A"));],,initTableValues,317-317,[        stmt.setString(1, new String("a1E"));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipRangeParallelIteratorRegionSplitterIT.java,initTableValues,311-311,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipRangeParallelIteratorRegionSplitterIT.java,testGetSplitsWithSkipScanFilter,108-108,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testInQuery,126-126,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSelectAfterUpsertInQuery,110-110,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharParallelListInQuery,147-147,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXInQuery,165-165,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXIntInQuery,192-192,[        Connection conn = DriverManager.getConnection(getUrl());],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendColumns,373-373,[                appendedColumns += ",";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendPlaceholders,384-384,[                placeholderList += ",";],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderFIT.java,runQuery,391-391,[        PreparedStatement stmt = connection.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderFIT.java,runQueryTest,335-335,[            PreparedStatement stmt = conn.prepareStatement(dml);],,runQueryTest,352-352,[                runQuery(conn, query, expectedRows);],,runQueryTest,360-360,[                runQuery(conn, query, reverse(expectedRows));],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendOrderBy,555-555,[                query += orderBy.columnNames.get(i) + " " + orderBy.directions.get(i).toString() + " ";],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/phoenix/end2end/SpillableGroupByIT.java,testScanUri,125-125,[                int a = Integer.valueOf(rs.getString(6)).intValue();],,testScanUri,126-126,[                int b = Integer.valueOf(rs.getString(7)).intValue();],,testScanUri,127-127,[                assertEquals(Integer.valueOf(uri).intValue(), Math.min(a, b));],,testScanUri,128-128,[                assertEquals(NUM_ROWS_INSERTED / 2 + Integer.valueOf(uri), Math.max(a, b));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatementHintsIT.java,initTableValues,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,135-135,[        MaxKeyChange maxKeyChange = new MaxKeyChange(stats, table);],,testStatsManager,188-188,[        maxKeyChange = new MaxKeyChange(stats, table);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,163-163,[        minKeyChange = new MinKeyChange(stats, table);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,148-148,[        delStmt.setString(1, new String(KMIN));],,testStatsManager,151-151,[        upsertStmt.setString(1, new String(KMIN2));],,testStatsManager,173-173,[        delStmt.setString(1, new String(KMAX));],,testStatsManager,175-175,[        upsertStmt.setString(1, new String(KMAX2));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,146-146,[        conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testCreateTenantTableTwice,74-74,[        catch (TableAlreadyExistsException expected) {}],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,248-248,[                rs = conn.createStatement().executeQuery("select tenant_col from TENANT_TABLE");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,205-205,[        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testDeletionOfParentTableFailsOnTenantSpecificConnection,113-113,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,51-51,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,103-103,[            conn.createStatement().executeQuery("select * from mt_base where (pk1,pk2) IN (('a','b'),('b','b'))");],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,189-193,[        String pattern = "yy.MM.dd G HH:mm:ss z";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         String query = "select pk from " + TO_CHAR_TABLE_NAME + " WHERE to_char(col_timestamp, '" + pattern + "') = '" + expectedString + "'";,         runOneRowFilterQuery(query, 2);,     }],,testTimeStampFilter,250-254,[    	String pattern = "yyMMddHHmmssZ";,         String query = "SELECT a_id FROM " + TO_NUMBER_TABLE_NAME + " WHERE to_number(a_timestamp, '" + pattern + "') = " + row1Timestamp.getTime() ;,         int expectedId = 1;,         runOneRowQueryTest(query, expectedId);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,149-153,[        String pattern = "yyMMddHHmmssZ";,         String query = "select to_char(col_timestamp, '" + pattern + "') from " + TO_CHAR_TABLE_NAME + " WHERE pk = 2";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         runOneRowProjectionQuery(query, expectedString);,     }],,testTimeStampProjection,272-275,[        String query = "select to_number(a_timestamp) from " + TO_NUMBER_TABLE_NAME + " where a_id = 3";,         BigDecimal expectedDecimalValue = new BigDecimal(row3Timestamp.getTime());,         runOneRowQueryTest(query, expectedDecimalValue);,     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToCharFunctionIT.java,initTable,86-86,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateFilter,176-176,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateProjection,136-136,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalFilter,208-208,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalProjection,168-168,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerFilter,200-200,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerProjection,160-160,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeFilter,184-184,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeProjection,144-144,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,192-192,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,152-152,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowFilterQuery,216-216,[    	runOneRowQueryTest(oneRowQuery, pkValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowProjectionQuery,212-212,[    	runOneRowQueryTest(oneRowQuery, null, projectedValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowQueryTest,222-222,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToNumberFunctionIT.java,initTable,96-96,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testDateFilter,221-221,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeFilter,230-230,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeStampFilter,253-253,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,282-282,[    	runOneRowQueryTest(oneRowQuery, true, expectedIntValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,278-278,[    	runOneRowQueryTest(oneRowQuery, false, null, expectedDecimalValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,288-288,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TopNIT.java,testTopNDelete,124-124,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntKV,297-297,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntPK,131-131,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerKV,214-214,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerPK,45-45,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,74-74,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,82-82,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,104-104,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,146-146,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectEmptyPKColumn,192-192,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,205-205,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,238-238,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,251-251,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,284-284,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,295-295,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectForAgg,368-368,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectForAgg,407-407,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectLongToInt,443-443,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,452-452,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,461-461,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectOnDescToAsc,543-543,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,552-552,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,562-562,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRowKeyMutationOnSplitedTable,583-583,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,594-594,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,606-606,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRunOnServer,480-480,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,489-489,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,499-499,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,508-508,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,517-517,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,526-526,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithLimit,624-624,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,636-636,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,658-658,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,664-664,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequence,692-692,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequence,711-711,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,75-75,[            conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + indexName + " ON " + TestUtil.ATABLE_NAME + "(a_string)" );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,87-87,[            upsertStmt = conn.prepareStatement("EXPLAIN " + upsert);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,443-443,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,437-437,[        PreparedStatement pstmt = null;],,testBatchedUpsert,439-439,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,443-443,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,436-436,[        Connection conn = null;],,testBatchedUpsert,439-439,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,305-305,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,299-299,[        PreparedStatement stmt = null;],,testTimestampAddSubtractArithmetic,301-301,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,305-305,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,298-298,[        Connection conn = null;],,testTimestampAddSubtractArithmetic,301-301,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,264-264,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,258-258,[        PreparedStatement stmt = null;],,testTimestampSerializedAndDeserializedCorrectly,260-260,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,264-264,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,257-257,[        Connection conn = null;],,testTimestampSerializedAndDeserializedCorrectly,260-260,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,540-540,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,534-534,[        PreparedStatement stmt = null;],,testUpsertDateIntoDescUnsignedDate,536-536,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,540-540,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,533-533,[        Connection conn = null;],,testUpsertDateIntoDescUnsignedDate,536-536,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,403-403,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,397-397,[        PreparedStatement stmt = null;],,testUpsertIntoFloat,399-399,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,403-403,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,396-396,[        Connection conn = null;],,testUpsertIntoFloat,399-399,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,236-236,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,230-230,[        Statement stmt = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,232-232,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,236-236,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,229-229,[        Connection conn = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,232-232,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testGroupByWithLimitOverRowKey,56-56,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByWithLimitOverRowKey,69-69,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDate,146-146,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDate,151-151,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDescExpression,206-206,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDescExpression,211-211,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithExpression,118-118,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertVarCharWithMaxLength,169-169,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,174-174,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,181-181,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,188-188,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,194-194,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateValues,91-91,[        PreparedStatement upsertStmt = conn.prepareStatement("upsert into ptsdb(inst,host,date) values('aaa','bbb',to_date('" + dateString + "'))");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,720-720,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,721-721,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,719-719,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,720-720,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,721-721,[            assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initGroupByRowKeyColumns,72-72,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues,540-540,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues2,573-573,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initTableValues,99-99,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,713-713,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,719-719,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,730-730,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,738-738,[            PreparedStatement s = conn.prepareStatement(sql2);],,testBatchUpsert,746-746,[            PreparedStatement s = conn.prepareStatement(sql3);],,testBatchUpsert,754-754,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,762-762,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,770-770,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,784-784,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testEscapedQuoteScan,502-502,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testIsNullInPK,1599-1599,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeFunctionOnRowKeyInWhere,1884-1884,[        Connection conn = DriverManager.getConnection(url);],,testLikeFunctionOnRowKeyInWhere,1889-1889,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeOnColumn,1487-1487,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingKVColumn,927-927,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingPKColumn,887-887,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testNullValueEqualityScan,445-445,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunctionOnRowKeyInWhere,1853-1853,[        Connection conn = DriverManager.getConnection(url);],,testRTrimFunctionOnRowKeyInWhere,1858-1858,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction2,1377-1377,[        Connection conn = DriverManager.getConnection(url, props);],,testRegexpSubstrFunction2,1384-1384,[        conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunctionOnRowKeyInWhere,1826-1826,[        Connection conn = DriverManager.getConnection(url);],,testSubstrFunctionOnRowKeyInWhere,1831-1831,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongKVColumn,1064-1064,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongPKColumn,1027-1027,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortKVColumn,955-955,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortPKColumn,991-991,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testVarLengthPKColScan,472-472,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToCharWithFormatOnDate,849-849,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToDateWithFormatOnDate,870-870,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testInListConstant,1468-1468,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLTrimFunction,1811-1811,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLengthFunction,1653-1653,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeConstant,1433-1433,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLowerFunction,1725-1725,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunction,1768-1768,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexReplaceFunction,1298-1298,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction,1360-1360,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunction,1239-1239,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTrimFunction,1944-1944,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testUpperFunction,1688-1688,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,createTestTable,59-59,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/DropViewIT.java,testDropViewKeepsHTable,82-82,[        conn.createStatement().execute("create view " + HBASE_NATIVE +],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testIndexWithNullableFixedWithCols,150-150,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testIndexWithNullableFixedWithCols,127-127,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreation,119-119,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithNullableFixedWidthColInPK,281-281,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithRepeatedColumns,339-339,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithSameColumnNamesInTwoFamily,359-359,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertActiveIndex,101-101,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertNoActiveIndex,110-110,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/index/IndexTestUtil.java,readDataTableIndexRow,68-68,[        PreparedStatement stmt = conn.prepareStatement(SELECT_DATA_INDEX_ROW);],,readDataTableIndexRow,69-69,[        stmt.setString(1, schemaName);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,149-149,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testInFilterOnIndexedTable,842-842,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithCaseSensitiveCols,768-768,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithDecimalCol,861-861,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableDateCol,105-105,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableFixedWithCols,70-70,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testUpsertingNullForIndexedColumns,898-898,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testMultipleUpdatesAcrossRegions,741-741,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesAcrossRegions,746-746,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCompoundIndexKey,489-489,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCompoundIndexKey,492-492,[        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,507-507,[        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,526-526,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,161-161,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumnUpdates,164-164,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,186-186,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,208-208,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumns,392-392,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,395-395,[        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,409-409,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,412-412,[        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,426-426,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,429-429,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithCaseSensitiveCols,793-793,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithCaseSensitiveCols,807-807,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithDecimalCol,873-873,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithDecimalCol,876-876,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableDateCol,117-117,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,120-120,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithNullableDateCol,130-130,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,133-133,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableFixedWithCols,82-82,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableFixedWithCols,85-85,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testMultipleUpdatesToSingleRow,608-608,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesToSingleRow,613-613,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testSelectAllAndAliasWithIndex,259-259,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,262-262,[        rs = conn.createStatement().executeQuery(query);],,testSelectAllAndAliasWithIndex,280-280,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,285-285,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testSelectCF,324-324,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,328-328,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,330-330,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCompoundIndexKey,519-519,[        stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,179-179,[            stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME],,testCoveredColumnUpdates,201-201,[            stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumns,402-402,[        stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + "(k,v2) VALUES(?,?)");],,testCoveredColumns,419-419,[        stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + "(k,v2) VALUES(?,?)");],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,178-178,[        expectedPlan = tableSaltBuckets == null ? ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,107-107,[        conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + DATA_TABLE_FULL_NAME + " (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR)  " +  (tableSaltBuckets == null ? "" : " SALT_BUCKETS=" + tableSaltBuckets));],,testMutableTableIndexMaintanence,109-109,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,112-112,[        conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + INDEX_TABLE_NAME + " ON " + DATA_TABLE_FULL_NAME + " (v DESC)" + (indexSaltBuckets == null ? "" : " SALT_BUCKETS=" + indexSaltBuckets));],,testMutableTableIndexMaintanence,114-114,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,127-127,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,137-137,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,144-144,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,155-155,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,163-163,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,172-172,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,177-177,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,191-191,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,199-199,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,117-117,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoNormalTableFromSaltedTable,80-80,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoSaltedTableFromNormalTable,43-43,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSaltedTableIntoSaltedTable,117-117,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTable,154-154,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTableWithEmptyPKColumn,187-187,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,initTableValues,42-42,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,testSelectValueWithPointKeyQuery,70-70,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/BasicQueryPlan.java,,155-163,[                iterator : new DelegateResultIterator(iterator) {,             @Override,             public void close() throws SQLException {,                 try {,                     super.close();,                 } finally {,                     SQLCloseables.closeAll(dependencies);,                 },             }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/execute/MutationState.java,,71-446,[public class MutationState implements SQLCloseable {,     private static final Logger logger = LoggerFactory.getLogger(MutationState.class);, ,     private PhoenixConnection connection;,     private final long maxSize;,     private final ImmutableBytesPtr tempPtr = new ImmutableBytesPtr();,     private final Map<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> mutations = Maps.newHashMapWithExpectedSize(3); // TODO: Sizing?,     private final long sizeOffset;,     private int numRows = 0;, ,     public MutationState(int maxSize, PhoenixConnection connection) {,         this(maxSize,connection,0);,     },     ,     public MutationState(int maxSize, PhoenixConnection connection, long sizeOffset) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,     },     ,     public MutationState(TableRef table, Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutations, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.mutations.put(table, mutations);,         this.sizeOffset = sizeOffset;,         this.numRows = mutations.size();,         throwIfTooBig();,     },     ,     private MutationState(List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> entries, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : entries) {,             numRows += entry.getValue().size();,             this.mutations.put(entry.getKey(), entry.getValue());,         },         throwIfTooBig();,     },     ,     private void throwIfTooBig() {,         if (numRows > maxSize) {,             // TODO: throw SQLException ?,             throw new IllegalArgumentException("MutationState size of " + numRows + " is bigger than max allowed size of " + maxSize);,         },     },     ,     public long getUpdateCount() {,         return sizeOffset + numRows;,     },     /**,      * Combine a newer mutation with this one, where in the event of overlaps,,      * the newer one will take precedence.,      * @param newMutation the newer mutation,      */,     public void join(MutationState newMutation) {,         if (this == newMutation) { // Doesn't make sense,             return;,         },         // Merge newMutation with this one, keeping state from newMutation for any overlaps,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : newMutation.mutations.entrySet()) {,             // Replace existing entries for the table with new entries,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> existingRows = this.mutations.put(entry.getKey(), entry.getValue());,             if (existingRows != null) { // Rows for that table already exist,                 // Loop through new rows and replace existing with new,                 for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                     // Replace existing row with new row,                     Map<PColumn,byte[]> existingValues = existingRows.put(rowEntry.getKey(), rowEntry.getValue());,                     if (existingValues != null) {,                         if (existingValues != PRow.DELETE_MARKER) {,                             Map<PColumn,byte[]> newRow = rowEntry.getValue();,                             // if new row is PRow.DELETE_MARKER, it means delete, and we don't need to merge it with existing row. ,                             if (newRow != PRow.DELETE_MARKER) {,                                 // Replace existing column values with new column values,                                 for (Map.Entry<PColumn,byte[]> valueEntry : newRow.entrySet()) {,                                     existingValues.put(valueEntry.getKey(), valueEntry.getValue());,                                 },                                 // Now that the existing row has been merged with the new row, replace it back,                                 // again (since it was replaced with the new one above).,                                 existingRows.put(rowEntry.getKey(), existingValues);,                             },                         },                     } else {,                         numRows++;,                     },                 },                 // Put the existing one back now that it's merged,                 this.mutations.put(entry.getKey(), existingRows);,             } else {,                 numRows += entry.getValue().size();,             },         },         throwIfTooBig();,     },     ,     private Iterator<Pair<byte[],List<Mutation>>> addRowMutations(final TableRef tableRef, final Map<ImmutableBytesPtr, Map<PColumn, byte[]>> values, long timestamp, boolean includeMutableIndexes) {,         final List<Mutation> mutations = Lists.newArrayListWithExpectedSize(values.size());,         Iterator<Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>>> iterator = values.entrySet().iterator();,         while (iterator.hasNext()) {,             Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry = iterator.next();,             ImmutableBytesPtr key = rowEntry.getKey();,             PRow row = tableRef.getTable().newRow(connection.getKeyValueBuilder(), timestamp, key);,             if (rowEntry.getValue() == PRow.DELETE_MARKER) { // means delete,                 row.delete();,             } else {,                 for (Map.Entry<PColumn,byte[]> valueEntry : rowEntry.getValue().entrySet()) {,                     row.setValue(valueEntry.getKey(), valueEntry.getValue());,                 },             },             mutations.addAll(row.toRowMutations());,         },         final Iterator<PTable> indexes = // Only maintain tables with immutable rows through this client-side mechanism,                 (tableRef.getTable().isImmutableRows() || includeMutableIndexes) ? ,                         IndexMaintainer.nonDisabledIndexIterator(tableRef.getTable().getIndexes().iterator()) : ,                         Iterators.<PTable>emptyIterator();,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             boolean isFirst = true;, ,             @Override,             public boolean hasNext() {,                 return isFirst || indexes.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (isFirst) {,                     isFirst = false;,                     return new Pair<byte[],List<Mutation>>(tableRef.getTable().getPhysicalName().getBytes(),mutations);,                 },                 PTable index = indexes.next();,                 List<Mutation> indexMutations;,                 try {,                     indexMutations =,                             IndexUtil.generateIndexData(tableRef.getTable(), index, mutations,,                                 tempPtr, connection.getKeyValueBuilder());,                 } catch (SQLException e) {,                     throw new IllegalDataException(e);,                 },                 return new Pair<byte[],List<Mutation>>(index.getPhysicalName().getBytes(),indexMutations);,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },     ,     /**,      * Get the unsorted list of HBase mutations for the tables with uncommitted data.,      * @return list of HBase mutations for uncommitted data.,      */,     public Iterator<Pair<byte[],List<Mutation>>> toMutations() {,         return toMutations(false);,     },     ,     public Iterator<Pair<byte[],List<Mutation>>> toMutations(final boolean includeMutableIndexes) {,         final Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         if (!iterator.hasNext()) {,             return Iterators.emptyIterator();,         },         Long scn = connection.getSCN();,         final long timestamp = scn == null ? HConstants.LATEST_TIMESTAMP : scn;,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             private Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> current = iterator.next();,             private Iterator<Pair<byte[],List<Mutation>>> innerIterator = init();,                     ,             private Iterator<Pair<byte[],List<Mutation>>> init() {,                 return addRowMutations(current.getKey(), current.getValue(), timestamp, includeMutableIndexes);,             },             ,             @Override,             public boolean hasNext() {,                 return innerIterator.hasNext() || iterator.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (!innerIterator.hasNext()) {,                     current = iterator.next();,                 },                 return innerIterator.next();,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },         ,     /**,      * Validates that the meta data is still valid based on the current server time,      * and returns the server time to use for the upsert for each table.,      * @param connection,      * @return the server time to use for the upsert,      * @throws SQLException if the table or any columns no longer exist,      */,     private long[] validate() throws SQLException {,         int i = 0;,         Long scn = connection.getSCN();,         PName tenantId = connection.getTenantId();,         MetaDataClient client = new MetaDataClient(connection);,         long[] timeStamps = new long[this.mutations.size()];,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : mutations.entrySet()) {,             TableRef tableRef = entry.getKey();,             long serverTimeStamp = tableRef.getTimeStamp();,             PTable table = tableRef.getTable();,             if (!connection.getAutoCommit()) {,                 MetaDataMutationResult result = client.updateCache(table.getSchemaName().getString(), table.getTableName().getString());,                 long timestamp = result.getMutationTime();,                 if (timestamp != QueryConstants.UNSET_TIMESTAMP) {,                     serverTimeStamp = timestamp;,                     if (result.wasUpdated()) {,                         // TODO: use bitset?,                         PColumn[] columns = new PColumn[table.getColumns().size()];,                         for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                             Map<PColumn,byte[]> valueEntry = rowEntry.getValue();,                             if (valueEntry != PRow.DELETE_MARKER) {,                                 for (PColumn column : valueEntry.keySet()) {,                                     columns[column.getPosition()] = column;,                                 },                             },                         },                         table = connection.getMetaDataCache().getTable(new PTableKey(tenantId, table.getName().getString()));,                         for (PColumn column : columns) {,                             if (column != null) {,                                 table.getColumnFamily(column.getFamilyName().getString()).getColumn(column.getName().getString());,                             },                         },                     },                 },             },             timeStamps[i++] = scn == null ? serverTimeStamp == QueryConstants.UNSET_TIMESTAMP ? HConstants.LATEST_TIMESTAMP : serverTimeStamp : scn;,         },         return timeStamps;,     },     ,     private static void logMutationSize(HTableInterface htable, List<Mutation> mutations) {,         long byteSize = 0;,         int keyValueCount = 0;,         for (Mutation mutation : mutations) {,             if (mutation.getFamilyCellMap() != null) { // Not a Delete of the row,                 for (Entry<byte[], List<Cell>> entry : mutation.getFamilyCellMap().entrySet()) {,                     if (entry.getValue() != null) {,                         for (Cell kv : entry.getValue()) {,                             byteSize += CellUtil.estimatedSizeOf(kv);,                             keyValueCount++;,                         },                     },                 },             },         },         logger.debug("Sending " + mutations.size() + " mutations for " + Bytes.toString(htable.getTableName()) + " with " + keyValueCount + " key values of total size " + byteSize + " bytes");,     },     ,     @SuppressWarnings("deprecation"),     public void commit() throws SQLException {,         int i = 0;,         byte[] tenantId = connection.getTenantId() == null ? null : connection.getTenantId().getBytes();,         long[] serverTimeStamps = validate();,         Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> committedList = Lists.newArrayListWithCapacity(this.mutations.size());,         while (iterator.hasNext()) {,             Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry = iterator.next();,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> valuesMap = entry.getValue();,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             table.getIndexMaintainers(tempPtr);,             boolean hasIndexMaintainers = tempPtr.getLength() > 0;,             boolean isDataTable = true;,             long serverTimestamp = serverTimeStamps[i++];,             Iterator<Pair<byte[],List<Mutation>>> mutationsIterator = addRowMutations(tableRef, valuesMap, serverTimestamp, false);,             while (mutationsIterator.hasNext()) {,                 Pair<byte[],List<Mutation>> pair = mutationsIterator.next();,                 byte[] htableName = pair.getFirst();,                 List<Mutation> mutations = pair.getSecond();,                 ,                 int retryCount = 0;,                 boolean shouldRetry = false;,                 do {,                     ServerCache cache = null;,                     if (hasIndexMaintainers && isDataTable) {,                         byte[] attribValue = null;,                         byte[] uuidValue;,                         if (IndexMetaDataCacheClient.useIndexMetadataCache(connection, mutations, tempPtr.getLength())) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(mutations, tempPtr);,                             uuidValue = cache.getId();,                             // If we haven't retried yet, retry for this case only, as it's possible that,                             // a split will occur after we send the index metadata cache to all known,                             // region servers.,                             shouldRetry = true;,                         } else {,                             attribValue = ByteUtil.copyKeyBytesIfNecessary(tempPtr);,                             uuidValue = ServerCacheClient.generateId();,                         },                         // Either set the UUID to be able to access the index metadata from the cache,                         // or set the index metadata directly on the Mutation,                         for (Mutation mutation : mutations) {,                             if (tenantId != null) {,                                 mutation.setAttribute(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);,                             },                             mutation.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             if (attribValue != null) {,                                 mutation.setAttribute(PhoenixIndexCodec.INDEX_MD, attribValue);,                             },                         },                     },                     ,                     SQLException sqlE = null;,                     HTableInterface hTable = connection.getQueryServices().getTable(htableName);,                     try {,                         if (logger.isDebugEnabled()) logMutationSize(hTable, mutations);,                         long startTime = System.currentTimeMillis();,                         hTable.batch(mutations);,                         shouldRetry = false;,                         if (logger.isDebugEnabled()) logger.debug("Total time for batch call of  " + mutations.size() + " mutations into " + table.getName().getString() + ": " + (System.currentTimeMillis() - startTime) + " ms");,                         committedList.add(entry);,                     } catch (Exception e) {,                         SQLException inferredE = ServerUtil.parseServerExceptionOrNull(e);,                         if (inferredE != null) {,                             if (shouldRetry && retryCount == 0 && inferredE.getErrorCode() == SQLExceptionCode.INDEX_METADATA_NOT_FOUND.getErrorCode()) {,                                 // Swallow this exception once, as it's possible that we split after sending the index metadata,                                 // and one of the region servers doesn't have it. This will cause it to have it the next go around.,                                 // If it fails again, we don't retry.,                                 logger.warn("Swallowing exception and retrying after clearing meta cache on connection. " + inferredE);,                                 connection.getQueryServices().clearTableRegionCache(htableName);,                                 continue;,                             },                             e = inferredE;,                         },                         // Throw to client with both what was committed so far and what is left to be committed.,                         // That way, client can either undo what was done or try again with what was not done.,                         sqlE = new CommitException(e, this, new MutationState(committedList, this.sizeOffset, this.maxSize, this.connection));,                     } finally {,                         try {,                             hTable.close();,                         } catch (IOException e) {,                             if (sqlE != null) {,                                 sqlE.setNextException(ServerUtil.parseServerException(e));,                             } else {,                                 sqlE = ServerUtil.parseServerException(e);,                             },                         } finally {,                             try {,                                 if (cache != null) {,                                     cache.close();,                                 },                             } finally {,                                 if (sqlE != null) {,                                     throw sqlE;,                                 },                             },                         },                     },                 } while (shouldRetry && retryCount++ < 1);,                 isDataTable = false;,             },             numRows -= entry.getValue().size();,             iterator.remove(); // Remove batches as we process them,         },         assert(numRows==0);,         assert(this.mutations.isEmpty());,     },     ,     public void rollback(PhoenixConnection connection) throws SQLException {,         this.mutations.clear();,         numRows = 0;,     },     ,     @Override,     public void close() throws SQLException {,     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/execute/MutationState.java,,71-446,[public class MutationState implements SQLCloseable {,     private static final Logger logger = LoggerFactory.getLogger(MutationState.class);, ,     private PhoenixConnection connection;,     private final long maxSize;,     private final ImmutableBytesPtr tempPtr = new ImmutableBytesPtr();,     private final Map<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> mutations = Maps.newHashMapWithExpectedSize(3); // TODO: Sizing?,     private final long sizeOffset;,     private int numRows = 0;, ,     public MutationState(int maxSize, PhoenixConnection connection) {,         this(maxSize,connection,0);,     },     ,     public MutationState(int maxSize, PhoenixConnection connection, long sizeOffset) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,     },     ,     public MutationState(TableRef table, Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutations, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.mutations.put(table, mutations);,         this.sizeOffset = sizeOffset;,         this.numRows = mutations.size();,         throwIfTooBig();,     },     ,     private MutationState(List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> entries, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : entries) {,             numRows += entry.getValue().size();,             this.mutations.put(entry.getKey(), entry.getValue());,         },         throwIfTooBig();,     },     ,     private void throwIfTooBig() {,         if (numRows > maxSize) {,             // TODO: throw SQLException ?,             throw new IllegalArgumentException("MutationState size of " + numRows + " is bigger than max allowed size of " + maxSize);,         },     },     ,     public long getUpdateCount() {,         return sizeOffset + numRows;,     },     /**,      * Combine a newer mutation with this one, where in the event of overlaps,,      * the newer one will take precedence.,      * @param newMutation the newer mutation,      */,     public void join(MutationState newMutation) {,         if (this == newMutation) { // Doesn't make sense,             return;,         },         // Merge newMutation with this one, keeping state from newMutation for any overlaps,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : newMutation.mutations.entrySet()) {,             // Replace existing entries for the table with new entries,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> existingRows = this.mutations.put(entry.getKey(), entry.getValue());,             if (existingRows != null) { // Rows for that table already exist,                 // Loop through new rows and replace existing with new,                 for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                     // Replace existing row with new row,                     Map<PColumn,byte[]> existingValues = existingRows.put(rowEntry.getKey(), rowEntry.getValue());,                     if (existingValues != null) {,                         if (existingValues != PRow.DELETE_MARKER) {,                             Map<PColumn,byte[]> newRow = rowEntry.getValue();,                             // if new row is PRow.DELETE_MARKER, it means delete, and we don't need to merge it with existing row. ,                             if (newRow != PRow.DELETE_MARKER) {,                                 // Replace existing column values with new column values,                                 for (Map.Entry<PColumn,byte[]> valueEntry : newRow.entrySet()) {,                                     existingValues.put(valueEntry.getKey(), valueEntry.getValue());,                                 },                                 // Now that the existing row has been merged with the new row, replace it back,                                 // again (since it was replaced with the new one above).,                                 existingRows.put(rowEntry.getKey(), existingValues);,                             },                         },                     } else {,                         numRows++;,                     },                 },                 // Put the existing one back now that it's merged,                 this.mutations.put(entry.getKey(), existingRows);,             } else {,                 numRows += entry.getValue().size();,             },         },         throwIfTooBig();,     },     ,     private Iterator<Pair<byte[],List<Mutation>>> addRowMutations(final TableRef tableRef, final Map<ImmutableBytesPtr, Map<PColumn, byte[]>> values, long timestamp, boolean includeMutableIndexes) {,         final List<Mutation> mutations = Lists.newArrayListWithExpectedSize(values.size());,         Iterator<Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>>> iterator = values.entrySet().iterator();,         while (iterator.hasNext()) {,             Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry = iterator.next();,             ImmutableBytesPtr key = rowEntry.getKey();,             PRow row = tableRef.getTable().newRow(connection.getKeyValueBuilder(), timestamp, key);,             if (rowEntry.getValue() == PRow.DELETE_MARKER) { // means delete,                 row.delete();,             } else {,                 for (Map.Entry<PColumn,byte[]> valueEntry : rowEntry.getValue().entrySet()) {,                     row.setValue(valueEntry.getKey(), valueEntry.getValue());,                 },             },             mutations.addAll(row.toRowMutations());,         },         final Iterator<PTable> indexes = // Only maintain tables with immutable rows through this client-side mechanism,                 (tableRef.getTable().isImmutableRows() || includeMutableIndexes) ? ,                         IndexMaintainer.nonDisabledIndexIterator(tableRef.getTable().getIndexes().iterator()) : ,                         Iterators.<PTable>emptyIterator();,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             boolean isFirst = true;, ,             @Override,             public boolean hasNext() {,                 return isFirst || indexes.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (isFirst) {,                     isFirst = false;,                     return new Pair<byte[],List<Mutation>>(tableRef.getTable().getPhysicalName().getBytes(),mutations);,                 },                 PTable index = indexes.next();,                 List<Mutation> indexMutations;,                 try {,                     indexMutations =,                             IndexUtil.generateIndexData(tableRef.getTable(), index, mutations,,                                 tempPtr, connection.getKeyValueBuilder());,                 } catch (SQLException e) {,                     throw new IllegalDataException(e);,                 },                 return new Pair<byte[],List<Mutation>>(index.getPhysicalName().getBytes(),indexMutations);,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },     ,     /**,      * Get the unsorted list of HBase mutations for the tables with uncommitted data.,      * @return list of HBase mutations for uncommitted data.,      */,     public Iterator<Pair<byte[],List<Mutation>>> toMutations() {,         return toMutations(false);,     },     ,     public Iterator<Pair<byte[],List<Mutation>>> toMutations(final boolean includeMutableIndexes) {,         final Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         if (!iterator.hasNext()) {,             return Iterators.emptyIterator();,         },         Long scn = connection.getSCN();,         final long timestamp = scn == null ? HConstants.LATEST_TIMESTAMP : scn;,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             private Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> current = iterator.next();,             private Iterator<Pair<byte[],List<Mutation>>> innerIterator = init();,                     ,             private Iterator<Pair<byte[],List<Mutation>>> init() {,                 return addRowMutations(current.getKey(), current.getValue(), timestamp, includeMutableIndexes);,             },             ,             @Override,             public boolean hasNext() {,                 return innerIterator.hasNext() || iterator.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (!innerIterator.hasNext()) {,                     current = iterator.next();,                 },                 return innerIterator.next();,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },         ,     /**,      * Validates that the meta data is still valid based on the current server time,      * and returns the server time to use for the upsert for each table.,      * @param connection,      * @return the server time to use for the upsert,      * @throws SQLException if the table or any columns no longer exist,      */,     private long[] validate() throws SQLException {,         int i = 0;,         Long scn = connection.getSCN();,         PName tenantId = connection.getTenantId();,         MetaDataClient client = new MetaDataClient(connection);,         long[] timeStamps = new long[this.mutations.size()];,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : mutations.entrySet()) {,             TableRef tableRef = entry.getKey();,             long serverTimeStamp = tableRef.getTimeStamp();,             PTable table = tableRef.getTable();,             if (!connection.getAutoCommit()) {,                 MetaDataMutationResult result = client.updateCache(table.getSchemaName().getString(), table.getTableName().getString());,                 long timestamp = result.getMutationTime();,                 if (timestamp != QueryConstants.UNSET_TIMESTAMP) {,                     serverTimeStamp = timestamp;,                     if (result.wasUpdated()) {,                         // TODO: use bitset?,                         PColumn[] columns = new PColumn[table.getColumns().size()];,                         for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                             Map<PColumn,byte[]> valueEntry = rowEntry.getValue();,                             if (valueEntry != PRow.DELETE_MARKER) {,                                 for (PColumn column : valueEntry.keySet()) {,                                     columns[column.getPosition()] = column;,                                 },                             },                         },                         table = connection.getMetaDataCache().getTable(new PTableKey(tenantId, table.getName().getString()));,                         for (PColumn column : columns) {,                             if (column != null) {,                                 table.getColumnFamily(column.getFamilyName().getString()).getColumn(column.getName().getString());,                             },                         },                     },                 },             },             timeStamps[i++] = scn == null ? serverTimeStamp == QueryConstants.UNSET_TIMESTAMP ? HConstants.LATEST_TIMESTAMP : serverTimeStamp : scn;,         },         return timeStamps;,     },     ,     private static void logMutationSize(HTableInterface htable, List<Mutation> mutations) {,         long byteSize = 0;,         int keyValueCount = 0;,         for (Mutation mutation : mutations) {,             if (mutation.getFamilyCellMap() != null) { // Not a Delete of the row,                 for (Entry<byte[], List<Cell>> entry : mutation.getFamilyCellMap().entrySet()) {,                     if (entry.getValue() != null) {,                         for (Cell kv : entry.getValue()) {,                             byteSize += CellUtil.estimatedSizeOf(kv);,                             keyValueCount++;,                         },                     },                 },             },         },         logger.debug("Sending " + mutations.size() + " mutations for " + Bytes.toString(htable.getTableName()) + " with " + keyValueCount + " key values of total size " + byteSize + " bytes");,     },     ,     @SuppressWarnings("deprecation"),     public void commit() throws SQLException {,         int i = 0;,         byte[] tenantId = connection.getTenantId() == null ? null : connection.getTenantId().getBytes();,         long[] serverTimeStamps = validate();,         Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> committedList = Lists.newArrayListWithCapacity(this.mutations.size());,         while (iterator.hasNext()) {,             Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry = iterator.next();,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> valuesMap = entry.getValue();,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             table.getIndexMaintainers(tempPtr);,             boolean hasIndexMaintainers = tempPtr.getLength() > 0;,             boolean isDataTable = true;,             long serverTimestamp = serverTimeStamps[i++];,             Iterator<Pair<byte[],List<Mutation>>> mutationsIterator = addRowMutations(tableRef, valuesMap, serverTimestamp, false);,             while (mutationsIterator.hasNext()) {,                 Pair<byte[],List<Mutation>> pair = mutationsIterator.next();,                 byte[] htableName = pair.getFirst();,                 List<Mutation> mutations = pair.getSecond();,                 ,                 int retryCount = 0;,                 boolean shouldRetry = false;,                 do {,                     ServerCache cache = null;,                     if (hasIndexMaintainers && isDataTable) {,                         byte[] attribValue = null;,                         byte[] uuidValue;,                         if (IndexMetaDataCacheClient.useIndexMetadataCache(connection, mutations, tempPtr.getLength())) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(mutations, tempPtr);,                             uuidValue = cache.getId();,                             // If we haven't retried yet, retry for this case only, as it's possible that,                             // a split will occur after we send the index metadata cache to all known,                             // region servers.,                             shouldRetry = true;,                         } else {,                             attribValue = ByteUtil.copyKeyBytesIfNecessary(tempPtr);,                             uuidValue = ServerCacheClient.generateId();,                         },                         // Either set the UUID to be able to access the index metadata from the cache,                         // or set the index metadata directly on the Mutation,                         for (Mutation mutation : mutations) {,                             if (tenantId != null) {,                                 mutation.setAttribute(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);,                             },                             mutation.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             if (attribValue != null) {,                                 mutation.setAttribute(PhoenixIndexCodec.INDEX_MD, attribValue);,                             },                         },                     },                     ,                     SQLException sqlE = null;,                     HTableInterface hTable = connection.getQueryServices().getTable(htableName);,                     try {,                         if (logger.isDebugEnabled()) logMutationSize(hTable, mutations);,                         long startTime = System.currentTimeMillis();,                         hTable.batch(mutations);,                         shouldRetry = false;,                         if (logger.isDebugEnabled()) logger.debug("Total time for batch call of  " + mutations.size() + " mutations into " + table.getName().getString() + ": " + (System.currentTimeMillis() - startTime) + " ms");,                         committedList.add(entry);,                     } catch (Exception e) {,                         SQLException inferredE = ServerUtil.parseServerExceptionOrNull(e);,                         if (inferredE != null) {,                             if (shouldRetry && retryCount == 0 && inferredE.getErrorCode() == SQLExceptionCode.INDEX_METADATA_NOT_FOUND.getErrorCode()) {,                                 // Swallow this exception once, as it's possible that we split after sending the index metadata,                                 // and one of the region servers doesn't have it. This will cause it to have it the next go around.,                                 // If it fails again, we don't retry.,                                 logger.warn("Swallowing exception and retrying after clearing meta cache on connection. " + inferredE);,                                 connection.getQueryServices().clearTableRegionCache(htableName);,                                 continue;,                             },                             e = inferredE;,                         },                         // Throw to client with both what was committed so far and what is left to be committed.,                         // That way, client can either undo what was done or try again with what was not done.,                         sqlE = new CommitException(e, this, new MutationState(committedList, this.sizeOffset, this.maxSize, this.connection));,                     } finally {,                         try {,                             hTable.close();,                         } catch (IOException e) {,                             if (sqlE != null) {,                                 sqlE.setNextException(ServerUtil.parseServerException(e));,                             } else {,                                 sqlE = ServerUtil.parseServerException(e);,                             },                         } finally {,                             try {,                                 if (cache != null) {,                                     cache.close();,                                 },                             } finally {,                                 if (sqlE != null) {,                                     throw sqlE;,                                 },                             },                         },                     },                 } while (shouldRetry && retryCount++ < 1);,                 isDataTable = false;,             },             numRows -= entry.getValue().size();,             iterator.remove(); // Remove batches as we process them,         },         assert(numRows==0);,         assert(this.mutations.isEmpty());,     },     ,     public void rollback(PhoenixConnection connection) throws SQLException {,         this.mutations.clear();,         numRows = 0;,     },     ,     @Override,     public void close() throws SQLException {,     }],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/HashJoinPlan.java,<init>,77-77,[        this.clientProjectors = clientProjectors;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/HashJoinPlan.java,<init>,75-75,[        this.hashExpressions = hashExpressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/HashJoinPlan.java,<init>,76-76,[        this.hashPlans = hashPlans;],,
BAD_PRACTICE,HE_HASHCODE_NO_EQUALS,org/apache/phoenix/expression/AndOrExpression.java,hashCode,49-49,[        return 31 * super.hashCode() + Boolean.valueOf(this.getStopValue()).hashCode();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/expression/ComparisonExpression.java,create,185-188,[                        switch (op) {,                         case GREATER_OR_EQUAL: ,                         case LESS: // get next whole number,                             increment = 1;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/expression/InListExpression.java,readFields,217-217,[                offset = readValue(input, valuesBytes, offset, maxValue = new ImmutableBytesPtr());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnFamily,60-60,[        return cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnName,64-64,[        return cq;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/LiteralExpression.java,getBytes,301-301,[        return byteValue;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/expression/LiteralExpression.java,newConstant,158-158,[        value = type.toObject(value, actualType);],,newConstant,174-174,[                maxLength = type == null || !type.isFixedWidth() ? null : type.getMaxLength(value);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getAggregators,117-117,[        return aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getFunctions,75-75,[        return functions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,51-51,[        this.aggregators = aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,50-50,[        this.functions = functions;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/expression/aggregator/BaseDecimalStddevAggregator.java,evaluate,73-73,[            result.setScale(this.colScale, RoundingMode.HALF_UP);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,aggregate,76-76,[                    in.read(keyBytes, 0, keyLen);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,,121-127,[        Comparator<Object> comparator = new Comparator<Object>() {,             @Override,             public int compare(Object o1, Object o2) {,                 if (ascending) { ,                     return type.compareTo(o1, o2); ,                 },                 return type.compareTo(o2, o1);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,,52-52,[    public static final byte[] COMPRESS_MARKER = new byte[] { (byte)1 };],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,countMapHeapSize,148-148,[            SizedUtil.sizeOfMap(DEFAULT_ESTIMATED_DISTINCT_VALUES,],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/phoenix/expression/function/CountAggregateFunction.java,,48-48,[    public static final List<Expression> STAR = Arrays.<Expression>asList(LiteralExpression.newConstant(1, true));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/CountAggregateFunction.java,,90-93,[        return new LongSumAggregator() {,             @Override,             public boolean isNullable() {,                 return false;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/DecodeFunction.java,evaluate,69-69,[		String encoding = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,48-48,[    public final static byte[] ONE = PDataType.LONG.toBytes(1L);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,47-47,[    public final static byte[] ZERO = PDataType.LONG.toBytes(0L);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/EncodeFunction.java,evaluate,65-65,[        String encodingFormat = ((String) type.toObject(ptr)).toUpperCase();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/InvertFunction.java,,93-108,[        return new KeyPart() {, ,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 KeyRange range = childPart.getKeyRange(op, rhs);,                 return range.invert();,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return childPart.getExtractNodes();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/LowerFunction.java,evaluate,55-55,[        ptr.set(PDataType.VARCHAR.toBytes(sourceStr.toLowerCase()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MaxAggregateFunction.java,,56-59,[        return new MaxAggregator(sortOrder) {,             @Override,             public PDataType getDataType() {,                 return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MinAggregateFunction.java,,70-73,[        return new MinAggregator(sortOrder) {,             @Override,             public PDataType getDataType() {,                 return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/RTrimFunction.java,,104-134,[        return new KeyPart() {,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 ImmutableBytesWritable ptr = new ImmutableBytesWritable();,                 rhs.evaluate(null, ptr);,                 byte[] key = ByteUtil.copyKeyBytesIfNecessary(ptr);,                 PDataType type = getColumn().getDataType();,                 KeyRange range;,                 switch (op) {,                 case EQUAL:,                     range = type.getKeyRange(key, true, ByteUtil.nextKey(ByteUtil.concat(key, new byte[] {StringUtil.SPACE_UTF8})), false);,                     break;,                 case LESS_OR_EQUAL:,                     range = type.getKeyRange(KeyRange.UNBOUND, false, ByteUtil.nextKey(ByteUtil.concat(key, new byte[] {StringUtil.SPACE_UTF8})), false);,                     break;,                 default:,                     range = childPart.getKeyRange(op, rhs);,                     break;,                 },                 Integer length = getColumn().getMaxLength();,                 return length == null || !type.isFixedWidth() ? range : range.fill(length);,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return Collections.<Expression>emptyList();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,71-74,[                return new DoubleSumAggregator(sortOrder, ptr) {,                     @Override,                     protected PDataType getInputDataType() {,                         return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,78-81,[                return new NumberSumAggregator(sortOrder, ptr) {,                     @Override,                     protected PDataType getInputDataType() {,                         return type;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/UpperFunction.java,evaluate,54-54,[        ptr.set(PDataType.VARCHAR.toBytes(sourceStr.toUpperCase()));],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/ColumnProjectionFilter.java,<init>,65-65,[        this.emptyCFName = emptyCFName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/RowKeyComparisonFilter.java,<init>,57-57,[        this.essentialCF = essentialCF;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/filter/RowKeyComparisonFilter.java,,84-128,[    private final class RowKeyTuple extends BaseTuple {,         private byte[] buf;,         private int offset;,         private int length;, ,         public void setKey(byte[] buf, int offset, int length) {,             this.buf = buf;,             this.offset = offset;,             this.length = length;,         }, ,         @Override,         public void getKey(ImmutableBytesWritable ptr) {,             ptr.set(buf, offset, length);,         }, ,         @Override,         public KeyValue getValue(byte[] cf, byte[] cq) {,             return null;,         }, ,         @Override,         public boolean isImmutable() {,             return true;,         }, ,         @Override,         public String toString() {,             return Bytes.toStringBinary(buf, offset, length);,         }, ,         @Override,         public int size() {,             return 0;,         }, ,         @Override,         public KeyValue getValue(int index) {,             throw new IndexOutOfBoundsException(Integer.toString(index));,         }, ,         @Override,         public boolean getValue(byte[] family, byte[] qualifier,,                 ImmutableBytesWritable ptr) {,             return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,57-57,[        this.lowerInclusiveKey = lowerInclusiveKey;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,58-58,[        this.upperExclusiveKey = upperExclusiveKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/filter/SkipScanFilterTest.java,,64-88,[                new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return width <= 0;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return width <= 0 ? PDataType.VARCHAR : PDataType.CHAR;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return width <= 0 ? null : width;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, , 				@Override, 				public SortOrder getSortOrder() {, 					return SortOrder.getDefault();],,
BAD_PRACTICE,DMI_RANDOM_USED_ONLY_ONCE,org/apache/phoenix/flume/DefaultKeyGenerator.java,generate,57-57,[            return String.valueOf(new Random().nextLong());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,396-396,[        final Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,410-410,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testApacheLogRegex,270-270,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testEventsWithHeaders,348-348,[            if(conn != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,399-399,[            rs  = conn.createStatement().executeQuery("select count(*) from "+fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/SchemaHandler.java,createTable,38-38,[            status = connection.createStatement().execute(createTableDdl);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,191-191,[                position++;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,configure,110-110,[                keyGenerator =  DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,143-143,[                 SchemaHandler.createTable(connection,createTableDdl);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,84-84,[               String payload = new String(payloadBytes);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,136-136,[       } catch(Exception ex){],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,72-72,[       PreparedStatement colUpsert = connection.prepareStatement(upsertStatement);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,77-77,[               eventSerializer =  EventSerializers.valueOf(eventSerializerType.toUpperCase());],,
CORRECTNESS,NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH,org/apache/phoenix/flume/sink/PhoenixSink.java,process,192-192,[            transaction.rollback();],,process,181-181,[            transaction.rollback();],,process,187-187,[            transaction.rollback();],,process,141-141,[        Transaction transaction = null;],,process,145-145,[            transaction = channel.getTransaction();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,90-90,[         Class<? extends EventSerializer> clazz = (Class<? extends EventSerializer>) Class.forName(eventSerializer.getClassName());],,initializeSerializer,75-75,[       EventSerializers eventSerializer = null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,94-94,[       } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/hbase/index/Indexer.java,start,173-173,[        } catch (Exception ex) {],,
STYLE,EQ_UNUSUAL,org/apache/phoenix/hbase/index/Indexer.java,equals,371-371,[      return o == null ? false : o.hashCode() == this.hashCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/Indexer.java,,327-371,[    public MultiMutation(ImmutableBytesPtr rowkey) {,       this.rowKey = rowkey;,     }, ,     /**,      * @param stored,      */,     public void addAll(Mutation stored) {,       // add all the kvs,       for (Entry<byte[], List<Cell>> kvs : stored.getFamilyCellMap().entrySet()) {,         byte[] family = kvs.getKey();,         List<Cell> list = getKeyValueList(family, kvs.getValue().size());,         list.addAll(kvs.getValue());,         familyMap.put(family, list);,       }, ,       // add all the attributes, not overriding already stored ones,       for (Entry<String, byte[]> attrib : stored.getAttributesMap().entrySet()) {,         if (this.getAttribute(attrib.getKey()) == null) {,           this.setAttribute(attrib.getKey(), attrib.getValue());,         },       },     }, ,     private List<Cell> getKeyValueList(byte[] family, int hint) {,       List<Cell> list = familyMap.get(family);,       if (list == null) {,         list = new ArrayList<Cell>(hint);,       },       return list;,     }, ,     @Override,     public byte[] getRow(){,       return this.rowKey.copyBytesIfNecessary();,     }, ,     @Override,     public int hashCode() {,       return this.rowKey.hashCode();,     }, ,     @Override,     public boolean equals(Object o) {,       return o == null ? false : o.hashCode() == this.hashCode();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/hbase/index/builder/BaseIndexBuilder.java,getBatchId,84-84,[    return null;],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/covered/CoveredColumnsIndexBuilder.java,addCurrentStateMutationsForBatch,321-321,[    List<IndexedColumnGroup> columnHints = new ArrayList<IndexedColumnGroup>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/CoveredColumnsIndexBuilder.java,,157-160,[    Collections.sort(sorted, new Comparator<Batch>() {,       @Override,       public int compare(Batch o1, Batch o2) {,         return Longs.compare(o1.getTimestamp(), o2.getTimestamp());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,323-327,[    EnvironmentEdge edge = new EnvironmentEdge() {, ,       @Override,       public long currentTimeMillis() {,         return ts;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,140-166,[    public ListMatchingVerifier(String msg, List<Cell> kvs, ColumnReference... columns) {,       this.expectedKvs = kvs;,       this.columns = columns;,       this.msg = msg;,     }, ,     @Override,     public void verify(TableState state) {,       try {,         Scanner kvs =,             ((LocalTableState) state).getIndexedColumnsTableState(Arrays.asList(columns)).getFirst();, ,         int count = 0;,         KeyValue kv;,         while ((kv = kvs.next()) != null) {,           Cell next = expectedKvs.get(count++);,           assertEquals(,             msg + ": Unexpected kv in table state!\nexpected v1: ",                 + Bytes.toString(next.getValue()) + "\nactual v1:" + Bytes.toString(kv.getValue()),,             next, kv);,         }, ,         assertEquals(msg + ": Didn't find enough kvs in table state!", expectedKvs.size(), count);,       } catch (IOException e) {,         fail(msg + ": Got an exception while reading local table state! " + e.getMessage());,       },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,67-82,[  public class TestState {, ,     private HTable table;,     private long ts;,     private VerifyingIndexCodec codec;, ,     /**,      * @param primary,      * @param codec,      * @param ts,      */,     public TestState(HTable primary, VerifyingIndexCodec codec, long ts) {,       this.table = primary;,       this.ts = ts;,       this.codec = codec;,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,169-189,[  private class VerifyingIndexCodec extends CoveredIndexCodecForTesting {, ,     private Queue<TableStateVerifier> verifiers = new ArrayDeque<TableStateVerifier>();, ,     @Override,     public Iterable<IndexUpdate> getIndexDeletes(TableState state) {,       verify(state);,       return super.getIndexDeletes(state);,     }, ,     @Override,     public Iterable<IndexUpdate> getIndexUpserts(TableState state) {,       verify(state);,       return super.getIndexUpserts(state);,     }, ,     private void verify(TableState state) {,       TableStateVerifier verifier = verifiers.poll();,       if (verifier == null) return;,       verifier.verify(state);,     }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,getTableName,51-51,[    return tableName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,setTable,43-43,[    this.tableName = tableName;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,74-81,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];,         KeyValue kv = new KeyValue(row, fam, qual, ts, Type.Put, stored);,         kv.setMvccVersion(0);,         list.add(kv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,119-125,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,165-171,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/data/LazyValueGetter.java,<init>,49-49,[    this.row = currentRow;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/covered/example/CoveredColumnIndexCodec.java,,47-47,[  public static final byte[] INDEX_ROW_COLUMN_FAMILY = Bytes.toBytes("INDEXED_COLUMNS");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,getNextCellHint,101-101,[    return currentHint.getHint(KeyValueUtil.ensureKeyValue(peeked));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,,202-208,[  class DeleteColumnHinter implements Hinter {, ,     @Override,     public KeyValue getHint(KeyValue kv) {,       return KeyValue.createLastOnRow(kv.getBuffer(), kv.getRowOffset(), kv.getRowLength(),,         kv.getBuffer(), kv.getFamilyOffset(), kv.getFamilyLength(), kv.getBuffer(),,         kv.getQualifierOffset(), kv.getQualifierLength());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getFamily,54-54,[    return this.family;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getQualifier,58-58,[    return this.qualifier;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,<init>,48-48,[    this.family = family;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,<init>,49-49,[    this.qualifier = qualifier;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/update/IndexUpdateManager.java,,45-92,[  class MutationComparator implements Comparator<Mutation> {, ,     @Override,     public int compare(Mutation o1, Mutation o2) {,       // always sort rows first,       int compare = o1.compareTo(o2);,       if (compare != 0) {,         return compare;,       }, ,       // if same row, sort by reverse timestamp (larger first),       compare = Longs.compare(o2.getTimeStamp(), o1.getTimeStamp());,       if (compare != 0) {,         return compare;,       },       // deletes always sort before puts for the same row,       if (o1 instanceof Delete) {,         // same row, same ts == same delete since we only delete rows,         if (o2 instanceof Delete) {,           return 0;,         } else {,           // o2 has to be a put,           return -1;,         },       },       // o1 must be a put,       if (o2 instanceof Delete) {,         return 1;,       } else if (o2 instanceof Put) {,         return comparePuts((Put) o1, (Put) o2);,       }, ,       throw new RuntimeException(,           "Got unexpected mutation types! Can only be Put or Delete, but got: " + o1 + ", and ",               + o2);,     }, ,     private int comparePuts(Put p1, Put p2) {,       int p1Size = p1.size();,       int p2Size = p2.size();,       int compare = p1Size - p2Size;,       if (compare == 0) {,         // TODO: make this a real comparison,         // this is a little cheating, but we don't really need to worry too much about this being,         // the same - chances are that exact matches here are really the same update.,         return Longs.compare(p1.heapSize(), p2.heapSize());,       },       return compare;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/hbase/index/exception/SingleIndexWriteFailureException.java,<init>,49-49,[    super("Failed to make index update:\n\t table: " + targetTableName + "\n\t edits: " + mutations],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/parallel/Task.java,isBatchFailed,38-38,[    return this.batch.isAborted();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/parallel/ThreadPoolManager.java,getExecutor,68-68,[    ((ShutdownOnUnusedThreadPoolExecutor) pool).addReference();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/hbase/index/scanner/FilteredKeyValueScanner.java,seekToNextUnfilteredKeyValue,86-99,[            switch (code) {,             // included, so we are done,             case INCLUDE:,             case INCLUDE_AND_NEXT_COL:,                 return true;,                 // not included, so we need to go to the next row,             case SKIP:,             case NEXT_COL:,             case NEXT_ROW:,                 delegate.next();,                 break;,             // use a seek hint to find out where we should go,             case SEEK_NEXT_USING_HINT:,                 delegate.seek(KeyValueUtil.ensureKeyValue(filter.getNextCellHint(peeked)));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/scanner/ScannerBuilder.java,,125-162,[    return new Scanner() {, ,       @Override,       public KeyValue next() {,         try {,           return kvScanner.next();,         } catch (IOException e) {,           throw new RuntimeException("Error reading kvs from local memstore!");,         },       }, ,       @Override,       public boolean seek(KeyValue next) throws IOException {,         // check to see if the next kv is after the current key, in which case we can use reseek,,         // which will be more efficient,         KeyValue peek = kvScanner.peek();,         // there is another value and its before the requested one - we can do a reseek!,         if (peek != null) {,           int compare = KeyValue.COMPARATOR.compare(peek, next);,           if (compare < 0) {,             return kvScanner.reseek(next);,           } else if (compare == 0) {,             // we are already at the given key!,             return true;,           },         },         return kvScanner.seek(next);,       }, ,       @Override,       public KeyValue peek() throws IOException {,         return kvScanner.peek();,       }, ,       @Override,       public void close() {,         kvScanner.close();,       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/table/CachingHTableFactory.java,,49-66,[    public HTableInterfaceLRUMap(int cacheSize) {,       super(cacheSize);,     }, ,     @Override,     protected boolean removeLRU(LinkEntry entry) {,       HTableInterface table = (HTableInterface) entry.getValue();,       if (LOG.isDebugEnabled()) {,         LOG.debug("Closing connection to table: " + Bytes.toString(table.getTableName()),             + " because it was evicted from the cache.");,       },       try {,         table.close();,       } catch (IOException e) {,         LOG.info("Failed to correctly close HTable: " + Bytes.toString(table.getTableName()),             + " ignoring since being removed from queue.");,       },       return true;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,getFamily,74-74,[      return COLUMN_FAMILY;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,,37-37,[    public static final byte [] COLUMN_FAMILY = Bytes.toBytes("INDEXEDKEYVALUE_FAKED_FAMILY");],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/hbase/index/write/KillServerOnFailurePolicy.java,handleFailure,76-76,[      System.exit(1);],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/ParallelWriterIndexCommitter.java,write,125-125,[      final List<Mutation> mutations = kvBuilder.cloneIfNecessary((List<Mutation>) entry.getValue());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,105-111,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,179-183,[    }).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         failed[0] = true;,         throw new RuntimeException(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,173-177,[    Mockito.when(table2.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         waitOnAbortedLatch.await();,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,234-246,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         LOG.info("Write started");,         writeStartedLatch.countDown();,         // when we interrupt the thread for shutdown, we should see this throw an interrupt too,         try {,         waitOnAbortedLatch.await();,         } catch (InterruptedException e) {,           LOG.info("Correctly interrupted while writing!");,           throw e;,         },         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,266-275,[    Thread primaryWriter = new Thread() {, ,       @Override,       public void run() {,         try {,           writer.write(indexUpdates);,         } catch (IndexWriteException e) {,           failedWrite[0] = true;,         },       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleIndexWriter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleWriterIndexCommitter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,202-202,[    allowIndexTableToRecover = new CountDownLatch(1);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,206-206,[    List<HRegion> online = new ArrayList<HRegion>();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testAddRemoveSingleRegion,127-127,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleAddsForSingleRegion,155-155,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleRegions,180-180,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,testMultipleRegions,193-193,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,87-87,[            return 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,84-92,[      r1 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 1;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,99-99,[            return 2;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,96-104,[      r2 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 2;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TrackingParallelWriterIndexCommitter.java,write,128-128,[      final List<Mutation> mutations = (List<Mutation>) entry.getValue();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/index/BaseIndexCodec.java,getBatchId,57-57,[    return null;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,deserialize,182-182,[        List<IndexMaintainer> maintainers = Collections.emptyList();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getIndexTableName,509-509,[        return indexTableName;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/index/IndexMaintainer.java,hasIndexedColumnChanged,465-465,[        		if (Bytes.compareTo(oldValue.get(), oldValue.getOffset(), oldValue.getLength(), ],,hasIndexedColumnChanged,461-461,[        		if ((oldValue == null && !newValueSetAsNull) || (oldValue != null && newValueSetAsNull)) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,91-91,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,144-144,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,140-140,[                valueMap.get(ref);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,144-144,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,91-149,[        Connection conn = DriverManager.getConnection(getUrl());,         String fullTableName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier(tableName));,         String fullIndexName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier("idx"));,         conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );,         try {,             conn.createStatement().execute("CREATE INDEX idx ON " + fullTableName + "(" + indexColumns + ") " + (includeColumns.isEmpty() ? "" : "INCLUDE (" + includeColumns + ") ") + (indexProps.isEmpty() ? "" : indexProps));,             PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class);,             PTable table = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(), fullTableName));,             PTable index = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(),fullIndexName));,             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             table.getIndexMaintainers(ptr);,             List<IndexMaintainer> c1 = IndexMaintainer.deserialize(ptr, builder);,             assertEquals(1,c1.size());,             IndexMaintainer im1 = c1.get(0);,             ,             StringBuilder buf = new StringBuilder("UPSERT INTO " + fullTableName  + " VALUES(");,             for (int i = 0; i < values.length; i++) {,                 buf.append("?,");,             },             buf.setCharAt(buf.length()-1, ')');,             PreparedStatement stmt = conn.prepareStatement(buf.toString());,             for (int i = 0; i < values.length; i++) {,                 stmt.setObject(i+1, values[i]);,             },             stmt.execute();,             	Iterator<Pair<byte[],List<KeyValue>>> iterator = PhoenixRuntime.getUncommittedDataIterator(conn);,             List<KeyValue> dataKeyValues = iterator.next().getSecond();,             Map<ColumnReference,byte[]> valueMap = Maps.newHashMapWithExpectedSize(dataKeyValues.size());,             ImmutableBytesWritable rowKeyPtr = new ImmutableBytesWritable(dataKeyValues.get(0).getRow());,             Put dataMutation = new Put(rowKeyPtr.copyBytes());,             for (KeyValue kv : dataKeyValues) {,                 valueMap.put(new ColumnReference(kv.getFamily(),kv.getQualifier()), kv.getValue());,                 dataMutation.add(kv);,             },             ValueGetter valueGetter = newValueGetter(valueMap);,             ,             List<Mutation> indexMutations =,                     IndexTestUtil.generateIndexData(index, table, dataMutation, ptr, builder);,             assertEquals(1,indexMutations.size());,             assertTrue(indexMutations.get(0) instanceof Put);,             Mutation indexMutation = indexMutations.get(0);,             ImmutableBytesWritable indexKeyPtr = new ImmutableBytesWritable(indexMutation.getRow());,             ,             ptr.set(rowKeyPtr.get(), rowKeyPtr.getOffset(), rowKeyPtr.getLength());,             byte[] mutablelndexRowKey = im1.buildRowKey(valueGetter, ptr);,             byte[] immutableIndexRowKey = indexKeyPtr.copyBytes();,             assertArrayEquals(immutableIndexRowKey, mutablelndexRowKey);,             ,             for (ColumnReference ref : im1.getCoverededColumns()) {,                 valueMap.get(ref);,             },         } finally {,             try {,                 conn.createStatement().execute("DROP TABLE " + fullTableName);,             } finally {,                 conn.close();,             },         },     }],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,94-94,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,111-111,[            PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMetaDataCacheFactory.java,,50-59,[        return new IndexMetaDataCache() {, ,             @Override,             public void close() throws IOException {,                 chunk.close();,             }, ,             @Override,             public List<IndexMaintainer> getIndexMaintainers() {,                 return maintainers;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/PhoenixIndexFailurePolicy.java,,94-109,[                            new Batch.Call<MetaDataService, MetaDataResponse>() {,                                 @Override,                                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                                     ServerRpcController controller = new ServerRpcController();,                                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                             new BlockingRpcCallback<MetaDataResponse>();,                                     UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                                     for (Mutation m : tableMetadata) {,                                         MutationProto mp = ProtobufUtil.toProto(m);,                                         builder.addTableMetadataMutations(mp.toByteString());,                                     },                                     instance.updateIndexState(controller, builder.build(), rpcCallback);,                                     if(controller.getFailedOn() != null) {,                                         throw controller.getFailedOn();,                                     },                                     return rpcCallback.get();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/iterate/AggregateResultScannerTest.java,getViewConstant,121-121,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,95-126,[        SumAggregateFunction func = new SumAggregateFunction(Arrays.<Expression>asList(new KeyValueColumnExpression(new PLongColumn() {,             @Override,             public PName getName() {,                 return SINGLE_COLUMN_NAME;,             },             @Override,             public PName getFamilyName() {,                 return SINGLE_COLUMN_FAMILY_NAME;,             },             @Override,             public int getPosition() {,                 return 0;,             },             ,             @Override,             public SortOrder getSortOrder() {,             	return SortOrder.getDefault();,             },             ,             @Override,             public Integer getArraySize() {,                 return 0;,             },             ,             @Override,             public byte[] getViewConstant() {,                 return null;,             },             ,             @Override,             public boolean isViewReferenced() {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,130-144,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,55-69,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,105-119,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/iterate/DefaultParallelIteratorRegionSplitter.java,genKeyRanges,181-181,[                byte[][] boundaries = null;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/MappedByteBufferSortedQueue.java,reachedEnd,378-378,[                file.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,,60-74,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/iterate/MergeSortTopNResultIterator.java,compare,69-69,[            return order.isAscending() ? cmp : -cmp;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ParallelIterators.java,,276-279,[            Collections.sort(futures, new Comparator<Pair<byte[],Future<PeekingResultIterator>>>() {,                 @Override,                 public int compare(Pair<byte[], Future<PeekingResultIterator>> o1, Pair<byte[], Future<PeekingResultIterator>> o2) {,                     return factor * Bytes.compareTo(o1.getFirst(), o2.getFirst());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,<init>,134-134,[                        tempFile.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/SpoolingResultIterator.java,,96-101,[            DeferredFileOutputStream spoolTo = new DeferredFileOutputStream(size, tempFile) {,                 @Override,                 protected void thresholdReached() throws IOException {,                     super.thresholdReached();,                     chunk.close();,                 }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,reachedEnd,252-252,[                file.delete();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/jdbc/PhoenixConnection.java,<init>,139-139,[        final PName tenantId = JDBCUtil.getTenantId(url, info);],,<init>,138-138,[        this.info = info == null ? new Properties() : PropertiesUtil.deepCopy(info);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixConnection.java,,155-159,[            this.services = new DelegateConnectionQueryServices(services) {,     ,                 @Override,                 public ReadOnlyProps getProps() {,                     return augmentedProps;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,180-180,[    public static final byte[] ARRAY_SIZE_BYTES = Bytes.toBytes(ARRAY_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,62-62,[    private static final KeyValue CACHE_SIZE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CACHE_SIZE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,127-127,[    public static final byte[] COLUMN_COUNT_BYTES = Bytes.toBytes(COLUMN_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,144-144,[    public static final byte[] COLUMN_SIZE_BYTES = Bytes.toBytes(COLUMN_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,60-60,[    private static final KeyValue CURRENT_VALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CURRENT_VALUE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,132-132,[    public static final byte[] DATA_TABLE_NAME_BYTES = Bytes.toBytes(DATA_TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,141-141,[    public static final byte[] DATA_TYPE_BYTES = Bytes.toBytes(DATA_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,147-147,[    public static final byte[] DECIMAL_DIGITS_BYTES = Bytes.toBytes(DECIMAL_DIGITS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,168-168,[    public static final byte[] DEFAULT_COLUMN_FAMILY_NAME_BYTES = Bytes.toBytes(DEFAULT_COLUMN_FAMILY_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,172-172,[    public static final byte[] DISABLE_WAL_BYTES = Bytes.toBytes(DISABLE_WAL);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,166-166,[    public static final byte[] IMMUTABLE_ROWS_BYTES = Bytes.toBytes(IMMUTABLE_ROWS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,61-61,[    private static final KeyValue INCREMENT_BY_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, INCREMENT_BY_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,134-134,[    public static final byte[] INDEX_STATE_BYTES = Bytes.toBytes(INDEX_STATE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,184-184,[    public static final byte[] IS_VIEW_REFERENCED_BYTES = Bytes.toBytes(IS_VIEW_REFERENCED);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,178-178,[    public static final byte[] LINK_TYPE_BYTES = Bytes.toBytes(LINK_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,174-174,[    public static final byte[] MULTI_TENANT_BYTES = Bytes.toBytes(MULTI_TENANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,150-150,[    public static final byte[] NULLABLE_BYTES = Bytes.toBytes(NULLABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,156-156,[    public static final byte[] ORDINAL_POSITION_BYTES = Bytes.toBytes(ORDINAL_POSITION);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,123-123,[    public static final byte[] PK_NAME_BYTES = Bytes.toBytes(PK_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,129-129,[    public static final byte[] SALT_BUCKETS_BYTES = Bytes.toBytes(SALT_BUCKETS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,60-60,[    private static final KeyValue CURRENT_VALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CURRENT_VALUE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,194-194,[    public static final byte[] SEQUENCE_TABLE_NAME_BYTES = SchemaUtil.getTableNameAsBytes(SYSTEM_CATALOG_SCHEMA, TYPE_SEQUENCE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,164-164,[    public static final byte[] SORT_ORDER_BYTES = Bytes.toBytes(SORT_ORDER);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,200-200,[    public static final byte[] START_WITH_BYTES = Bytes.toBytes(START_WITH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,106-106,[    public static final byte[] SYSTEM_CATALOG_NAME_BYTES = SchemaUtil.getTableNameAsBytes(SYSTEM_CATALOG_TABLE_BYTES, SYSTEM_CATALOG_SCHEMA_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,103-103,[    public static final byte[] SYSTEM_CATALOG_SCHEMA_BYTES = Bytes.toBytes(SYSTEM_CATALOG_TABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,104-104,[    public static final byte[] SYSTEM_CATALOG_TABLE_BYTES = Bytes.toBytes(SYSTEM_CATALOG_SCHEMA);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,189-189,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,125-125,[    public static final byte[] TABLE_SEQ_NUM_BYTES = Bytes.toBytes(TABLE_SEQ_NUM);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,112-112,[    public static final byte[] TABLE_TYPE_BYTES = Bytes.toBytes(TABLE_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,182-182,[    public static final byte[] VIEW_CONSTANT_BYTES = Bytes.toBytes(VIEW_CONSTANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,186-186,[    public static final byte[] VIEW_INDEX_ID_BYTES = Bytes.toBytes(VIEW_INDEX_ID);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,170-170,[    public static final byte[] VIEW_STATEMENT_BYTES = Bytes.toBytes(VIEW_STATEMENT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,176-176,[    public static final byte[] VIEW_TYPE_BYTES = Bytes.toBytes(VIEW_TYPE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,206-206,[    public static final byte[] KEY_SEQ_BYTES = Bytes.toBytes(KEY_SEQ);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,137-137,[    public static final byte[] TENANT_ID_BYTES = Bytes.toBytes(TENANT_ID);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getCatalogs,293-293,[        Statement stmt = connection.createStatement();],,getCatalogs,294-294,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,408-408,[        Statement stmt = connection.createStatement();],,getColumns,409-409,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,533-533,[        Statement stmt = connection.createStatement();],,getIndexInfo,534-534,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,679-679,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,741-741,[        Statement stmt = connection.createStatement();],,getSchemas,742-742,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,773-773,[        Statement stmt = connection.createStatement();],,getSuperTables,774-774,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,880-880,[        Statement stmt = connection.createStatement();],,getTables,881-881,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,409-409,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,534-534,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,679-679,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,742-742,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,774-774,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,881-881,[        return stmt.executeQuery(buf.toString());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,,81-476,[        super(connection);,         this.statement = parser.nextStatement(new ExecutableNodeFactory());,         if (this.statement == null) { throw new EOFException(); },         this.query = null; // TODO: add toString on SQLStatement,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixConnection connection, String query) throws SQLException {,         super(connection);,         this.query = query;,         this.statement = parseStatement(query);,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixPreparedStatement statement) throws SQLException {,         super(statement.connection);,         this.query = statement.query;,         this.statement = statement.statement;,         this.parameters = new ArrayList<Object>(statement.parameters);,     }, ,     @Override,     public void addBatch() throws SQLException {,         throwIfUnboundParameters();,         batch.add(new PhoenixPreparedStatement(this));,     }, , ,     @Override,     public void clearParameters() throws SQLException {,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     @Override,     public List<Object> getParameters() {,         return parameters;,     }, ,     private void throwIfUnboundParameters() throws SQLException {,         int i = 0;,         for (Object param : getParameters()) {,             if (param == BindManager.UNBOUND_PARAMETER) {,                 throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND),                     .setMessage("Parameter " + (i + 1) + " is unbound").build().buildException();,             },             i++;,         },     },     ,     ,     public QueryPlan compileQuery() throws SQLException {,         return compileQuery(statement, query);,     }, ,     public MutationPlan compileMutation() throws SQLException {,         return compileMutation(statement, query);,     }, ,     boolean execute(boolean batched) throws SQLException {,         throwIfUnboundParameters();,         if (!batched && statement.getOperation().isMutation() && !batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return execute(statement);,     }, ,     @Override,     public boolean execute() throws SQLException {,         return execute(false);,     }, ,     @Override,     public ResultSet executeQuery() throws SQLException {,         throwIfUnboundParameters();,         return executeQuery(statement);,     }, ,     @Override,     public int executeUpdate() throws SQLException {,         throwIfUnboundParameters();,         if (!batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return executeMutation(statement);,     }, ,     public QueryPlan optimizeQuery() throws SQLException {,         throwIfUnboundParameters();,         return optimizeQuery(statement);,     }, ,     @Override,     public ResultSetMetaData getMetaData() throws SQLException {,         if (statement.getOperation().isMutation()) {,             return null;,         },         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             // Just compile top level query without optimizing to get ResultSetMetaData,             QueryPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return new PhoenixResultSetMetaData(this.getConnection(), plan.getProjector());,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public ParameterMetaData getParameterMetaData() throws SQLException {,         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             StatementPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return plan.getParameterMetaData();,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public String toString() {,         return query;,     }, ,     @Override,     public void setArray(int parameterIndex, Array x) throws SQLException {,     	parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setBytes(int parameterIndex, byte[] x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, Blob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBoolean(int parameterIndex, boolean x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setByte(int parameterIndex, byte x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Clob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setDate(int parameterIndex, Date x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {,         cal.setTime(x);,         parameters.set(parameterIndex - 1, new Date(cal.getTimeInMillis()));,     }, ,     @Override,     public void setDouble(int parameterIndex, double x) throws SQLException {, //        parameters.set(parameterIndex - 1, BigDecimal.valueOf(x));,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setFloat(int parameterIndex, float x) throws SQLException {, //        parameters.set(parameterIndex - 1, BigDecimal.valueOf(x));,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setInt(int parameterIndex, int x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setLong(int parameterIndex, long x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, NClob value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNString(int parameterIndex, String value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType) throws SQLException {,         parameters.set(parameterIndex - 1, null);,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {,         parameters.set(parameterIndex - 1, null);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o) throws SQLException {,         parameters.set(parameterIndex - 1, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o, int targetSqlType) throws SQLException {,         PDataType targetType = PDataType.fromTypeId(targetSqlType);,         PDataType sourceType = PDataType.fromLiteral(o);,         o = targetType.toObject(o, sourceType);,         parameters.set(parameterIndex - 1, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {,         setObject(parameterIndex, x, targetSqlType);,     }, ,     @Override,     public void setRef(int parameterIndex, Ref x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setRowId(int parameterIndex, RowId x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setShort(int parameterIndex, short x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setString(int parameterIndex, String x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {,         cal.setTime(x);,         parameters.set(parameterIndex - 1, new Time(cal.getTimeInMillis()));,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {,         parameters.set(parameterIndex - 1, x);,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {,         cal.setTime(x);,         parameters.set(parameterIndex - 1,  DateUtil.getTimestamp(cal.getTimeInMillis(), x.getNanos()));,     }, ,     @Override,     public void setURL(int parameterIndex, URL x) throws SQLException {,         parameters.set(parameterIndex - 1, x.toExternalForm()); // Just treat as String,     }, ,     @Override,     public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixResultSet.java,next,737-737,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,222-222,[                            throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,263-263,[                                    throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixStatement.java,,357-421,[            return new QueryPlan() {, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;,                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     return new ExplainPlan(Collections.singletonList("EXPLAIN PLAN"));,                 }, ,                 @Override,                 public ResultIterator iterator() throws SQLException {,                     return iterator;,                 }, ,                 @Override,                 public long getEstimatedSize() {,                     return 0;,                 }, ,                 @Override,                 public TableRef getTableRef() {,                     return null;,                 }, ,                 @Override,                 public RowProjector getProjector() {,                     return EXPLAIN_PLAN_ROW_PROJECTOR;,                 }, ,                 @Override,                 public Integer getLimit() {,                     return null;,                 }, ,                 @Override,                 public OrderBy getOrderBy() {,                     return OrderBy.EMPTY_ORDER_BY;,                 }, ,                 @Override,                 public GroupBy getGroupBy() {,                     return GroupBy.EMPTY_GROUP_BY;,                 }, ,                 @Override,                 public List<KeyRange> getSplits() {,                     return Collections.emptyList();,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return plan.getContext();,                 }, ,                 @Override,                 public FilterableStatement getStatement() {,                     return null;,                 }, ,                 @Override,                 public boolean isDegenerate() {,                     return false;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/jdbc/PhoenixTestDriver.java,close,86-86,[        connectionQueryServices.close();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/job/AbstractRoundRobinQueue.java,offer,115-115,[        offer(o);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,82-82,[                return new JobFutureTask<T>(runnable, value);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,77-77,[                return new JobFutureTask<T>(call);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/join/HashCacheFactory.java,,67-121,[    private class HashCacheImpl implements HashCache {,         private final Map<ImmutableBytesPtr,List<Tuple>> hashCache;,         private final MemoryChunk memoryChunk;,         ,         private HashCacheImpl(byte[] hashCacheBytes, MemoryChunk memoryChunk) {,             try {,                 this.memoryChunk = memoryChunk;,                 byte[] hashCacheByteArray = hashCacheBytes;,                 int offset = 0;,                 ByteArrayInputStream input = new ByteArrayInputStream(hashCacheByteArray, offset, hashCacheBytes.length);,                 DataInputStream dataInput = new DataInputStream(input);,                 int nExprs = dataInput.readInt();,                 List<Expression> onExpressions = new ArrayList<Expression>(nExprs);,                 for (int i = 0; i < nExprs; i++) {,                     int expressionOrdinal = WritableUtils.readVInt(dataInput);,                     Expression expression = ExpressionType.values()[expressionOrdinal].newInstance();,                     expression.readFields(dataInput);,                     onExpressions.add(expression);                        ,                 },                 int exprSize = dataInput.readInt();,                 offset += exprSize;,                 int nRows = dataInput.readInt();,                 long estimatedSize = SizedUtil.sizeOfMap(nRows, SizedUtil.IMMUTABLE_BYTES_WRITABLE_SIZE, SizedUtil.RESULT_SIZE) + hashCacheBytes.length;,                 this.memoryChunk.resize(estimatedSize);,                 HashMap<ImmutableBytesPtr,List<Tuple>> hashCacheMap = new HashMap<ImmutableBytesPtr,List<Tuple>>(nRows * 5 / 4);,                 offset += Bytes.SIZEOF_INT;,                 // Build Map with evaluated hash key as key and row as value,                 for (int i = 0; i < nRows; i++) {,                     int resultSize = (int)Bytes.readVLong(hashCacheByteArray, offset);,                     offset += WritableUtils.decodeVIntSize(hashCacheByteArray[offset]);,                     ImmutableBytesWritable value = new ImmutableBytesWritable(hashCacheByteArray,offset,resultSize);,                     Tuple result = new ResultTuple(ResultUtil.toResult(value));,                     ImmutableBytesPtr key = TupleUtil.getConcatenatedValue(result, onExpressions);,                     List<Tuple> tuples = hashCacheMap.get(key);,                     if (tuples == null) {,                         tuples = new LinkedList<Tuple>();,                         hashCacheMap.put(key, tuples);,                     },                     tuples.add(result);,                     offset += resultSize;,                 },                 this.hashCache = Collections.unmodifiableMap(hashCacheMap);,             } catch (IOException e) { // Not possible with ByteArrayInputStream,                 throw new RuntimeException(e);,             },         }, ,         @Override,         public void close() {,             memoryChunk.close();,         },         ,         @Override,         public List<Tuple> get(ImmutableBytesPtr hashKey) {,             return hashCache.get(hashKey);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,earlyEvaluation,105-105,[    	return earlyEvaluation;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getFieldPositions,113-113,[    	return fieldPositions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinExpressions,97-97,[        return joinExpressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinIds,93-93,[        return joinIds;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinTypes,101-101,[        return joinTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getSchemas,109-109,[    	return schemas;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/join/TupleProjector.java,,46-46,[    public static final byte[] VALUE_COLUMN_FAMILY = Bytes.toBytes("_v");],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/TupleProjector.java,getProjectedValue,158-158,[            return projectedValue;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/logging/PerformanceLog.java,instanceLog,76-76,[		getFileOutputStream().write(message.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/logging/PerformanceLog.java,log,82-82,[		getFileOutputStream().write(message.getBytes());],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/logging/PerformanceLog.java,getFileOutputStream,90-100,[		if (fostream == null) {, 			String folderName = "results";, 			File folder = new File(folderName);, 			if (!folder.exists()) {, 				folder.mkdir();, 			}, 			String generatedFileName = folderName, 					+ "/", 					+ (fileName.endsWith("|") ? fileName.substring(0,, 							fileName.length() - 1) : fileName) + ".txt";, 			fostream = new FileOutputStream(generatedFileName);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/logging/PerformanceLog.java,getFileOutputStream,94-94,[				folder.mkdir();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/CsvBulkLoadTool.java,parseOptions,107-107,[        if (cmdLine.hasOption(HELP_OPT.getOpt())) {],,parseOptions,100-100,[        CommandLine cmdLine = null;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/CsvBulkLoadTool.java,run,169-169,[                getJdbcUrl(cmdLine.getOptionValue(ZK_QUORUM_OPT.getOpt())));],,run,161-161,[        CommandLine cmdLine = null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,83-83,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,118-118,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,78-78,[        Statement stmt = conn.createStatement();],,testBasicImport,79-79,[        stmt.execute("CREATE TABLE TABLE1 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,112-112,[        Statement stmt = conn.createStatement();],,testFullOptionImport,113-113,[        stmt.execute("CREATE TABLE TABLE2 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,78-78,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,112-112,[        Statement stmt = conn.createStatement();],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/mapreduce/CsvToKeyValueMapper.java,apply,231-237,[                                if (input.isEmpty()) {,                                     // An empty string represents a null that was passed in to,                                     // the configuration, which corresponds to an input column,                                     // which is to be skipped,                                     return null;,                                 },                                 return ColumnInfo.fromString(input);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,76-85,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(50);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,87-96,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 MemoryChunk c3 = rmm2.allocate(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 1000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,118-127,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(40);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,129-139,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 MemoryChunk c3 = rmm2.allocate(10);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 c3.resize(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 2000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,160-170,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c2 = rmm1.allocate(20);,                 sleepFor(4000);,                 c1.resize(20); // resize down to test that other thread is notified,                 sleepFor(2000);,                 c2.close();,                 c1.close();,                 assertTrue(rmm1.getAvailableMemory() == rmm1.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,172-184,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 ChildMemoryManager rmm2 = new ChildMemoryManager(gmm,100);,                 MemoryChunk c3 = rmm2.allocate(10);,                 long startTime = System.currentTimeMillis();,                 c3.resize(60); // Test that resize waits if memory not available,                 assertTrue(c1.getSize() == 20); // c1 was resized not closed,                 assertTrue(System.currentTimeMillis() - startTime >= 2000); // we waited some time before the allocate happened,                 c3.close();,                 assertTrue(rmm2.getAvailableMemory() == rmm2.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/optimize/QueryOptimizer.java,,279-310,[        Collections.sort(bestCandidates, new Comparator<QueryPlan>() {, ,             @Override,             public int compare(QueryPlan plan1, QueryPlan plan2) {,                 PTable table1 = plan1.getTableRef().getTable();,                 PTable table2 = plan2.getTableRef().getTable();,                 int c = plan2.getContext().getScanRanges().getRanges().size() - plan1.getContext().getScanRanges().getRanges().size();,                 // Account for potential view constants which are always bound,                 if (plan1 == dataPlan) { // plan2 is index plan. Ignore the viewIndexId if present,                     c += boundRanges - (table2.getViewIndexId() == null ? 0 : 1);,                 } else { // plan1 is index plan. Ignore the viewIndexId if present,                     c -= boundRanges - (table1.getViewIndexId() == null ? 0 : 1);,                 },                 if (c != 0) return c;,                 if (plan1.getGroupBy()!=null && plan2.getGroupBy()!=null) {,                     if (plan1.getGroupBy().isOrderPreserving() != plan2.getGroupBy().isOrderPreserving()) {,                         return plan1.getGroupBy().isOrderPreserving() ? -1 : 1;,                     },                 },                 // Use smaller table (table with fewest kv columns),                 c = (table1.getColumns().size() - table1.getPKColumns().size()) - (table2.getColumns().size() - table2.getPKColumns().size());,                 if (c != 0) return c;,                 ,                 // All things being equal, just use the table based on the Hint.USE_DATA_OVER_INDEX_TABLE,                 if (plan1.getTableRef().getTable().getType() == PTableType.INDEX) {,                     return comparisonOfDataVersusIndexTable;,                 },                 if (plan2.getTableRef().getTable().getType() == PTableType.INDEX) {,                     return -comparisonOfDataVersusIndexTable;,                 },                 ,                 return 0;],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/phoenix/parse/ColumnDef.java,<init>,103-103,[                 scale = scale == null ? PDataType.DEFAULT_SCALE : scale > maxLength ? maxLength : scale; ],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/FunctionParseNode.java,create,241-241,[                throw (SQLException) e.getTargetException();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/FunctionParseNode.java,validate,213-213,[                    if (!args[i].getAllowedValues().contains(value.toString().toUpperCase())) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getAllowedTypes,413-413,[            return allowedTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getArgs,320-320,[            return args;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/HintNode.java,<init>,135-135,[                Hint key = Hint.valueOf(hintWord.toUpperCase());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,221-224,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,311-314,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.not(children.get(0));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,321-324,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.cast(children.get(0), node.getDataType(), node.getMaxLength(), node.getScale());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,331-334,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.inList(children, node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,342-345,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.isNull(children.get(0), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,352-355,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.comparison(node.getFilterOp(), children.get(0), children.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,364-370,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 if(node.isNegate()) {,                     return NODE_FACTORY.not(NODE_FACTORY.and(children));,                 } else {,                     return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,470-473,[        return leaveCompoundNode(node, flattenedChildren, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.rowValueConstructor(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,485-488,[	    return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.upsertStmtArrayNode(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,231-234,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,241-244,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.subtract(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,251-254,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.add(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,261-264,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.multiply(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,271-274,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.divide(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,281-284,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.function(node.getName(),children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,291-294,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.caseWhen(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,301-304,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.like(children.get(0),children.get(1),node.isNegate());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLLexer.java,mML_HINT,3285-3285,[					t = input.LA(1);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mCHAR_ESC,3093-3161,[					switch (alt12) {, 						case 1 :, 							// PhoenixSQL.g:1097:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1098:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1099:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1100:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1101:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1102:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1103:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1104:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1105:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1106:11: '%', 							{, 							match('%'); , 							 setText("\\%"); ],,mCHAR_ESC,3030-3174,[			switch (alt13) {, 				case 1 :, 					// PhoenixSQL.g:1096:9: '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					{, 					match('\\'); , 					// PhoenixSQL.g:1097:9: ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					int alt12=10;, 					switch ( input.LA(1) ) {, 					case 'n':, 						{, 						alt12=1;, 						}, 						break;, 					case 'r':, 						{, 						alt12=2;, 						}, 						break;, 					case 't':, 						{, 						alt12=3;, 						}, 						break;, 					case 'b':, 						{, 						alt12=4;, 						}, 						break;, 					case 'f':, 						{, 						alt12=5;, 						}, 						break;, 					case '\"':, 						{, 						alt12=6;, 						}, 						break;, 					case '\'':, 						{, 						alt12=7;, 						}, 						break;, 					case '\\':, 						{, 						alt12=8;, 						}, 						break;, 					case '_':, 						{, 						alt12=9;, 						}, 						break;, 					case '%':, 						{, 						alt12=10;, 						}, 						break;, 					default:, 						NoViableAltException nvae =, 							new NoViableAltException("", 12, 0, input);, 						throw nvae;, 					}, 					switch (alt12) {, 						case 1 :, 							// PhoenixSQL.g:1097:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1098:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1099:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1100:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1101:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1102:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1103:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1104:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1105:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1106:11: '%', 							{, 							match('%'); , 							 setText("\\%"); , 							}, 							break;, , 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1108:9: '\\'\\'', 					{, 					match("''"); , , 					 setText("\'"); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mDECIMAL,2159-2163,[			switch (alt7) {, 				case 1 :, 					// PhoenixSQL.g:941:9: POSINTEGER, 					{, 					mPOSINTEGER(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mSL_COMMENT,3398-3409,[			switch (alt16) {, 				case 1 :, 					// PhoenixSQL.g:1133:8: SL_COMMENT1, 					{, 					mSL_COMMENT1(); , , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1133:22: SL_COMMENT2, 					{, 					mSL_COMMENT2(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mTokens,3480-4317,[		switch (alt18) {, 			case 1 :, 				// PhoenixSQL.g:1:10: ADD, 				{, 				mADD(); , , 				}, 				break;, 			case 2 :, 				// PhoenixSQL.g:1:14: ALL, 				{, 				mALL(); , , 				}, 				break;, 			case 3 :, 				// PhoenixSQL.g:1:18: ALTER, 				{, 				mALTER(); , , 				}, 				break;, 			case 4 :, 				// PhoenixSQL.g:1:24: AND, 				{, 				mAND(); , , 				}, 				break;, 			case 5 :, 				// PhoenixSQL.g:1:28: ARRAY, 				{, 				mARRAY(); , , 				}, 				break;, 			case 6 :, 				// PhoenixSQL.g:1:34: AS, 				{, 				mAS(); , , 				}, 				break;, 			case 7 :, 				// PhoenixSQL.g:1:37: ASC, 				{, 				mASC(); , , 				}, 				break;, 			case 8 :, 				// PhoenixSQL.g:1:41: BETWEEN, 				{, 				mBETWEEN(); , , 				}, 				break;, 			case 9 :, 				// PhoenixSQL.g:1:49: BY, 				{, 				mBY(); , , 				}, 				break;, 			case 10 :, 				// PhoenixSQL.g:1:52: CACHE, 				{, 				mCACHE(); , , 				}, 				break;, 			case 11 :, 				// PhoenixSQL.g:1:58: CASE, 				{, 				mCASE(); , , 				}, 				break;, 			case 12 :, 				// PhoenixSQL.g:1:63: CAST, 				{, 				mCAST(); , , 				}, 				break;, 			case 13 :, 				// PhoenixSQL.g:1:68: COLUMN, 				{, 				mCOLUMN(); , , 				}, 				break;, 			case 14 :, 				// PhoenixSQL.g:1:75: CONSTRAINT, 				{, 				mCONSTRAINT(); , , 				}, 				break;, 			case 15 :, 				// PhoenixSQL.g:1:86: CREATE, 				{, 				mCREATE(); , , 				}, 				break;, 			case 16 :, 				// PhoenixSQL.g:1:93: CURRENT, 				{, 				mCURRENT(); , , 				}, 				break;, 			case 17 :, 				// PhoenixSQL.g:1:101: DELETE, 				{, 				mDELETE(); , , 				}, 				break;, 			case 18 :, 				// PhoenixSQL.g:1:108: DERIVE, 				{, 				mDERIVE(); , , 				}, 				break;, 			case 19 :, 				// PhoenixSQL.g:1:115: DESC, 				{, 				mDESC(); , , 				}, 				break;, 			case 20 :, 				// PhoenixSQL.g:1:120: DISABLE, 				{, 				mDISABLE(); , , 				}, 				break;, 			case 21 :, 				// PhoenixSQL.g:1:128: DISTINCT, 				{, 				mDISTINCT(); , , 				}, 				break;, 			case 22 :, 				// PhoenixSQL.g:1:137: DROP, 				{, 				mDROP(); , , 				}, 				break;, 			case 23 :, 				// PhoenixSQL.g:1:142: ELSE, 				{, 				mELSE(); , , 				}, 				break;, 			case 24 :, 				// PhoenixSQL.g:1:147: END, 				{, 				mEND(); , , 				}, 				break;, 			case 25 :, 				// PhoenixSQL.g:1:151: EXISTS, 				{, 				mEXISTS(); , , 				}, 				break;, 			case 26 :, 				// PhoenixSQL.g:1:158: EXPLAIN, 				{, 				mEXPLAIN(); , , 				}, 				break;, 			case 27 :, 				// PhoenixSQL.g:1:166: FALSE, 				{, 				mFALSE(); , , 				}, 				break;, 			case 28 :, 				// PhoenixSQL.g:1:172: FIRST, 				{, 				mFIRST(); , , 				}, 				break;, 			case 29 :, 				// PhoenixSQL.g:1:178: FOR, 				{, 				mFOR(); , , 				}, 				break;, 			case 30 :, 				// PhoenixSQL.g:1:182: FROM, 				{, 				mFROM(); , , 				}, 				break;, 			case 31 :, 				// PhoenixSQL.g:1:187: FULL, 				{, 				mFULL(); , , 				}, 				break;, 			case 32 :, 				// PhoenixSQL.g:1:192: GROUP, 				{, 				mGROUP(); , , 				}, 				break;, 			case 33 :, 				// PhoenixSQL.g:1:198: HAVING, 				{, 				mHAVING(); , , 				}, 				break;, 			case 34 :, 				// PhoenixSQL.g:1:205: IF, 				{, 				mIF(); , , 				}, 				break;, 			case 35 :, 				// PhoenixSQL.g:1:208: IN, 				{, 				mIN(); , , 				}, 				break;, 			case 36 :, 				// PhoenixSQL.g:1:211: INCLUDE, 				{, 				mINCLUDE(); , , 				}, 				break;, 			case 37 :, 				// PhoenixSQL.g:1:219: INCREMENT, 				{, 				mINCREMENT(); , , 				}, 				break;, 			case 38 :, 				// PhoenixSQL.g:1:229: INDEX, 				{, 				mINDEX(); , , 				}, 				break;, 			case 39 :, 				// PhoenixSQL.g:1:235: INNER, 				{, 				mINNER(); , , 				}, 				break;, 			case 40 :, 				// PhoenixSQL.g:1:241: INTO, 				{, 				mINTO(); , , 				}, 				break;, 			case 41 :, 				// PhoenixSQL.g:1:246: IS, 				{, 				mIS(); , , 				}, 				break;, 			case 42 :, 				// PhoenixSQL.g:1:249: JOIN, 				{, 				mJOIN(); , , 				}, 				break;, 			case 43 :, 				// PhoenixSQL.g:1:254: KEY, 				{, 				mKEY(); , , 				}, 				break;, 			case 44 :, 				// PhoenixSQL.g:1:258: LAST, 				{, 				mLAST(); , , 				}, 				break;, 			case 45 :, 				// PhoenixSQL.g:1:263: LEFT, 				{, 				mLEFT(); , , 				}, 				break;, 			case 46 :, 				// PhoenixSQL.g:1:268: LIKE, 				{, 				mLIKE(); , , 				}, 				break;, 			case 47 :, 				// PhoenixSQL.g:1:273: LIMIT, 				{, 				mLIMIT(); , , 				}, 				break;, 			case 48 :, 				// PhoenixSQL.g:1:279: NEXT, 				{, 				mNEXT(); , , 				}, 				break;, 			case 49 :, 				// PhoenixSQL.g:1:284: NOT, 				{, 				mNOT(); , , 				}, 				break;, 			case 50 :, 				// PhoenixSQL.g:1:288: NULL, 				{, 				mNULL(); , , 				}, 				break;, 			case 51 :, 				// PhoenixSQL.g:1:293: NULLS, 				{, 				mNULLS(); , , 				}, 				break;, 			case 52 :, 				// PhoenixSQL.g:1:299: ON, 				{, 				mON(); , , 				}, 				break;, 			case 53 :, 				// PhoenixSQL.g:1:302: OR, 				{, 				mOR(); , , 				}, 				break;, 			case 54 :, 				// PhoenixSQL.g:1:305: ORDER, 				{, 				mORDER(); , , 				}, 				break;, 			case 55 :, 				// PhoenixSQL.g:1:311: OUTER, 				{, 				mOUTER(); , , 				}, 				break;, 			case 56 :, 				// PhoenixSQL.g:1:317: PRIMARY, 				{, 				mPRIMARY(); , , 				}, 				break;, 			case 57 :, 				// PhoenixSQL.g:1:325: REBUILD, 				{, 				mREBUILD(); , , 				}, 				break;, 			case 58 :, 				// PhoenixSQL.g:1:333: RIGHT, 				{, 				mRIGHT(); , , 				}, 				break;, 			case 59 :, 				// PhoenixSQL.g:1:339: SELECT, 				{, 				mSELECT(); , , 				}, 				break;, 			case 60 :, 				// PhoenixSQL.g:1:346: SEQUENCE, 				{, 				mSEQUENCE(); , , 				}, 				break;, 			case 61 :, 				// PhoenixSQL.g:1:355: SET, 				{, 				mSET(); , , 				}, 				break;, 			case 62 :, 				// PhoenixSQL.g:1:359: SPLIT, 				{, 				mSPLIT(); , , 				}, 				break;, 			case 63 :, 				// PhoenixSQL.g:1:365: START, 				{, 				mSTART(); , , 				}, 				break;, 			case 64 :, 				// PhoenixSQL.g:1:371: TABLE, 				{, 				mTABLE(); , , 				}, 				break;, 			case 65 :, 				// PhoenixSQL.g:1:377: TABLES, 				{, 				mTABLES(); , , 				}, 				break;, 			case 66 :, 				// PhoenixSQL.g:1:384: THEN, 				{, 				mTHEN(); , , 				}, 				break;, 			case 67 :, 				// PhoenixSQL.g:1:389: TRUE, 				{, 				mTRUE(); , , 				}, 				break;, 			case 68 :, 				// PhoenixSQL.g:1:394: UNUSABLE, 				{, 				mUNUSABLE(); , , 				}, 				break;, 			case 69 :, 				// PhoenixSQL.g:1:403: UPSERT, 				{, 				mUPSERT(); , , 				}, 				break;, 			case 70 :, 				// PhoenixSQL.g:1:410: USABLE, 				{, 				mUSABLE(); , , 				}, 				break;, 			case 71 :, 				// PhoenixSQL.g:1:417: VALUE, 				{, 				mVALUE(); , , 				}, 				break;, 			case 72 :, 				// PhoenixSQL.g:1:423: VALUES, 				{, 				mVALUES(); , , 				}, 				break;, 			case 73 :, 				// PhoenixSQL.g:1:430: VIEW, 				{, 				mVIEW(); , , 				}, 				break;, 			case 74 :, 				// PhoenixSQL.g:1:435: WHEN, 				{, 				mWHEN(); , , 				}, 				break;, 			case 75 :, 				// PhoenixSQL.g:1:440: WHERE, 				{, 				mWHERE(); , , 				}, 				break;, 			case 76 :, 				// PhoenixSQL.g:1:446: WITH, 				{, 				mWITH(); , , 				}, 				break;, 			case 77 :, 				// PhoenixSQL.g:1:451: WITHIN, 				{, 				mWITHIN(); , , 				}, 				break;, 			case 78 :, 				// PhoenixSQL.g:1:458: HINT_START, 				{, 				mHINT_START(); , , 				}, 				break;, 			case 79 :, 				// PhoenixSQL.g:1:469: COMMENT_START, 				{, 				mCOMMENT_START(); , , 				}, 				break;, 			case 80 :, 				// PhoenixSQL.g:1:483: COMMENT_AND_HINT_END, 				{, 				mCOMMENT_AND_HINT_END(); , , 				}, 				break;, 			case 81 :, 				// PhoenixSQL.g:1:504: SL_COMMENT1, 				{, 				mSL_COMMENT1(); , , 				}, 				break;, 			case 82 :, 				// PhoenixSQL.g:1:516: SL_COMMENT2, 				{, 				mSL_COMMENT2(); , , 				}, 				break;, 			case 83 :, 				// PhoenixSQL.g:1:528: BIND_NAME, 				{, 				mBIND_NAME(); , , 				}, 				break;, 			case 84 :, 				// PhoenixSQL.g:1:538: NAME, 				{, 				mNAME(); , , 				}, 				break;, 			case 85 :, 				// PhoenixSQL.g:1:543: NUMBER, 				{, 				mNUMBER(); , , 				}, 				break;, 			case 86 :, 				// PhoenixSQL.g:1:550: LONG, 				{, 				mLONG(); , , 				}, 				break;, 			case 87 :, 				// PhoenixSQL.g:1:555: DECIMAL, 				{, 				mDECIMAL(); , , 				}, 				break;, 			case 88 :, 				// PhoenixSQL.g:1:563: DOUBLE, 				{, 				mDOUBLE(); , , 				}, 				break;, 			case 89 :, 				// PhoenixSQL.g:1:570: DOUBLE_QUOTE, 				{, 				mDOUBLE_QUOTE(); , , 				}, 				break;, 			case 90 :, 				// PhoenixSQL.g:1:583: EQ, 				{, 				mEQ(); , , 				}, 				break;, 			case 91 :, 				// PhoenixSQL.g:1:586: LT, 				{, 				mLT(); , , 				}, 				break;, 			case 92 :, 				// PhoenixSQL.g:1:589: GT, 				{, 				mGT(); , , 				}, 				break;, 			case 93 :, 				// PhoenixSQL.g:1:592: DOUBLE_EQ, 				{, 				mDOUBLE_EQ(); , , 				}, 				break;, 			case 94 :, 				// PhoenixSQL.g:1:602: NOEQ1, 				{, 				mNOEQ1(); , , 				}, 				break;, 			case 95 :, 				// PhoenixSQL.g:1:608: NOEQ2, 				{, 				mNOEQ2(); , , 				}, 				break;, 			case 96 :, 				// PhoenixSQL.g:1:614: CONCAT, 				{, 				mCONCAT(); , , 				}, 				break;, 			case 97 :, 				// PhoenixSQL.g:1:621: COMMA, 				{, 				mCOMMA(); , , 				}, 				break;, 			case 98 :, 				// PhoenixSQL.g:1:627: LPAREN, 				{, 				mLPAREN(); , , 				}, 				break;, 			case 99 :, 				// PhoenixSQL.g:1:634: RPAREN, 				{, 				mRPAREN(); , , 				}, 				break;, 			case 100 :, 				// PhoenixSQL.g:1:641: SEMICOLON, 				{, 				mSEMICOLON(); , , 				}, 				break;, 			case 101 :, 				// PhoenixSQL.g:1:651: COLON, 				{, 				mCOLON(); , , 				}, 				break;, 			case 102 :, 				// PhoenixSQL.g:1:657: QUESTION, 				{, 				mQUESTION(); , , 				}, 				break;, 			case 103 :, 				// PhoenixSQL.g:1:666: LSQUARE, 				{, 				mLSQUARE(); , , 				}, 				break;, 			case 104 :, 				// PhoenixSQL.g:1:674: RSQUARE, 				{, 				mRSQUARE(); , , 				}, 				break;, 			case 105 :, 				// PhoenixSQL.g:1:682: LCURLY, 				{, 				mLCURLY(); , , 				}, 				break;, 			case 106 :, 				// PhoenixSQL.g:1:689: RCURLY, 				{, 				mRCURLY(); , , 				}, 				break;, 			case 107 :, 				// PhoenixSQL.g:1:696: AT, 				{, 				mAT(); , , 				}, 				break;, 			case 108 :, 				// PhoenixSQL.g:1:699: TILDE, 				{, 				mTILDE(); , , 				}, 				break;, 			case 109 :, 				// PhoenixSQL.g:1:705: PLUS, 				{, 				mPLUS(); , , 				}, 				break;, 			case 110 :, 				// PhoenixSQL.g:1:710: MINUS, 				{, 				mMINUS(); , , 				}, 				break;, 			case 111 :, 				// PhoenixSQL.g:1:716: ASTERISK, 				{, 				mASTERISK(); , , 				}, 				break;, 			case 112 :, 				// PhoenixSQL.g:1:725: DIVIDE, 				{, 				mDIVIDE(); , , 				}, 				break;, 			case 113 :, 				// PhoenixSQL.g:1:732: OUTER_JOIN, 				{, 				mOUTER_JOIN(); , , 				}, 				break;, 			case 114 :, 				// PhoenixSQL.g:1:743: STRING_LITERAL, 				{, 				mSTRING_LITERAL(); , , 				}, 				break;, 			case 115 :, 				// PhoenixSQL.g:1:758: WS, 				{, 				mWS(); , , 				}, 				break;, 			case 116 :, 				// PhoenixSQL.g:1:761: EOL, 				{, 				mEOL(); , , 				}, 				break;, 			case 117 :, 				// PhoenixSQL.g:1:765: ML_HINT, 				{, 				mML_HINT(); , , 				}, 				break;, 			case 118 :, 				// PhoenixSQL.g:1:773: ML_COMMENT, 				{, 				mML_COMMENT(); , , 				}, 				break;, 			case 119 :, 				// PhoenixSQL.g:1:784: SL_COMMENT, 				{, 				mSL_COMMENT(); , , 				}, 				break;, 			case 120 :, 				// PhoenixSQL.g:1:795: DOT, 				{, 				mDOT(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/parse/PhoenixSQLLexer.java,,4945-5009,[		public DFA18(BaseRecognizer recognizer) {, 			this.recognizer = recognizer;, 			this.decisionNumber = 18;, 			this.eot = DFA18_eot;, 			this.eof = DFA18_eof;, 			this.min = DFA18_min;, 			this.max = DFA18_max;, 			this.accept = DFA18_accept;, 			this.special = DFA18_special;, 			this.transition = DFA18_transition;, 		}, 		@Override, 		public String getDescription() {, 			return "1:1: Tokens : ( ADD | ALL | ALTER | AND | ARRAY | AS | ASC | BETWEEN | BY | CACHE | CASE | CAST | COLUMN | CONSTRAINT | CREATE | CURRENT | DELETE | DERIVE | DESC | DISABLE | DISTINCT | DROP | ELSE | END | EXISTS | EXPLAIN | FALSE | FIRST | FOR | FROM | FULL | GROUP | HAVING | IF | IN | INCLUDE | INCREMENT | INDEX | INNER | INTO | IS | JOIN | KEY | LAST | LEFT | LIKE | LIMIT | NEXT | NOT | NULL | NULLS | ON | OR | ORDER | OUTER | PRIMARY | REBUILD | RIGHT | SELECT | SEQUENCE | SET | SPLIT | START | TABLE | TABLES | THEN | TRUE | UNUSABLE | UPSERT | USABLE | VALUE | VALUES | VIEW | WHEN | WHERE | WITH | WITHIN | HINT_START | COMMENT_START | COMMENT_AND_HINT_END | SL_COMMENT1 | SL_COMMENT2 | BIND_NAME | NAME | NUMBER | LONG | DECIMAL | DOUBLE | DOUBLE_QUOTE | EQ | LT | GT | DOUBLE_EQ | NOEQ1 | NOEQ2 | CONCAT | COMMA | LPAREN | RPAREN | SEMICOLON | COLON | QUESTION | LSQUARE | RSQUARE | LCURLY | RCURLY | AT | TILDE | PLUS | MINUS | ASTERISK | DIVIDE | OUTER_JOIN | STRING_LITERAL | WS | EOL | ML_HINT | ML_COMMENT | SL_COMMENT | DOT );";, 		}, 		@Override, 		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {, 			IntStream input = _input;, 			int _s = s;, 			switch ( s ) {, 					case 0 : , 						int LA18_104 = input.LA(1);, 						s = -1;, 						if ( (LA18_104=='+') ) {s = 194;}, 						else if ( ((LA18_104 >= '\u0000' && LA18_104 <= '*')||(LA18_104 >= ',' && LA18_104 <= '\uFFFF')) ) {s = 196;}, 						else s = 195;, 						if ( s>=0 ) return s;, 						break;, , 					case 1 : , 						int LA18_27 = input.LA(1);, 						s = -1;, 						if ( ((LA18_27 >= '\u0000' && LA18_27 <= '\uFFFF')) ) {s = 26;}, 						else s = 113;, 						if ( s>=0 ) return s;, 						break;, , 					case 2 : , 						int LA18_105 = input.LA(1);, 						s = -1;, 						if ( ((LA18_105 >= '\u0000' && LA18_105 <= '\uFFFF')) ) {s = 198;}, 						else s = 197;, 						if ( s>=0 ) return s;, 						break;, , 					case 3 : , 						int LA18_109 = input.LA(1);, 						s = -1;, 						if ( ((LA18_109 >= '\u0000' && LA18_109 <= '\uFFFF')) ) {s = 198;}, 						else s = 199;, 						if ( s>=0 ) return s;, 						break;, , 					case 4 : , 						int LA18_194 = input.LA(1);, 						s = -1;, 						if ( ((LA18_194 >= '\u0000' && LA18_194 <= '\uFFFF')) ) {s = 269;}, 						else s = 268;, 						if ( s>=0 ) return s;, 						break;, 			}, 			NoViableAltException nvae =, 				new NoViableAltException(getDescription(), 18, _s, input);, 			error(nvae);, 			throw nvae;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7338-7338,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5356); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7469-7469,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term5498); if (state.failed) return ret;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/PhoenixSQLParser.java,getTokenNames,235-235,[	@Override public String[] getTokenNames() { return PhoenixSQLParser.tokenNames; }],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/parse/PhoenixSQLParser.java,,72-72,[	public static final String[] tokenNames = new String[] {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,add_expression,6711-6711,[			if (state.failed) return ret;],,add_expression,6726-6726,[					match(input,PLUS,FOLLOW_PLUS_in_add_expression5042); if (state.failed) return ret;],,add_expression,6730-6730,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_index_node,2416-2416,[			match(input,ALTER,FOLLOW_ALTER_in_alter_index_node2269); if (state.failed) return ret;],,alter_index_node,2417-2417,[			match(input,INDEX,FOLLOW_INDEX_in_alter_index_node2271); if (state.failed) return ret;],,alter_index_node,2428-2428,[					match(input,IF,FOLLOW_IF_in_alter_index_node2274); if (state.failed) return ret;],,alter_index_node,2438-2438,[			if (state.failed) return ret;],,alter_index_node,2429-2429,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_index_node2278); if (state.failed) return ret;],,alter_index_node,2439-2439,[			match(input,ON,FOLLOW_ON_in_alter_index_node2286); if (state.failed) return ret;],,alter_index_node,2443-2443,[			if (state.failed) return ret;],,alter_index_node,2451-2451,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_table_node,2490-2490,[			match(input,ALTER,FOLLOW_ALTER_in_alter_table_node2340); if (state.failed) return ret;],,alter_table_node,2502-2502,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,2512-2512,[					match(input,TABLE,FOLLOW_TABLE_in_alter_table_node2343); if (state.failed) return ret;],,alter_table_node,2518-2518,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_alter_table_node2349); if (state.failed) return ret;],,alter_table_node,2527-2527,[			if (state.failed) return ret;],,alter_table_node,2547-2547,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,2559-2559,[					match(input,DROP,FOLLOW_DROP_in_alter_table_node2367); if (state.failed) return ret;],,alter_table_node,2592-2592,[					match(input,ADD,FOLLOW_ADD_in_alter_table_node2388); if (state.failed) return ret;],,alter_table_node,2649-2649,[					match(input,SET,FOLLOW_SET_in_alter_table_node2418); if (state.failed) return ret;],,alter_table_node,2560-2560,[					match(input,COLUMN,FOLLOW_COLUMN_in_alter_table_node2369); if (state.failed) return ret;],,alter_table_node,2603-2603,[							match(input,IF,FOLLOW_IF_in_alter_table_node2391); if (state.failed) return ret;],,alter_table_node,2656-2656,[					if (state.failed) return ret;],,alter_table_node,2571-2571,[							match(input,IF,FOLLOW_IF_in_alter_table_node2372); if (state.failed) return ret;],,alter_table_node,2604-2604,[							match(input,NOT,FOLLOW_NOT_in_alter_table_node2393); if (state.failed) return ret;],,alter_table_node,2617-2617,[					if (state.failed) return ret;],,alter_table_node,2581-2581,[					if (state.failed) return ret;],,alter_table_node,2572-2572,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node2376); if (state.failed) return ret;],,alter_table_node,2605-2605,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node2397); if (state.failed) return ret;],,alter_table_node,2633-2633,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,and_expression,5904-5904,[			if (state.failed) return ret;],,and_expression,5919-5919,[					match(input,AND,FOLLOW_AND_in_and_expression4272); if (state.failed) return ret;],,and_expression,5923-5923,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,array_expression,7077-7077,[			if (state.failed) return ret;],,array_expression,7088-7088,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_array_expression5289); if (state.failed) return ret;],,array_expression,7092-7092,[					if (state.failed) return ret;],,array_expression,7093-7093,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_array_expression5295); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_expression,6642-6642,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,8463-8463,[				if (state.backtracking>0) {state.failed=true; return ret;}],,bind_name,8480-8480,[					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name6208); if (state.failed) return ret;],,bind_name,8473-8473,[					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name6195); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,6128-6128,[			if (state.failed) return ret;],,boolean_expression,6239-6239,[				if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6251-6251,[					match(input,EQ,FOLLOW_EQ_in_boolean_expression4377); if (state.failed) return ret;],,boolean_expression,6292-6292,[					match(input,LT,FOLLOW_LT_in_boolean_expression4447); if (state.failed) return ret;],,boolean_expression,6308-6308,[					match(input,GT,FOLLOW_GT_in_boolean_expression4479); if (state.failed) return ret;],,boolean_expression,6324-6324,[					match(input,LT,FOLLOW_LT_in_boolean_expression4511); if (state.failed) return ret;],,boolean_expression,6341-6341,[					match(input,GT,FOLLOW_GT_in_boolean_expression4545); if (state.failed) return ret;],,boolean_expression,6358-6358,[					match(input,IS,FOLLOW_IS_in_boolean_expression4579); if (state.failed) return ret;],,boolean_expression,6273-6273,[						if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6325-6325,[					match(input,EQ,FOLLOW_EQ_in_boolean_expression4513); if (state.failed) return ret;],,boolean_expression,6342-6342,[					match(input,EQ,FOLLOW_EQ_in_boolean_expression4547); if (state.failed) return ret;],,boolean_expression,6397-6397,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4617); if (state.failed) return ret;],,boolean_expression,6427-6427,[						if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6375-6375,[					match(input,NULL,FOLLOW_NULL_in_boolean_expression4586); if (state.failed) return ret;],,boolean_expression,6439-6439,[							match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4622); if (state.failed) return ret;],,boolean_expression,6455-6455,[							match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression4664); if (state.failed) return ret;],,boolean_expression,6473-6473,[							match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4710); if (state.failed) return ret;],,boolean_expression,6497-6497,[							match(input,IN,FOLLOW_IN_in_boolean_expression4759); if (state.failed) return ret;],,boolean_expression,6255-6255,[					if (state.failed) return ret;],,boolean_expression,6296-6296,[					if (state.failed) return ret;],,boolean_expression,6312-6312,[					if (state.failed) return ret;],,boolean_expression,6369-6369,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4583); if (state.failed) return ret;],,boolean_expression,6456-6456,[							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4666); if (state.failed) return ret;],,boolean_expression,6329-6329,[					if (state.failed) return ret;],,boolean_expression,6346-6346,[					if (state.failed) return ret;],,boolean_expression,6179-6179,[					if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6154-6154,[					if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6280-6280,[					if (state.failed) return ret;],,boolean_expression,6557-6557,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4806); if (state.failed) return ret;],,boolean_expression,6574-6574,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4853); if (state.failed) return ret;],,boolean_expression,6529-6529,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6443-6443,[							if (state.failed) return ret;],,boolean_expression,6477-6477,[							if (state.failed) return ret;],,boolean_expression,6460-6460,[							if (state.failed) return ret;],,boolean_expression,6478-6478,[							match(input,AND,FOLLOW_AND_in_boolean_expression4716); if (state.failed) return ret;],,boolean_expression,6545-6545,[									if (state.failed) return ret;],,boolean_expression,6461-6461,[							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4672); if (state.failed) return ret;],,boolean_expression,6561-6561,[									if (state.failed) return ret;],,boolean_expression,6578-6578,[									if (state.failed) return ret;],,boolean_expression,6562-6562,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4812); if (state.failed) return ret;],,boolean_expression,6579-6579,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4859); if (state.failed) return ret;],,boolean_expression,6482-6482,[							if (state.failed) return ret;],,boolean_expression,6514-6514,[									if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,8608-8608,[				if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8618-8618,[					match(input,CASE,FOLLOW_CASE_in_case_statement6291); if (state.failed) return ret;],,case_statement,8688-8688,[					match(input,CASE,FOLLOW_CASE_in_case_statement6335); if (state.failed) return ret;],,case_statement,8703-8703,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement6338); if (state.failed) return ret;],,case_statement,8622-8622,[					if (state.failed) return ret;],,case_statement,8719-8719,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8593-8593,[					if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8736-8736,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement6355); if (state.failed) return ret;],,case_statement,8747-8747,[					match(input,END,FOLLOW_END_in_case_statement6365); if (state.failed) return ret;],,case_statement,8637-8637,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement6298); if (state.failed) return ret;],,case_statement,8707-8707,[							if (state.failed) return ret;],,case_statement,8653-8653,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,8708-8708,[							match(input,THEN,FOLLOW_THEN_in_case_statement6344); if (state.failed) return ret;],,case_statement,8670-8670,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement6315); if (state.failed) return ret;],,case_statement,8681-8681,[					match(input,END,FOLLOW_END_in_case_statement6325); if (state.failed) return ret;],,case_statement,8740-8740,[							if (state.failed) return ret;],,case_statement,8641-8641,[							if (state.failed) return ret;],,case_statement,8642-8642,[							match(input,THEN,FOLLOW_THEN_in_case_statement6304); if (state.failed) return ret;],,case_statement,8712-8712,[							if (state.failed) return ret;],,case_statement,8674-8674,[							if (state.failed) return ret;],,case_statement,8646-8646,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_def_name_with_sort_order,1867-1867,[			if (state.failed) return ret;],,col_def_name_with_sort_order,1881-1881,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_def_name_with_sort_order1906); if (state.failed) return ret;],,col_def_name_with_sort_order,1887-1887,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_def_name_with_sort_order1910); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_name_with_sort_order,1711-1711,[			if (state.failed) return ret;],,col_name_with_sort_order,1725-1725,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_name_with_sort_order1801); if (state.failed) return ret;],,col_name_with_sort_order,1731-1731,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_name_with_sort_order1805); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_def,2882-2882,[			if (state.failed) return ret;],,column_def,2886-2886,[			if (state.failed) return ret;],,column_def,2897-2897,[					match(input,LPAREN,FOLLOW_LPAREN_in_column_def2598); if (state.failed) return ret;],,column_def,2932-2932,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_column_def2619); if (state.failed) return ret;],,column_def,2898-2898,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2602); if (state.failed) return ret;],,column_def,2948-2948,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_column_def2625); if (state.failed) return ret;],,column_def,2909-2909,[							match(input,COMMA,FOLLOW_COMMA_in_column_def2605); if (state.failed) return ret;],,column_def,2916-2916,[					match(input,RPAREN,FOLLOW_RPAREN_in_column_def2613); if (state.failed) return ret;],,column_def,2991-2991,[							nn=(Token)match(input,NOT,FOLLOW_NOT_in_column_def2641); if (state.failed) return ret;],,column_def,2997-2997,[					n=(Token)match(input,NULL,FOLLOW_NULL_in_column_def2646); if (state.failed) return ret;],,column_def,3013-3013,[					pk=(Token)match(input,PRIMARY,FOLLOW_PRIMARY_in_column_def2653); if (state.failed) return ret;],,column_def,2965-2965,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_column_def2634); if (state.failed) return ret;],,column_def,2959-2959,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2630); if (state.failed) return ret;],,column_def,2910-2910,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2609); if (state.failed) return ret;],,column_def,3014-3014,[					match(input,KEY,FOLLOW_KEY_in_column_def2655); if (state.failed) return ret;],,column_def,3028-3028,[							order=(Token)match(input,ASC,FOLLOW_ASC_in_column_def2660); if (state.failed) return ret;],,column_def,3034-3034,[							order=(Token)match(input,DESC,FOLLOW_DESC_in_column_def2664); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2143-2143,[				if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2128-2128,[					if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2156-2156,[					if (state.failed) return ret;],,column_name,2166-2166,[					if (state.failed) return ret;],,column_name,2167-2167,[					match(input,DOT,FOLLOW_DOT_in_column_name2088); if (state.failed) return ret;],,column_name,2171-2171,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,concat_expression,6837-6837,[			if (state.failed) return ret;],,concat_expression,6852-6852,[					match(input,CONCAT,FOLLOW_CONCAT_in_concat_expression5130); if (state.failed) return ret;],,concat_expression,6856-6856,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_index_node,1179-1179,[			match(input,CREATE,FOLLOW_CREATE_in_create_index_node1389); if (state.failed) return ret;],,create_index_node,1180-1180,[			match(input,INDEX,FOLLOW_INDEX_in_create_index_node1391); if (state.failed) return ret;],,create_index_node,1191-1191,[					match(input,IF,FOLLOW_IF_in_create_index_node1394); if (state.failed) return ret;],,create_index_node,1192-1192,[					match(input,NOT,FOLLOW_NOT_in_create_index_node1396); if (state.failed) return ret;],,create_index_node,1202-1202,[			if (state.failed) return ret;],,create_index_node,1203-1203,[			match(input,ON,FOLLOW_ON_in_create_index_node1408); if (state.failed) return ret;],,create_index_node,1193-1193,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_index_node1400); if (state.failed) return ret;],,create_index_node,1207-1207,[			if (state.failed) return ret;],,create_index_node,1211-1211,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1423); if (state.failed) return ret;],,create_index_node,1215-1215,[			if (state.failed) return ret;],,create_index_node,1216-1216,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1429); if (state.failed) return ret;],,create_index_node,1229-1229,[					match(input,INCLUDE,FOLLOW_INCLUDE_in_create_index_node1441); if (state.failed) return ret;],,create_index_node,1233-1233,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1444); if (state.failed) return ret;],,create_index_node,1275-1275,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_index_node1479); if (state.failed) return ret;],,create_index_node,1259-1259,[					if (state.failed) return ret;],,create_index_node,1276-1276,[					match(input,ON,FOLLOW_ON_in_create_index_node1481); if (state.failed) return ret;],,create_index_node,1237-1237,[					if (state.failed) return ret;],,create_index_node,1238-1238,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1450); if (state.failed) return ret;],,create_index_node,1280-1280,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_sequence_node,1320-1320,[			match(input,CREATE,FOLLOW_CREATE_in_create_sequence_node1521); if (state.failed) return ret;],,create_sequence_node,1321-1321,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_create_sequence_node1523); if (state.failed) return ret;],,create_sequence_node,1332-1332,[					match(input,IF,FOLLOW_IF_in_create_sequence_node1527); if (state.failed) return ret;],,create_sequence_node,1333-1333,[					match(input,NOT,FOLLOW_NOT_in_create_sequence_node1529); if (state.failed) return ret;],,create_sequence_node,1343-1343,[			if (state.failed) return ret;],,create_sequence_node,1334-1334,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_sequence_node1533); if (state.failed) return ret;],,create_sequence_node,1354-1354,[					match(input,START,FOLLOW_START_in_create_sequence_node1550); if (state.failed) return ret;],,create_sequence_node,1390-1390,[					match(input,INCREMENT,FOLLOW_INCREMENT_in_create_sequence_node1570); if (state.failed) return ret;],,create_sequence_node,1426-1426,[					match(input,CACHE,FOLLOW_CACHE_in_create_sequence_node1590); if (state.failed) return ret;],,create_sequence_node,1365-1365,[							match(input,WITH,FOLLOW_WITH_in_create_sequence_node1552); if (state.failed) return ret;],,create_sequence_node,1401-1401,[							match(input,BY,FOLLOW_BY_in_create_sequence_node1572); if (state.failed) return ret;],,create_sequence_node,1374-1374,[					if (state.failed) return ret;],,create_sequence_node,1410-1410,[					if (state.failed) return ret;],,create_sequence_node,1430-1430,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_table_node,887-887,[			match(input,CREATE,FOLLOW_CREATE_in_create_table_node1131); if (state.failed) return ret;],,create_table_node,888-888,[			match(input,TABLE,FOLLOW_TABLE_in_create_table_node1133); if (state.failed) return ret;],,create_table_node,899-899,[					match(input,IF,FOLLOW_IF_in_create_table_node1136); if (state.failed) return ret;],,create_table_node,900-900,[					match(input,NOT,FOLLOW_NOT_in_create_table_node1138); if (state.failed) return ret;],,create_table_node,910-910,[			if (state.failed) return ret;],,create_table_node,914-914,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_table_node1160); if (state.failed) return ret;],,create_table_node,901-901,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_node1142); if (state.failed) return ret;],,create_table_node,918-918,[			if (state.failed) return ret;],,create_table_node,938-938,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_table_node1173); if (state.failed) return ret;],,create_table_node,932-932,[					if (state.failed) return ret;],,create_table_node,970-970,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_table_node1200); if (state.failed) return ret;],,create_table_node,954-954,[					if (state.failed) return ret;],,create_table_node,971-971,[					match(input,ON,FOLLOW_ON_in_create_table_node1202); if (state.failed) return ret;],,create_table_node,975-975,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_view_node,1017-1017,[			match(input,CREATE,FOLLOW_CREATE_in_create_view_node1242); if (state.failed) return ret;],,create_view_node,1018-1018,[			match(input,VIEW,FOLLOW_VIEW_in_create_view_node1244); if (state.failed) return ret;],,create_view_node,1029-1029,[					match(input,IF,FOLLOW_IF_in_create_view_node1247); if (state.failed) return ret;],,create_view_node,1030-1030,[					match(input,NOT,FOLLOW_NOT_in_create_view_node1249); if (state.failed) return ret;],,create_view_node,1040-1040,[			if (state.failed) return ret;],,create_view_node,1031-1031,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_view_node1253); if (state.failed) return ret;],,create_view_node,1051-1051,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_view_node1271); if (state.failed) return ret;],,create_view_node,1091-1091,[					match(input,AS,FOLLOW_AS_in_create_view_node1298); if (state.failed) return ret;],,create_view_node,1092-1092,[					match(input,SELECT,FOLLOW_SELECT_in_create_view_node1300); if (state.failed) return ret;],,create_view_node,1055-1055,[					if (state.failed) return ret;],,create_view_node,1093-1093,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_create_view_node1302); if (state.failed) return ret;],,create_view_node,1137-1137,[					if (state.failed) return ret;],,create_view_node,1094-1094,[					match(input,FROM,FOLLOW_FROM_in_create_view_node1314); if (state.failed) return ret;],,create_view_node,1075-1075,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_view_node1284); if (state.failed) return ret;],,create_view_node,1069-1069,[							if (state.failed) return ret;],,create_view_node,1098-1098,[					if (state.failed) return ret;],,create_view_node,1109-1109,[							match(input,WHERE,FOLLOW_WHERE_in_create_view_node1331); if (state.failed) return ret;],,create_view_node,1113-1113,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,delete_node,3910-3910,[			match(input,DELETE,FOLLOW_DELETE_in_delete_node3319); if (state.failed) return ret;],,delete_node,3930-3930,[			match(input,FROM,FOLLOW_FROM_in_delete_node3328); if (state.failed) return ret;],,delete_node,3924-3924,[					if (state.failed) return ret;],,delete_node,3934-3934,[			if (state.failed) return ret;],,delete_node,3945-3945,[					match(input,WHERE,FOLLOW_WHERE_in_delete_node3343); if (state.failed) return ret;],,delete_node,3965-3965,[					match(input,ORDER,FOLLOW_ORDER_in_delete_node3360); if (state.failed) return ret;],,delete_node,3986-3986,[					match(input,LIMIT,FOLLOW_LIMIT_in_delete_node3379); if (state.failed) return ret;],,delete_node,3966-3966,[					match(input,BY,FOLLOW_BY_in_delete_node3362); if (state.failed) return ret;],,delete_node,3949-3949,[					if (state.failed) return ret;],,delete_node,3990-3990,[					if (state.failed) return ret;],,delete_node,3970-3970,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,divide_expression,6963-6963,[			if (state.failed) return ret;],,divide_expression,6978-6978,[					match(input,DIVIDE,FOLLOW_DIVIDE_in_divide_expression5218); if (state.failed) return ret;],,divide_expression,6982-6982,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,double_literal,8416-8416,[			d=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_double_literal6167); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_index_node,2355-2355,[			match(input,DROP,FOLLOW_DROP_in_drop_index_node2218); if (state.failed) return ret;],,drop_index_node,2356-2356,[			match(input,INDEX,FOLLOW_INDEX_in_drop_index_node2220); if (state.failed) return ret;],,drop_index_node,2367-2367,[					match(input,IF,FOLLOW_IF_in_drop_index_node2223); if (state.failed) return ret;],,drop_index_node,2377-2377,[			if (state.failed) return ret;],,drop_index_node,2368-2368,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_index_node2227); if (state.failed) return ret;],,drop_index_node,2378-2378,[			match(input,ON,FOLLOW_ON_in_drop_index_node2235); if (state.failed) return ret;],,drop_index_node,2382-2382,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_sequence_node,1532-1532,[			match(input,DROP,FOLLOW_DROP_in_drop_sequence_node1663); if (state.failed) return ret;],,drop_sequence_node,1533-1533,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_drop_sequence_node1665); if (state.failed) return ret;],,drop_sequence_node,1544-1544,[					match(input,IF,FOLLOW_IF_in_drop_sequence_node1669); if (state.failed) return ret;],,drop_sequence_node,1554-1554,[			if (state.failed) return ret;],,drop_sequence_node,1545-1545,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_sequence_node1673); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_table_node,2268-2268,[			match(input,DROP,FOLLOW_DROP_in_drop_table_node2163); if (state.failed) return ret;],,drop_table_node,2280-2280,[				if (state.backtracking>0) {state.failed=true; return ret;}],,drop_table_node,2296-2296,[					match(input,TABLE,FOLLOW_TABLE_in_drop_table_node2172); if (state.failed) return ret;],,drop_table_node,2290-2290,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_drop_table_node2168); if (state.failed) return ret;],,drop_table_node,2312-2312,[					match(input,IF,FOLLOW_IF_in_drop_table_node2176); if (state.failed) return ret;],,drop_table_node,2322-2322,[			if (state.failed) return ret;],,drop_table_node,2313-2313,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_node2180); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_def,3150-3150,[			if (state.failed) return ret;],,dyn_column_def,3154-3154,[			if (state.failed) return ret;],,dyn_column_def,3165-3165,[					match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_def2753); if (state.failed) return ret;],,dyn_column_def,3200-3200,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_def2774); if (state.failed) return ret;],,dyn_column_def,3166-3166,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2757); if (state.failed) return ret;],,dyn_column_def,3216-3216,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_def2780); if (state.failed) return ret;],,dyn_column_def,3177-3177,[							match(input,COMMA,FOLLOW_COMMA_in_dyn_column_def2760); if (state.failed) return ret;],,dyn_column_def,3184-3184,[					match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_def2768); if (state.failed) return ret;],,dyn_column_def,3233-3233,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_def2789); if (state.failed) return ret;],,dyn_column_def,3227-3227,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2785); if (state.failed) return ret;],,dyn_column_def,3178-3178,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2764); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_name_or_def,3282-3282,[			if (state.failed) return ret;],,dyn_column_name_or_def,3296-3296,[					if (state.failed) return ret;],,dyn_column_name_or_def,3307-3307,[							match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_name_or_def2834); if (state.failed) return ret;],,dyn_column_name_or_def,3342-3342,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_name_or_def2855); if (state.failed) return ret;],,dyn_column_name_or_def,3308-3308,[							l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def2838); if (state.failed) return ret;],,dyn_column_name_or_def,3358-3358,[							lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_name_or_def2861); if (state.failed) return ret;],,dyn_column_name_or_def,3319-3319,[									match(input,COMMA,FOLLOW_COMMA_in_dyn_column_name_or_def2841); if (state.failed) return ret;],,dyn_column_name_or_def,3326-3326,[							match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_name_or_def2849); if (state.failed) return ret;],,dyn_column_name_or_def,3375-3375,[							match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_name_or_def2870); if (state.failed) return ret;],,dyn_column_name_or_def,3369-3369,[									a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def2866); if (state.failed) return ret;],,dyn_column_name_or_def,3320-3320,[									s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def2845); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,explain_node,847-847,[			match(input,EXPLAIN,FOLLOW_EXPLAIN_in_explain_node1101); if (state.failed) return ret;],,explain_node,851-851,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,expression,5806-5806,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2022-2022,[				if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2007-2007,[					if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2035-2035,[					if (state.failed) return ret;],,fam_prop_name,2045-2045,[					if (state.failed) return ret;],,fam_prop_name,2046-2046,[					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2006); if (state.failed) return ret;],,fam_prop_name,2050-2050,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,8061-8061,[				if (state.backtracking>0) {state.failed=true; return ret;}],,from_table_name,8074-8074,[					if (state.failed) return ret;],,from_table_name,8084-8084,[					if (state.failed) return ret;],,from_table_name,8085-8085,[					match(input,DOT,FOLLOW_DOT_in_from_table_name5907); if (state.failed) return ret;],,from_table_name,8089-8089,[					if (state.failed) return ret;],,from_table_name,8046-8046,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hintClause,4091-4091,[			c=(Token)match(input,ML_HINT,FOLLOW_ML_HINT_in_hintClause3460); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hinted_select_node,3677-3677,[					if (state.failed) return ret;],,hinted_select_node,3686-3686,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,identifier,8516-8516,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_name,7879-7879,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_pk_constraint,1770-1770,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal,8335-8335,[			n=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_int_literal6113); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1475-1475,[				if (state.backtracking>0) {state.failed=true; return ret;}],,int_literal_or_bind,1488-1488,[					if (state.failed) return ret;],,int_literal_or_bind,1498-1498,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,join_part,5530-5530,[				if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5072-5072,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5515-5515,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5251-5251,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5383-5383,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5451-5451,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5119-5119,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5187-5187,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5319-5319,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5055-5055,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5498-5498,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5099-5099,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5234-5234,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5366-5366,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5434-5434,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5170-5170,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5302-5302,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5035-5035,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5542-5542,[					if (state.failed) return ret;],,join_part,5562-5562,[					if (state.failed) return ret;],,join_part,5478-5478,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5214-5214,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5346-5346,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5414-5414,[								if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5150-5150,[								if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5282-5282,[								if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5543-5543,[					match(input,JOIN,FOLLOW_JOIN_in_join_part4018); if (state.failed) return ret;],,join_part,5563-5563,[					match(input,JOIN,FOLLOW_JOIN_in_join_part4039); if (state.failed) return ret;],,join_part,5564-5564,[					match(input,LPAREN,FOLLOW_LPAREN_in_join_part4041); if (state.failed) return ret;],,join_part,5547-5547,[					if (state.failed) return ret;],,join_part,5548-5548,[					match(input,ON,FOLLOW_ON_in_join_part4024); if (state.failed) return ret;],,join_part,5568-5568,[					if (state.failed) return ret;],,join_part,5569-5569,[					match(input,RPAREN,FOLLOW_RPAREN_in_join_part4047); if (state.failed) return ret;],,join_part,5570-5570,[					match(input,ON,FOLLOW_ON_in_join_part4049); if (state.failed) return ret;],,join_part,5552-5552,[					if (state.failed) return ret;],,join_part,5574-5574,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,join_type,5627-5627,[				if (state.backtracking>0) {state.failed=true; return ret;}],,join_type,5658-5658,[					match(input,LEFT,FOLLOW_LEFT_in_join_type4090); if (state.failed) return ret;],,join_type,5681-5681,[					match(input,RIGHT,FOLLOW_RIGHT_in_join_type4107); if (state.failed) return ret;],,join_type,5704-5704,[					match(input,FULL,FOLLOW_FULL_in_join_type4123); if (state.failed) return ret;],,join_type,5646-5646,[							match(input,INNER,FOLLOW_INNER_in_join_type4075); if (state.failed) return ret;],,join_type,5669-5669,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4092); if (state.failed) return ret;],,join_type,5692-5692,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4109); if (state.failed) return ret;],,join_type,5715-5715,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4126); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4035-4035,[				if (state.backtracking>0) {state.failed=true; return ret;}],,limit,4048-4048,[					if (state.failed) return ret;],,limit,4058-4058,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,8229-8229,[				if (state.backtracking>0) {state.failed=true; return ret;}],,literal,8288-8288,[					match(input,NULL,FOLLOW_NULL_in_literal6057); if (state.failed) return ret;],,literal,8295-8295,[					match(input,TRUE,FOLLOW_TRUE_in_literal6069); if (state.failed) return ret;],,literal,8302-8302,[					match(input,FALSE,FOLLOW_FALSE_in_literal6082); if (state.failed) return ret;],,literal,8238-8238,[					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal5989); if (state.failed) return ret;],,literal,8275-8275,[					t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal6045); if (state.failed) return ret;],,literal,8248-8248,[					if (state.failed) return ret;],,literal,8258-8258,[					if (state.failed) return ret;],,literal,8268-8268,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,8144-8144,[					if (state.failed) return ret;],,literal_or_bind,8154-8154,[					if (state.failed) return ret;],,literal_or_bind,8131-8131,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,long_literal,8377-8377,[			l=(Token)match(input,LONG,FOLLOW_LONG_in_long_literal6140); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,multiply_expression,6900-6900,[			if (state.failed) return ret;],,multiply_expression,6915-6915,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_multiply_expression5174); if (state.failed) return ret;],,multiply_expression,6919-6919,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,negate_expression,7033-7033,[					m=(Token)match(input,MINUS,FOLLOW_MINUS_in_negate_expression5253); if (state.failed) return ret;],,negate_expression,7042-7042,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,nextStatement,410-410,[					match(input,EOF,FOLLOW_EOF_in_nextStatement795); if (state.failed) return ret;],,nextStatement,389-389,[				if (state.backtracking>0) {state.failed=true; return ret;}],,nextStatement,402-402,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,non_select_node,700-700,[				if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,623-623,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,656-656,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,680-680,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,712-712,[					if (state.failed) return ret;],,non_select_node,721-721,[					if (state.failed) return ret;],,non_select_node,730-730,[					if (state.failed) return ret;],,non_select_node,739-739,[					if (state.failed) return ret;],,non_select_node,748-748,[					if (state.failed) return ret;],,non_select_node,757-757,[					if (state.failed) return ret;],,non_select_node,766-766,[					if (state.failed) return ret;],,non_select_node,775-775,[					if (state.failed) return ret;],,non_select_node,784-784,[					if (state.failed) return ret;],,non_select_node,793-793,[					if (state.failed) return ret;],,non_select_node,802-802,[					if (state.failed) return ret;],,non_select_node,811-811,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,not_expression,6082-6082,[					match(input,LPAREN,FOLLOW_LPAREN_in_not_expression4340); if (state.failed) return ret;],,not_expression,6050-6050,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression4318); if (state.failed) return ret;],,not_expression,6076-6076,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression4337); if (state.failed) return ret;],,not_expression,6059-6059,[					if (state.failed) return ret;],,not_expression,6086-6086,[					if (state.failed) return ret;],,not_expression,6087-6087,[					match(input,RPAREN,FOLLOW_RPAREN_in_not_expression4346); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,535-535,[					match(input,SELECT,FOLLOW_SELECT_in_oneStatement882); if (state.failed) return ret;],,oneStatement,525-525,[				if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,549-549,[					if (state.failed) return ret;],,oneStatement,539-539,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,or_expression,5841-5841,[			if (state.failed) return ret;],,or_expression,5856-5856,[					match(input,OR,FOLLOW_OR_in_or_expression4227); if (state.failed) return ret;],,or_expression,5860-5860,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseAlias,5763-5763,[					match(input,AS,FOLLOW_AS_in_parseAlias4157); if (state.failed) return ret;],,parseAlias,5772-5772,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseNoReserved,8547-8547,[			n=(Token)match(input,NAME,FOLLOW_NAME_in_parseNoReserved6264); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,4534-4534,[			if (state.failed) return ret;],,parseOrderByField,4550-4550,[					match(input,ASC,FOLLOW_ASC_in_parseOrderByField3745); if (state.failed) return ret;],,parseOrderByField,4557-4557,[					match(input,DESC,FOLLOW_DESC_in_parseOrderByField3751); if (state.failed) return ret;],,parseOrderByField,4574-4574,[					match(input,NULLS,FOLLOW_NULLS_in_parseOrderByField3766); if (state.failed) return ret;],,parseOrderByField,4586-4586,[						if (state.backtracking>0) {state.failed=true; return ret;}],,parseOrderByField,4596-4596,[							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField3769); if (state.failed) return ret;],,parseOrderByField,4603-4603,[							match(input,LAST,FOLLOW_LAST_in_parseOrderByField3775); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,pk_constraint,1596-1596,[					match(input,COMMA,FOLLOW_COMMA_in_pk_constraint1708); if (state.failed) return ret;],,pk_constraint,1602-1602,[			match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_pk_constraint1711); if (state.failed) return ret;],,pk_constraint,1606-1606,[			if (state.failed) return ret;],,pk_constraint,1607-1607,[			match(input,PRIMARY,FOLLOW_PRIMARY_in_pk_constraint1717); if (state.failed) return ret;],,pk_constraint,1608-1608,[			match(input,KEY,FOLLOW_KEY_in_pk_constraint1719); if (state.failed) return ret;],,pk_constraint,1609-1609,[			match(input,LPAREN,FOLLOW_LPAREN_in_pk_constraint1721); if (state.failed) return ret;],,pk_constraint,1613-1613,[			if (state.failed) return ret;],,pk_constraint,1614-1614,[			match(input,RPAREN,FOLLOW_RPAREN_in_pk_constraint1727); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_name,2699-2699,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_value,2086-2086,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,query,477-477,[			match(input,SELECT,FOLLOW_SELECT_in_query849); if (state.failed) return ret;],,query,481-481,[			if (state.failed) return ret;],,query,482-482,[			match(input,EOF,FOLLOW_EOF_in_query855); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,recoverFromMismatchedToken,298-298,[	            Object inserted = getMissingSymbol(input, e, ttype, follow);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_expression,3420-3420,[			match(input,SELECT,FOLLOW_SELECT_in_select_expression2908); if (state.failed) return ret;],,select_expression,3424-3424,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_node,3516-3516,[					match(input,ALL,FOLLOW_ALL_in_select_node2983); if (state.failed) return ret;],,select_node,3510-3510,[					d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_select_node2979); if (state.failed) return ret;],,select_node,3525-3525,[			if (state.failed) return ret;],,select_node,3526-3526,[			match(input,FROM,FOLLOW_FROM_in_select_node2999); if (state.failed) return ret;],,select_node,3530-3530,[			if (state.failed) return ret;],,select_node,3541-3541,[					match(input,WHERE,FOLLOW_WHERE_in_select_node3014); if (state.failed) return ret;],,select_node,3561-3561,[					match(input,GROUP,FOLLOW_GROUP_in_select_node3031); if (state.failed) return ret;],,select_node,3582-3582,[					match(input,HAVING,FOLLOW_HAVING_in_select_node3050); if (state.failed) return ret;],,select_node,3562-3562,[					match(input,BY,FOLLOW_BY_in_select_node3033); if (state.failed) return ret;],,select_node,3545-3545,[					if (state.failed) return ret;],,select_node,3602-3602,[					match(input,ORDER,FOLLOW_ORDER_in_select_node3067); if (state.failed) return ret;],,select_node,3623-3623,[					match(input,LIMIT,FOLLOW_LIMIT_in_select_node3086); if (state.failed) return ret;],,select_node,3603-3603,[					match(input,BY,FOLLOW_BY_in_select_node3069); if (state.failed) return ret;],,select_node,3586-3586,[					if (state.failed) return ret;],,select_node,3566-3566,[					if (state.failed) return ret;],,select_node,3627-3627,[					if (state.failed) return ret;],,select_node,3607-3607,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,4322-4322,[					if (state.failed) return ret;],,selectable,4351-4351,[					if (state.failed) return ret;],,selectable,4363-4363,[					if (state.failed) return ret;],,selectable,4352-4352,[					match(input,DOT,FOLLOW_DOT_in_selectable3564); if (state.failed) return ret;],,selectable,4364-4364,[					match(input,DOT,FOLLOW_DOT_in_selectable3583); if (state.failed) return ret;],,selectable,4309-4309,[				if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4353-4353,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3566); if (state.failed) return ret;],,selectable,4336-4336,[							if (state.failed) return ret;],,selectable,4368-4368,[					if (state.failed) return ret;],,selectable,4369-4369,[					match(input,DOT,FOLLOW_DOT_in_selectable3589); if (state.failed) return ret;],,selectable,4370-4370,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3591); if (state.failed) return ret;],,selectable,4294-4294,[					if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4277-4277,[						if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4260-4260,[							if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4243-4243,[								if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,single_table_ref,4768-4768,[				if (state.backtracking>0) {state.failed=true; return ret;}],,single_table_ref,4888-4888,[					match(input,LPAREN,FOLLOW_LPAREN_in_single_table_ref3948); if (state.failed) return ret;],,single_table_ref,4889-4889,[					match(input,SELECT,FOLLOW_SELECT_in_single_table_ref3950); if (state.failed) return ret;],,single_table_ref,4780-4780,[					if (state.failed) return ret;],,single_table_ref,4825-4825,[					if (state.failed) return ret;],,single_table_ref,4893-4893,[					if (state.failed) return ret;],,single_table_ref,4801-4801,[									match(input,AS,FOLLOW_AS_in_single_table_ref3890); if (state.failed) return ret;],,single_table_ref,4846-4846,[									match(input,AS,FOLLOW_AS_in_single_table_ref3917); if (state.failed) return ret;],,single_table_ref,4871-4871,[							match(input,LPAREN,FOLLOW_LPAREN_in_single_table_ref3928); if (state.failed) return ret;],,single_table_ref,4894-4894,[					match(input,RPAREN,FOLLOW_RPAREN_in_single_table_ref3956); if (state.failed) return ret;],,single_table_ref,4810-4810,[							if (state.failed) return ret;],,single_table_ref,4855-4855,[							if (state.failed) return ret;],,single_table_ref,4875-4875,[							if (state.failed) return ret;],,single_table_ref,4915-4915,[									match(input,AS,FOLLOW_AS_in_single_table_ref3960); if (state.failed) return ret;],,single_table_ref,4876-4876,[							match(input,RPAREN,FOLLOW_RPAREN_in_single_table_ref3934); if (state.failed) return ret;],,single_table_ref,4924-4924,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,statement,445-445,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subquery_expression,3458-3458,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subtract_expression,6774-6774,[			if (state.failed) return ret;],,subtract_expression,6789-6789,[					match(input,MINUS,FOLLOW_MINUS_in_subtract_expression5086); if (state.failed) return ret;],,subtract_expression,6793-6793,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,7974-7974,[				if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,7959-7959,[					if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,7942-7942,[						if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,7987-7987,[					if (state.failed) return ret;],,table_name,7997-7997,[					if (state.failed) return ret;],,table_name,7998-7998,[					match(input,DOT,FOLLOW_DOT_in_table_name5859); if (state.failed) return ret;],,table_name,7925-7925,[							if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,8002-8002,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_ref,4712-4712,[			if (state.failed) return ret;],,table_ref,4716-4716,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7309-7309,[				if (state.backtracking>0) {state.failed=true; return ret;}],,term,7495-7495,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5539); if (state.failed) return ret;],,term,7514-7514,[					match(input,CAST,FOLLOW_CAST_in_term5563); if (state.failed) return ret;],,term,7269-7269,[					if (state.backtracking>0) {state.failed=true; return ret;}],,term,7338-7338,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5356); if (state.failed) return ret;],,term,7613-7613,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7253-7253,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7515-7515,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5565); if (state.failed) return ret;],,term,7629-7629,[							match(input,CURRENT,FOLLOW_CURRENT_in_term5639); if (state.failed) return ret;],,term,7635-7635,[					match(input,VALUE,FOLLOW_VALUE_in_term5642); if (state.failed) return ret;],,term,7321-7321,[					if (state.failed) return ret;],,term,7331-7331,[					if (state.failed) return ret;],,term,7354-7354,[					if (state.failed) return ret;],,term,7369-7369,[					if (state.failed) return ret;],,term,7447-7447,[					if (state.failed) return ret;],,term,7467-7467,[					if (state.failed) return ret;],,term,7488-7488,[					if (state.failed) return ret;],,term,7339-7339,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_term5358); if (state.failed) return ret;],,term,7623-7623,[							n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term5635); if (state.failed) return ret;],,term,7636-7636,[					match(input,FOR,FOLLOW_FOR_in_term5644); if (state.failed) return ret;],,term,7355-7355,[					match(input,DOT,FOLLOW_DOT_in_term5380); if (state.failed) return ret;],,term,7370-7370,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5400); if (state.failed) return ret;],,term,7448-7448,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5462); if (state.failed) return ret;],,term,7468-7468,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5494); if (state.failed) return ret;],,term,7499-7499,[					if (state.failed) return ret;],,term,7500-7500,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5545); if (state.failed) return ret;],,term,7519-7519,[					if (state.failed) return ret;],,term,7343-7343,[					if (state.failed) return ret;],,term,7449-7449,[					t=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_term5466); if (state.failed) return ret;],,term,7469-7469,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term5498); if (state.failed) return ret;],,term,7520-7520,[					match(input,AS,FOLLOW_AS_in_term5571); if (state.failed) return ret;],,term,7640-7640,[					if (state.failed) return ret;],,term,7359-7359,[					if (state.failed) return ret;],,term,7374-7374,[					if (state.failed) return ret;],,term,7344-7344,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_term5364); if (state.failed) return ret;],,term,7450-7450,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5468); if (state.failed) return ret;],,term,7375-7375,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5406); if (state.failed) return ret;],,term,7473-7473,[					if (state.failed) return ret;],,term,7524-7524,[					if (state.failed) return ret;],,term,7474-7474,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5504); if (state.failed) return ret;],,term,7386-7386,[							wg=(Token)match(input,WITHIN,FOLLOW_WITHIN_in_term5411); if (state.failed) return ret;],,term,7535-7535,[							match(input,LPAREN,FOLLOW_LPAREN_in_term5578); if (state.failed) return ret;],,term,7387-7387,[							wg=(Token)match(input,GROUP,FOLLOW_GROUP_in_term5413); if (state.failed) return ret;],,term,7591-7591,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5612); if (state.failed) return ret;],,term,7536-7536,[							length=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term5582); if (state.failed) return ret;],,term,7573-7573,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5600); if (state.failed) return ret;],,term,7582-7582,[							ar=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_term5605); if (state.failed) return ret;],,term,7388-7388,[							wg=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_term5415); if (state.failed) return ret;],,term,7583-7583,[							ar=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_term5607); if (state.failed) return ret;],,term,7547-7547,[									match(input,COMMA,FOLLOW_COMMA_in_term5585); if (state.failed) return ret;],,term,7554-7554,[							match(input,RPAREN,FOLLOW_RPAREN_in_term5593); if (state.failed) return ret;],,term,7389-7389,[							wg=(Token)match(input,ORDER,FOLLOW_ORDER_in_term5417); if (state.failed) return ret;],,term,7548-7548,[									scale=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term5589); if (state.failed) return ret;],,term,7390-7390,[							wg=(Token)match(input,BY,FOLLOW_BY_in_term5419); if (state.failed) return ret;],,term,7394-7394,[							if (state.failed) return ret;],,term,7406-7406,[								if (state.backtracking>0) {state.failed=true; return ret;}],,term,7416-7416,[									a=(Token)match(input,ASC,FOLLOW_ASC_in_term5428); if (state.failed) return ret;],,term,7422-7422,[									wg=(Token)match(input,DESC,FOLLOW_DESC_in_term5432); if (state.failed) return ret;],,term,7428-7428,[							wg=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_term5435); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,upsert_node,3721-3721,[			match(input,UPSERT,FOLLOW_UPSERT_in_upsert_node3178); if (state.failed) return ret;],,upsert_node,3741-3741,[			match(input,INTO,FOLLOW_INTO_in_upsert_node3187); if (state.failed) return ret;],,upsert_node,3735-3735,[					if (state.failed) return ret;],,upsert_node,3745-3745,[			if (state.failed) return ret;],,upsert_node,3756-3756,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node3202); if (state.failed) return ret;],,upsert_node,3778-3778,[				if (state.backtracking>0) {state.failed=true; return ret;}],,upsert_node,3791-3791,[					match(input,VALUES,FOLLOW_VALUES_in_upsert_node3222); if (state.failed) return ret;],,upsert_node,3792-3792,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node3224); if (state.failed) return ret;],,upsert_node,3760-3760,[					if (state.failed) return ret;],,upsert_node,3808-3808,[					if (state.failed) return ret;],,upsert_node,3761-3761,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node3208); if (state.failed) return ret;],,upsert_node,3796-3796,[					if (state.failed) return ret;],,upsert_node,3797-3797,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node3230); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,value_expression,6676-6676,[			if (state.failed) return ret;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,8469-8481,[			switch (alt141) {, 				case 1 :, 					// PhoenixSQL.g:890:9: n= BIND_NAME, 					{, 					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name6195); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { String bind = n.getText().substring(1); updateBind(bind); ret = bind; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:891:9: QUESTION, 					{, 					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name6208); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = nextBind(); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,6535-6580,[							switch (alt116) {, 								case 1 :, 									// PhoenixSQL.g:699:38: (r= bind_expression ), 									{, 									// PhoenixSQL.g:699:38: (r= bind_expression ), 									// PhoenixSQL.g:699:39: r= bind_expression, 									{, 									pushFollow(FOLLOW_bind_expression_in_boolean_expression4765);, 									r=bind_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:700:35: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:700:35: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:700:36: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4806); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4810);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4812); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:701:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									{, 									// PhoenixSQL.g:701:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									// PhoenixSQL.g:701:36: LPAREN v= one_or_more_expressions RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4853); if (state.failed) return ret;, 									pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression4857);, 									v=one_or_more_expressions();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4859); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}],,boolean_expression,6244-6604,[			switch (alt118) {, 				case 1 :, 					// PhoenixSQL.g:689:29: ( EQ r= value_expression ), 					{, 					// PhoenixSQL.g:689:29: ( EQ r= value_expression ), 					// PhoenixSQL.g:689:30: EQ r= value_expression, 					{, 					match(input,EQ,FOLLOW_EQ_in_boolean_expression4377); if (state.failed) return ret;, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4381);, 					r=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.equal(l,r); }, 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:690:22: ( ( NOEQ1 | NOEQ2 ) r= value_expression ), 					{, 					// PhoenixSQL.g:690:22: ( ( NOEQ1 | NOEQ2 ) r= value_expression ), 					// PhoenixSQL.g:690:23: ( NOEQ1 | NOEQ2 ) r= value_expression, 					{, 					if ( (input.LA(1) >= NOEQ1 && input.LA(1) <= NOEQ2) ) {, 						input.consume();, 						state.errorRecovery=false;, 						state.failed=false;, 					}, 					else {, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						MismatchedSetException mse = new MismatchedSetException(null,input);, 						throw mse;, 					}, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4419);, 					r=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.notEqual(l,r); }, 					}, , 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:691:22: ( LT r= value_expression ), 					{, 					// PhoenixSQL.g:691:22: ( LT r= value_expression ), 					// PhoenixSQL.g:691:23: LT r= value_expression, 					{, 					match(input,LT,FOLLOW_LT_in_boolean_expression4447); if (state.failed) return ret;, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4451);, 					r=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.lt(l,r); }, 					}, , 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:692:22: ( GT r= value_expression ), 					{, 					// PhoenixSQL.g:692:22: ( GT r= value_expression ), 					// PhoenixSQL.g:692:23: GT r= value_expression, 					{, 					match(input,GT,FOLLOW_GT_in_boolean_expression4479); if (state.failed) return ret;, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4483);, 					r=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.gt(l,r); }, 					}, , 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:693:22: ( LT EQ r= value_expression ), 					{, 					// PhoenixSQL.g:693:22: ( LT EQ r= value_expression ), 					// PhoenixSQL.g:693:23: LT EQ r= value_expression, 					{, 					match(input,LT,FOLLOW_LT_in_boolean_expression4511); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_boolean_expression4513); if (state.failed) return ret;, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4517);, 					r=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.lte(l,r); }, 					}, , 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:694:22: ( GT EQ r= value_expression ), 					{, 					// PhoenixSQL.g:694:22: ( GT EQ r= value_expression ), 					// PhoenixSQL.g:694:23: GT EQ r= value_expression, 					{, 					match(input,GT,FOLLOW_GT_in_boolean_expression4545); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_boolean_expression4547); if (state.failed) return ret;, 					pushFollow(FOLLOW_value_expression_in_boolean_expression4551);, 					r=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.gte(l,r); }, 					}, , 					}, 					break;, 				case 7 :, 					// PhoenixSQL.g:695:22: ( IS (n= NOT )? NULL ), 					{, 					// PhoenixSQL.g:695:22: ( IS (n= NOT )? NULL ), 					// PhoenixSQL.g:695:23: IS (n= NOT )? NULL, 					{, 					match(input,IS,FOLLOW_IS_in_boolean_expression4579); if (state.failed) return ret;, 					// PhoenixSQL.g:695:27: (n= NOT )?, 					int alt114=2;, 					int LA114_0 = input.LA(1);, 					if ( (LA114_0==NOT) ) {, 						alt114=1;, 					}, 					switch (alt114) {, 						case 1 :, 							// PhoenixSQL.g:695:27: n= NOT, 							{, 							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4583); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					match(input,NULL,FOLLOW_NULL_in_boolean_expression4586); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.isNull(l,n!=null); }, 					}, , 					}, 					break;, 				case 8 :, 					// PhoenixSQL.g:696:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 					{, 					// PhoenixSQL.g:696:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 					// PhoenixSQL.g:696:24: (n= NOT )? ( ( LIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 					{, 					// PhoenixSQL.g:696:25: (n= NOT )?, 					int alt115=2;, 					int LA115_0 = input.LA(1);, 					if ( (LA115_0==NOT) ) {, 						alt115=1;, 					}, 					switch (alt115) {, 						case 1 :, 							// PhoenixSQL.g:696:25: n= NOT, 							{, 							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4617); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					// PhoenixSQL.g:696:31: ( ( LIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 					int alt117=4;, 					switch ( input.LA(1) ) {, 					case LIKE:, 						{, 						alt117=1;, 						}, 						break;, 					case EXISTS:, 						{, 						alt117=2;, 						}, 						break;, 					case BETWEEN:, 						{, 						alt117=3;, 						}, 						break;, 					case IN:, 						{, 						alt117=4;, 						}, 						break;, 					default:, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						NoViableAltException nvae =, 							new NoViableAltException("", 117, 0, input);, 						throw nvae;, 					}, 					switch (alt117) {, 						case 1 :, 							// PhoenixSQL.g:696:32: ( LIKE r= value_expression ), 							{, 							// PhoenixSQL.g:696:32: ( LIKE r= value_expression ), 							// PhoenixSQL.g:696:33: LIKE r= value_expression, 							{, 							match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4622); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4626);, 							r=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null); }, 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:697:32: ( EXISTS LPAREN r= subquery_expression RPAREN ), 							{, 							// PhoenixSQL.g:697:32: ( EXISTS LPAREN r= subquery_expression RPAREN ), 							// PhoenixSQL.g:697:33: EXISTS LPAREN r= subquery_expression RPAREN, 							{, 							match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression4664); if (state.failed) return ret;, 							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4666); if (state.failed) return ret;, 							pushFollow(FOLLOW_subquery_expression_in_boolean_expression4670);, 							r=subquery_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4672); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.exists(l,r,n!=null);}, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:698:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 							{, 							// PhoenixSQL.g:698:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 							// PhoenixSQL.g:698:33: BETWEEN r1= value_expression AND r2= value_expression, 							{, 							match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4710); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4714);, 							r1=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,AND,FOLLOW_AND_in_boolean_expression4716); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4720);, 							r2=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.between(l,r1,r2,n!=null); }, 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:699:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 							{, 							// PhoenixSQL.g:699:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 							// PhoenixSQL.g:699:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 							{, 							// PhoenixSQL.g:699:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 							// PhoenixSQL.g:699:34: IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 							{, 							match(input,IN,FOLLOW_IN_in_boolean_expression4759); if (state.failed) return ret;, 							// PhoenixSQL.g:699:37: ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 							int alt116=3;, 							int LA116_0 = input.LA(1);, 							if ( (LA116_0==BIND_NAME||LA116_0==QUESTION) ) {, 								alt116=1;, 							}, 							else if ( (LA116_0==LPAREN) ) {, 								int LA116_2 = input.LA(2);, 								if ( (LA116_2==SELECT) ) {, 									alt116=2;, 								}, 								else if ( (LA116_2==ARRAY||LA116_2==BIND_NAME||(LA116_2 >= CASE && LA116_2 <= CAST)||LA116_2==CURRENT||LA116_2==DECIMAL||LA116_2==DOUBLE||LA116_2==FALSE||(LA116_2 >= LONG && LA116_2 <= LPAREN)||LA116_2==MINUS||(LA116_2 >= NAME && LA116_2 <= NEXT)||(LA116_2 >= NOT && LA116_2 <= NULL)||LA116_2==NUMBER||LA116_2==QUESTION||LA116_2==STRING_LITERAL||LA116_2==TRUE) ) {, 									alt116=3;, 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 116, 2, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 116, 0, input);, 								throw nvae;, 							}, , 							switch (alt116) {, 								case 1 :, 									// PhoenixSQL.g:699:38: (r= bind_expression ), 									{, 									// PhoenixSQL.g:699:38: (r= bind_expression ), 									// PhoenixSQL.g:699:39: r= bind_expression, 									{, 									pushFollow(FOLLOW_bind_expression_in_boolean_expression4765);, 									r=bind_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:700:35: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:700:35: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:700:36: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4806); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4810);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4812); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:701:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									{, 									// PhoenixSQL.g:701:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									// PhoenixSQL.g:701:36: LPAREN v= one_or_more_expressions RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4853); if (state.failed) return ret;, 									pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression4857);, 									v=one_or_more_expressions();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4859); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}, 									}, , 									}, 									break;, , 							}, , 							}, , 							}, , 							}, 							break;, , 					}, , 					}, , 					}, 					break;, 				case 9 :, 					// PhoenixSQL.g:704:23: , 					{, 					if ( state.backtracking==0 ) { ret = l; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,8666-8675,[					switch (alt143) {, 						case 1 :, 							// PhoenixSQL.g:905:107: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement6315); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement6319);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,case_statement,8732-8741,[					switch (alt145) {, 						case 1 :, 							// PhoenixSQL.g:906:73: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement6355); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement6359);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2149-2172,[			switch (alt33) {, 				case 1 :, 					// PhoenixSQL.g:450:9: field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2072);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:451:9: family= identifier DOT field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2086);, 					family=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_column_name2088); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_column_name2092);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(family, field); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2028-2051,[			switch (alt32) {, 				case 1 :, 					// PhoenixSQL.g:441:9: propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name1990);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(propName); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:442:9: familyName= identifier DOT propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2004);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2006); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2010);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(familyName, propName); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,8067-8090,[			switch (alt138) {, 				case 1 :, 					// PhoenixSQL.g:821:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name5891);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:822:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name5905);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_from_table_name5907); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_from_table_name5911);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1481-1499,[			switch (alt24) {, 				case 1 :, 					// PhoenixSQL.g:399:7: n= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_int_literal_or_bind1625);, 					n=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = n; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:400:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_int_literal_or_bind1637);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = b; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,join_part,5535-5575,[			switch (alt102) {, 				case 1 :, 					// PhoenixSQL.g:650:4: j= join_type JOIN r= single_table_ref ON e= expression, 					{, 					pushFollow(FOLLOW_join_type_in_join_part4016);, 					j=join_type();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,JOIN,FOLLOW_JOIN_in_join_part4018); if (state.failed) return ret;, 					pushFollow(FOLLOW_single_table_ref_in_join_part4022);, 					r=single_table_ref();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,ON,FOLLOW_ON_in_join_part4024); if (state.failed) return ret;, 					pushFollow(FOLLOW_expression_in_join_part4028);, 					e=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.joinPart(j, e, r); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:651:4: j= join_type JOIN LPAREN r= table_ref RPAREN ON e= expression, 					{, 					pushFollow(FOLLOW_join_type_in_join_part4037);, 					j=join_type();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,JOIN,FOLLOW_JOIN_in_join_part4039); if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_join_part4041); if (state.failed) return ret;, 					pushFollow(FOLLOW_table_ref_in_join_part4045);, 					r=table_ref();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_join_part4047); if (state.failed) return ret;, 					match(input,ON,FOLLOW_ON_in_join_part4049); if (state.failed) return ret;, 					pushFollow(FOLLOW_expression_in_join_part4053);, 					e=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.joinPart(j, e, r); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4041-4059,[			switch (alt82) {, 				case 1 :, 					// PhoenixSQL.g:583:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_limit3418);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(b); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:584:7: l= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_limit3430);, 					l=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(l); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,8234-8303,[			switch (alt140) {, 				case 1 :, 					// PhoenixSQL.g:833:9: t= STRING_LITERAL, 					{, 					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal5989); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.literal(t.getText()); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:834:9: l= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_literal6003);, 					l=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:835:9: l= long_literal, 					{, 					pushFollow(FOLLOW_long_literal_in_literal6017);, 					l=long_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:836:9: l= double_literal, 					{, 					pushFollow(FOLLOW_double_literal_in_literal6031);, 					l=double_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:837:9: t= DECIMAL, 					{, 					t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal6045); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {, 					            try {, 					                ret = factory.literal(new BigDecimal(t.getText()));, 					            } catch (NumberFormatException e) { // Shouldn't happen since we just parsed a decimal, 					                throwRecognitionException(t);, 					            }, 					        }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:844:9: NULL, 					{, 					match(input,NULL,FOLLOW_NULL_in_literal6057); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(null);}, 					}, 					break;, 				case 7 :, 					// PhoenixSQL.g:845:9: TRUE, 					{, 					match(input,TRUE,FOLLOW_TRUE_in_literal6069); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(Boolean.TRUE);}, 					}, 					break;, 				case 8 :, 					// PhoenixSQL.g:846:9: FALSE, 					{, 					match(input,FALSE,FOLLOW_FALSE_in_literal6082); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(Boolean.FALSE);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,8137-8155,[			switch (alt139) {, 				case 1 :, 					// PhoenixSQL.g:827:9: e= literal, 					{, 					pushFollow(FOLLOW_literal_in_literal_or_bind5943);, 					e=literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = e; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:828:9: b= bind_name, 					{, 					pushFollow(FOLLOW_bind_name_in_literal_or_bind5957);, 					b=bind_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.bind(b); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,531-550,[			switch (alt2) {, 				case 1 :, 					// PhoenixSQL.g:334:10: SELECT s= hinted_select_node, 					{, 					match(input,SELECT,FOLLOW_SELECT_in_oneStatement882); if (state.failed) return ret;, 					pushFollow(FOLLOW_hinted_select_node_in_oneStatement886);, 					s=hinted_select_node();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret =s;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:335:10: ns= non_select_node, 					{, 					pushFollow(FOLLOW_non_select_node_in_oneStatement902);, 					ns=non_select_node();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret =ns;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,4546-4558,[			switch (alt89) {, 				case 1 :, 					// PhoenixSQL.g:624:10: ASC, 					{, 					match(input,ASC,FOLLOW_ASC_in_parseOrderByField3745); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = true;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:624:38: DESC, 					{, 					match(input,DESC,FOLLOW_DESC_in_parseOrderByField3751); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = false;}],,parseOrderByField,4592-4604,[					switch (alt90) {, 						case 1 :, 							// PhoenixSQL.g:625:17: FIRST, 							{, 							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField3769); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = false;}, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:625:46: LAST, 							{, 							match(input,LAST,FOLLOW_LAST_in_parseOrderByField3775); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = true;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,select_list,4137-4179,[			switch (alt84) {, 				case 1 :, 					// PhoenixSQL.g:594:9: n= selectable ( COMMA n= selectable )*, 					{, 					pushFollow(FOLLOW_selectable_in_select_list3492);, 					n=selectable();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(n);}, 					// PhoenixSQL.g:594:36: ( COMMA n= selectable )*, 					loop83:, 					while (true) {, 						int alt83=2;, 						int LA83_0 = input.LA(1);, 						if ( (LA83_0==COMMA) ) {, 							alt83=1;, 						}, , 						switch (alt83) {, 						case 1 :, 							// PhoenixSQL.g:594:37: COMMA n= selectable, 							{, 							match(input,COMMA,FOLLOW_COMMA_in_select_list3497); if (state.failed) return ret;, 							pushFollow(FOLLOW_selectable_in_select_list3501);, 							n=selectable();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret.add(n);}, 							}, 							break;, , 						default :, 							break loop83;, 						}, 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:595:7: ASTERISK, 					{, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list3513); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = Collections.<AliasedNode>singletonList(factory.aliasedNode(null, factory.wildcard()));}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,4315-4371,[			switch (alt86) {, 				case 1 :, 					// PhoenixSQL.g:600:9: field= expression (a= parseAlias )?, 					{, 					pushFollow(FOLLOW_expression_in_selectable3542);, 					field=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:600:26: (a= parseAlias )?, 					int alt85=2;, 					int LA85_0 = input.LA(1);, 					if ( (LA85_0==AS||LA85_0==NAME) ) {, 						alt85=1;, 					}, 					switch (alt85) {, 						case 1 :, 							// PhoenixSQL.g:600:27: a= parseAlias, 							{, 							pushFollow(FOLLOW_parseAlias_in_selectable3547);, 							a=parseAlias();, 							state._fsp--;, 							if (state.failed) return ret;, 							}, 							break;, , 					}, , 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(a, field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:601:8: familyName= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable3562);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3564); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3566); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.family(familyName));}, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:602:9: s= identifier DOT t= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable3581);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3583); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_selectable3587);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3589); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3591); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.tableWildcard(factory.table(s, t))); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,7980-8003,[			switch (alt137) {, 				case 1 :, 					// PhoenixSQL.g:815:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name5843);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:816:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name5857);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_table_name5859); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_table_name5863);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,zero_or_more_expressions,7742-7750,[			switch (alt134) {, 				case 1 :, 					// PhoenixSQL.g:801:9: v= expression, 					{, 					pushFollow(FOLLOW_expression_in_zero_or_more_expressions5728);, 					v=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(v);}],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,nextStatement,96-96,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseExpression,154-154,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseLiteral,172-172,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseQuery,135-135,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseStatement,116-116,[                throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,125-128,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,140-143,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/pig/PhoenixHBaseLoader.java,initializePhoenixPigConfiguration,139-139,[            this.tableName = pair.getFirst();],,initializePhoenixPigConfiguration,125-125,[        Pair<String,String> pair = null;],,initializePhoenixPigConfiguration,132-132,[             } else if (location.startsWith(PHOENIX_QUERY_SCHEME)) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/pig/PhoenixHBaseLoader.java,getPartitionKeys,237-237,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,dropTable,519-519,[      conn.createStatement().execute(String.format("DROP TABLE %s",tableFullName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,112-112,[        conn.createStatement().execute(ddl);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,setUp,100-100,[                ConfigurationUtil.toProperties(conf));],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,109-109,[        final String ddl = String.format("CREATE TABLE %s "],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,setUp,69-69,[        pigServer = new PigServer(ExecType.LOCAL, getTestClusterConfig());],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,newConfiguration,107-107,[        phoenixConfiguration.configure(zkQuorum, tableName.toUpperCase(), 100);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,testSelectStatement,66-66,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,testSelectStatementForSpecificColumns,86-86,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,testUpsertStatement,46-46,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/pig/hadoop/PhoenixInputFormat.java,getSplits,90-90,[            final ResultIterator iterator = queryPlan.iterator();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/pig/hadoop/PhoenixOutputFormat.java,,65-65,[			return new PhoenixRecordWriter(getConnection(context.getConfiguration()), config);],,,84-84,[	    config = new PhoenixPigConfiguration(configuration);	    ],,,87-87,[			connection = config.getConnection();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/pig/hadoop/PhoenixRecord.java,<init>,56-56,[		this.fieldSchemas = fieldSchemas;],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pig/hadoop/PhoenixRecordWriter.java,<init>,56-56,[		this.statement = this.conn.prepareStatement(config.getUpsertStatement());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/pig/util/ColumnInfoToStringEncoderDecoderTest.java,testEncodeDecodeWithNulls,56-56,[        final String columnInfoStr = ColumnInfoToStringEncoderDecoder.encode(Lists.newArrayList(columnInfo1,columnInfo2));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/QuerySchemaParserFunction.java,,71-74,[                                                            new Function<ColumnProjector,String>() {,                                                                 @Override,                                                                 public String apply(ColumnProjector column) {,                                                                     return column.getName();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/QuerySchemaParserFunctionTest.java,tearDown,107-107,[        conn.close();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunction.java,,63-66,[            columnInfos = Lists.transform(projectedColumns, new Function<ColumnProjector,ColumnInfo>() {,             	@Override, 				public ColumnInfo apply(final ColumnProjector columnProjector) {, 					return new ColumnInfo(columnProjector.getName(), columnProjector.getExpression().getDataType().getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunctionTest.java,tearDown,72-72,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunctionTest.java,testValidSelectQuery,65-65,[        final List<ColumnInfo> actualColumnInfos = function.apply(selectQuery);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/pig/util/TypeUtil.java,transformToTuple,290-290,[        } catch( Exception ex) {],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,121-121,[            A_TIME = new ColumnRef(new TableRef(table), table.getColumn("A_TIME").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,122-122,[            A_TIMESTAMP = new ColumnRef(new TableRef(table), table.getColumn("A_TIMESTAMP").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,115-115,[            ORGANIZATION_ID = new ColumnRef(new TableRef(table), table.getColumn("ORGANIZATION_ID").getPosition()).newColumnExpression();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,723-723,[            } catch (Exception e) {],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1080-1080,[        initEntityHistoryTableValues(tenantId, splits, null);],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1084-1084,[        initEntityHistoryTableValues(tenantId, splits, date, null);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,723-723,[            } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/BaseTest.java,destroyDriver,572-572,[            } catch (Exception ignored) {}],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/query/BaseTest.java,deletePriorTables,676-676,[        cache.getTables();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,722-722,[                conn.createStatement().execute("DROP SEQUENCE " + SchemaUtil.getTableName(rs.getString(1), rs.getString(2)));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorTables,701-701,[                    conn.createStatement().executeUpdate(ddl);],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1081-1081,[    }],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1085-1085,[    }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,46-49,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,56-59,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create(conf);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,upgradeMetaDataTo3_0,2243-2243,[                            conn.createStatement().execute("DROP VIEW IF EXISTS " + OLD_SYSTEM_TABLE_AS_VIEW_NAME);                        ],,upgradeMetaDataTo3_0,2250-2250,[                                newConn.createStatement().execute("DROP VIEW IF EXISTS " + OLD_SYSTEM_TABLE_AS_VIEW_NAME);                        ],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearCache,1572-1572,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,upgradeMetaDataTo3_0,2243-2243,[                            conn.createStatement().execute("DROP VIEW IF EXISTS " + OLD_SYSTEM_TABLE_AS_VIEW_NAME);                        ],,upgradeMetaDataTo3_0,2250-2250,[                                newConn.createStatement().execute("DROP VIEW IF EXISTS " + OLD_SYSTEM_TABLE_AS_VIEW_NAME);                        ],,upgradeMetaDataTo3_0,2106-2106,[                ResultSet rs = conn.createStatement().executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,addColumnsIfNotExists,1413-1413,[            metaConnection.createStatement().executeUpdate("ALTER TABLE " + PhoenixDatabaseMetaData.SYSTEM_CATALOG + " ADD IF NOT EXISTS " + columns );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,upgradeMetaDataTo3_0,2077-2077,[                PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + SYSTEM_CATALOG_NAME + "(\n" +],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,515-522,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.addColumn(tenantId, tableName, columns, tableTimeStamp, tableSeqNum, isImmutableRows);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1539-1550,[                        HConstants.EMPTY_END_ROW, new Batch.Call<MetaDataService, ClearCacheResponse>() {,                     @Override,                     public ClearCacheResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<ClearCacheResponse> rpcCallback =,                                 new BlockingRpcCallback<ClearCacheResponse>();,                         ClearCacheRequest.Builder builder = ClearCacheRequest.newBuilder();,                         instance.clearCache(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1606-1621,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         instance.updateIndexState(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,539-546,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.removeColumn(tenantId, tableName, familyName, columnName, tableTimeStamp, tableSeqNum);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,912-924,[                    ht.coprocessorService(MetaDataService.class, null, null, new Batch.Call<MetaDataService,Long>() {,                         @Override,                         public Long call(MetaDataService instance) throws IOException {,                             ServerRpcController controller = new ServerRpcController();,                             BlockingRpcCallback<GetVersionResponse> rpcCallback =,                                     new BlockingRpcCallback<GetVersionResponse>();,                             GetVersionRequest.Builder builder = GetVersionRequest.newBuilder();,                             ,                             instance.getVersion(controller, builder.build(), rpcCallback);,                             if(controller.getFailedOn() != null) {,                                 throw controller.getFailedOn();,                             },                             return rpcCallback.get().getVersion();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1101-1116,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,             @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         CreateTableRequest.Builder builder = CreateTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         instance.createTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1128-1145,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     GetTableRequest.Builder builder = GetTableRequest.newBuilder();,                     builder.setTenantId(HBaseZeroCopyByteString.wrap(tenantIdBytes));,                     builder.setSchemaName(HBaseZeroCopyByteString.wrap(schemaBytes));,                     builder.setTableName(HBaseZeroCopyByteString.wrap(tableBytes));,                     builder.setTableTimestamp(tableTimestamp);,                     builder.setClientTimestamp(clientTimestamp);,                     ,                    instance.getTable(controller, builder.build(), rpcCallback);,                    if(controller.getFailedOn() != null) {,                        throw controller.getFailedOn();,                    },                    return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1159-1176,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         DropTableRequest.Builder builder = DropTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setTableType(tableType.getSerializedValue());,                         ,                         instance.dropTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1320-1336,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     AddColumnRequest.Builder builder = AddColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     ,                     instance.addColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1371-1386,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     DropColumnRequest.Builder builder = DropColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     instance.dropColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
STYLE,DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,<init>,1956-1956,[            Set<String> matchList = Sets.newHashSet();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionlessQueryServicesImpl.java,,117-135,[        return new StatsManager() {, ,             @Override,             public byte[] getMinKey(TableRef table) {,                 return HConstants.EMPTY_START_ROW;,             }, ,             @Override,             public byte[] getMaxKey(TableRef table) {,                 return HConstants.EMPTY_END_ROW;,             }, ,             @Override,             public void updateStats(TableRef table) throws SQLException {,             }, ,             @Override,             public void clearStats() throws SQLException {,             }],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/ConnectionlessUpsertTest.java,testConnectionlessUpsert,102-102,[        PreparedStatement statement = conn.prepareStatement(dmlStmt);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getLowerRange,262-262,[        return lowerRange;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getUpperRange,270-270,[        return upperRange;],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeCoalesceTests.java,,39-159,[    private static final Random RANDOM = new Random(1);,     private final List<KeyRange> expected, input;, ,     public KeyRangeCoalesceTests(List<KeyRange> expected, List<KeyRange> input) {,         this.expected = expected;,         this.input = input;,     }, ,     @Parameters(name="{0} coalesces to {1}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("Z"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("E"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PDataType.CHAR.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PDataType.CHAR.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("Z"), false),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                     EMPTY_RANGE,                 )},         });,     },     @Test,     public void coalesce() {,         assertEquals(expected, KeyRange.coalesce(input));,         List<KeyRange> tmp = new ArrayList<KeyRange>(input);,         Collections.reverse(tmp);,         assertEquals(expected, KeyRange.coalesce(input));,         Collections.shuffle(tmp, RANDOM);,         assertEquals(expected, KeyRange.coalesce(input));,     },     ,     private static final List<KeyRange> expect(KeyRange... kr) {,         return asList(kr);,     },     ,     private static final List<KeyRange> input(KeyRange... kr) {,         return asList(kr);],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeIntersectTests.java,,41-96,[    public KeyRangeIntersectTests(KeyRange a, KeyRange b, KeyRange intersection) {,         this.a = a;,         this.b = b;,         this.intersection = intersection;,     }, ,     @Parameters(name="intersection of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("E"), false),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,                 {,                     EVERYTHING_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EMPTY_RANGE,                 },,                 {,                     EMPTY_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,         });,     },     @Test,     public void intersect() {,         assertEquals(intersection, a.intersect(b));,         assertEquals(intersection, b.intersect(a));,     }],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeUnionTests.java,,41-96,[    public KeyRangeUnionTests(KeyRange a, KeyRange b, KeyRange union) {,         this.a = a;,         this.b = b;,         this.union = union;,     }, ,     @Parameters(name="union of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("F"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("F"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     EMPTY_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                 },,                 {,                     EVERYTHING_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EVERYTHING_RANGE,,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,         });,     },     @Test,     public void union() {,         assertEquals(union, a.union(b));,         assertEquals(union, b.union(a));,     }],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,123-123,[    public static final byte[] ARRAY_VALUE_COLUMN_FAMILY = Bytes.toBytes("a");],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,125-125,[    public static final byte[] ARRAY_VALUE_COLUMN_QUALIFIER = ByteUtil.EMPTY_BYTE_ARRAY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,189-189,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,140-140,[    public static final byte[] EMPTY_COLUMN_BYTES = Bytes.toBytes(EMPTY_COLUMN_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,100-100,[    public final static byte[] NAME_SEPARATOR_BYTES = Bytes.toBytes(NAME_SEPARATOR);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/KeyRange.java,,66-66,[    public static final KeyRange IS_NOT_NULL_RANGE = new KeyRange(ByteUtil.nextKey(QueryConstants.SEPARATOR_BYTE_ARRAY), true, UNBOUND, false);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,112-112,[    public final static byte[] SINGLE_COLUMN = SINGLE_COLUMN_NAME.getBytes();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixStatement.java,,297-297,[    private static final byte[] EXPLAIN_PLAN_FAMILY = QueryConstants.SINGLE_COLUMN_FAMILY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,127-127,[    public static final byte[] TRUE = new byte[] {1};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,119-119,[    public final static byte[] UNGROUPED_AGG_ROW_KEY = Bytes.toBytes("a");],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/query/QueryServicesOptions.java,,108-108,[    public static boolean DEFAULT_GROUPBY_SPILLABLE = true;],,
CORRECTNESS,GC_UNRELATED_TYPES,org/apache/phoenix/query/StatsManagerImpl.java,getStats,131-131,[        PTableStats stats = tableStatsMap.get(table);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/query/StatsManagerImpl.java,getStats,147-147,[                services.getExecutor().submit(new Callable<Void>() {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,dropColumn,1925-1925,[                    table = connection.getMetaDataCache().getTable(new PTableKey(tenantId, fullTableName));],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/MetaDataClient.java,getNewEmptyColumnFamilyOrNull,1758-1758,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,dropColumnMutations,1716-1716,[        connection.createStatement().execute(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1097-1104,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public byte[] getViewConstant() {,                                 return viewColumnConstants[columnPosition];,                             },                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1108-1111,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1718-1721,[        Collections.sort(columnsToDrop,new Comparator<PColumn> () {,             @Override,             public int compare(PColumn left, PColumn right) {,                return Ints.compare(left.getPosition(), right.getPosition());],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/PArrayDataType.java,createArrayBytes,398-398,[        return null;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PColumnImpl.java,getViewConstant,175-175,[        return viewConstant;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PDataType.java,compareTo,5393-5393,[                lhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PDataType.java,compareTo,5382-5382,[                rhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PDataType.java,getDecimalPrecisionAndScale,6699-6699,[            d /= 10;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PDataType.java,getJavaClassNameBytes,7026-7026,[        return clazzNameBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PDataType.java,getSqlTypeNameBytes,7030-7030,[        return sqlTypeNameBytes;],,
MALICIOUS_CODE,MS_EXPOSE_REP,org/apache/phoenix/schema/PDataType.java,getArrayFactory,7018-7018,[		return ARRAY_FACTORY;],,
MALICIOUS_CODE,MS_FINAL_PKGPROTECT,org/apache/phoenix/schema/PDataType.java,,6985-6985,[			.values().length];],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/PDataType.java,,6500-6500,[    public static final byte[] FALSE_BYTES = new byte[] {FALSE_BYTE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/PDataType.java,,6502-6502,[    public static final byte[] NULL_BYTES = ByteUtil.EMPTY_BYTE_ARRAY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/PDataType.java,,6501-6501,[    public static final byte[] TRUE_BYTES = new byte[] {TRUE_BYTE};],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,2007-2007,[                return -rhsType.compareTo(rhs, lhs, TIME);],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,2394-2394,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).longValue()));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,2799-2799,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).doubleValue()));],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/schema/PDataType.java,toObject,2921-2921,[                return null;],,toObject,2934-2934,[            return null;],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,492-492,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).longValue()));],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/schema/PArrayDataType.java,,47-582,[	public PArrayDataType() {, 	}, , 	public byte[] toBytes(Object object, PDataType baseType, SortOrder sortOrder) {, 		if(object == null) {, 			throw new ConstraintViolationException(this + " may not be null");, 		}, 		PhoenixArray arr = ((PhoenixArray)object);,         int noOfElements = arr.numElements;,         if(noOfElements == 0) {,         	return ByteUtil.EMPTY_BYTE_ARRAY;,         },         TrustedByteArrayOutputStream byteStream = null;, 		if (!baseType.isFixedWidth()) {, 	        Pair<Integer, Integer> nullsVsNullRepeationCounter = new Pair<Integer, Integer>();, 	        int size = estimateByteSize(object, nullsVsNullRepeationCounter,, 	                PDataType.fromTypeId((baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE)));, 		    size += ((2 * Bytes.SIZEOF_BYTE) + (noOfElements - nullsVsNullRepeationCounter.getFirst()) * Bytes.SIZEOF_BYTE), 		                                + (nullsVsNullRepeationCounter.getSecond() * 2 * Bytes.SIZEOF_BYTE);, 		    // Assume an offset array that fit into Short.MAX_VALUE.  Also not considering nulls that could be > 255, 		    // In both of these cases, finally an array copy would happen, 		    int capacity = noOfElements * Bytes.SIZEOF_SHORT;, 		    // Here the int for noofelements, byte for the version, int for the offsetarray position and 2 bytes for the end seperator,             byteStream = new TrustedByteArrayOutputStream(size + capacity + Bytes.SIZEOF_INT + Bytes.SIZEOF_BYTE +  Bytes.SIZEOF_INT);, 		} else {, 		    int size = arr.getMaxLength() * noOfElements;, 		    // Here the int for noofelements, byte for the version, 		    byteStream = new TrustedByteArrayOutputStream(size);, 		}, 		DataOutputStream oStream = new DataOutputStream(byteStream);, 		// Handles bit inversion also, 		return createArrayBytes(byteStream, oStream, (PhoenixArray)object, noOfElements, baseType, sortOrder);, 	}, 	,     public static int serializeNulls(DataOutputStream oStream, int nulls) throws IOException {,         // We need to handle 3 different cases here,         // 1) Arrays with repeating nulls in the middle which is less than 255,         // 2) Arrays with repeating nulls in the middle which is less than 255 but greater than bytes.MAX_VALUE,         // 3) Arrays with repeating nulls in the middle greaterh than 255,         // Take a case where we have two arrays that has the following elements,         // Array 1 - size : 240, elements = abc, bcd, null, null, bcd,null,null......,null, abc,         // Array 2 - size : 16 : elements = abc, bcd, null, null, bcd, null, null...null, abc,         // In both case the elements and the value array will be the same but the Array 1 is actually smaller because it has more nulls.,         // Now we should have mechanism to show that we treat arrays with more nulls as lesser.  Hence in the above case as ,         // 240 > Bytes.MAX_VALUE, by always inverting the number of nulls we would get a +ve value,         // For Array 2, by inverting we would get a -ve value.  On comparison Array 2 > Array 1.,         // Now for cases where the number of nulls is greater than 255, we would write an those many (byte)1, it is bigger than 255.,         // This would ensure that we don't compare with triple zero which is used as an end  byte,         if (nulls > 0) {,             oStream.write(QueryConstants.SEPARATOR_BYTE);,             int nMultiplesOver255 = nulls / 255;,             while (nMultiplesOver255-- > 0) {,                 // Don't write a zero byte, as we need to ensure that the only triple zero,                 // byte occurs at the end of the array (i.e. the terminator byte for the,                 // element plus the double zero byte at the end of the array).,                 oStream.write((byte)1); ,             },             int nRemainingNulls = nulls % 255; // From 0 to 254,             // Write a byte for the remaining null elements,             if (nRemainingNulls > 0) {,                 // Remaining null elements is from 1 to 254.,                 // Subtract one and invert so that more remaining nulls becomes smaller than less ,                 // remaining nulls and min byte value is always greater than 1, the repeating value  ,                 // used for arrays with more than 255 repeating null elements.,                 // The reason we invert is that  an array with less null elements has a non,                 // null element sooner than an array with more null elements. Thus, the more,                 // null elements you have, the smaller the array becomes.,                 byte nNullByte = SortOrder.invert((byte)(nRemainingNulls-1));,                 oStream.write(nNullByte); // Single byte for repeating nulls,             },         },         return 0;,     },  ,     public static void writeEndSeperatorForVarLengthArray(DataOutputStream oStream) throws IOException {,         oStream.write(QueryConstants.SEPARATOR_BYTE);,         oStream.write(QueryConstants.SEPARATOR_BYTE);,     }, , 	public static boolean useShortForOffsetArray(int maxOffset) {, 		// If the max offset is less than Short.MAX_VALUE then offset array can use short, 		if (maxOffset <= (2 * Short.MAX_VALUE)) {, 			return true;, 		}, 		// else offset array can use Int, 		return false;, 	}, , 	public int toBytes(Object object, byte[] bytes, int offset) {, 	    PhoenixArray array = (PhoenixArray)object;,         if (array == null || array.baseType == null) {,             return 0;,         },         return estimateByteSize(object, null, PDataType.fromTypeId((array.baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE)));, 	}, , 	// Estimates the size of the given array and also calculates the number of nulls and its repetition factor,     public int estimateByteSize(Object o, Pair<Integer, Integer> nullsVsNullRepeationCounter, PDataType baseType) {,         if (baseType.isFixedWidth()) { return baseType.getByteSize(); },         if (baseType.isArrayType()) {,             PhoenixArray array = (PhoenixArray)o;,             int noOfElements = array.numElements;,             int totalVarSize = 0;,             int nullsRepeationCounter = 0;,             int nulls = 0;,             int totalNulls = 0;,             for (int i = 0; i < noOfElements; i++) {,                 totalVarSize += array.estimateByteSize(i);,                 if (!PDataType.fromTypeId((baseType.getSqlType() - PDataType.ARRAY_TYPE_BASE)).isFixedWidth()) {,                     if (array.isNull(i)) {,                         nulls++;,                     } else {,                         if (nulls > 0) {,                             totalNulls += nulls;,                             nulls = 0;,                             nullsRepeationCounter++;,                         },                     },                 },             },             if (nullsVsNullRepeationCounter != null) {,                 if (nulls > 0) {,                     totalNulls += nulls;,                     // do not increment nullsRepeationCounter to identify trailing nulls,                 },                 nullsVsNullRepeationCounter.setFirst(totalNulls);,                 nullsVsNullRepeationCounter.setSecond(nullsRepeationCounter);,             },             return totalVarSize;,         },         // Non fixed width types must override this,         throw new UnsupportedOperationException();,     },     , 	public boolean isCoercibleTo(PDataType targetType, Object value) {, 	    return targetType.isCoercibleTo(targetType, value);, 	}, 	, 	public boolean isCoercibleTo(PDataType targetType, PDataType expectedTargetType) {, 		if(!targetType.isArrayType()) {, 			return false;, 		} else {, 			PDataType targetElementType = PDataType.fromTypeId(targetType.getSqlType(), 					- PDataType.ARRAY_TYPE_BASE);, 			PDataType expectedTargetElementType = PDataType.fromTypeId(expectedTargetType, 					.getSqlType() - PDataType.ARRAY_TYPE_BASE);, 			return expectedTargetElementType.isCoercibleTo(targetElementType);, 		},     }, 	, 	public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value,, 			PDataType srcType, Integer maxLength, Integer scale,, 			Integer desiredMaxLength, Integer desiredScale) {,         if (value == null) return true;, 		PhoenixArray pArr = (PhoenixArray) value;, 		Object[] arr = (Object[]) pArr.array;, 		PDataType baseType = PDataType.fromTypeId(srcType.getSqlType(), 				- PDataType.ARRAY_TYPE_BASE);, 		for (int i = 0 ; i < arr.length; i++) {, 			if (!baseType.isSizeCompatible(ptr, arr[i], baseType, srcType.getMaxLength(arr[i]),, 					scale, desiredMaxLength, desiredScale)) {, 				return false;, 			}, 		}, 		return true;, 	}, 	,     public void coerceBytes(ImmutableBytesWritable ptr, Object value, PDataType actualType, Integer maxLength,,             Integer scale, Integer desiredMaxLength, Integer desiredScale, PDataType desiredType,,             SortOrder actualModifer, SortOrder expectedModifier) {,         if (ptr.getLength() == 0) { // a zero length ptr means null which will not be coerced to anything different,             return;,         },         PDataType baseType = PDataType.fromTypeId(actualType.getSqlType() - PDataType.ARRAY_TYPE_BASE);,         PDataType desiredBaseType = PDataType.fromTypeId(desiredType.getSqlType() - PDataType.ARRAY_TYPE_BASE);,         if ((Objects.equal(maxLength, desiredMaxLength) || maxLength == null || desiredMaxLength == null),                 && actualType.isBytesComparableWith(desiredType),                 && baseType.isFixedWidth() == desiredBaseType.isFixedWidth() && actualModifer == expectedModifier) { ,             return; ,         },         if (value == null || actualType != desiredType) {,             value = toObject(ptr.get(), ptr.getOffset(), ptr.getLength(), baseType, actualModifer, maxLength,,                     desiredScale, desiredBaseType);,             PhoenixArray pArr = (PhoenixArray)value;,             // VARCHAR <=> CHAR,             if(baseType.isFixedWidth() != desiredBaseType.isFixedWidth()) {,                 if (!pArr.isPrimitiveType()) {,                     pArr = new PhoenixArray(pArr, desiredMaxLength);,                 },             },             baseType = desiredBaseType;,             ptr.set(toBytes(pArr, baseType, expectedModifier));,         } else {,             PhoenixArray pArr = (PhoenixArray)value;,             pArr = new PhoenixArray(pArr, desiredMaxLength);,             ptr.set(toBytes(pArr, baseType, expectedModifier));,         },     }, , ,     public Object toObject(String value) {, 		throw new IllegalArgumentException("This operation is not suppported");, 	}, , 	public Object toObject(byte[] bytes, int offset, int length, PDataType baseType, , 			SortOrder sortOrder, Integer maxLength, Integer scale, PDataType desiredDataType) {, 		return createPhoenixArray(bytes, offset, length, sortOrder,, 				baseType, maxLength, desiredDataType);, 	}, ,     public static void positionAtArrayElement(ImmutableBytesWritable ptr, int arrayIndex, PDataType baseDataType,,             Integer byteSize) {,         byte[] bytes = ptr.get();,         int initPos = ptr.getOffset();,         if (!baseDataType.isFixedWidth()) {,             int noOfElements = Bytes.toInt(bytes, (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)),,                     Bytes.SIZEOF_INT);,             boolean useShort = true;,             if (noOfElements < 0) {,                 noOfElements = -noOfElements;,                 useShort = false;,             },             if (arrayIndex >= noOfElements) {,                 ptr.set(ByteUtil.EMPTY_BYTE_ARRAY);,                 return;,             }, ,             int indexOffset = Bytes.toInt(bytes,,                     (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + 2 * Bytes.SIZEOF_INT))) + ptr.getOffset();,             if(arrayIndex >= noOfElements) {,                 ptr.set(ByteUtil.EMPTY_BYTE_ARRAY);,             } else {,                 // Skip those many offsets as given in the arrayIndex,                 // If suppose there are 5 elements in the array and the arrayIndex = 3,                 // This means we need to read the 4th element of the array,                 // So inorder to know the length of the 4th element we will read the offset of 4th element and the,                 // offset of 5th element.,                 // Subtracting the offset of 5th element and 4th element will give the length of 4th element,                 // So we could just skip reading the other elements.,                 int currOffset = getOffset(bytes, arrayIndex, useShort, indexOffset);,                 int elementLength = 0;,                 if (arrayIndex == (noOfElements - 1)) {,                     elementLength = bytes[currOffset + initPos] == QueryConstants.SEPARATOR_BYTE ? 0 : indexOffset,                             - (currOffset + initPos) - 3;,                 } else {,                     elementLength = bytes[currOffset + initPos] == QueryConstants.SEPARATOR_BYTE ? 0 : getOffset(bytes,,                             arrayIndex + 1, useShort, indexOffset) - currOffset - 1;,                 },                 ptr.set(bytes, currOffset + initPos, elementLength);,             },         } else {,             int elemByteSize = (byteSize == null ? baseDataType.getByteSize() : byteSize);,             int offset = arrayIndex * elemByteSize;,             if (offset >= ptr.getLength()) {,                 ptr.set(ByteUtil.EMPTY_BYTE_ARRAY);,             } else {,                 ptr.set(bytes, ptr.getOffset() + offset, elemByteSize);,             },         },     }, ,     private static int getOffset(byte[] bytes, int arrayIndex, boolean useShort, int indexOffset) {,         int offset;,         if (useShort) {,             offset = indexOffset + (Bytes.SIZEOF_SHORT * arrayIndex);,             return Bytes.toShort(bytes, offset, Bytes.SIZEOF_SHORT) + Short.MAX_VALUE;,         } else {,             offset = indexOffset + (Bytes.SIZEOF_INT * arrayIndex);,             return Bytes.toInt(bytes, offset, Bytes.SIZEOF_INT);,         },     },     ,     private static int getOffset(ByteBuffer indexBuffer, int arrayIndex, boolean useShort, int indexOffset ) {,         int offset;,         if(useShort) {,             offset = indexBuffer.getShort() + Short.MAX_VALUE;,         } else {,             offset = indexBuffer.getInt();,         },         return offset;,     }, , 	public Object toObject(Object object, PDataType actualType) {, 		return object;, 	}, , 	public Object toObject(Object object, PDataType actualType, SortOrder sortOrder) {, 		// How to use the sortOrder ? Just reverse the elements, 		return toObject(object, actualType);, 	}, 	, 	/**, 	 * creates array bytes, 	 * @param byteStream, 	 * @param oStream, 	 * @param array, 	 * @param noOfElements, 	 * @param baseType, 	 * @param sortOrder , 	 * @param maxLength , 	 * @param capacity, 	 * @return, 	 */,     private byte[] createArrayBytes(TrustedByteArrayOutputStream byteStream, DataOutputStream oStream,,             PhoenixArray array, int noOfElements, PDataType baseType, SortOrder sortOrder) {,         try {,             if (!baseType.isFixedWidth()) {,                 int[] offsetPos = new int[noOfElements];,                 int nulls = 0;,                 for (int i = 0; i < noOfElements; i++) {,                     byte[] bytes = array.toBytes(i);,                     if (bytes.length == 0) {,                         offsetPos[i] = byteStream.size();,                         nulls++;,                     } else {,                         nulls = serializeNulls(oStream, nulls);,                         offsetPos[i] = byteStream.size();,                         if (sortOrder == SortOrder.DESC) {,                             SortOrder.invert(bytes, 0, bytes, 0, bytes.length);,                         },                         oStream.write(bytes, 0, bytes.length);,                         oStream.write(QueryConstants.SEPARATOR_BYTE);,                     },                 },                 // Double seperator byte to show end of the non null array,                 PArrayDataType.writeEndSeperatorForVarLengthArray(oStream);,                 noOfElements = PArrayDataType.serailizeOffsetArrayIntoStream(oStream, byteStream, noOfElements,,                         offsetPos[offsetPos.length - 1], offsetPos);,                 serializeHeaderInfoIntoStream(oStream, noOfElements);,             } else {,                 for (int i = 0; i < noOfElements; i++) {,                     byte[] bytes = array.toBytes(i);,                     int length = bytes.length;,                     if (sortOrder == SortOrder.DESC) {,                         SortOrder.invert(bytes, 0, bytes, 0, bytes.length);,                     },                     oStream.write(bytes, 0, length);,                 },             },             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             ptr.set(byteStream.getBuffer(), 0, byteStream.size());,             return ByteUtil.copyKeyBytesIfNecessary(ptr);,         } catch (IOException e) {,             try {,                 byteStream.close();,                 oStream.close();,             } catch (IOException ioe) {, ,             },         },         // This should not happen,         return null;,     }, ,     public static int serailizeOffsetArrayIntoStream(DataOutputStream oStream, TrustedByteArrayOutputStream byteStream,,             int noOfElements, int maxOffset, int[] offsetPos) throws IOException {,         int offsetPosition = (byteStream.size());,         byte[] offsetArr = null;,         boolean useInt = true;,         if (PArrayDataType.useShortForOffsetArray(maxOffset)) {,             offsetArr = new byte[PArrayDataType.initOffsetArray(noOfElements, Bytes.SIZEOF_SHORT)];,             useInt = false;,         } else {,             offsetArr = new byte[PArrayDataType.initOffsetArray(noOfElements, Bytes.SIZEOF_INT)];,             noOfElements = -noOfElements;,         },         int off = 0;,         if(useInt) {,             for (int pos : offsetPos) {,                 Bytes.putInt(offsetArr, off, pos);,                 off += Bytes.SIZEOF_INT;,             },         } else {,             for (int pos : offsetPos) {,                 Bytes.putShort(offsetArr, off, (short)(pos - Short.MAX_VALUE));,                 off += Bytes.SIZEOF_SHORT;,             },         },         oStream.write(offsetArr);,         oStream.writeInt(offsetPosition);,         return noOfElements;,     }, ,     public static void serializeHeaderInfoIntoBuffer(ByteBuffer buffer, int noOfElements) {,         // No of elements,         buffer.putInt(noOfElements);,         // Version of the array,         buffer.put(ARRAY_SERIALIZATION_VERSION);,     }, ,     public static void serializeHeaderInfoIntoStream(DataOutputStream oStream, int noOfElements) throws IOException {,         // No of elements,         oStream.writeInt(noOfElements);,         // Version of the array,         oStream.write(ARRAY_SERIALIZATION_VERSION);,     }, , 	public static int initOffsetArray(int noOfElements, int baseSize) {, 		// for now create an offset array equal to the noofelements, 		return noOfElements * baseSize;,     }, ,     // Any variable length array would follow the below order,     // Every element would be seperated by a seperator byte '0',     // Null elements are counted and once a first non null element appears we,     // write the count of the nulls prefixed with a seperator byte,     // Trailing nulls are not taken into account,     // The last non null element is followed by two seperator bytes,     // For eg,     // a, b, null, null, c, null would be ,     // 65 0 66 0 0 2 67 0 0 0,     // a null null null b c null d would be,     // 65 0 0 3 66 0 67 0 0 1 68 0 0 0, 	// Follow the above example to understand how this works,     private Object createPhoenixArray(byte[] bytes, int offset, int length, SortOrder sortOrder,,             PDataType baseDataType, Integer maxLength, PDataType desiredDataType) {,         if (bytes == null || bytes.length == 0) { return null; },         Object[] elements;,         if (!baseDataType.isFixedWidth()) {,             ByteBuffer buffer = ByteBuffer.wrap(bytes, offset, length);,             int initPos = buffer.position();,             buffer.position((buffer.limit() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)));,             int noOfElements = buffer.getInt();,             boolean useShort = true;,             int baseSize = Bytes.SIZEOF_SHORT;,             if (noOfElements < 0) {,                 noOfElements = -noOfElements;,                 baseSize = Bytes.SIZEOF_INT;,                 useShort = false;,             },             if (baseDataType == desiredDataType) {,                 elements = (Object[])java.lang.reflect.Array.newInstance(baseDataType.getJavaClass(), noOfElements);,             } else {,                 elements = (Object[])java.lang.reflect.Array.newInstance(desiredDataType.getJavaClass(), noOfElements);,             },             buffer.position(buffer.limit() - (Bytes.SIZEOF_BYTE + (2 * Bytes.SIZEOF_INT)));,             int indexOffset = buffer.getInt();,             buffer.position(initPos);,             buffer.position(indexOffset + initPos);,             ByteBuffer indexArr = ByteBuffer.allocate(initOffsetArray(noOfElements, baseSize));,             byte[] array = indexArr.array();,             buffer.get(array);,             int countOfElementsRead = 0;,             int i = 0;,             int currOffset = -1;,             int nextOff = -1;,             boolean foundNull = false;,             if (noOfElements != 0) {,                 while (countOfElementsRead <= noOfElements) {,                     if (countOfElementsRead == 0) {,                         currOffset = getOffset(indexArr, countOfElementsRead, useShort, indexOffset);,                         countOfElementsRead++;,                     } else {,                         currOffset = nextOff;,                     },                     if (countOfElementsRead == noOfElements) {,                         nextOff = indexOffset - 2;,                     } else {,                         nextOff = getOffset(indexArr, countOfElementsRead + 1, useShort, indexOffset);,                     },                     countOfElementsRead++;,                     if ((bytes[currOffset + initPos] != QueryConstants.SEPARATOR_BYTE) && foundNull) {,                         // Found a non null element,                         foundNull = false;,                     },                     if (bytes[currOffset + initPos] == QueryConstants.SEPARATOR_BYTE) {,                         // Null element,                         foundNull = true;,                         i++;,                         continue;,                     },                     int elementLength = nextOff - currOffset;,                     buffer.position(currOffset + initPos);,                     // Subtract the seperator from the element length,                     byte[] val = new byte[elementLength - 1];,                     buffer.get(val);,                     if (baseDataType == desiredDataType) {,                         elements[i++] = baseDataType.toObject(val, sortOrder);,                     } else {,                         elements[i++] = desiredDataType.toObject(val, sortOrder, baseDataType);,                     },                 },             },         } else {,             int elemLength = (maxLength == null ? baseDataType.getByteSize() : maxLength);,             int noOfElements = length / elemLength;,             if (baseDataType == desiredDataType) {,                 elements = (Object[])java.lang.reflect.Array.newInstance(baseDataType.getJavaClass(), noOfElements);,             } else {,                 elements = (Object[])java.lang.reflect.Array.newInstance(desiredDataType.getJavaClass(), noOfElements);,             },             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             for (int i = 0; i < noOfElements; i++) {,                 ptr.set(bytes, offset + i * elemLength, elemLength);,                 if (baseDataType == desiredDataType) {,                     elements[i] = baseDataType.toObject(ptr, sortOrder);,                 } else {,                     elements[i] = desiredDataType.toObject(ptr, baseDataType, sortOrder);,                 },             },         },         if(baseDataType == desiredDataType) {,             return PArrayDataType.instantiatePhoenixArray(baseDataType, elements);,         } else {,             return PArrayDataType.instantiatePhoenixArray(desiredDataType, elements);,         },     }, 	,     public static PhoenixArray instantiatePhoenixArray(PDataType actualType, Object[] elements) {,         return PDataType.instantiatePhoenixArray(actualType, elements);,     }, 	, 	public int compareTo(Object lhs, Object rhs) {, 		PhoenixArray lhsArr = (PhoenixArray) lhs;, 		PhoenixArray rhsArr = (PhoenixArray) rhs;, 		if(lhsArr.equals(rhsArr)) {, 			return 0;, 		}, 		return 1;, 	}, , 	public static int getArrayLength(ImmutableBytesWritable ptr,, 			PDataType baseType, Integer maxLength) {, 		byte[] bytes = ptr.get();, 		if(baseType.isFixedWidth()) {, 		    int elemLength = maxLength == null ? baseType.getByteSize() : maxLength;, 			return (ptr.getLength() / elemLength);, 		}, 		return Bytes.toInt(bytes, (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)));, 	}, ,     public static int estimateSize(int size, PDataType baseType) {,         if(baseType.isFixedWidth()) {,             return baseType.getByteSize() * size;,         } else {,             return size * ValueSchema.ESTIMATED_VARIABLE_LENGTH_SIZE;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,toObject,535-535,[            if (!(o instanceof Long) || o == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,toObject,693-693,[          if (!(o instanceof Long) || o == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,toObject,835-835,[          if(!(o instanceof Long) || o == null) {],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,1074-1074,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).doubleValue()));],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/PDataType.java,isSizeCompatible,1538-1538,[                maxLength = v.precision();],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/PDataType.java,isSizeCompatible,1539-1539,[                scale = v.scale();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/PDataType.java,coerceBytes,1559-1559,[                super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength, desiredScale, expectedModifier);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,isSizeCompatible,1545-1545,[            if (desiredMaxLength != null && desiredScale != null && maxLength != null && scale != null &&],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/schema/PDataType.java,isCoercibleTo,1487-1487,[                        } catch(Exception e) {],,isCoercibleTo,1498-1498,[                        } catch(Exception e) {],,isCoercibleTo,1507-1507,[                        } catch(Exception e) {],,isCoercibleTo,1516-1516,[                        } catch(Exception e) {],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,1428-1428,[            return -rhsType.compareTo(rhs, lhs, this);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6029-6032,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveBytePhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6448-6452,[            return new PhoenixArrayFactory() {,                 ,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6372-6375,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveDoublePhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6260-6263,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveFloatPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,5823-5826,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveIntPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,5712-5715,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveLongPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,5931-5934,[          return new PhoenixArrayFactory() {,               @Override,               public PhoenixArray newArray(PDataType type, Object[] elements) {,                   return new PhoenixArray.PrimitiveShortPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6470-6474,[            return new PhoenixArrayFactory() {,                 ,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray(type, elements);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testVariableLengthArrayWithElementsMoreThanShortMax,313-313,[	            str += "-";],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,getSerializedBytes,45-45,[        return serializedBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,toBytes,49-49,[        return nameBytesValue;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PMetaDataImpl.java,,169-183,[            return new Iterator<PTable>() {, ,                 @Override,                 public boolean hasNext() {,                     return iterator.hasNext();,                 }, ,                 @Override,                 public PTable next() {,                     return iterator.next().table;,                 }, ,                 @Override,                 public void remove() {,                     throw new UnsupportedOperationException();],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/schema/PNameImpl.java,getBytesPtr,74-76,[        if (data.ptr == null) {,             synchronized (data.bytesName) {,                 if (data.ptr == null) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,102-102,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,54-54,[            return byteValue;],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,231-231,[		if (this.numElements != ((PhoenixArray) obj).numElements) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PhoenixArray.java,boundaryCheck,156-156,[		if ((--index) + count > arr.length) {],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,231-237,[		if (this.numElements != ((PhoenixArray) obj).numElements) {, 			return false;, 		}, 		if (this.baseType != ((PhoenixArray) obj).baseType) {, 			return false;, 		}, 		return Arrays.deepEquals((Object[]) this.array,],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/schema/PhoenixArray.java,<init>,96-96,[		this.numElements = elements.length;],,<init>,88-88,[    		    if (elements != null && elements.length > 0) {],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,541-541,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,526-526,[			return booleanArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,541-547,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((boolean[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,541-547,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((boolean[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,531-531,[			return this.baseType.estimateByteSize(booleanArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,536-536,[			return this.baseType.toBytes(booleanArr[pos]);],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,498-498,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,483-483,[			return byteArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,498-504,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((byte[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,498-504,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((byte[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,488-488,[			return this.baseType.estimateByteSize(byteArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,493-493,[			return this.baseType.toBytes(byteArr[pos]);],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,412-412,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,397-397,[			return doubleArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,412-418,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((double[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,412-418,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((double[]) this.array,],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,455-455,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,440-440,[			return floatArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,455-461,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((float[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,455-461,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((float[]) this.array,],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,283-283,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,268-268,[			return intArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,283-289,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((int[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,283-289,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((int[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,273-273,[			return this.baseType.estimateByteSize(intArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,278-278,[			return this.baseType.toBytes(intArr[pos]);],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,368-368,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,354-354,[			return longArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,368-374,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((long[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,368-374,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((long[]) this.array,],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,326-326,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,311-311,[			return shortArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,326-332,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((short[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,326-332,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((short[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,316-316,[			return this.baseType.estimateByteSize(shortArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,321-321,[			return this.baseType.toBytes(shortArr[pos]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,56-56,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,65-65,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,52-52,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,61-61,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getSchemaName,67-67,[            c = this.schemaName == that.getSchemaName() ? 0 : this.schemaName == null ? -1 : that.getSchemaName() == null ? 1 : this.schemaName.compareTo(that.getSchemaName());],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getTenantId,65-65,[        int c = this.tenantId == that.getTenantId() ? 0 : this.tenantId == null ? -1 : that.getTenantId() == null ? 1 : this.tenantId.compareTo(that.getTenantId());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/schema/SortOrderTest.java,descSortOrderTransformsOp,59-79,[	    	switch (op) {, 			case EQUAL:, 				assertSame(CompareOp.EQUAL, oppositeOp);, 				break;, 			case GREATER:, 				assertSame(CompareOp.LESS, oppositeOp);, 				break;, 			case GREATER_OR_EQUAL:, 				assertSame(CompareOp.LESS_OR_EQUAL, oppositeOp);, 				break;, 			case LESS:, 				assertSame(CompareOp.GREATER, oppositeOp);, 				break;, 			case LESS_OR_EQUAL:, 				assertSame(CompareOp.GREATER_OR_EQUAL, oppositeOp);, 				break;, 			case NOT_EQUAL:, 				assertSame(CompareOp.NOT_EQUAL, oppositeOp);, 				break;, 			case NO_OP:, 				assertSame(CompareOp.NO_OP, oppositeOp);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/ValueBitSetTest.java,,35-54,[                PDatum datum = new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return fieldIndex <= nNotNull;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.values()[fieldIndex % PDataType.values().length];,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     }, 					@Override, 					public SortOrder getSortOrder() {, 						return SortOrder.getDefault();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/tuple/SingleKeyValueTuple.java,toString,86-86,[        return "SingleKeyValueTuple[" + keyValue == null ? keyPtr.get() == UNITIALIZED_KEY_BUFFER ? "null" : Bytes.toStringBinary(keyPtr.get(),keyPtr.getOffset(),keyPtr.getLength()) : keyValue.toString() + "]";],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/Base62Encoder.java,,25-25,[    public static final char[] digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/BitSet.java,<init>,110-110,[        this.bits = bits;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,nextKey,394-394,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,previousKey,435-435,[            return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/GeneratePerformanceData.java,main,54-54,[                        "\n").getBytes());],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/IndexUtil.java,,49-49,[    public static final byte[] INDEX_COLUMN_NAME_SEP_BYTES = Bytes.toBytes(INDEX_COLUMN_NAME_SEP);],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/phoenix/util/KeyValueUtil.java,,165-205,[	private static class SearchComparator implements Comparator<Cell> {, 	  private final KeyValueBuilder kvBuilder;,     private final byte[] row;,     private final byte[] family;,     private final byte[] qualifier;,     private final int rowOff;,     private final int rowLen;, ,     public SearchComparator(KeyValueBuilder kvBuilder, byte[] r, int rOff, int rLen, byte[] f, byte[] q) {,       this.kvBuilder = kvBuilder;,       row = r;,       family = f;,       qualifier = q;,       rowOff = rOff;,       rowLen = rLen;,     }, , 		@Override,     public int compare(final Cell l, final Cell ignored) {, 			assert ignored == null;,       KVComparator comparator = kvBuilder.getKeyValueComparator();, 			// row, 			int val = comparator.compareRows(l.getRowArray(), l.getRowOffset(), , 			  l.getRowLength(), row, rowOff, rowLen);, 			if (val != 0) {, 				return val;, 			}, 			// family, 			val = kvBuilder.compareFamily(l, family, 0, family.length);, 			if (val != 0) {, 				return val;, 			}, 			// qualifier,       val = kvBuilder.compareQualifier(l, qualifier, 0, qualifier.length);, 			if (val != 0) {, 				return val;, 			}, 			// We want the latest TS and type, so we get the first one., 			// This assumes they KV are passed in ordered from latest to earliest,, 			// as that's the order the server sends them., 			return 1;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,286-286,[    public static final byte[] IS_VIEW_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_VIEW_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,50-50,[    public static final byte[] VIEW_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,52-52,[    public static final byte[] VIEW_INDEX_SEQUENCE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_SEQUENCE_PREFIX);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/MetaDataUtil.java,getParentTableName,118-118,[            return null;],,getParentTableName,126-126,[            return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/MetaDataUtil.java,deleteViewIndexSequences,279-279,[        connection.createStatement().executeUpdate("DELETE FROM " + PhoenixDatabaseMetaData.SEQUENCE_TABLE_NAME + ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/PhoenixContextExecutorTest.java,,35-41,[            PhoenixContextExecutor.callWithoutPropagation(new Callable<Object>() {,                 @Override,                 public Object call() {,                     assertEquals(,                             PhoenixContextExecutor.class.getClassLoader(),,                             Thread.currentThread().getContextClassLoader());,                     return null;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/PhoenixRuntime.java,getColumnInfo,355-355,[        columnName = columnName.trim().toUpperCase(); ],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/PhoenixRuntime.java,main,141-141,[                    PhoenixRuntime.executeStatements(conn,],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/util/PhoenixRuntime.java,usageError,596-596,[            System.exit(-1);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/util/QueryUtil.java,apply,92-92,[                                        return getEscapedFullColumnName(columnInfo.getColumnName());],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ScanUtil.java,newScan,83-83,[            TreeMap<byte [], NavigableSet<byte []>> existingMap = (TreeMap<byte[], NavigableSet<byte[]>>)scan.getFamilyMap();],,
CORRECTNESS,EC_BAD_ARRAY_COMPARE,org/apache/phoenix/util/ScanUtil.java,isReversed,415-415,[        return (PDataType.TRUE_BYTES.equals(reversed));],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ScanUtil.java,getKey,210-210,[            return null;],,getKey,222-222,[            return null;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/ScanUtilTest.java,<init>,107-107,[        this.expectedKey = expectedKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,58-77,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.CHAR;,                     },                     @Override,                     public Integer getMaxLength() {,                         return width;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,81-100,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.VARCHAR;,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/SchemaUtil.java,normalizeIdentifier,141-141,[        return name.toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/SchemaUtil.java,addMetaDataColumn,457-457,[                stmt.executeUpdate("ALTER TABLE SYSTEM.\"TABLE\" ADD IF NOT EXISTS " + columnDef);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,44-44,[    public final static String[] LIKE_ESCAPE_SEQS = new String[]{"\\"+SINGLE_CHAR_LIKE, "\\"+MULTI_CHAR_LIKE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,45-45,[    public final static String[] LIKE_UNESCAPED_SEQS = new String[]{""+SINGLE_CHAR_LIKE, ""+MULTI_CHAR_LIKE};],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/StringUtilTest.java,testLpad,26-26,[        byte[] input = inputString.getBytes();],,testLpad,27-27,[        byte[] fill = fillString.getBytes();],,testLpad,29-29,[        assertArrayEquals("Incorrect output of lpad", expectedOutput.getBytes(), output);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,138-138,[    public final static List<String> ENTITYHISTIDS = Lists.newArrayList(ENTITYHISTID1, ENTITYHISTID2, ENTITYHISTID3, ENTITYHISTID4, ENTITYHISTID5, ENTITYHISTID6, ENTITYHISTID7, ENTITYHISTID8, ENTITYHISTID9);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,126-126,[    public final static List<String> PARENTIDS = Lists.newArrayList(PARENTID1, PARENTID2, PARENTID3, PARENTID4, PARENTID5, PARENTID6, PARENTID7, PARENTID8, PARENTID9);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,192-192,[    public static final Properties TEST_PROPERTIES = new Properties();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,96-96,[    public final static byte[] A = Bytes.toBytes(A_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,98-98,[    public final static byte[] B = Bytes.toBytes(B_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,100-100,[    public final static byte[] C = Bytes.toBytes(C_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,91-91,[    public static final byte[] CF = Bytes.toBytes(CF_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,102-102,[    public final static byte[] D = Bytes.toBytes(D_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,104-104,[    public final static byte[] E = Bytes.toBytes(E_VALUE);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,createTable,410-410,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,upsertRow,385-385,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,getBuffer,36-36,[        return buf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,toByteArray,41-41,[            return buf;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,testExecute_NullField,125-125,[        verify(preparedStatement).setNull(3, columnInfoList.get(2).getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,tearDown,73-73,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,tearDown,47-47,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_EmptyString,52-52,[        Array emptyArray = converter.toArray("");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_MultipleElements,67-67,[        Array multiElementArray = converter.toArray("one:two");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_SingleElement,59-59,[        Array singleElementArray = converter.toArray("value");],,

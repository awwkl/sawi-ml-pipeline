CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/hadoop/hbase/ipc/PhoenixIndexRpcSchedulerTest.java,testIndexPriorityWritesToIndexHandler,52-52,[        queue.poll(20, TimeUnit.SECONDS);],,testIndexPriorityWritesToIndexHandler,58-58,[        queue.poll(20, TimeUnit.SECONDS);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,114-114,[        this.viewConstants = viewConstants;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,88-88,[        this.viewConstants = viewConstants;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,midkey,446-446,[        return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReaderGenerator.java,preStoreFileReaderOpen,86-86,[                if (result == null || result.isEmpty()) return reader;],,preStoreFileReaderOpen,107-107,[                if(indexMaintainers.isEmpty()) return reader;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReaderGenerator.java,preStoreFileReaderOpen,78-78,[            if(scvf != null) scan.setFilter(scvf);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,<init>,159-159,[    this.splitrow = splitrow;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,createDaughters,287-287,[      if (metaEntries == null || metaEntries.isEmpty()) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,getZKNode,547-547,[    } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,transitionZKNode,468-468,[      } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/hadoop/hbase/regionserver/wal/IndexedWALEditCodec.java,,113-136,[    public CompressedIndexKeyValueDecoder(InputStream is, Decoder compressedDecoder) {,       super(is);,       this.decoder = compressedDecoder;,     }, ,     @Override,     protected Cell parseCell() throws IOException {,       // reader the marker,       int marker = this.in.read();,       if (marker < 0) {,         throw new EOFException(,             "Unexepcted end of stream found while reading next (Indexed) KeyValue");,       }, ,       // do the normal thing, if its a regular kv,       if (marker == REGULAR_KEY_VALUE_MARKER) {,         if (!this.decoder.advance()) {,           throw new IOException("Could not read next key-value from generic KeyValue Decoder!");,         },         return this.decoder.current();,       }, ,       // its an indexedKeyValue, so parse it out specially,       return KeyValueCodec.readKeyValue((DataInput) this.in);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/hadoop/hbase/regionserver/wal/IndexedWALEditCodec.java,,85-98,[  public class IndexKeyValueDecoder extends BaseDecoder {, ,     /**,      * Create a Decoder on the given input stream with the given Decoder to parse,      * generic {@link KeyValue}s.,      * @param is stream to read from,      */,     public IndexKeyValueDecoder(InputStream is){,       super(is);,     }, ,     @Override,     protected KeyValue parseCell() throws IOException{,       return KeyValueCodec.readKeyValue((DataInput) this.in);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,setUp,92-100,[    setupCluster();,     this.conf = HBaseConfiguration.create(UTIL.getConfiguration());,     this.fs = UTIL.getDFSCluster().getFileSystem();,     this.hbaseRootDir = new Path(this.conf.get(HConstants.HBASE_DIR));,     this.oldLogDir = new Path(this.hbaseRootDir, HConstants.HREGION_OLDLOGDIR_NAME);,     this.logDir = new Path(this.hbaseRootDir, HConstants.HREGION_LOGDIR_NAME);,     // reset the log reader to ensure we pull the one from this config,     HLogFactory.resetLogReaderClass();,   }],,setup,125-133,[        HTableDescriptor desc =,                 new HTableDescriptor(org.apache.hadoop.hbase.TableName.valueOf(TestTable,                         .getTableNameString()));,         desc.addFamily(FAM1);, ,         // create the table,         HBaseAdmin admin = UTIL.getHBaseAdmin();,         admin.createTable(desc);,     }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,deleteDir,149-149,[    if (this.fs.exists(p)) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/arithmetic/ArithmeticOperationTest.java,testDecimalDivision,298-298,[            evaluated = e.evaluate(null, ptr);],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/cache/GlobalCache.java,getInstance,100-103,[        if (result == null) {,             synchronized(GlobalCache.class) {,                 result = INSTANCE;,                 if(result == null) {],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/cache/GlobalCache.java,getMetaDataCache,71-74,[        if (result == null) {,             synchronized(this) {,                 result = metaDataCache;,                 if(result == null) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/cache/GlobalCache.java,,70-70,[        Cache<ImmutableBytesPtr,PTable> result = metaDataCache;],,,73-73,[                result = metaDataCache;],,,91-91,[                            .build();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/GlobalCache.java,,85-88,[                            .weigher(new Weigher<ImmutableBytesPtr, PTable>() {,                                 @Override,                                 public int weigh(ImmutableBytesPtr key, PTable table) {,                                     return SizedUtil.IMMUTABLE_BYTES_PTR_SIZE + key.getLength() + table.getEstimatedSize();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/cache/ServerCacheClient.java,removeServerCache,321-321,[				Map<String, String> customAnnotations = emptyMap();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/cache/ServerCacheClient.java,removeServerCache,274-327,[    	ConnectionQueryServices services = connection.getQueryServices();,     	Throwable lastThrowable = null;,     	TableRef cacheUsingTableRef = cacheUsingTableRefMap.get(Bytes.mapKey(cacheId));,     	byte[] tableName = cacheUsingTableRef.getTable().getPhysicalName().getBytes();,     	HTableInterface iterateOverTable = services.getTable(tableName);,     	try {,     		List<HRegionLocation> locations = services.getAllTableRegions(tableName);,     		Set<HRegionLocation> remainingOnServers = new HashSet<HRegionLocation>(servers);,     		/**,     		 * Allow for the possibility that the region we based where to send our cache has split and been,     		 * relocated to another region server *after* we sent it, but before we removed it. To accommodate,     		 * this, we iterate through the current metadata boundaries and remove the cache once for each,     		 * server that we originally sent to.,     		 */,     		if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Removing Cache " + cacheId + " from servers.", connection));},     		for (HRegionLocation entry : locations) {,     			if (remainingOnServers.contains(entry)) {  // Call once per server,     				try {,     					byte[] key = entry.getRegionInfo().getStartKey();,     					iterateOverTable.coprocessorService(ServerCachingService.class, key, key, ,     							new Batch.Call<ServerCachingService, RemoveServerCacheResponse>() {,     						@Override,     						public RemoveServerCacheResponse call(ServerCachingService instance) throws IOException {,     							ServerRpcController controller = new ServerRpcController();,     							BlockingRpcCallback<RemoveServerCacheResponse> rpcCallback =,     									new BlockingRpcCallback<RemoveServerCacheResponse>();,     							RemoveServerCacheRequest.Builder builder = RemoveServerCacheRequest.newBuilder();,     							if(connection.getTenantId() != null){,     								builder.setTenantId(HBaseZeroCopyByteString.wrap(connection.getTenantId().getBytes()));,     							},     							builder.setCacheId(HBaseZeroCopyByteString.wrap(cacheId));,     							instance.removeServerCache(controller, builder.build(), rpcCallback);,     							if(controller.getFailedOn() != null) {,     								throw controller.getFailedOn();,     							},     							return rpcCallback.get(); ,     						},     					});,     					remainingOnServers.remove(entry);,     				} catch (Throwable t) {,     					lastThrowable = t;,     					Map<String, String> customAnnotations = emptyMap();,     					LOG.error(addCustomAnnotations("Error trying to remove hash cache for " + entry, connection), t);,     				},     			},     		},     		if (!remainingOnServers.isEmpty()) {, 				Map<String, String> customAnnotations = emptyMap();,     			LOG.warn(addCustomAnnotations("Unable to remove hash cache for " + remainingOnServers, connection), lastThrowable);,     		},     	} finally {,     		Closeables.closeQuietly(iterateOverTable);,     	},     }],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,addServerCache,262-262,[        if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Cache " + cacheId + " successfully added to servers.", connection));}],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,removeServerCache,288-288,[    		if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Removing Cache " + cacheId + " from servers.", connection));}],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/ServerCacheClient.java,getId,130-130,[            return id;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/ServerCacheClient.java,<init>,114-114,[            this.id = id;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/TenantCacheImpl.java,,64-68,[                        .removalListener(new RemovalListener<ImmutableBytesPtr, Closeable>(){,                             @Override,                             public void onRemoval(RemovalNotification<ImmutableBytesPtr, Closeable> notification) {,                                 Closeables.closeAllQuietly(Collections.singletonList(notification.getValue()));,                             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/cache/aggcache/SpillFile.java,close,77-77,[                    file.delete();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/cache/aggcache/SpillManager.java,loadEntry,275-275,[        return null;],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_HASHCODE,org/apache/phoenix/cache/aggcache/SpillManager.java,getPartition,247-247,[        return Math.abs(key.hashCode()) % numSpillFiles;],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/phoenix/cache/aggcache/SpillManager.java,getAggregators,197-197,[            input.skip(keyLength);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,79-79,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,70-70,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,85-85,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,<init>,66-66,[            this.aggs = aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,84-84,[            this.aggs = arg0;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,191-191,[        newDirectory = null;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,redistribute,143-143,[        byteMap = null;],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,194-194,[        b2Index = (keyNew.hashCode() & ((1 << globalDepth) - 1)) | (1 << globalDepth);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/cache/aggcache/SpillMap.java,get,208-208,[        if (!(key instanceof ImmutableBytesPtr)) {],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,flushBuffer,383-383,[                buffer = null;],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/aggcache/SpillableGroupByCache.java,next,369-369,[                            + aggs.toString() + " value = " + Bytes.toStringBinary(value));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateIndexCompiler.java,,81-105,[        return new MutationPlan() {, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createIndex(create, splits);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE INDEX"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateSequenceCompiler.java,,233-257,[        return new MutationPlan() {, ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createSequence(sequence, startsWith, incrementBy, cacheSize, minValue, maxValue);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE SEQUENCE"));,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,131-134,[                            new DelegateConnectionQueryServices(connection.getQueryServices()) {,                                 @Override,                                 public PMetaData addTable(PTable table) throws SQLException {,                                     return connection.addTable(table);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,173-203,[        return new MutationPlan() {, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 try {,                     return client.createTable(create, splits, parent, viewStatement, viewType, viewColumnConstants, isViewColumnReferenced);,                 } finally {,                     if (client.getConnection() != connection) {,                         client.getConnection().close();,                     },                 },             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE TABLE"));,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             },             ,             @Override,             public StatementContext getContext() {,                 return context;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,defaultReturn,245-245,[            return null;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,visitLeave,269-269,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DeleteCompiler.java,,277-309,[            return new MutationPlan() {, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return context.getBindManager().getParameterMetaData();,                 }, ,                 @Override,                 public MutationState execute() {,                     // We have a point lookup, so we know we have a simple set of fully qualified,                     // keys for our ranges,                     ScanRanges ranges = context.getScanRanges();,                     Iterator<KeyRange> iterator = ranges.getPointLookupKeyIterator(); ,                     Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutation = Maps.newHashMapWithExpectedSize(ranges.getPointLookupCount());,                     while (iterator.hasNext()) {,                         mutation.put(new ImmutableBytesPtr(iterator.next().getLowerRange()), PRow.DELETE_MARKER);,                     },                     return new MutationState(tableRef, mutation, 0, maxSize, connection);,                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     return new ExplainPlan(Collections.singletonList("DELETE SINGLE ROW"));,                 }, ,                 @Override,                 public PhoenixConnection getConnection() {,                     return connection;,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DeleteCompiler.java,,323-379,[            return new MutationPlan() {, ,                 @Override,                 public PhoenixConnection getConnection() {,                     return connection;,                 }, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return context.getBindManager().getParameterMetaData();,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return context;,                 }, ,                 @Override,                 public MutationState execute() throws SQLException {,                     // TODO: share this block of code with UPSERT SELECT,                     ImmutableBytesWritable ptr = context.getTempPtr();,                     tableRef.getTable().getIndexMaintainers(ptr);,                     ServerCache cache = null;,                     try {,                         if (ptr.getLength() > 0) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(context.getScanRanges(), ptr);,                             byte[] uuidValue = cache.getId();,                             context.getScan().setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                         },                         ResultIterator iterator = aggPlan.iterator();,                         try {,                             Tuple row = iterator.next();,                             final long mutationCount = (Long)projector.getColumnProjector(0).getValue(row, PDataType.LONG, ptr);,                             return new MutationState(maxSize, connection) {,                                 @Override,                                 public long getUpdateCount() {,                                     return mutationCount;,                                 },                             };,                         } finally {,                             iterator.close();,                         },                     } finally {,                         if (cache != null) {,                             cache.close();,                         },                     },                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     List<String> queryPlanSteps =  aggPlan.getExplainPlan().getPlanSteps();,                     List<String> planSteps = Lists.newArrayListWithExpectedSize(queryPlanSteps.size()+1);,                     planSteps.add("DELETE ROWS");,                     planSteps.addAll(queryPlanSteps);,                     return new ExplainPlan(planSteps);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DropSequenceCompiler.java,,44-68,[        return new MutationPlan() {           , ,             @Override,             public MutationState execute() throws SQLException {,                 return client.dropSequence(sequence);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("DROP SEQUENCE"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;,             }, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {                ,                 return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,708-736,[                new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children, final Expression expression) {,                 PDataType type = expression.getDataType();,                 if (type != null && type.isCoercibleTo(PDataType.DATE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDataType.DECIMAL;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,782-782,[                    return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,739-788,[        new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 boolean foundDate = false;,                 boolean isDeterministic = true;,                 PDataType theType = null;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue; ,                     } else if (type.isCoercibleTo(PDataType.TIMESTAMP)) {,                         if (foundDate) {,                             throw TypeMismatchException.newException(type, node.toString());,                         },                         if (theType == null || (theType != PDataType.TIMESTAMP && theType != PDataType.UNSIGNED_TIMESTAMP)) {,                             theType = type;,                         },                         foundDate = true;,                     }else if (type == PDataType.DECIMAL) {,                         if (theType == null || !theType.isCoercibleTo(PDataType.TIMESTAMP)) {,                             theType = PDataType.DECIMAL;,                         },                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         if (theType == null) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDataType.DECIMAL) {,                     return new DecimalAddExpression(children);,                 } else if (theType == PDataType.LONG) {,                     return new LongAddExpression(children);,                 } else if (theType == PDataType.DOUBLE) {,                     return new DoubleAddExpression(children);,                 } else if (theType == null) {,                     return LiteralExpression.newConstant(null, theType, isDeterministic);,                 } else if (theType == PDataType.TIMESTAMP || theType == PDataType.UNSIGNED_TIMESTAMP) {,                     return new TimestampAddExpression(children);,                 } else if (theType.isCoercibleTo(PDataType.DATE)) {,                     return new DateAddExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,801-860,[        return visitLeave(node, children, new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children,,                     final Expression expression) {,                 final PDataType type;,                 // If we're binding the first parameter and the second parameter,                 // is a date,                 // we know that the first parameter must be a date type too.,                 if (i == 0 && (type = children.get(1).getDataType()) != null,                         && type.isCoercibleTo(PDataType.DATE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return type;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         }                        ,                     };,                 } else if (expression.getDataType() != null,                         && expression.getDataType().isCoercibleTo(,                                 PDataType.DATE)) {,                     return new PDatum() { // Same as with addition,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDataType.DECIMAL;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 // Otherwise just go with what was calculated for the expression,                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,955-955,[                    return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,862-961,[        }, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node,,                     List<Expression> children) throws SQLException {,                 int i = 0;,                 PDataType theType = null;,                 Expression e1 = children.get(0);,                 Expression e2 = children.get(1);,                 boolean isDeterministic = e1.isDeterministic() && e2.isDeterministic();,                 PDataType type1 = e1.getDataType();,                 PDataType type2 = e2.getDataType();,                 // TODO: simplify this special case for DATE conversion,                 /**,                  * For date1-date2, we want to coerce to a LONG because this,                  * cannot be compared against another date. It has essentially,                  * become a number. For date1-5, we want to preserve the DATE,                  * type because this can still be compared against another date,                  * and cannot be multiplied or divided. Any other time occurs is,                  * an error. For example, 5-date1 is an error. The nulls occur if,                  * we have bind variables.,                  */,                 boolean isType1Date = ,                         type1 != null ,                         && type1 != PDataType.TIMESTAMP,                         && type1 != PDataType.UNSIGNED_TIMESTAMP,                         && type1.isCoercibleTo(PDataType.DATE);,                 boolean isType2Date = ,                         type2 != null,                         && type2 != PDataType.TIMESTAMP,                         && type2 != PDataType.UNSIGNED_TIMESTAMP,                         && type2.isCoercibleTo(PDataType.DATE);,                 if (isType1Date || isType2Date) {,                     if (isType1Date && isType2Date) {,                         i = 2;,                         theType = PDataType.LONG;,                     } else if (isType1Date && type2 != null,                             && type2.isCoercibleTo(PDataType.DECIMAL)) {,                         i = 2;,                         theType = PDataType.DATE;,                     } else if (type1 == null || type2 == null) {,                         /*,                          * FIXME: Could be either a Date or BigDecimal, but we,                          * don't know if we're comparing to a date or a number,                          * which would be disambiguate it.,                          */,                         i = 2;,                         theType = null;,                     },                 } else if(type1 == PDataType.TIMESTAMP || type2 == PDataType.TIMESTAMP) {,                     i = 2;,                     theType = PDataType.TIMESTAMP;,                 } else if(type1 == PDataType.UNSIGNED_TIMESTAMP || type2 == PDataType.UNSIGNED_TIMESTAMP) {,                     i = 2;,                     theType = PDataType.UNSIGNED_TIMESTAMP;,                 },                 ,                 for (; i < children.size(); i++) {,                     // This logic finds the common type to which all child types are coercible,                     // without losing precision.,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type == PDataType.DECIMAL) {,                         // Coerce return type to DECIMAL from LONG or DOUBLE if DECIMAL child found,,                         // unless we're doing date arithmetic.,                         if (theType == null,                                 || !theType.isCoercibleTo(PDataType.DATE)) {,                             theType = PDataType.DECIMAL;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         // Coerce return type to DOUBLE from LONG if DOUBLE child found,,                         // unless we're doing date arithmetic or we've found another child of type DECIMAL,                         if (theType == null,                                 || (theType != PDataType.DECIMAL && !theType.isCoercibleTo(PDataType.DATE) )) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDataType.DECIMAL) {,                     return new DecimalSubtractExpression(children);,                 } else if (theType == PDataType.LONG) {,                     return new LongSubtractExpression(children);,                 } else if (theType == PDataType.DOUBLE) {,                     return new DoubleSubtractExpression(children);,                 } else if (theType == null) {,                     return LiteralExpression.newConstant(null, theType, isDeterministic);,                 } else if (theType == PDataType.TIMESTAMP || theType == PDataType.UNSIGNED_TIMESTAMP) {,                     return new TimestampSubtractExpression(children);,                 } else if (theType.isCoercibleTo(PDataType.DATE)) {,                     return new DateSubtractExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,974-1007,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 boolean isDeterministic = true;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDataType.DECIMAL) {,                         theType = PDataType.DECIMAL;,                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         if (theType == null) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 switch (theType) {,                 case DECIMAL:,                     return new DecimalMultiplyExpression( children);,                 case LONG:,                     return new LongMultiplyExpression( children);,                 case DOUBLE:,                     return new DoubleMultiplyExpression( children);,                 default:,                     return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1035-1068,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 boolean isDeterministic = true;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     isDeterministic &= e.isDeterministic();,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDataType.DECIMAL) {,                         theType = PDataType.DECIMAL;,                     } else if (type.isCoercibleTo(PDataType.LONG)) {,                         if (theType == null) {,                             theType = PDataType.LONG;,                         },                     } else if (type.isCoercibleTo(PDataType.DOUBLE)) {,                         if (theType == null) {,                             theType = PDataType.DOUBLE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 switch (theType) {,                 case DECIMAL:,                     return new DecimalDivideExpression( children);,                 case LONG:,                     return new LongDivideExpression( children);,                 case DOUBLE:,                     return new DoubleDivideExpression(children);,                 default:,                     return LiteralExpression.newConstant(null, theType, isDeterministic);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1081-1092,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 // ensure integer types,                 for(Expression child : children) {,                     PDataType type = child.getDataType();,                     if(type != null && !type.isCoercibleTo(PDataType.LONG)) {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 ,                 return new ModulusExpression(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1216-1219,[                            new DelegateDatum(arrayElemChild) {,                     @Override,                     public PDataType getDataType() {,                         return theArrayElemDataType;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/compile/ExpressionProjector.java,getValue,80-80,[                throw (SQLException) e.getCause();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/FromCompiler.java,resolveColumnFamily,483-483,[                    } catch (ColumnFamilyNotFoundException e) {}],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,540-540,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,545-545,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,550-550,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,555-555,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,560-560,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,570-570,[                return lType == null ? rType : lType;],,getCommonType,575-575,[                return lType == null ? rType : lType;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,533-533,[            if (!lType.isComparableTo(rType))],,getCommonType,538-538,[            if ((lType == null || lType.isCoercibleTo(PDataType.TINYINT))],,getCommonType,543-543,[            if ((lType == null || lType.isCoercibleTo(PDataType.SMALLINT))],,getCommonType,548-548,[            if ((lType == null || lType.isCoercibleTo(PDataType.INTEGER))],,getCommonType,553-553,[            if ((lType == null || lType.isCoercibleTo(PDataType.LONG))],,getCommonType,558-558,[            if ((lType == null || lType.isCoercibleTo(PDataType.DOUBLE))],,getCommonType,563-563,[            if ((lType == null || lType.isCoercibleTo(PDataType.DECIMAL))],,getCommonType,568-568,[            if ((lType == null || lType.isCoercibleTo(PDataType.DATE))],,getCommonType,573-573,[            if ((lType == null || lType.isCoercibleTo(PDataType.TIMESTAMP))],,getCommonType,578-578,[            if ((lType == null || lType.isCoercibleTo(PDataType.VARCHAR))],,getCommonType,583-583,[            if ((lType == null || lType.isCoercibleTo(PDataType.BOOLEAN))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/JoinCompiler.java,,495-515,[            Collections.sort(compiled, new Comparator<Pair<Expression, Expression>>() {,                 @Override,                 public int compare(Pair<Expression, Expression> o1, Pair<Expression, Expression> o2) {,                     Expression e1 = o1.getFirst();,                     Expression e2 = o2.getFirst();,                     boolean isFixed1 = e1.getDataType().isFixedWidth();,                     boolean isFixed2 = e2.getDataType().isFixedWidth();,                     boolean isFixedNullable1 = e1.isNullable() &&isFixed1;,                     boolean isFixedNullable2 = e2.isNullable() && isFixed2;,                     if (isFixedNullable1 == isFixedNullable2) {,                         if (isFixed1 == isFixed2) {,                             return 0;,                         } else if (isFixed1) {,                             return -1;,                         } else {,                             return 1;,                         },                     } else if (isFixedNullable1) {,                         return 1;,                     } else {,                         return -1;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/compile/JoinCompiler.java,getStarJoinVector,363-363,[                return null;],,getStarJoinVector,370-370,[                    return null;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/compile/JoinQueryCompilerTest.java,getJoinTable,136-136,[        PhoenixStatement stmt = connection.createStatement().unwrap(PhoenixStatement.class);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,234-234,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,234-234,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/ProjectionCompiler.java,addElement,544-544,[            isCaseSensitive &= elementCount == 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,507-511,[                expression.accept(new SingleAggregateFunctionVisitor() {,                     @Override,                     public Iterator<Expression> visitEnter(SingleAggregateFunction function) {,                         aggFuncSet.add(function);,                         return Iterators.emptyIterator();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,565-571,[                 children.get(0).accept(new KeyValueExpressionVisitor() {,                      @Override,                      public Void visit(KeyValueColumnExpression expression) {,                          if (expression.getDataType().isArrayType()) {,                              indexKVs.add(expression);,                          },                          return null;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNegativeArrayIndex,1183-1183,[        } catch (Exception e) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testNonArrayColumnWithIndex,1206-1206,[        } catch (Exception e) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testArrayNotLastInMultipartPK,183-183,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testExecuteWithNonEmptyBatch,1322-1322,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArrayElemRefInUpsert,1274-1274,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testVarBinaryNotLastInMultipartPK,162-162,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testGroupByLimitOptimization,1408-1408,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidPrimaryKeyDecl,1368-1368,[                conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testNoGroupByLimitOptimization,1429-1429,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,compileQuery,434-434,[            PhoenixPreparedStatement statement = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testCountAggregatorFirst,679-679,[                Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testFunkyColumnNames,656-656,[            compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArithmetic,713-713,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNextValueFor,1301-1301,[                compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testKeyOrderedGroupByOptimization,458-458,[            Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testNotKeyOrderedGroupByOptimization,641-641,[            Scan scan = compileQuery(query, binds);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/compile/QueryMetaDataTest.java,testBasicResultSetMetaData,310-310,[        assertEquals("organization_id".toUpperCase(),md.getColumnName(1));],,testBasicResultSetMetaData,311-311,[        assertEquals("a_string".toUpperCase(),md.getColumnName(2));],,testBasicResultSetMetaData,312-312,[        assertEquals("b_string".toUpperCase(),md.getColumnName(3));],,testBasicResultSetMetaData,313-313,[        assertEquals("i".toUpperCase(),md.getColumnName(4));],,testBasicResultSetMetaData,314-314,[        assertEquals("a_date".toUpperCase(),md.getColumnName(5));],,testBasicResultSetMetaData,322-322,[        assertEquals("atable".toUpperCase(),md.getTableName(1));],,testBasicResultSetMetaData,326-326,[        assertEquals("i".toUpperCase(),md.getColumnLabel(4));],,testBasicResultSetMetaData,327-327,[        assertEquals("a_date".toUpperCase(),md.getColumnLabel(5));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryMetaDataTest.java,testCoerceToDecimalArithmeticMetaData,280-280,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryMetaDataTest.java,testLongArithmeticMetaData,294-294,[            PreparedStatement statement = conn.prepareStatement(query);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/compile/SequenceManager.java,validateSequences,151-151,[            if (isNextSequence.get(entry.getValue().getIndex())) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/compile/SequenceManager.java,setSequenceValues,71-71,[                dstSequenceValues[sequencePosition[i]] = srcSequenceValues[i];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/compile/SequenceManager.java,,175-211,[    private class SequenceValueExpression extends BaseTerminalExpression {,         private final int index;, ,         private SequenceValueExpression(int index) {,             this.index = index;,         }, ,         public int getIndex() {,             return index;,         },         ,         @Override,         public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {,         		byte[] valueBuffer = new byte[PDataType.LONG.getByteSize()];,             PDataType.LONG.getCodec().encodeLong(tuple.getSequenceValue(index), valueBuffer, 0);,             ptr.set(valueBuffer);,             return true;,         }, ,         @Override,         public PDataType getDataType() {,             return PDataType.LONG;,         },         ,         @Override,         public boolean isNullable() {,             return false;,         },         ,         @Override,         public boolean isDeterministic() {,             return false;,         },         ,         @Override,         public boolean isStateless() {,             return true;],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/phoenix/compile/SubselectRewriter.java,flatten,142-142,[                            && ((TableWildcardParseNode) node).getTableName().equals(tableAlias))) {],,
STYLE,NS_DANGEROUS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,isOrderPreserving,102-102,[            isOrderPreserving &= (entry.getOrderPreserving() != OrderPreserving.NO) && (pos == prevPos || ((pos - 1 == prevPos) && (prevOrderPreserving == OrderPreserving.YES)));],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,addEntry,181-181,[        isOrderPreserving &= (orderPreserving != OrderPreserving.NO);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,,87-90,[            Collections.sort(entries, new Comparator<Entry>() {,                 @Override,                 public int compare(Entry o1, Entry o2) {,                     return o1.getPkPosition()-o2.getPkPosition();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/compile/TrackOrderPreservingExpressionCompiler.java,getPkPosition,225-225,[            return columnRef.getPKSlotPosition();],,getPKPosition,1012-1012,[                return pkPosition;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/UpsertCompiler.java,compile,217-217,[        List<PColumn> allColumnsToBe = Collections.emptyList();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/UpsertCompiler.java,,568-623,[                    return new MutationPlan() {,     ,                         @Override,                         public PhoenixConnection getConnection() {,                             return connection;,                         },     ,                         @Override,                         public ParameterMetaData getParameterMetaData() {,                             return queryPlan.getContext().getBindManager().getParameterMetaData();,                         },     ,                         @Override,                         public StatementContext getContext() {,                             return queryPlan.getContext();,                         }, ,                         @Override,                         public MutationState execute() throws SQLException {,                             ImmutableBytesWritable ptr = context.getTempPtr();,                             tableRef.getTable().getIndexMaintainers(ptr);,                             ServerCache cache = null;,                             try {,                                 if (ptr.getLength() > 0) {,                                     IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                                     cache = client.addIndexMetadataCache(context.getScanRanges(), ptr);,                                     byte[] uuidValue = cache.getId();,                                     scan.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                                 },                                 ResultIterator iterator = aggPlan.iterator();,                                 try {,                                     Tuple row = iterator.next();,                                     final long mutationCount = (Long)aggProjector.getColumnProjector(0).getValue(row, PDataType.LONG, ptr);,                                     return new MutationState(maxSize, connection) {,                                         @Override,                                         public long getUpdateCount() {,                                             return mutationCount;,                                         },                                     };,                                 } finally {,                                     iterator.close();,                                 },                             } finally {,                                 if (cache != null) {,                                     cache.close();,                                 },                             },                         },     ,                         @Override,                         public ExplainPlan getExplainPlan() throws SQLException {,                             List<String> queryPlanSteps =  aggPlan.getExplainPlan().getPlanSteps();,                             List<String> planSteps = Lists.newArrayListWithExpectedSize(queryPlanSteps.size()+1);,                             planSteps.add("UPSERT ROWS");,                             planSteps.addAll(queryPlanSteps);,                             return new ExplainPlan(planSteps);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/UpsertCompiler.java,,717-793,[        return new MutationPlan() {, ,             @Override,             public PhoenixConnection getConnection() {,                 return connection;,             }, ,             @Override,             public ParameterMetaData getParameterMetaData() {,                 return context.getBindManager().getParameterMetaData();,             }, ,             @Override,             public StatementContext getContext() {,                 return context;,             }, ,             @Override,             public MutationState execute() throws SQLException {,                 ImmutableBytesWritable ptr = context.getTempPtr();,                 final SequenceManager sequenceManager = context.getSequenceManager();,                 // Next evaluate all the expressions,                 int nodeIndex = nodeIndexOffset;,                 Tuple tuple = sequenceManager.getSequenceCount() == 0 ? null :,                     sequenceManager.newSequenceTuple(null);,                 for (Expression constantExpression : constantExpressions) {,                     PColumn column = allColumns.get(columnIndexes[nodeIndex]);,                     constantExpression.evaluate(tuple, ptr);,                     Object value = null;,                     if (constantExpression.getDataType() != null) {,                         value = constantExpression.getDataType().toObject(ptr, constantExpression.getSortOrder(), constantExpression.getMaxLength(), constantExpression.getScale());,                         if (!constantExpression.getDataType().isCoercibleTo(column.getDataType(), value)) { ,                             throw TypeMismatchException.newException(,                                 constantExpression.getDataType(), column.getDataType(), "expression: ",                                         + constantExpression.toString() + " in column " + column);,                         },                         if (!column.getDataType().isSizeCompatible(ptr, value, constantExpression.getDataType(),,                                 constantExpression.getMaxLength(), constantExpression.getScale(), ,                                 column.getMaxLength(), column.getScale())) { ,                             throw new SQLExceptionInfo.Builder(,                                 SQLExceptionCode.DATA_EXCEEDS_MAX_CAPACITY).setColumnName(column.getName().getString()),                                 .setMessage("value=" + constantExpression.toString()).build().buildException();,                         },                     },                     column.getDataType().coerceBytes(ptr, value,,                             constantExpression.getDataType(), constantExpression.getMaxLength(), constantExpression.getScale(), constantExpression.getSortOrder(),,                             column.getMaxLength(), column.getScale(),column.getSortOrder());,                     if (overlapViewColumns.contains(column) && Bytes.compareTo(ptr.get(), ptr.getOffset(), ptr.getLength(), column.getViewConstant(), 0, column.getViewConstant().length-1) != 0) {,                         throw new SQLExceptionInfo.Builder(,                                 SQLExceptionCode.CANNOT_UPDATE_VIEW_COLUMN),                                 .setColumnName(column.getName().getString()),                                 .setMessage("value=" + constantExpression.toString()).build().buildException();,                     },                     values[nodeIndex] = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     nodeIndex++;,                 },                 // Add columns based on view,                 for (PColumn column : addViewColumns) {,                     if (IndexUtil.getViewConstantValue(column, ptr)) {,                         values[nodeIndex++] = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     } else {,                         throw new IllegalStateException();,                     },                 },                 Map<ImmutableBytesPtr, Map<PColumn, byte[]>> mutation = Maps.newHashMapWithExpectedSize(1);,                 setValues(values, pkSlotIndexes, columnIndexes, tableRef.getTable(), mutation);,                 return new MutationState(tableRef, mutation, 0, maxSize, connection);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 List<String> planSteps = Lists.newArrayListWithExpectedSize(2);,                 if (context.getSequenceManager().getSequenceCount() > 0) {,                     planSteps.add("CLIENT RESERVE " + context.getSequenceManager().getSequenceCount() + " SEQUENCES");,                 },                 planSteps.add("PUT SINGLE ROW");,                 return new ExplainPlan(planSteps);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/compile/ViewCompilerTest.java,testViewInvalidation,91-91,[            conn.createStatement().executeQuery("SELECT * FROM s2.v3");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/ViewCompilerTest.java,assertViewType,62-62,[            conn.createStatement().execute(view);],,assertViewType,70-70,[                conn.createStatement().execute("DROP VIEW " + table.getName().getString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/WhereOptimizer.java,,536-568,[            return new SingleKeySlot(new KeyPart() {, ,                 @Override,                 public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                     KeyRange range = childPart.getKeyRange(op, rhs);,                     byte[] lower = range.getLowerRange();,                     if (!range.lowerUnbound()) {,                         ptr.set(lower);,                         // Do the reverse translation so we can optimize out the coerce expression,                         // For the actual type of the coerceBytes call, we use the node type instead of the rhs type, because,                         // for IN, the rhs type will be VARBINARY and no coerce will be done in that case (and we need it to,                         // be done).,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         lower = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     byte[] upper = range.getUpperRange();,                     if (!range.upperUnbound()) {,                         ptr.set(upper);,                         // Do the reverse translation so we can optimize out the coerce expression,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         upper = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     return KeyRange.getKeyRange(lower, range.isLowerInclusive(), upper, range.isUpperInclusive());,                 }, ,                 @Override,                 public List<Expression> getExtractNodes() {,                     return extractNodes;,                 }, ,                 @Override,                 public PColumn getColumn() {,                     return childPart.getColumn();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/phoenix/compile/WhereOptimizer.java,,1126-1158,[        private class SingleKeySlot implements KeySlots {,             private final KeySlot slot;,             private final KeyRange minMaxRange;,             ,             private SingleKeySlot(KeyPart part, int pkPosition, List<KeyRange> ranges) {,                 this(part, pkPosition, 1, ranges);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, List<KeyRange> ranges, OrderPreserving orderPreserving) {,                 this(part, pkPosition, 1, ranges, orderPreserving);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges) {,                 this(part,pkPosition,pkSpan,ranges, null, null);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges, OrderPreserving orderPreserving) {,                 this(part,pkPosition,pkSpan,ranges, null, orderPreserving);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges, KeyRange minMaxRange, OrderPreserving orderPreserving) {,                 this.slot = new KeySlot(part, pkPosition, pkSpan, ranges, orderPreserving);,                 this.minMaxRange = minMaxRange;,             },             ,             @Override,             public Iterator<KeySlot> iterator() {,                 return Iterators.<KeySlot>singletonIterator(slot);,             }, ,             @Override,             public KeyRange getMinMaxRange() {,                 return minMaxRange;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtEndOfRVC,1352-1352,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtStartOfRVC,1386-1386,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullInMiddleOfRVC,1369-1369,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testFullyQualifiedRVCWithNonTenantSpecificView,1641-1641,[    	Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testFullyQualifiedRVCWithTenantSpecificViewAndConnection,1613-1613,[    	Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testStartKeyStopKey,141-141,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/coprocessor/BaseRegionScanner.java,next,37-37,[        return next(results);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java,,141-148,[                scanner = new DelegateRegionScanner(scanner) {,                     @Override,                     public void close() throws IOException {,                         if (child != null) {,                             child.stop();,                         },                         delegate.close();,                     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/GroupedAggregateRegionObserver.java,,476-576,[        return new BaseRegionScanner() {,             private long rowCount = 0;,             private ImmutableBytesWritable currentKey = null;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public void close() throws IOException {,                 s.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 boolean hasMore;,                 boolean atLimit;,                 boolean aggBoundary = false;,                 MultiKeyValueTuple result = new MultiKeyValueTuple();,                 ImmutableBytesWritable key = null;,                 Aggregator[] rowAggregators = aggregators.getAggregators();,                 // If we're calculating no aggregate functions, we can exit at the,                 // start of a new row. Otherwise, we have to wait until an agg,                 int countOffset = rowAggregators.length == 0 ? 1 : 0;,                 HRegion region = c.getEnvironment().getRegion();,                 region.startRegionOperation();,                 try {,                     do {,                         List<Cell> kvs = new ArrayList<Cell>();,                         // Results are potentially returned even when the return,                         // value of s.next is false,                         // since this is an indication of whether or not there,                         // are more values after the,                         // ones returned,                         hasMore = s.nextRaw(kvs);,                         if (!kvs.isEmpty()) {,                             if (localIndexScan) {,                                 IndexUtil.wrapResultUsingOffset(kvs, offset, dataColumns, tupleProjector,,                                     dataRegion, indexMaintainers == null ? null : indexMaintainers.get(0),,                                     viewConstants, tempPtr);,                             },                             result.setKeyValues(kvs);,                             key = TupleUtil.getConcatenatedValue(result, expressions);,                             aggBoundary = currentKey != null && currentKey.compareTo(key) != 0;,                             if (!aggBoundary) {,                                 aggregators.aggregate(rowAggregators, result);,                                 if (logger.isDebugEnabled()) {,                                     logger.debug(LogUtil.addCustomAnnotations("Row passed filters: " + kvs,                                             + ", aggregated values: ",                                             + Arrays.asList(rowAggregators), ScanUtil.getCustomAnnotations(scan)));,                                 },                                 currentKey = key;,                             },                         },                         atLimit = rowCount + countOffset >= limit;,                         // Do rowCount + 1 b/c we don't have to wait for a complete,                         // row in the case of a DISTINCT with a LIMIT,                     } while (hasMore && !aggBoundary && !atLimit);,                 } finally {,                     region.closeRegionOperation();,                 }, ,                 if (currentKey != null) {,                     byte[] value = aggregators.toBytes(rowAggregators);,                     KeyValue keyValue =,                             KeyValueUtil.newKeyValue(currentKey.get(), currentKey.getOffset(),,                                 currentKey.getLength(), SINGLE_COLUMN_FAMILY, SINGLE_COLUMN,,                                 AGG_TIMESTAMP, value, 0, value.length);,                     results.add(keyValue);,                     if (logger.isDebugEnabled()) {,                         logger.debug(LogUtil.addCustomAnnotations("Adding new aggregate row: ",                                 + keyValue,                                 + ",for current key ",                                 + Bytes.toStringBinary(currentKey.get(), currentKey.getOffset(),,                                     currentKey.getLength()) + ", aggregated values: ",                                 + Arrays.asList(rowAggregators), ScanUtil.getCustomAnnotations(scan)));,                     },                     // If we're at an aggregation boundary, reset the,                     // aggregators and,                     // aggregate with the current result (which is not a part of,                     // the returned result).,                     if (aggBoundary) {,                         aggregators.reset(rowAggregators);,                         aggregators.aggregate(rowAggregators, result);,                         currentKey = key;,                         rowCount++;,                         atLimit |= rowCount >= limit;,                     },                 },                 // Continue if there are more,                 if (!atLimit && (hasMore || aggBoundary)) {,                     return true;,                 },                 currentKey = null;,                 return false;,             },             ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/coprocessor/HashJoinRegionScanner.java,processResults,112-112,[            resultQueue.offer(tuple);],,processResults,139-139,[                    resultQueue.offer(tuple);],,processResults,146-146,[                resultQueue.offer(tuple);],,processResults,159-159,[                                    resultQueue.offer(lhs);],,processResults,170-170,[                            resultQueue.offer(joined);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,950-950,[    protected static final byte[] PHYSICAL_TABLE_BYTES = new byte[] {PTable.LinkType.PHYSICAL_TABLE.getSerializedValue()};],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,loadTable,811-811,[        if (table == null],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,createTable,865-865,[                        builder.setTable(PTableImpl.toProto(parentTable));],,createTable,862-862,[                    if (parentTable == null || isTableDeleted(parentTable)) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,1404-1404,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,1517-1517,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,buildTable,811-811,[        if (table == null],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateStatsInternal,751-751,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1375-1375,[                                    table.getPKColumn(new String(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,1351-1401,[            MetaDataMutationResult result = mutateColumn(tableMetaData, new ColumnMutator() {,                 @Override,                 public MetaDataMutationResult updateMutation(PTable table, byte[][] rowKeyMetaData,,                         List<Mutation> tableMetaData, HRegion region,,                         List<ImmutableBytesPtr> invalidateList, List<RowLock> locks) {,                     byte[] tenantId = rowKeyMetaData[TENANT_ID_INDEX];,                     byte[] schemaName = rowKeyMetaData[SCHEMA_NAME_INDEX];,                     byte[] tableName = rowKeyMetaData[TABLE_NAME_INDEX];,                     for (Mutation m : tableMetaData) {,                         byte[] key = m.getRow();,                         boolean addingPKColumn = false;,                         int pkCount = getVarChars(key, rowKeyMetaData);,                         if (pkCount > COLUMN_NAME_INDEX,                                 && Bytes.compareTo(schemaName, rowKeyMetaData[SCHEMA_NAME_INDEX]) == 0,                                 && Bytes.compareTo(tableName, rowKeyMetaData[TABLE_NAME_INDEX]) == 0) {,                             try {,                                 if (pkCount > FAMILY_NAME_INDEX,                                         && rowKeyMetaData[PhoenixDatabaseMetaData.FAMILY_NAME_INDEX].length > 0) {,                                     PColumnFamily family =,                                             table.getColumnFamily(rowKeyMetaData[PhoenixDatabaseMetaData.FAMILY_NAME_INDEX]);,                                     family.getColumn(rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX]);,                                 } else if (pkCount > COLUMN_NAME_INDEX,                                         && rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX].length > 0) {,                                     addingPKColumn = true;,                                     table.getPKColumn(new String(,                                             rowKeyMetaData[PhoenixDatabaseMetaData.COLUMN_NAME_INDEX]));,                                 } else {,                                     continue;,                                 },                                 return new MetaDataMutationResult(,                                         MutationCode.COLUMN_ALREADY_EXISTS, EnvironmentEdgeManager,                                                 .currentTimeMillis(), table);,                             } catch (ColumnFamilyNotFoundException e) {,                                 continue;,                             } catch (ColumnNotFoundException e) {,                                 if (addingPKColumn) {,                                     // Add all indexes to invalidate list, as they will all be,                                     // adding the same PK column. No need to lock them, as we,                                     // have the parent table lock at this point.,                                     for (PTable index : table.getIndexes()) {,                                         invalidateList.add(new ImmutableBytesPtr(SchemaUtil,                                                 .getTableKey(tenantId, index.getSchemaName(),                                                         .getBytes(), index.getTableName(),                                                         .getBytes())));,                                     },                                 },                                 continue;,                             },                         },                     },                     return null;],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1372-1372,[                                } else if (pkCount > COLUMN_NAME_INDEX],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1451-1451,[                                        columnToDelete = table.getPKColumn(new String(],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,1448-1448,[                                    } else if (pkCount > COLUMN_NAME_INDEX],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getColumnName,146-146,[            return columnName;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getFamilyName,150-150,[            return familyName;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/MetaDataRegionObserver.java,run,187-187,[                    Long disabledTimeStampVal = 0L;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/coprocessor/ScanRegionObserver.java,doPostScannerOpen,211-211,[            indexMaintainer = indexMaintainers.get(0);],,doPostScannerOpen,210-210,[            List<IndexMaintainer> indexMaintainers = localIndexBytes == null ? null : IndexMaintainer.deserialize(localIndexBytes);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/coprocessor/ScanRegionObserver.java,deserializeArrayPostionalExpressionInfoFromScan,142-142,[            return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/ScanRegionObserver.java,,251-293,[        return new BaseRegionScanner() {,             private Tuple tuple = firstTuple;, ,             @Override,             public boolean isFilterDone() {,                 return tuple == null;,             }, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 try {,                     if (isFilterDone()) {,                         return false;,                     }, ,                     for (int i = 0; i < tuple.size(); i++) {,                         results.add(tuple.getValue(i));,                     }, ,                     tuple = iterator.next();,                     return !isFilterDone();,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(region.getRegionNameAsString(), t);,                     return false;,                 },             }, ,             @Override,             public void close() throws IOException {,                 try {,                     s.close();,                 } finally {,                     chunk.close();                },             }, ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/SequenceRegionObserver.java,preAppend,406-406,[                long serverTimestamp = MetaDataUtil.getClientTimeStamp(m);],,preAppend,373-373,[                Mutation m = null;],,preAppend,374-374,[                switch (op) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/SuffixFilter.java,toByteArray,26-26,[        return suffix;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/coprocessor/SuffixFilter.java,<init>,21-21,[        this.suffix = suffix;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,doPostScannerOpen,152-152,[        TableName table = c.getEnvironment().getRegion().getRegionInfo().getTable();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,,411-439,[        RegionScanner scanner = new BaseRegionScanner() {,             private boolean done = !hadAny;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return innerScanner.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() {,                 return done;,             }, ,             @Override,             public void close() throws IOException {,                 innerScanner.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 if (done) return false;,                 done = true;,                 results.add(aggKeyValue);,                 return false;,             },             ,             @Override,             public long getMaxResultSize() {,             	return scan.getMaxResultSize();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3475-3475,[    public static com.google.protobuf.Parser<AddColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3706-3706,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,3728-3728,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3691-3691,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,6457-6457,[    public static com.google.protobuf.Parser<ClearCacheForTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6801-6801,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6780-6780,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,7141-7141,[    public static com.google.protobuf.Parser<ClearCacheForTableResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,7328-7328,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,7315-7315,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4940-4940,[    public static com.google.protobuf.Parser<ClearCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5127-5127,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5114-5114,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5278-5278,[    public static com.google.protobuf.Parser<ClearCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5465-5465,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5452-5452,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2203-2203,[    public static com.google.protobuf.Parser<CreateTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,2438-2438,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,2460-2460,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,2423-2423,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3972-3972,[    public static com.google.protobuf.Parser<DropColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4203-4203,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,4225-4225,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4188-4188,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2739-2739,[    public static com.google.protobuf.Parser<DropTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3076-3076,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3057-3057,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,1406-1406,[    public static com.google.protobuf.Parser<GetTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,1789-1789,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,1766-1766,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5616-5616,[    public static com.google.protobuf.Parser<GetVersionRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5803-5803,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5790-5790,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5970-5970,[    public static com.google.protobuf.Parser<GetVersionResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6197-6197,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6182-6182,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,361-361,[    public static com.google.protobuf.Parser<MetaDataResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,785-785,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4469-4469,[    public static com.google.protobuf.Parser<UpdateIndexStateRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4700-4700,[        return create().mergeFrom(buildPartial());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,buildPartial,4722-4722,[        int from_bitField0_ = bitField0_;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4685-4685,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,368-368,[    public static com.google.protobuf.Parser<PColumn> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,988-988,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,953-953,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,2743-2743,[    public static com.google.protobuf.Parser<PTable> PARSER =],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PTableProtos.java,getTimeStamp,2879-2879,[      return timeStamp_;],,getTimestamp,54-54,[    return this.timestamp;],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,3857-3857,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,1701-1701,[    public static com.google.protobuf.Parser<PTableStats> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,1999-1999,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,1982-1982,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,,109-109,[    public static com.google.protobuf.Parser<ServerCacheFactory> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,clone,363-363,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,maybeForceBuilderInitialization,348-348,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,814-814,[    public static com.google.protobuf.Parser<AddServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1184-1184,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,1717-1717,[    public static com.google.protobuf.Parser<AddServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1944-1944,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,1929-1929,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,134-134,[    public static com.google.protobuf.Parser<ImmutableBytesWritable> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,439-439,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,420-420,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2174-2174,[    public static com.google.protobuf.Parser<RemoveServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2436-2436,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2419-2419,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2697-2697,[    public static com.google.protobuf.Parser<RemoveServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2924-2924,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2909-2909,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,,119-119,[    public static com.google.protobuf.Parser<StatCollectRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,clone,377-377,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,maybeForceBuilderInitialization,360-360,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,,634-634,[    public static com.google.protobuf.Parser<StatCollectResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,clone,861-861,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,maybeForceBuilderInitialization,846-846,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,844-844,[                rs = conn.createStatement().executeQuery(query);],,testDropColumnsWithImutability,855-855,[                rs = conn.createStatement().executeQuery(query);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,668-668,[            closeConnection(conn);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,645-645,[        Connection conn = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,648-648,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,656-656,[                closeStatement(stmt);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,646-646,[        PreparedStatement stmt = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,653-653,[                stmt = conn.prepareStatement(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,alterTableFromDifferentClient,872-872,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,alterTableFromDifferentClient,874-874,[        PreparedStatement stmtInsert1 = conn1.prepareStatement("upsert into test_simpletable (id, field1) values ( ?, ?)");],,alterTableFromDifferentClient,886-886,[        PreparedStatement pstmt2 = conn1.prepareStatement("upsert into test_simpletable (id, field1, field2) values ( ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCharColToPK,131-131,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,516-516,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAlterTableWithVarBinaryKey,69-69,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDisableWAL,691-691,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,721-721,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,750-750,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnFromSaltedTable,482-482,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,776-776,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropVarCols,625-625,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetSaltedTableAsImmutable,448-448,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,560-560,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddColsIntoSystemTable,101-101,[          conn.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalArithmeticWithIntAndLong,301-301,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalAveraging,241-241,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertSelect,133-133,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertValue,49-49,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,888-888,[        Double d = new Double(2.0);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,869-869,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,874-874,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,884-884,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCast,901-901,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,906-906,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,916-916,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCastForVarLengthArr,934-934,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,938-938,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,949-949,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithDescOrder,805-805,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,811-811,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,825-825,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithFloatArray,841-841,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,846-846,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,853-853,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testFixedWidthCharArray,969-969,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,974-974,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,981-981,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,992-992,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArray,1593-1593,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1600-1600,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1614-1614,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testScanByArrayValue,147-147,[		Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testScanWithArrayInWhereClause,190-190,[		Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithColumnRef,746-746,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithSelectAsSubQuery1,428-428,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,387-387,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1520-1520,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1557-1557,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1441-1441,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1447-1447,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1461-1461,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithSameArrays,1403-1403,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1410-1410,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1424-1424,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonWithNulls,1479-1479,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1485-1485,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1499-1499,[        conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testArrayRefToLiteral,1662-1662,[            if (conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArrayNotInEnd,1638-1638,[            if (conn != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/end2end/ArrayIT.java,testWithOutOfRangeIndex,1308-1308,[		} catch (Exception e) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInGroupByClause,1078-1078,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInWhereClause,1047-1047,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testSelectSpecificIndexOfAnArrayAsArrayFunction,312-312,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,404-404,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1537-1537,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1576-1576,[            conn.createArrayOf("VARCHAR", strArr);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRef,647-647,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArray,678-678,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArrayWithNullValue,709-709,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,387-387,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1520-1520,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,analyzeTable,175-175,[		PreparedStatement statement = conn.prepareStatement(analyse);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/end2end/ArrayIT.java,testVariableLengthArrayWithNullValue,1107-1107,[			String[] strArr = new String[1];],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AutoCommitIT.java,testMutationJoin,42-42,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,initTableValues,73-73,[        stmt.setString(1, new String(KMIN));],,initTableValues,76-76,[        stmt.setString(1, new String(KMAX));],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,46-46,[    protected static final byte[] K1  = new byte[] {'a'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,52-52,[    protected static final byte[] K11 = new byte[] {'k'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,53-53,[    protected static final byte[] K12 = new byte[] {'l'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,47-47,[    protected static final byte[] K3  = new byte[] {'c'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,48-48,[    protected static final byte[] K4  = new byte[] {'d'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,49-49,[    protected static final byte[] K5  = new byte[] {'e'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,50-50,[    protected static final byte[] K6  = new byte[] {'f'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,51-51,[    protected static final byte[] K9  = new byte[] {'i'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,54-54,[    protected static final byte[] KMAX  = new byte[] {'~'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,55-55,[    protected static final byte[] KMAX2  = new byte[] {'z'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,44-44,[    protected static final byte[] KMIN  = new byte[] {'!'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,,45-45,[    protected static final byte[] KMIN2  = new byte[] {'.'};],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseParallelIteratorsRegionSplitterIT.java,initTableValues,70-70,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseQueryIT.java,initTable,98-98,[            conn.createStatement().execute(indexDDL);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,85-85,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableView,59-59,[            try { conn.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,85-85,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,91-91,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,107-107,[            conn.createStatement().execute("UPSERT INTO v(k2,v1,v2) VALUES(" + i + ",'" + valuePrefix + "v1-" + (i%5) + "','" + valuePrefix + "v2-" + (i%2) + "')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,98-98,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,104-104,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndVerifyIndex,120-120,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN SELECT k1, k2, v2 FROM v WHERE v2='" + valuePrefix + "v2-1'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,verifyViewData,142-142,[        ResultSet rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,61-61,[            conn.createStatement().execute("UPSERT INTO t VALUES(" + (i % 4) + "," + (i+100) + "," + (i > 5 ? 2 : 1) + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,144-144,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,57-57,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,121-121,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BinaryRowKeyIT.java,initTableValues,42-42,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/CSVCommonsLoaderIT.java,testAllDatatypes,507-507,[                            .toString().toUpperCase());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,188-188,[        Connection conn = DriverManager.getConnection(url, props);],,testUnfoundSingleColumnCaseStatement,193-193,[        Connection upsertConn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,203-203,[        PreparedStatement stmt = upsertConn.prepareStatement(upsertStmt);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testValidArithmetic,168-168,[                PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CoalesceFunctionIT.java,testCoalesce,48-48,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/CoalesceFunctionIT.java,wrongDataTypeOfSecondParameter,247-247,[            conn.createStatement().executeQuery(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/CoalesceFunctionIT.java,nonTypedSecondParameterUnsignedDataTypes,184-184,[            conn.createStatement().execute(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ColumnProjectionOptimizationIT.java,testSelectFromViewOnExistingTable,235-235,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CompareDecimalToLongIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(url);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/end2end/ConnectionQueryServicesTestImpl.java,,36-36,[    protected int NUM_SLAVES_BASE = 1; // number of slaves for the cluster],,
MALICIOUS_CODE,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,75-75,[        badContextClassloader = new URLClassLoader(new URL[] {],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,setUpBeforeClass,69-69,[        stmt.execute("CREATE TABLE test (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,67-67,[        Connection conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,100-100,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,101-101,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,94-112,[        Runnable target = new Runnable() {, , ,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     ResultSet rs = stmt.executeQuery("select * from test where name = 'name2'");,                     while (rs.next()) {,                         // Just make sure we run over all records,                     },                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,126-126,[                    Connection conn = DriverManager.getConnection(getUrl());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,122-136,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     ResultSet tablesRs = conn.getMetaData().getTables(null, null, null, null);,                     while (tablesRs.next()) {,                         // Just make sure we run over all records,                     },                     tablesRs.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,run,152-152,[                    stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,run,153-153,[                    stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");],,run,154-154,[                    conn.commit();],,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,150-150,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,146-164,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");,                     stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");,                     conn.commit();,                     ResultSet rs = stmt.executeQuery("SELECT * FROM T2");,                     assertTrue(rs.next());,                     assertFalse(rs.next());,                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CreateTableIT.java,testStartKeyStopKey,51-51,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CustomEntityDataIT.java,initTableValues,51-51,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidCharacters,84-84,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('zzxxuuyyzzxxuuyy', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidEncoding,132-132,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'someNonexistFormat')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidLength,100-100,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,nullEncoding,116-116,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', NULL)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DefaultParallelIteratorsRegionSplitterIT.java,testGetLowerUnboundSplits,149-149,[        conn.createStatement().executeQuery("SELECT * FROM STABLE");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DefaultParallelIteratorsRegionSplitterIT.java,testGetSplits,110-110,[        conn.prepareStatement("SELECT COUNT(*) FROM STABLE").executeQuery();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,472-472,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,340-340,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,412-412,[            } catch (Exception ex) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,447-447,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,434-434,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,307-307,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,288-288,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,377-377,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,362-362,[            Statement stm = con.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DeleteIT.java,assertTableCount,132-132,[        ResultSet rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DeleteIT.java,assertIndexUsed,143-143,[            PreparedStatement stmt = conn.prepareStatement("EXPLAIN " + query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithAggregate,526-526,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithAggregate,535-535,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithAggregate,544-544,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithDistinct,470-470,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithDistinct,479-479,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithDistinct,488-488,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithGroupBy,231-231,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithLimit,393-393,[                statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithOrderBy,326-326,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithWhere,187-187,[                conn.createStatement().executeQuery(query);],,testDerivedTableWithWhere,196-196,[                conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DerivedTableIT.java,initTable,81-81,[            conn.createStatement().execute(indexDDL);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testAmbiguousStaticSelect,196-196,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testFakeCFDynamicUpsert,213-213,[            statement.executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicFamilyIT.java,doBeforeTestSetup,99-99,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseInsensitiveDynCol,238-238,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseSensitiveDynCol,263-263,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,doBeforeTestSetup,57-57,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testFullUpsert,139-139,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testMultiUpsert,106-106,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testUpsert,76-76,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testInvalidEncodingType,151-151,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testNullEncodingType,121-121,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, NULL)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testUnsupportedEncodingType,135-135,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, 'HEX')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/EncodeFunctionIT.java,testEncodeHelper,57-57,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/EvaluationOfORIT.java,testPKOrNotPKInOREvaluation,40-40,[	    Connection conn = DriverManager.getConnection(getUrl(), props);	    ],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,122-122,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,225-225,[            statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,168-168,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,133-133,[        PreparedStatement statement = conn.prepareStatement(query);],,testCharPadding,135-135,[        statement = conn.prepareStatement(],,testCharPadding,164-164,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,172-172,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,176-176,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,180-180,[            statement = conn.prepareStatement(query);],,testCharPadding,186-186,[            statement = conn.prepareStatement(query);],,testCharPadding,195-195,[            statement = conn.prepareStatement(upsert);],,testCharPadding,206-206,[            statement = conn.prepareStatement(upsert);],,testCharPadding,213-213,[            assertCharacterPadding(conn.prepareStatement(query), A_VALUE, B_VALUE);            ],,testCharPadding,216-216,[            statement = conn.prepareStatement(upsert);],,testCharPadding,220-220,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,224-224,[            statement = conn.prepareStatement(query);],,testCharPadding,226-226,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,229-229,[            statement = conn.prepareStatement(upsert);],,testCharPadding,235-235,[            assertCharacterPadding(conn.prepareStatement(query), rowKey2, rowKey2);],,testCharPadding,238-238,[            statement = conn.prepareStatement(upsert);],,testCharPadding,244-244,[            statement = conn.prepareStatement(query);],,testCharPadding,255-255,[                statement = conn.prepareStatement(upsert);],,testCharPadding,269-269,[                statement = conn.prepareStatement(upsert);],,testCharPadding,282-282,[            statement = conn.prepareStatement(upsert);],,testCharPadding,288-288,[            assertCharacterPadding(conn.prepareStatement(query), "morning1", "xyz");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,185-185,[        PreparedStatement statement = conn.prepareStatement(query);],,getResultSet,186-186,[        ResultSet rs = statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateFunctions,115-115,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,testDateFunctions,133-133,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateGroupBy,159-159,[            rs = getResultSet(conn, query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testToDateFunctionBind,62-62,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testTypeMismatchToDateFunctionBind,83-83,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,185-185,[        PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/FunkyNamesIT.java,initTableValues,47-47,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testCount,157-157,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testScanUri,127-127,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/GroupByCaseIT.java,executeQuery,170-170,[        PreparedStatement st = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testGroupByCondition,73-73,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByCondition,103-103,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeDeleteUngroupedAggregation,525-525,[        Connection conn = DriverManager.getConnection(url, props);],,testPointInTimeDeleteUngroupedAggregation,542-542,[        Connection futureConn = DriverManager.getConnection(getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 3), props);],,testPointInTimeDeleteUngroupedAggregation,552-552,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,314-314,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,323-323,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,338-338,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedAggregation,411-411,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,435-435,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,447-447,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedLimitedAggregation,470-470,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,487-487,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,499-499,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,318-318,[        stmt.execute(updateStmt); // should commit too],,testPointInTimeGroupedAggregation,340-340,[        ResultSet rs = statement.executeQuery(query);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,upsert,149-149,[        stmt.setString(1, new String(val[0]));],,upsert,152-152,[        stmt.setString(1, new String(val[1]));],,upsert,155-155,[        stmt.setString(1, new String(val[2]));],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,72-72,[    protected static final byte[] K1  = new byte[] {'a'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,78-78,[    protected static final byte[] K11 = new byte[] {'k'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,79-79,[    protected static final byte[] K12 = new byte[] {'l'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,73-73,[    protected static final byte[] K3  = new byte[] {'c'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,74-74,[    protected static final byte[] K4  = new byte[] {'d'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,75-75,[    protected static final byte[] K5  = new byte[] {'e'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,76-76,[    protected static final byte[] K6  = new byte[] {'f'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,77-77,[    protected static final byte[] K9  = new byte[] {'i'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,70-70,[    protected static final byte[] KMIN  = new byte[] {'!'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,71-71,[    protected static final byte[] KMIN2  = new byte[] {'.'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,83-83,[    protected static final byte[] KP = new byte[] { 'p' };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,82-82,[    protected static final byte[] KR = new byte[] { 'r' };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,80-80,[    protected static final byte[] KMAX  = new byte[] {'~'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,,81-81,[    protected static final byte[] KMAX2  = new byte[] {'z'};],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,upsert,147-147,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/GuidePostsLifeCycleIT.java,testGuidePostsLifeCycle,126-126,[        conn.prepareStatement("SELECT COUNT(*) FROM STABLE").executeQuery(); ],,testGuidePostsLifeCycle,132-132,[        conn.prepareStatement("SELECT COUNT(*) FROM STABLE").executeQuery();],,testGuidePostsLifeCycle,138-138,[        conn.prepareStatement("SELECT COUNT(*) FROM STABLE").executeQuery();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,77-77,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,78-78,[        this.plans = plans;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1627-1627,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1628-1628,[                assertTrue (rs.next());],,testLeftJoin,1669-1669,[            conn.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1626-1626,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,testLeftJoin,1627-1627,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1628-1628,[                assertTrue (rs.next());],,testLeftJoin,1669-1669,[            conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,initTable,96-96,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOnDynamicColumns,3219-3219,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1626-1626,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2937-2937,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithIncomparableJoinKeyTypes,2765-2765,[            statement.executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOverSaltedTables,3080-3080,[            conn.createStatement().execute("CREATE TABLE " + tempTableNoSalting ],,testJoinOverSaltedTables,3083-3083,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithSalting ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithKeyRangeOptimization,3782-3782,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithCompositePK ],,testJoinWithKeyRangeOptimization,3828-3828,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,3849-3849,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,3879-3879,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testNonCorrelatedSubqueryWithRowConstructor,3970-3970,[            conn.createStatement().execute("CREATE TABLE " + tempItemJoinTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2940-2940,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testUpsertWithJoin,2947-2947,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,2953-2953,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,3023-3023,[            conn.createStatement().execute("CREATE TABLE " + sourceTable ],,testUpsertWithJoin,3028-3028,[            conn.createStatement().execute("CREATE TABLE " + joinTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,initTable,99-99,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinPlanWithIndex,2811-2811,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinPlanWithIndex,2830-2830,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithLimit,3737-3737,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithLimit,3769-3769,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSkipMergeOptimization,2858-2858,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSubqueryAndAggregation,3498-3498,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithSubqueryAndAggregation,3518-3518,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testJoinWithSubqueryAndAggregation,3547-3547,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,testJoinWithSubqueryAndAggregation,3567-3567,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query4);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithWildcard,2517-2517,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoinWithAggregation,1985-1985,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testLeftJoinWithAggregation,2005-2005,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testLeftJoinWithAggregation,2034-2034,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testNestedSubqueries,3690-3690,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testRightJoinWithAggregation,2076-2076,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testRightJoinWithAggregation,2105-2105,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSelfJoin,2900-2900,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testSelfJoin,2926-2926,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1949-1949,[                rs = conn.createStatement().executeQuery("EXPLAIN " + query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSubJoin,3399-3399,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOnDynamicColumns,3224-3224,[            stmt = conn.prepareStatement(ddlA);],,testJoinOnDynamicColumns,3228-3228,[            stmt = conn.prepareStatement(ddlB);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinOverSaltedTables,3087-3087,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,3096-3096,[            upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,3109-3109,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,3133-3133,[            statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,3172-3172,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithKeyRangeOptimization,3790-3790,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinWithKeyRangeOptimization,3805-3805,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,3835-3835,[            statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,3856-3856,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testNonCorrelatedSubqueryWithRowConstructor,3978-3978,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testNonCorrelatedSubqueryWithRowConstructor,4003-4003,[            PreparedStatement statement = conn.prepareStatement(query);],,testNonCorrelatedSubqueryWithRowConstructor,4015-4015,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2961-2961,[            PreparedStatement statement = conn.prepareStatement(query);],,testUpsertWithJoin,3035-3035,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testUpsertWithJoin,3059-3059,[            upsertStmt = conn.prepareStatement(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1626-1626,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testMultiLeftJoin,2228-2228,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1910-1910,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testLeadingPKWithTrailingRVC,34-34,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testLeadingPKWithTrailingRVC2,56-56,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,167-167,[            Connection baseConn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,190-190,[                            ResultSet rs = conn.createStatement().executeQuery(sql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,initializeAndGetTable,129-129,[            baseConn.createStatement().execute(tableDDL);],,initializeAndGetTable,135-135,[                conn.createStatement().execute(viewDDL);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,180-180,[                            conn.createStatement().execute("UPSERT INTO " + tableName + " " + upsertBody);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/InListIT.java,,216-223,[    List<String> DEFAULT_UPSERT_BODIES = Lists.transform(DEFAULT_UPSERTS, new Function<List<Object>, String>() {,         @Override,         public String apply(List<Object> input) {,             List<Object> pks = input.subList(0, 5);,             Object nonPk = input.get(5);,             ,             return "(pk1, pk2, pk3, pk4, pk5, nonPk) VALUES ( ",                 + Joiner.on(", ").join(pks) + ", '" + nonPk + "')";],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,38-68,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),"IntIntKeyTest",null, ts-2);,         Properties props = new Properties();,         props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 1)); // Execute at timestamp 1,         Connection conn = DriverManager.getConnection(getUrl(), props);,         String upsert = "UPSERT INTO IntIntKeyTest VALUES(4,2)";,         PreparedStatement upsertStmt = conn.prepareStatement(upsert);,         int rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         upsert = "UPSERT INTO IntIntKeyTest VALUES(6)";,         upsertStmt = conn.prepareStatement(upsert);,         rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         conn.commit();,         conn.close();,         ,         props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 1,         conn = DriverManager.getConnection(getUrl(), props);,         String select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NULL";,         ResultSet rs;,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(0,rs.getInt(1));,         assertTrue(rs.wasNull());,         assertFalse(rs.next());,         select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NOT NULL";,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(2,rs.getInt(1));,         assertFalse(rs.next());,     }],,testIsNullInPK,1739-1767,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),PTSDB_NAME,null, ts-2);, ,         // Insert all rows at ts,         String url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + ts;,         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);,         Connection conn = DriverManager.getConnection(url, props);,         conn.setAutoCommit(true);,         PreparedStatement stmt = conn.prepareStatement("upsert into PTSDB VALUES ('', '', ?, 0.5)");,         stmt.setDate(1, D1);,         stmt.execute();,         conn.close();, ,         String query = "SELECT HOST,INST,DATE FROM PTSDB WHERE HOST IS NULL AND INST IS NULL AND DATE=?";,         url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 5); // Run query at timestamp 5,         conn = DriverManager.getConnection(url, props);,         try {,             PreparedStatement statement = conn.prepareStatement(query);,             statement.setDate(1, D1);,             ResultSet rs = statement.executeQuery();,             assertTrue(rs.next());,             assertNull(rs.getString(1));,             assertNull(rs.getString(2));,             assertEquals(D1, rs.getDate(3));,             assertFalse(rs.next());,         } finally {,             conn.close();,         },     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInCompositeKey,75-75,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testIsNullInCompositeKey,80-80,[        conn = DriverManager.getConnection(getUrl(), props);],,testIsNullInCompositeKey,87-87,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,42-42,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,initTableValues,168-168,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testKeyOnly,97-97,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,102-102,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/KeyOnlyIT.java,analyzeTable,186-186,[        conn.createStatement().execute(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/LpadFunctionIT.java,testLpadHelper,64-64,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,49-49,[      byte[] first = MessageDigest.getInstance("MD5").digest(testString.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,69-69,[      byte[] pk1 = MessageDigest.getInstance("MD5").digest(testString1.getBytes());],,testUpsert,70-70,[      byte[] pk2 = MessageDigest.getInstance("MD5").digest(testString2.getBytes());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,44-44,[      conn.createStatement().execute(dml);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,64-64,[      conn.createStatement().execute(dml);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MultiCfQueryExecIT.java,testDefaultCFToDisambiguate,235-235,[        Connection conn = DriverManager.getConnection(url);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MultiCfQueryExecIT.java,analyzeTable,111-111,[        conn.createStatement().execute(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testFilterOnTrailingKeyColumn,1581-1581,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testResetColumnInSameTxn,843-843,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testSaltedOrderBy,1983-1983,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ProductMetricsIT.java,helpTestOrderByNullColumns,1551-1551,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToExistingFamily,861-861,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToExistingFamily,870-870,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToNewFamily,892-892,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToNewFamily,897-897,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddPKColumn,919-919,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddPKColumn,930-930,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateDropTable,533-533,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testCreateDropTable,551-551,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,628-628,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateViewOnExistingTable,676-676,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,769-769,[            Connection conn75 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,785-785,[            Connection conn8 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,799-799,[            Connection conn91 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,805-805,[            Connection conn92 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,821-821,[            Connection conn92a = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,828-828,[            Connection conn93 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,839-839,[            Connection conn94 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropAllKVCols,1011-1011,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1018-1018,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1025-1025,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1030-1030,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1037-1037,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1042-1042,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropKVColumn,952-952,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,958-958,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,968-968,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,973-973,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,978-978,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropPKColumn,992-992,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testNewerTableDisallowed,1056-1056,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,630-630,[        ResultSet rs = conn2.createStatement().executeQuery(query);],,testCreateOnExistingTable,635-635,[        rs = conn2.createStatement().executeQuery(query);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeSequence,340-340,[            rs = conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testIntFilter,97-97,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,107-107,[        upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,113-113,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testNoStringValue,209-209,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testNoStringValue,218-218,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeScan,250-250,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,265-265,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testPointInTimeScan,272-272,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,284-284,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeSequence,316-316,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,323-323,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,330-330,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,338-338,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,349-349,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,356-356,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testSplitWithCachedMeta,735-735,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testSumOverNullIntegerColumn,821-821,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testSumOverNullIntegerColumn,840-840,[        conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testTimestamp,403-403,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testTimestamp,424-424,[        conn1 = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/QueryIT.java,testPointInTimeSequence,309-309,[            conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryIT.java,testSumOverNullIntegerColumn,819-819,[        conn.createStatement().execute("UPSERT INTO atable(organization_id,entity_id,a_integer) VALUES('" + getOrganizationId() + "','" + ROW3 + "',NULL)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryIT.java,analyzeTable,859-859,[        conn.createStatement().execute(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryIT.java,testValidStringConcatExpression,666-666,[        		PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,doQueryMore,246-246,[            Connection globalConn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,testQueryMore,92-92,[        Connection conn = DriverManager.getConnection(getUrl());],,testQueryMore,105-105,[        Connection conn2 = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,161-161,[        Connection conn = dataTableMultiTenant ? getTenantSpecificConnection(tenantId) : DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,188-188,[                conn.createStatement().execute("DROP SEQUENCE " + sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,testQueryMore,93-93,[        conn.createStatement().execute(cursorTableDDL);],,testQueryMore,94-94,[        conn.createStatement().execute(baseDataTableDDL);],,testQueryMore,106-106,[        ResultSet rs = conn2.createStatement().executeQuery("SELECT count(*) from " + cursorTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,188-188,[                conn.createStatement().execute("DROP SEQUENCE " + sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,createTenantSpecificViewIfNecessary,202-202,[        tenantConn.createStatement().execute("CREATE VIEW IF NOT EXISTS " + tenantViewName + " AS SELECT * FROM " + baseTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,164-164,[        conn.createStatement().execute("CREATE SEQUENCE " + sequenceName + " CACHE " + Long.MAX_VALUE);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,178-178,[            PreparedStatement stmt = conn.prepareStatement(upsertSelectDML);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,createHistoryTableRows,134-134,[            PreparedStatement stmt = conn.prepareStatement(upsertDML);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,doQueryMore,243-243,[        PreparedStatement stmt = tenantConn.prepareStatement(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryPlanIT.java,testExplainPlan,191-191,[                ResultSet rs = statement.executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,initTableValues,50-50,[        Connection upsertConn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testConnectionReadIsolationLevel,127-127,[        Connection conn = DriverManager.getConnection(url, PropertiesUtil.deepCopy(TEST_PROPERTIES));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testStatementReadIsolationLevel,74-74,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testStatementReadIsolationLevel,77-77,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RegexpSubstrFunctionIT.java,testGroupByScanWithRegexpSubstr,61-61,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ReverseFunctionIT.java,initTable,37-37,[        conn.createStatement().execute(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReverseScanIT.java,doSetup,59-59,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,93-93,[            closeStmtAndConn(stmt, conn);],,initTable,67-67,[        PreparedStatement stmt = null;],,initTable,69-69,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,93-93,[            closeStmtAndConn(stmt, conn);],,initTable,66-66,[        Connection conn = null;],,initTable,69-69,[            conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithMultiCompKeysForIn,877-877,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testRVCWithMultiCompKeysForIn,882-882,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testForceSkipScan,1239-1239,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithCompositePK],,testForceSkipScan,1277-1277,[            rs = conn.createStatement().executeQuery(explainQuery);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithInListClauseUsingSubsetOfPKColsInOrder,797-797,[                statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testForceSkipScan,1247-1247,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testForceSkipScan,1259-1259,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testNestedRVCBasic,739-739,[                    statement = conn.prepareStatement(queries[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ScanQueryIT.java,testPointInTimeLimitedScan,453-453,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,472-472,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,484-484,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1169-1169,[            ResultSet rs = stmt.executeQuery();],,assertSequenceValuesForSingleRow,1170-1170,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1167-1167,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,assertSequenceValuesForSingleRow,1168-1168,[        for (long seqVal : seqVals) {],,assertSequenceValuesForSingleRow,1169-1169,[            ResultSet rs = stmt.executeQuery();],,assertSequenceValuesForSingleRow,1170-1170,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1184-1184,[        ResultSet rs = stmt.executeQuery();],,assertSequenceValuesMultipleSeq,1185-1185,[        for (long seqVal : seqVals) {],,assertSequenceValuesMultipleSeq,1189-1189,[        assertFalse(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1183-1183,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,assertSequenceValuesMultipleSeq,1184-1184,[        ResultSet rs = stmt.executeQuery();],,assertSequenceValuesMultipleSeq,1185-1185,[        for (long seqVal : seqVals) {],,assertSequenceValuesMultipleSeq,1189-1189,[        assertFalse(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1167-1167,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1183-1183,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConn,470-470,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConnWithStmtClose,508-508,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testExplainPlanValidatesSequences,671-671,[            conn.createStatement().executeQuery("EXPLAIN SELECT NEXT VALUE FOR zzz FROM foo");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testSequenceNotFound,108-108,[			conn.prepareStatement(query).executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ServerExceptionIT.java,testServerExceptionBackToClient,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
PERFORMANCE,DM_STRING_CTOR,org/apache/phoenix/end2end/SkipRangeParallelIteratorRegionSplitterIT.java,initTableValues,307-307,[        stmt.setString(1, new String("a1A"));],,initTableValues,310-310,[        stmt.setString(1, new String("a1E"));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipRangeParallelIteratorRegionSplitterIT.java,initTableValues,304-304,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipRangeParallelIteratorRegionSplitterIT.java,testGetSplitsWithSkipScanFilter,105-105,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanAfterManualSplitIT.java,initTable,80-80,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testInQuery,126-126,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSelectAfterUpsertInQuery,110-110,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharParallelListInQuery,147-147,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXInQuery,165-165,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXIntInQuery,192-192,[        Connection conn = DriverManager.getConnection(getUrl());],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendColumns,374-374,[                appendedColumns += ",";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendPlaceholders,385-385,[                placeholderList += ",";],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderFIT.java,runQuery,392-392,[        PreparedStatement stmt = connection.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderFIT.java,runQueryTest,336-336,[            PreparedStatement stmt = conn.prepareStatement(dml);],,runQueryTest,353-353,[                runQuery(conn, query, expectedRows);],,runQueryTest,361-361,[                runQuery(conn, query, reverse(expectedRows));],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderFIT.java,appendOrderBy,556-556,[                query += orderBy.columnNames.get(i) + " " + orderBy.directions.get(i).toString() + " ";],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/phoenix/end2end/SpillableGroupByIT.java,testScanUri,126-126,[                int a = Integer.valueOf(rs.getString(6)).intValue();],,testScanUri,127-127,[                int b = Integer.valueOf(rs.getString(7)).intValue();],,testScanUri,128-128,[                assertEquals(Integer.valueOf(uri).intValue(), Math.min(a, b));],,testScanUri,129-129,[                assertEquals(NUM_ROWS_INSERTED / 2 + Integer.valueOf(uri), Math.max(a, b));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatementHintsIT.java,initTableValues,45-45,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,95-95,[        conn = upsertValues(props, "x");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,83-83,[        long ts = nextTimestamp();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsForTheTable,69-69,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,121-121,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/StatsCollectorIT.java,upsertStmt,211-211,[        stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?,?)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,136-136,[        MaxKeyChange maxKeyChange = new MaxKeyChange(stats, table);],,testStatsManager,189-189,[        maxKeyChange = new MaxKeyChange(stats, table);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,164-164,[        minKeyChange = new MinKeyChange(stats, table);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,149-149,[        delStmt.setString(1, new String(KMIN));],,testStatsManager,152-152,[        upsertStmt.setString(1, new String(KMIN2));],,testStatsManager,174-174,[        delStmt.setString(1, new String(KMAX));],,testStatsManager,176-176,[        upsertStmt.setString(1, new String(KMAX2));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsManagerIT.java,testStatsManager,147-147,[        conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testCreateTenantTableTwice,75-75,[        catch (TableAlreadyExistsException expected) {}],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,249-249,[                rs = conn.createStatement().executeQuery("select tenant_col from TENANT_TABLE");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,206-206,[        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAllowDropParentTableWithCascadeAndSingleTenantTable,364-364,[			connTenant = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testDeletionOfParentTableFailsOnTenantSpecificConnection,114-114,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAllowDropParentTableWithCascadeAndSingleTenantTable,368-368,[	    	if (conn != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/TenantSpecificTablesDMLIT.java,analyzeTable,476-476,[        conn.createStatement().execute(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,70-70,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,130-130,[            conn.createStatement().executeQuery("select * from mt_base where (pk1,pk2) IN (('a','b'),('b','b'))");],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,190-194,[        String pattern = "yy.MM.dd G HH:mm:ss z";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         String query = "select pk from " + TO_CHAR_TABLE_NAME + " WHERE to_char(col_timestamp, '" + pattern + "') = '" + expectedString + "'";,         runOneRowFilterQuery(query, 2);,     }],,testTimeStampFilter,251-255,[    	String pattern = "yyMMddHHmmssZ";,         String query = "SELECT a_id FROM " + TO_NUMBER_TABLE_NAME + " WHERE to_number(a_timestamp, '" + pattern + "') = " + row1Timestamp.getTime() ;,         int expectedId = 1;,         runOneRowQueryTest(query, expectedId);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,150-154,[        String pattern = "yyMMddHHmmssZ";,         String query = "select to_char(col_timestamp, '" + pattern + "') from " + TO_CHAR_TABLE_NAME + " WHERE pk = 2";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         runOneRowProjectionQuery(query, expectedString);,     }],,testTimeStampProjection,273-276,[        String query = "select to_number(a_timestamp) from " + TO_NUMBER_TABLE_NAME + " where a_id = 3";,         BigDecimal expectedDecimalValue = new BigDecimal(row3Timestamp.getTime());,         runOneRowQueryTest(query, expectedDecimalValue);,     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToCharFunctionIT.java,initTable,87-87,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateFilter,177-177,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateProjection,137-137,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalFilter,209-209,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalProjection,169-169,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerFilter,201-201,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerProjection,161-161,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeFilter,185-185,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeProjection,145-145,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,193-193,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,153-153,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowFilterQuery,217-217,[    	runOneRowQueryTest(oneRowQuery, pkValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowProjectionQuery,213-213,[    	runOneRowQueryTest(oneRowQuery, null, projectedValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowQueryTest,223-223,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToNumberFunctionIT.java,initTable,97-97,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testDateFilter,222-222,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeFilter,231-231,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeStampFilter,254-254,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,283-283,[    	runOneRowQueryTest(oneRowQuery, true, expectedIntValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,279-279,[    	runOneRowQueryTest(oneRowQuery, false, null, expectedDecimalValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,289-289,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TopNIT.java,testTopNDelete,125-125,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntKV,297-297,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntPK,131-131,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerKV,214-214,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerPK,45-45,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,94-94,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,102-102,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,124-124,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,166-166,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectEmptyPKColumn,212-212,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,225-225,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,258-258,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,271-271,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,304-304,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,315-315,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectForAgg,388-388,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectForAgg,427-427,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectLongToInt,463-463,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,472-472,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,481-481,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectOnDescToAsc,563-563,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,572-572,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,582-582,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRowKeyMutationOnSplitedTable,603-603,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,614-614,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,626-626,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRunOnServer,500-500,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,509-509,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,519-519,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,528-528,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,537-537,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,546-546,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithLimit,644-644,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,656-656,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,678-678,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,684-684,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequence,712-712,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequence,731-731,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequenceAndOrderByWithSalting,757-757,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequenceAndOrderByWithSalting,770-770,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequenceAndOrderByWithSalting,785-785,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,95-95,[            conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + indexName + " ON " + TestUtil.ATABLE_NAME + "(a_string)" );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,107-107,[            upsertStmt = conn.prepareStatement("EXPLAIN " + upsert);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,443-443,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,437-437,[        PreparedStatement pstmt = null;],,testBatchedUpsert,439-439,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,443-443,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,436-436,[        Connection conn = null;],,testBatchedUpsert,439-439,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,305-305,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,299-299,[        PreparedStatement stmt = null;],,testTimestampAddSubtractArithmetic,301-301,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,305-305,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,298-298,[        Connection conn = null;],,testTimestampAddSubtractArithmetic,301-301,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,264-264,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,258-258,[        PreparedStatement stmt = null;],,testTimestampSerializedAndDeserializedCorrectly,260-260,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,264-264,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,257-257,[        Connection conn = null;],,testTimestampSerializedAndDeserializedCorrectly,260-260,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,540-540,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,534-534,[        PreparedStatement stmt = null;],,testUpsertDateIntoDescUnsignedDate,536-536,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,540-540,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,533-533,[        Connection conn = null;],,testUpsertDateIntoDescUnsignedDate,536-536,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,403-403,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,397-397,[        PreparedStatement stmt = null;],,testUpsertIntoFloat,399-399,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,403-403,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,396-396,[        Connection conn = null;],,testUpsertIntoFloat,399-399,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,236-236,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,230-230,[        Statement stmt = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,232-232,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,236-236,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,229-229,[        Connection conn = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,232-232,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testGroupByWithLimitOverRowKey,56-56,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByWithLimitOverRowKey,69-69,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDate,146-146,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDate,151-151,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDescExpression,206-206,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDescExpression,211-211,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithExpression,118-118,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertVarCharWithMaxLength,169-169,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,174-174,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,181-181,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,188-188,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,194-194,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateValues,91-91,[        PreparedStatement upsertStmt = conn.prepareStatement("upsert into ptsdb(inst,host,date) values('aaa','bbb',to_date('" + dateString + "'))");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,721-721,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,722-722,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,720-720,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,721-721,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,722-722,[            assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initGroupByRowKeyColumns,73-73,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues,541-541,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues2,574-574,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initTableValues,100-100,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,714-714,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,720-720,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,731-731,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,739-739,[            PreparedStatement s = conn.prepareStatement(sql2);],,testBatchUpsert,747-747,[            PreparedStatement s = conn.prepareStatement(sql3);],,testBatchUpsert,755-755,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,763-763,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,771-771,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,785-785,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testEscapedQuoteScan,503-503,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testILikeOnColumn,1613-1613,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testIsNullInPK,1745-1745,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeFunctionOnRowKeyInWhere,2030-2030,[        Connection conn = DriverManager.getConnection(url);],,testLikeFunctionOnRowKeyInWhere,2035-2035,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeOnColumn,1496-1496,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingKVColumn,928-928,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingPKColumn,888-888,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testNullValueEqualityScan,446-446,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunctionOnRowKeyInWhere,1999-1999,[        Connection conn = DriverManager.getConnection(url);],,testRTrimFunctionOnRowKeyInWhere,2004-2004,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction2,1378-1378,[        Connection conn = DriverManager.getConnection(url, props);],,testRegexpSubstrFunction2,1385-1385,[        conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunctionOnRowKeyInWhere,1972-1972,[        Connection conn = DriverManager.getConnection(url);],,testSubstrFunctionOnRowKeyInWhere,1977-1977,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongKVColumn,1065-1065,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongPKColumn,1028-1028,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortKVColumn,956-956,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortPKColumn,992-992,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testVarLengthPKColScan,473-473,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToCharWithFormatOnDate,850-850,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToDateWithFormatOnDate,871-871,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testInListConstant,1477-1477,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLTrimFunction,1957-1957,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLengthFunction,1799-1799,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeConstant,1434-1434,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLowerFunction,1871-1871,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunction,1914-1914,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexReplaceFunction,1299-1299,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction,1361-1361,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunction,1240-1240,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTrimFunction,2090-2090,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testUpperFunction,1834-1834,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,validateCannotDropTableWithChildViewsWithoutCascade,340-340,[	        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,validateViewDoesNotExist,351-351,[            conn.createStatement().execute(ddl1);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/BaseMutableIndexIT.java,createTestTable,60-60,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/DropViewIT.java,testDropViewKeepsHTable,83-83,[        conn.createStatement().execute("create view " + HBASE_NATIVE +],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testIndexWithNullableFixedWithCols,166-166,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testIndexWithNullableFixedWithCols,137-137,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/index/IndexHandlerIT.java,cleanup,137-140,[        HBaseAdmin admin = UTIL.getHBaseAdmin();,         admin.disableTable(TestTable.getTableName());,         admin.deleteTable(TestTable.getTableName());,     }],,cleanUp,111-112,[	  TEST_UTIL.cleanupTestDir();,   }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/end2end/index/IndexHandlerIT.java,setPriority,95-95,[                count = new Integer(0);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreateDrop,121-121,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithNullableFixedWidthColInPK,292-292,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithRepeatedColumns,350-350,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithSameColumnNamesInTwoFamily,370-370,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertActiveIndex,103-103,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertNoActiveIndex,112-112,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreateDrop,265-265,[            conn.createStatement().execute("CREATE TABLE " + diffTableNameInSameSchema + "(k INTEGER PRIMARY KEY)");],,testIndexCreateDrop,267-267,[                conn.createStatement().execute("DROP INDEX IDX1 ON " + diffTableNameInSameSchema);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/index/IndexTestUtil.java,readDataTableIndexRow,68-68,[        PreparedStatement stmt = conn.prepareStatement(SELECT_DATA_INDEX_ROW);],,readDataTableIndexRow,69-69,[        stmt.setString(1, schemaName);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testBuildIndexWhenUserTableAlreadyHasData,225-225,[            for(Result r:scanner){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testDropLocalIndexShouldDeleteDataFromLocalIndexTable,508-508,[                for(Result r:scanner){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testPutsToLocalIndexTable,192-192,[            for(Result r:scanner){],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/LocalIndexIT.java,createBaseTable,78-78,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/LocalIndexIT.java,testIndexPlanSelectionIfBothGlobalAndLocalIndexesHasSameColumnsAndOrder,470-470,[        Connection conn1 = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanAfterRegionSplit,641-641,[                conn1.createStatement().execute(],,testLocalIndexScanAfterRegionSplit,682-682,[                rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanAfterRegionSplit,689-689,[                rs = conn1.createStatement().executeQuery("EXPLAIN "+query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,createBaseTable,87-87,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testIndexPlanSelectionIfBothGlobalAndLocalIndexesHasSameColumnsAndOrder,479-479,[        ResultSet rs1 = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScan,255-255,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,273-273,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,296-296,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScan,303-303,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanJoinColumnsFromDataTable,358-358,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScanJoinColumnsFromDataTable,379-379,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,386-386,[            rs = conn1.createStatement().executeQuery(query);],,testLocalIndexScanJoinColumnsFromDataTable,413-413,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,421-421,[            rs = conn1.createStatement().executeQuery(query);],,testLocalIndexScanJoinColumnsFromDataTable,445-445,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,452-452,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanJoinColumnsFromDataTable,440-440,[            PhoenixPreparedStatement statement = conn1.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,testWriteFailureDisablesIndex,226-226,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testWriteFailureDisablesIndex,228-228,[        rs = conn.createStatement().executeQuery(query);],,testWriteFailureDisablesIndex,253-253,[        rs = conn.createStatement().executeQuery(query);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,doSetup,114-114,[        driver = initAndRegisterDriver(url, ReadOnlyProps.EMPTY_PROPS);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,doSetup,112-112,[        url = JDBC_PROTOCOL + JDBC_PROTOCOL_SEPARATOR + LOCALHOST + JDBC_PROTOCOL_SEPARATOR + clientPort],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,doSetup,109-109,[        util = new HBaseTestingUtility(conf);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,,320-324,[        this.util.waitFor(30000, 200, new Waiter.Predicate<Exception>() {,             @Override,             public boolean evaluate() throws Exception {,               ServerName sn = cluster.getServerHoldingRegion(indexRegion.getRegionName());,               return (sn != null && sn.equals(dstRS));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,run,376-376,[                PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?,?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,200-200,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testInFilterOnIndexedTable,1053-1053,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithCaseSensitiveCols,958-958,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithDecimalCol,1085-1085,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableDateCol,134-134,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableFixedWithCols,79-79,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/MutableIndexIT.java,testUpsertingNullForIndexedColumns,1131-1131,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testMultipleUpdatesAcrossRegions,917-917,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesAcrossRegions,927-927,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCompoundIndexKey,628-628,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCompoundIndexKey,635-635,[        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,650-650,[        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,669-669,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,220-220,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumnUpdates,227-227,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,249-249,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,271-271,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumns,507-507,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,514-514,[        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,528-528,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,535-535,[        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,549-549,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,556-556,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testInFilterOnIndexedTable,1063-1063,[	        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithCaseSensitiveCols,986-986,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithCaseSensitiveCols,1004-1004,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithDecimalCol,1102-1102,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithDecimalCol,1109-1109,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableDateCol,151-151,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,158-158,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithNullableDateCol,168-168,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,175-175,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testIndexWithNullableFixedWithCols,98-98,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableFixedWithCols,105-105,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testMultipleUpdatesToSingleRow,765-765,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesToSingleRow,775-775,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testSelectAllAndAliasWithIndex,335-335,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,342-342,[        rs = conn.createStatement().executeQuery(query);],,testSelectAllAndAliasWithIndex,360-360,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,371-371,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testSelectCF,422-422,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,426-426,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,432-432,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCompoundIndexKey,662-662,[        stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,242-242,[            stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME],,testCoveredColumnUpdates,264-264,[            stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumns,521-521,[        stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + "(k,v2) VALUES(?,?)");],,testCoveredColumns,542-542,[        stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + "(k,v2) VALUES(?,?)");],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,179-179,[        expectedPlan = tableSaltBuckets == null ? ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,108-108,[        conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + DATA_TABLE_FULL_NAME + " (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR)  " +  (tableSaltBuckets == null ? "" : " SALT_BUCKETS=" + tableSaltBuckets));],,testMutableTableIndexMaintanence,110-110,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,113-113,[        conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + INDEX_TABLE_NAME + " ON " + DATA_TABLE_FULL_NAME + " (v DESC)" + (indexSaltBuckets == null ? "" : " SALT_BUCKETS=" + indexSaltBuckets));],,testMutableTableIndexMaintanence,115-115,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,128-128,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,138-138,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,145-145,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,156-156,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,164-164,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,173-173,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,178-178,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,193-193,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,201-201,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,118-118,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/ViewIndexIT.java,testDeleteViewIndexSequences,74-74,[        HBaseAdmin admin = driver.getConnectionQueryServices(getUrl(), TestUtil.TEST_PROPERTIES).getAdmin();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,54-54,[        Connection conn = DriverManager.getConnection(getUrl());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,55-55,[        String ddl = "CREATE TABLE " + tableName + " (t_id VARCHAR NOT NULL,\n" +],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,62-62,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ViewIndexIT.java,testDeleteViewIndexSequences,71-71,[        conn1.createStatement().execute("CREATE VIEW " + VIEW_NAME + " AS SELECT * FROM " + DATA_TABLE_NAME);],,testDeleteViewIndexSequences,72-72,[        conn1.createStatement().execute("CREATE INDEX " + INDEX_TABLE_NAME + " ON " + VIEW_NAME + " (v1)");],,testDeleteViewIndexSequences,73-73,[        conn2.createStatement().executeQuery("SELECT * FROM " + DATA_TABLE_FULL_NAME).next();],,testDeleteViewIndexSequences,75-75,[        conn1.createStatement().execute("DROP VIEW " + VIEW_NAME);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoNormalTableFromSaltedTable,83-83,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoSaltedTableFromNormalTable,46-46,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSaltedTableIntoSaltedTable,125-125,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTable,162-162,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTableWithEmptyPKColumn,195-195,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,analyzeTable,119-119,[        conn.createStatement().execute(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,initTableValues,43-43,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,testSelectValueWithPointKeyQuery,71-71,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/execute/BaseQueryPlan.java,iterator,192-192,[        ScanUtil.setCustomAnnotations(scan, customAnnotations == null ? null : customAnnotations.getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/BaseQueryPlan.java,,229-237,[                iterator : new DelegateResultIterator(iterator) {,             @Override,             public void close() throws SQLException {,                 try {,                     super.close();,                 } finally {,                     SQLCloseables.closeAll(dependencies);,                 },             }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/execute/MutationState.java,,74-472,[public class MutationState implements SQLCloseable {,     private static final Logger logger = LoggerFactory.getLogger(MutationState.class);, ,     private PhoenixConnection connection;,     private final long maxSize;,     private final ImmutableBytesPtr tempPtr = new ImmutableBytesPtr();,     private final Map<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> mutations = Maps.newHashMapWithExpectedSize(3); // TODO: Sizing?,     private final long sizeOffset;,     private int numRows = 0;, ,     public MutationState(int maxSize, PhoenixConnection connection) {,         this(maxSize,connection,0);,     },     ,     public MutationState(int maxSize, PhoenixConnection connection, long sizeOffset) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,     },     ,     public MutationState(TableRef table, Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutations, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.mutations.put(table, mutations);,         this.sizeOffset = sizeOffset;,         this.numRows = mutations.size();,         throwIfTooBig();,     },     ,     private MutationState(List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> entries, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : entries) {,             numRows += entry.getValue().size();,             this.mutations.put(entry.getKey(), entry.getValue());,         },         throwIfTooBig();,     },     ,     private void throwIfTooBig() {,         if (numRows > maxSize) {,             // TODO: throw SQLException ?,             throw new IllegalArgumentException("MutationState size of " + numRows + " is bigger than max allowed size of " + maxSize);,         },     },     ,     public long getUpdateCount() {,         return sizeOffset + numRows;,     },     ,     /**,      * Combine a newer mutation with this one, where in the event of overlaps,,      * the newer one will take precedence.,      * @param newMutation the newer mutation,      */,     public void join(MutationState newMutation) {,         if (this == newMutation) { // Doesn't make sense,             return;,         },         // Merge newMutation with this one, keeping state from newMutation for any overlaps,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : newMutation.mutations.entrySet()) {,             // Replace existing entries for the table with new entries,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> existingRows = this.mutations.put(entry.getKey(), entry.getValue());,             if (existingRows != null) { // Rows for that table already exist,                 // Loop through new rows and replace existing with new,                 for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                     // Replace existing row with new row,                     Map<PColumn,byte[]> existingValues = existingRows.put(rowEntry.getKey(), rowEntry.getValue());,                     if (existingValues != null) {,                         if (existingValues != PRow.DELETE_MARKER) {,                             Map<PColumn,byte[]> newRow = rowEntry.getValue();,                             // if new row is PRow.DELETE_MARKER, it means delete, and we don't need to merge it with existing row. ,                             if (newRow != PRow.DELETE_MARKER) {,                                 // Replace existing column values with new column values,                                 for (Map.Entry<PColumn,byte[]> valueEntry : newRow.entrySet()) {,                                     existingValues.put(valueEntry.getKey(), valueEntry.getValue());,                                 },                                 // Now that the existing row has been merged with the new row, replace it back,                                 // again (since it was replaced with the new one above).,                                 existingRows.put(rowEntry.getKey(), existingValues);,                             },                         },                     } else {,                         numRows++;,                     },                 },                 // Put the existing one back now that it's merged,                 this.mutations.put(entry.getKey(), existingRows);,             } else {,                 numRows += entry.getValue().size();,             },         },         throwIfTooBig();,     },     ,     private Iterator<Pair<byte[],List<Mutation>>> addRowMutations(final TableRef tableRef, final Map<ImmutableBytesPtr, Map<PColumn, byte[]>> values, long timestamp, boolean includeMutableIndexes) {,         final List<Mutation> mutations = Lists.newArrayListWithExpectedSize(values.size());,         Iterator<Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>>> iterator = values.entrySet().iterator();,         while (iterator.hasNext()) {,             Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry = iterator.next();,             ImmutableBytesPtr key = rowEntry.getKey();,             PRow row = tableRef.getTable().newRow(connection.getKeyValueBuilder(), timestamp, key);,             if (rowEntry.getValue() == PRow.DELETE_MARKER) { // means delete,                 row.delete();,             } else {,                 for (Map.Entry<PColumn,byte[]> valueEntry : rowEntry.getValue().entrySet()) {,                     row.setValue(valueEntry.getKey(), valueEntry.getValue());,                 },             },             mutations.addAll(row.toRowMutations());,         },         final Iterator<PTable> indexes = // Only maintain tables with immutable rows through this client-side mechanism,                 (tableRef.getTable().isImmutableRows() || includeMutableIndexes) ? ,                         IndexMaintainer.nonDisabledIndexIterator(tableRef.getTable().getIndexes().iterator()) : ,                         Iterators.<PTable>emptyIterator();,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             boolean isFirst = true;, ,             @Override,             public boolean hasNext() {,                 return isFirst || indexes.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (isFirst) {,                     isFirst = false;,                     return new Pair<byte[],List<Mutation>>(tableRef.getTable().getPhysicalName().getBytes(),mutations);,                 },                 PTable index = indexes.next();,                 List<Mutation> indexMutations;,                 try {,                     indexMutations =,                             IndexUtil.generateIndexData(tableRef.getTable(), index, mutations,,                                 tempPtr, connection.getKeyValueBuilder());,                 } catch (SQLException e) {,                     throw new IllegalDataException(e);,                 },                 return new Pair<byte[],List<Mutation>>(index.getPhysicalName().getBytes(),indexMutations);,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },     ,     /**,      * Get the unsorted list of HBase mutations for the tables with uncommitted data.,      * @return list of HBase mutations for uncommitted data.,      */,     public Iterator<Pair<byte[],List<Mutation>>> toMutations() {,         return toMutations(false);,     },     ,     public Iterator<Pair<byte[],List<Mutation>>> toMutations(final boolean includeMutableIndexes) {,         final Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         if (!iterator.hasNext()) {,             return Iterators.emptyIterator();,         },         Long scn = connection.getSCN();,         final long timestamp = scn == null ? HConstants.LATEST_TIMESTAMP : scn;,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             private Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> current = iterator.next();,             private Iterator<Pair<byte[],List<Mutation>>> innerIterator = init();,                     ,             private Iterator<Pair<byte[],List<Mutation>>> init() {,                 return addRowMutations(current.getKey(), current.getValue(), timestamp, includeMutableIndexes);,             },             ,             @Override,             public boolean hasNext() {,                 return innerIterator.hasNext() || iterator.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (!innerIterator.hasNext()) {,                     current = iterator.next();,                 },                 return innerIterator.next();,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },         ,     /**,      * Validates that the meta data is valid against the server meta data if we haven't yet done so.,      * Otherwise, for every UPSERT VALUES call, we'd need to hit the server to see if the meta data,      * has changed.,      * @param connection,      * @return the server time to use for the upsert,      * @throws SQLException if the table or any columns no longer exist,      */,     private long[] validate() throws SQLException {,         int i = 0;,         Long scn = connection.getSCN();,         MetaDataClient client = new MetaDataClient(connection);,         long[] timeStamps = new long[this.mutations.size()];,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : mutations.entrySet()) {,             TableRef tableRef = entry.getKey();,             long serverTimeStamp = tableRef.getTimeStamp();,             PTable table = tableRef.getTable();,             // If we're auto committing, we've already validated the schema when we got the ColumnResolver,,             // so no need to do it again here.,             if (!connection.getAutoCommit()) {,                 MetaDataMutationResult result = client.updateCache(table.getSchemaName().getString(), table.getTableName().getString());,                 long timestamp = result.getMutationTime();,                 if (timestamp != QueryConstants.UNSET_TIMESTAMP) {,                     serverTimeStamp = timestamp;,                     if (result.wasUpdated()) {,                         // TODO: use bitset?,                         table = result.getTable();,                         PColumn[] columns = new PColumn[table.getColumns().size()];,                         for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                             Map<PColumn,byte[]> valueEntry = rowEntry.getValue();,                             if (valueEntry != PRow.DELETE_MARKER) {,                                 for (PColumn column : valueEntry.keySet()) {,                                     columns[column.getPosition()] = column;,                                 },                             },                         },                         for (PColumn column : columns) {,                             if (column != null) {,                                 table.getColumnFamily(column.getFamilyName().getString()).getColumn(column.getName().getString());,                             },                         },                         tableRef.setTable(table);,                     },                 },             },             timeStamps[i++] = scn == null ? serverTimeStamp == QueryConstants.UNSET_TIMESTAMP ? HConstants.LATEST_TIMESTAMP : serverTimeStamp : scn;,         },         return timeStamps;,     },     ,     private static void logMutationSize(HTableInterface htable, List<Mutation> mutations, PhoenixConnection connection) {,         long byteSize = 0;,         int keyValueCount = 0;,         for (Mutation mutation : mutations) {,             if (mutation.getFamilyCellMap() != null) { // Not a Delete of the row,                 for (Entry<byte[], List<Cell>> entry : mutation.getFamilyCellMap().entrySet()) {,                     if (entry.getValue() != null) {,                         for (Cell kv : entry.getValue()) {,                             byteSize += CellUtil.estimatedSizeOf(kv);,                             keyValueCount++;,                         },                     },                 },             },         },         logger.debug(LogUtil.addCustomAnnotations("Sending " + mutations.size() + " mutations for " + Bytes.toString(htable.getTableName()) + " with " + keyValueCount + " key values of total size " + byteSize + " bytes", connection));,     },     ,     @SuppressWarnings("deprecation"),     public void commit() throws SQLException {,         int i = 0;,         byte[] tenantId = connection.getTenantId() == null ? null : connection.getTenantId().getBytes();,         long[] serverTimeStamps = validate();,         Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> committedList = Lists.newArrayListWithCapacity(this.mutations.size());, ,         // add tracing for this operation,         TraceScope trace = Tracing.startNewSpan(connection, "Committing mutations to tables");,         Span span = trace.getSpan();,         while (iterator.hasNext()) {,             Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry = iterator.next();,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> valuesMap = entry.getValue();,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             table.getIndexMaintainers(tempPtr);,             boolean hasIndexMaintainers = tempPtr.getLength() > 0;,             boolean isDataTable = true;,             long serverTimestamp = serverTimeStamps[i++];,             Iterator<Pair<byte[],List<Mutation>>> mutationsIterator = addRowMutations(tableRef, valuesMap, serverTimestamp, false);,             while (mutationsIterator.hasNext()) {,                 Pair<byte[],List<Mutation>> pair = mutationsIterator.next();,                 byte[] htableName = pair.getFirst();,                 List<Mutation> mutations = pair.getSecond();,                 ,                 //create a span per target table,                 //TODO maybe we can be smarter about the table name to string here?,                 Span child = Tracing.child(span,"Writing mutation batch for table: "+Bytes.toString(htableName));, ,                 int retryCount = 0;,                 boolean shouldRetry = false;,                 do {,                     ServerCache cache = null;,                     if (hasIndexMaintainers && isDataTable) {,                         byte[] attribValue = null;,                         byte[] uuidValue;,                         if (IndexMetaDataCacheClient.useIndexMetadataCache(connection, mutations, tempPtr.getLength())) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(mutations, tempPtr);,                             child.addTimelineAnnotation("Updated index metadata cache");,                             uuidValue = cache.getId();,                             // If we haven't retried yet, retry for this case only, as it's possible that,                             // a split will occur after we send the index metadata cache to all known,                             // region servers.,                             shouldRetry = true;,                         } else {,                             attribValue = ByteUtil.copyKeyBytesIfNecessary(tempPtr);,                             uuidValue = ServerCacheClient.generateId();,                         },                         // Either set the UUID to be able to access the index metadata from the cache,                         // or set the index metadata directly on the Mutation,                         for (Mutation mutation : mutations) {,                             if (tenantId != null) {,                                 mutation.setAttribute(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);,                             },                             mutation.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             if (attribValue != null) {,                                 mutation.setAttribute(PhoenixIndexCodec.INDEX_MD, attribValue);,                             },                         },                     },                     ,                     SQLException sqlE = null;,                     HTableInterface hTable = connection.getQueryServices().getTable(htableName);,                     try {,                         if (logger.isDebugEnabled()) logMutationSize(hTable, mutations, connection);,                         long startTime = System.currentTimeMillis();,                         child.addTimelineAnnotation("Attempt " + retryCount);,                         hTable.batch(mutations);,                         child.stop();,                         shouldRetry = false;,                         if (logger.isDebugEnabled()) logger.debug(LogUtil.addCustomAnnotations("Total time for batch call of  " + mutations.size() + " mutations into " + table.getName().getString() + ": " + (System.currentTimeMillis() - startTime) + " ms", connection));,                         committedList.add(entry);,                     } catch (Exception e) {,                         SQLException inferredE = ServerUtil.parseServerExceptionOrNull(e);,                         if (inferredE != null) {,                             if (shouldRetry && retryCount == 0 && inferredE.getErrorCode() == SQLExceptionCode.INDEX_METADATA_NOT_FOUND.getErrorCode()) {,                                 // Swallow this exception once, as it's possible that we split after sending the index metadata,                                 // and one of the region servers doesn't have it. This will cause it to have it the next go around.,                                 // If it fails again, we don't retry.,                                 String msg = "Swallowing exception and retrying after clearing meta cache on connection. " + inferredE;,                                 logger.warn(LogUtil.addCustomAnnotations(msg, connection));,                                 connection.getQueryServices().clearTableRegionCache(htableName);, ,                                 // add a new child span as this one failed,                                 child.addTimelineAnnotation(msg);,                                 child.stop();,                                 child = Tracing.child(span,"Failed batch, attempting retry");, ,                                 continue;,                             },                             e = inferredE;,                         },                         // Throw to client with both what was committed so far and what is left to be committed.,                         // That way, client can either undo what was done or try again with what was not done.,                         sqlE = new CommitException(e, this, new MutationState(committedList, this.sizeOffset, this.maxSize, this.connection));,                     } finally {,                         try {,                             hTable.close();,                         } catch (IOException e) {,                             if (sqlE != null) {,                                 sqlE.setNextException(ServerUtil.parseServerException(e));,                             } else {,                                 sqlE = ServerUtil.parseServerException(e);,                             },                         } finally {,                             try {,                                 if (cache != null) {,                                     cache.close();,                                 },                             } finally {,                                 if (sqlE != null) {,                                     throw sqlE;,                                 },                             },                         },                     },                 } while (shouldRetry && retryCount++ < 1);,                 isDataTable = false;,             },             numRows -= entry.getValue().size();,             iterator.remove(); // Remove batches as we process them,         },         trace.close();,         assert(numRows==0);,         assert(this.mutations.isEmpty());,     },     ,     public void rollback(PhoenixConnection connection) throws SQLException {,         this.mutations.clear();,         numRows = 0;,     },     ,     @Override,     public void close() throws SQLException {,     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/execute/MutationState.java,,74-472,[public class MutationState implements SQLCloseable {,     private static final Logger logger = LoggerFactory.getLogger(MutationState.class);, ,     private PhoenixConnection connection;,     private final long maxSize;,     private final ImmutableBytesPtr tempPtr = new ImmutableBytesPtr();,     private final Map<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> mutations = Maps.newHashMapWithExpectedSize(3); // TODO: Sizing?,     private final long sizeOffset;,     private int numRows = 0;, ,     public MutationState(int maxSize, PhoenixConnection connection) {,         this(maxSize,connection,0);,     },     ,     public MutationState(int maxSize, PhoenixConnection connection, long sizeOffset) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,     },     ,     public MutationState(TableRef table, Map<ImmutableBytesPtr,Map<PColumn,byte[]>> mutations, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.mutations.put(table, mutations);,         this.sizeOffset = sizeOffset;,         this.numRows = mutations.size();,         throwIfTooBig();,     },     ,     private MutationState(List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> entries, long sizeOffset, long maxSize, PhoenixConnection connection) {,         this.maxSize = maxSize;,         this.connection = connection;,         this.sizeOffset = sizeOffset;,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : entries) {,             numRows += entry.getValue().size();,             this.mutations.put(entry.getKey(), entry.getValue());,         },         throwIfTooBig();,     },     ,     private void throwIfTooBig() {,         if (numRows > maxSize) {,             // TODO: throw SQLException ?,             throw new IllegalArgumentException("MutationState size of " + numRows + " is bigger than max allowed size of " + maxSize);,         },     },     ,     public long getUpdateCount() {,         return sizeOffset + numRows;,     },     ,     /**,      * Combine a newer mutation with this one, where in the event of overlaps,,      * the newer one will take precedence.,      * @param newMutation the newer mutation,      */,     public void join(MutationState newMutation) {,         if (this == newMutation) { // Doesn't make sense,             return;,         },         // Merge newMutation with this one, keeping state from newMutation for any overlaps,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : newMutation.mutations.entrySet()) {,             // Replace existing entries for the table with new entries,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> existingRows = this.mutations.put(entry.getKey(), entry.getValue());,             if (existingRows != null) { // Rows for that table already exist,                 // Loop through new rows and replace existing with new,                 for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                     // Replace existing row with new row,                     Map<PColumn,byte[]> existingValues = existingRows.put(rowEntry.getKey(), rowEntry.getValue());,                     if (existingValues != null) {,                         if (existingValues != PRow.DELETE_MARKER) {,                             Map<PColumn,byte[]> newRow = rowEntry.getValue();,                             // if new row is PRow.DELETE_MARKER, it means delete, and we don't need to merge it with existing row. ,                             if (newRow != PRow.DELETE_MARKER) {,                                 // Replace existing column values with new column values,                                 for (Map.Entry<PColumn,byte[]> valueEntry : newRow.entrySet()) {,                                     existingValues.put(valueEntry.getKey(), valueEntry.getValue());,                                 },                                 // Now that the existing row has been merged with the new row, replace it back,                                 // again (since it was replaced with the new one above).,                                 existingRows.put(rowEntry.getKey(), existingValues);,                             },                         },                     } else {,                         numRows++;,                     },                 },                 // Put the existing one back now that it's merged,                 this.mutations.put(entry.getKey(), existingRows);,             } else {,                 numRows += entry.getValue().size();,             },         },         throwIfTooBig();,     },     ,     private Iterator<Pair<byte[],List<Mutation>>> addRowMutations(final TableRef tableRef, final Map<ImmutableBytesPtr, Map<PColumn, byte[]>> values, long timestamp, boolean includeMutableIndexes) {,         final List<Mutation> mutations = Lists.newArrayListWithExpectedSize(values.size());,         Iterator<Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>>> iterator = values.entrySet().iterator();,         while (iterator.hasNext()) {,             Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry = iterator.next();,             ImmutableBytesPtr key = rowEntry.getKey();,             PRow row = tableRef.getTable().newRow(connection.getKeyValueBuilder(), timestamp, key);,             if (rowEntry.getValue() == PRow.DELETE_MARKER) { // means delete,                 row.delete();,             } else {,                 for (Map.Entry<PColumn,byte[]> valueEntry : rowEntry.getValue().entrySet()) {,                     row.setValue(valueEntry.getKey(), valueEntry.getValue());,                 },             },             mutations.addAll(row.toRowMutations());,         },         final Iterator<PTable> indexes = // Only maintain tables with immutable rows through this client-side mechanism,                 (tableRef.getTable().isImmutableRows() || includeMutableIndexes) ? ,                         IndexMaintainer.nonDisabledIndexIterator(tableRef.getTable().getIndexes().iterator()) : ,                         Iterators.<PTable>emptyIterator();,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             boolean isFirst = true;, ,             @Override,             public boolean hasNext() {,                 return isFirst || indexes.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (isFirst) {,                     isFirst = false;,                     return new Pair<byte[],List<Mutation>>(tableRef.getTable().getPhysicalName().getBytes(),mutations);,                 },                 PTable index = indexes.next();,                 List<Mutation> indexMutations;,                 try {,                     indexMutations =,                             IndexUtil.generateIndexData(tableRef.getTable(), index, mutations,,                                 tempPtr, connection.getKeyValueBuilder());,                 } catch (SQLException e) {,                     throw new IllegalDataException(e);,                 },                 return new Pair<byte[],List<Mutation>>(index.getPhysicalName().getBytes(),indexMutations);,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },     ,     /**,      * Get the unsorted list of HBase mutations for the tables with uncommitted data.,      * @return list of HBase mutations for uncommitted data.,      */,     public Iterator<Pair<byte[],List<Mutation>>> toMutations() {,         return toMutations(false);,     },     ,     public Iterator<Pair<byte[],List<Mutation>>> toMutations(final boolean includeMutableIndexes) {,         final Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         if (!iterator.hasNext()) {,             return Iterators.emptyIterator();,         },         Long scn = connection.getSCN();,         final long timestamp = scn == null ? HConstants.LATEST_TIMESTAMP : scn;,         return new Iterator<Pair<byte[],List<Mutation>>>() {,             private Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> current = iterator.next();,             private Iterator<Pair<byte[],List<Mutation>>> innerIterator = init();,                     ,             private Iterator<Pair<byte[],List<Mutation>>> init() {,                 return addRowMutations(current.getKey(), current.getValue(), timestamp, includeMutableIndexes);,             },             ,             @Override,             public boolean hasNext() {,                 return innerIterator.hasNext() || iterator.hasNext();,             }, ,             @Override,             public Pair<byte[], List<Mutation>> next() {,                 if (!innerIterator.hasNext()) {,                     current = iterator.next();,                 },                 return innerIterator.next();,             }, ,             @Override,             public void remove() {,                 throw new UnsupportedOperationException();,             },             ,         };,     },         ,     /**,      * Validates that the meta data is valid against the server meta data if we haven't yet done so.,      * Otherwise, for every UPSERT VALUES call, we'd need to hit the server to see if the meta data,      * has changed.,      * @param connection,      * @return the server time to use for the upsert,      * @throws SQLException if the table or any columns no longer exist,      */,     private long[] validate() throws SQLException {,         int i = 0;,         Long scn = connection.getSCN();,         MetaDataClient client = new MetaDataClient(connection);,         long[] timeStamps = new long[this.mutations.size()];,         for (Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry : mutations.entrySet()) {,             TableRef tableRef = entry.getKey();,             long serverTimeStamp = tableRef.getTimeStamp();,             PTable table = tableRef.getTable();,             // If we're auto committing, we've already validated the schema when we got the ColumnResolver,,             // so no need to do it again here.,             if (!connection.getAutoCommit()) {,                 MetaDataMutationResult result = client.updateCache(table.getSchemaName().getString(), table.getTableName().getString());,                 long timestamp = result.getMutationTime();,                 if (timestamp != QueryConstants.UNSET_TIMESTAMP) {,                     serverTimeStamp = timestamp;,                     if (result.wasUpdated()) {,                         // TODO: use bitset?,                         table = result.getTable();,                         PColumn[] columns = new PColumn[table.getColumns().size()];,                         for (Map.Entry<ImmutableBytesPtr,Map<PColumn,byte[]>> rowEntry : entry.getValue().entrySet()) {,                             Map<PColumn,byte[]> valueEntry = rowEntry.getValue();,                             if (valueEntry != PRow.DELETE_MARKER) {,                                 for (PColumn column : valueEntry.keySet()) {,                                     columns[column.getPosition()] = column;,                                 },                             },                         },                         for (PColumn column : columns) {,                             if (column != null) {,                                 table.getColumnFamily(column.getFamilyName().getString()).getColumn(column.getName().getString());,                             },                         },                         tableRef.setTable(table);,                     },                 },             },             timeStamps[i++] = scn == null ? serverTimeStamp == QueryConstants.UNSET_TIMESTAMP ? HConstants.LATEST_TIMESTAMP : serverTimeStamp : scn;,         },         return timeStamps;,     },     ,     private static void logMutationSize(HTableInterface htable, List<Mutation> mutations, PhoenixConnection connection) {,         long byteSize = 0;,         int keyValueCount = 0;,         for (Mutation mutation : mutations) {,             if (mutation.getFamilyCellMap() != null) { // Not a Delete of the row,                 for (Entry<byte[], List<Cell>> entry : mutation.getFamilyCellMap().entrySet()) {,                     if (entry.getValue() != null) {,                         for (Cell kv : entry.getValue()) {,                             byteSize += CellUtil.estimatedSizeOf(kv);,                             keyValueCount++;,                         },                     },                 },             },         },         logger.debug(LogUtil.addCustomAnnotations("Sending " + mutations.size() + " mutations for " + Bytes.toString(htable.getTableName()) + " with " + keyValueCount + " key values of total size " + byteSize + " bytes", connection));,     },     ,     @SuppressWarnings("deprecation"),     public void commit() throws SQLException {,         int i = 0;,         byte[] tenantId = connection.getTenantId() == null ? null : connection.getTenantId().getBytes();,         long[] serverTimeStamps = validate();,         Iterator<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> iterator = this.mutations.entrySet().iterator();,         List<Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>>> committedList = Lists.newArrayListWithCapacity(this.mutations.size());, ,         // add tracing for this operation,         TraceScope trace = Tracing.startNewSpan(connection, "Committing mutations to tables");,         Span span = trace.getSpan();,         while (iterator.hasNext()) {,             Map.Entry<TableRef, Map<ImmutableBytesPtr,Map<PColumn,byte[]>>> entry = iterator.next();,             Map<ImmutableBytesPtr,Map<PColumn,byte[]>> valuesMap = entry.getValue();,             TableRef tableRef = entry.getKey();,             PTable table = tableRef.getTable();,             table.getIndexMaintainers(tempPtr);,             boolean hasIndexMaintainers = tempPtr.getLength() > 0;,             boolean isDataTable = true;,             long serverTimestamp = serverTimeStamps[i++];,             Iterator<Pair<byte[],List<Mutation>>> mutationsIterator = addRowMutations(tableRef, valuesMap, serverTimestamp, false);,             while (mutationsIterator.hasNext()) {,                 Pair<byte[],List<Mutation>> pair = mutationsIterator.next();,                 byte[] htableName = pair.getFirst();,                 List<Mutation> mutations = pair.getSecond();,                 ,                 //create a span per target table,                 //TODO maybe we can be smarter about the table name to string here?,                 Span child = Tracing.child(span,"Writing mutation batch for table: "+Bytes.toString(htableName));, ,                 int retryCount = 0;,                 boolean shouldRetry = false;,                 do {,                     ServerCache cache = null;,                     if (hasIndexMaintainers && isDataTable) {,                         byte[] attribValue = null;,                         byte[] uuidValue;,                         if (IndexMetaDataCacheClient.useIndexMetadataCache(connection, mutations, tempPtr.getLength())) {,                             IndexMetaDataCacheClient client = new IndexMetaDataCacheClient(connection, tableRef);,                             cache = client.addIndexMetadataCache(mutations, tempPtr);,                             child.addTimelineAnnotation("Updated index metadata cache");,                             uuidValue = cache.getId();,                             // If we haven't retried yet, retry for this case only, as it's possible that,                             // a split will occur after we send the index metadata cache to all known,                             // region servers.,                             shouldRetry = true;,                         } else {,                             attribValue = ByteUtil.copyKeyBytesIfNecessary(tempPtr);,                             uuidValue = ServerCacheClient.generateId();,                         },                         // Either set the UUID to be able to access the index metadata from the cache,                         // or set the index metadata directly on the Mutation,                         for (Mutation mutation : mutations) {,                             if (tenantId != null) {,                                 mutation.setAttribute(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);,                             },                             mutation.setAttribute(PhoenixIndexCodec.INDEX_UUID, uuidValue);,                             if (attribValue != null) {,                                 mutation.setAttribute(PhoenixIndexCodec.INDEX_MD, attribValue);,                             },                         },                     },                     ,                     SQLException sqlE = null;,                     HTableInterface hTable = connection.getQueryServices().getTable(htableName);,                     try {,                         if (logger.isDebugEnabled()) logMutationSize(hTable, mutations, connection);,                         long startTime = System.currentTimeMillis();,                         child.addTimelineAnnotation("Attempt " + retryCount);,                         hTable.batch(mutations);,                         child.stop();,                         shouldRetry = false;,                         if (logger.isDebugEnabled()) logger.debug(LogUtil.addCustomAnnotations("Total time for batch call of  " + mutations.size() + " mutations into " + table.getName().getString() + ": " + (System.currentTimeMillis() - startTime) + " ms", connection));,                         committedList.add(entry);,                     } catch (Exception e) {,                         SQLException inferredE = ServerUtil.parseServerExceptionOrNull(e);,                         if (inferredE != null) {,                             if (shouldRetry && retryCount == 0 && inferredE.getErrorCode() == SQLExceptionCode.INDEX_METADATA_NOT_FOUND.getErrorCode()) {,                                 // Swallow this exception once, as it's possible that we split after sending the index metadata,                                 // and one of the region servers doesn't have it. This will cause it to have it the next go around.,                                 // If it fails again, we don't retry.,                                 String msg = "Swallowing exception and retrying after clearing meta cache on connection. " + inferredE;,                                 logger.warn(LogUtil.addCustomAnnotations(msg, connection));,                                 connection.getQueryServices().clearTableRegionCache(htableName);, ,                                 // add a new child span as this one failed,                                 child.addTimelineAnnotation(msg);,                                 child.stop();,                                 child = Tracing.child(span,"Failed batch, attempting retry");, ,                                 continue;,                             },                             e = inferredE;,                         },                         // Throw to client with both what was committed so far and what is left to be committed.,                         // That way, client can either undo what was done or try again with what was not done.,                         sqlE = new CommitException(e, this, new MutationState(committedList, this.sizeOffset, this.maxSize, this.connection));,                     } finally {,                         try {,                             hTable.close();,                         } catch (IOException e) {,                             if (sqlE != null) {,                                 sqlE.setNextException(ServerUtil.parseServerException(e));,                             } else {,                                 sqlE = ServerUtil.parseServerException(e);,                             },                         } finally {,                             try {,                                 if (cache != null) {,                                     cache.close();,                                 },                             } finally {,                                 if (sqlE != null) {,                                     throw sqlE;,                                 },                             },                         },                     },                 } while (shouldRetry && retryCount++ < 1);,                 isDataTable = false;,             },             numRows -= entry.getValue().size();,             iterator.remove(); // Remove batches as we process them,         },         trace.close();,         assert(numRows==0);,         assert(this.mutations.isEmpty());,     },     ,     public void rollback(PhoenixConnection connection) throws SQLException {,         this.mutations.clear();,         numRows = 0;,     },     ,     @Override,     public void close() throws SQLException {,     }],,
BAD_PRACTICE,HE_HASHCODE_NO_EQUALS,org/apache/phoenix/expression/AndOrExpression.java,hashCode,49-49,[        return 31 * super.hashCode() + Boolean.valueOf(this.getStopValue()).hashCode();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/expression/ComparisonExpression.java,create,186-189,[                        switch (op) {,                         case GREATER_OR_EQUAL: ,                         case LESS: // get next whole number,                             increment = 1;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/expression/InListExpression.java,readFields,208-208,[                offset = readValue(input, valuesBytes, offset, maxValue = new ImmutableBytesPtr());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnFamily,67-67,[        return cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnName,71-71,[        return cq;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/KeyValueColumnExpression.java,<init>,55-55,[        this.cf = cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/KeyValueColumnExpression.java,<init>,56-56,[        this.cq = cq;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/LiteralExpression.java,getBytes,301-301,[        return byteValue;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/expression/LiteralExpression.java,newConstant,158-158,[        value = type.toObject(value, actualType);],,newConstant,174-174,[                maxLength = type == null || !type.isFixedWidth() ? null : type.getMaxLength(value);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getAggregators,117-117,[        return aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getFunctions,75-75,[        return functions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,51-51,[        this.aggregators = aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,50-50,[        this.functions = functions;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/expression/aggregator/BaseDecimalStddevAggregator.java,evaluate,73-73,[            result.setScale(this.colScale, RoundingMode.HALF_UP);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,aggregate,76-76,[                    in.read(keyBytes, 0, keyLen);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,,121-127,[        Comparator<Object> comparator = new Comparator<Object>() {,             @Override,             public int compare(Object o1, Object o2) {,                 if (ascending) { ,                     return type.compareTo(o1, o2); ,                 },                 return type.compareTo(o2, o1);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,,52-52,[    public static final byte[] COMPRESS_MARKER = new byte[] { (byte)1 };],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,countMapHeapSize,148-148,[            SizedUtil.sizeOfMap(DEFAULT_ESTIMATED_DISTINCT_VALUES,],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/expression/aggregator/FirstLastValueServerAggregator.java,toString,143-143,[            out.append(topValue);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/phoenix/expression/aggregator/FirstLastValueServerAggregator.java,toString,139-139,[                out.append(topValues.get(key));],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/phoenix/expression/function/CountAggregateFunction.java,,48-48,[    public static final List<Expression> STAR = Arrays.<Expression>asList(LiteralExpression.newConstant(1, true));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/CountAggregateFunction.java,,90-93,[        return new LongSumAggregator() {,             @Override,             public boolean isNullable() {,                 return false;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/DecodeFunction.java,evaluate,69-69,[		String encoding = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,48-48,[    public final static byte[] ONE = PDataType.LONG.toBytes(1L);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,47-47,[    public final static byte[] ZERO = PDataType.LONG.toBytes(0L);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/EncodeFunction.java,evaluate,65-65,[        String encodingFormat = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/expression/function/FirstLastValueBaseFunction.java,,32-32,[    public static String NAME = null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/InvertFunction.java,,93-108,[        return new KeyPart() {, ,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 KeyRange range = childPart.getKeyRange(op, rhs);,                 return range.invert();,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return childPart.getExtractNodes();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/LowerFunction.java,evaluate,55-55,[        ptr.set(PDataType.VARCHAR.toBytes(sourceStr.toLowerCase()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MaxAggregateFunction.java,,56-59,[        return new MaxAggregator(sortOrder) {,             @Override,             public PDataType getDataType() {,                 return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MinAggregateFunction.java,,70-73,[        return new MinAggregator(sortOrder) {,             @Override,             public PDataType getDataType() {,                 return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/RTrimFunction.java,,104-143,[        return new KeyPart() {,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 byte[] lowerRange = KeyRange.UNBOUND;,                 byte[] upperRange = KeyRange.UNBOUND;,                 boolean lowerInclusive = true;,                 ,                 PDataType type = getColumn().getDataType();,                 switch (op) {,                 case EQUAL:,                     lowerRange = evaluateExpression(rhs);,                     upperRange = ByteUtil.nextKey(ByteUtil.concat(lowerRange, new byte[] {StringUtil.SPACE_UTF8}));,                     break;,                 case LESS_OR_EQUAL:,                     lowerInclusive = false;,                     upperRange = ByteUtil.nextKey(ByteUtil.concat(evaluateExpression(rhs), new byte[] {StringUtil.SPACE_UTF8}));,                     break;,                 default:,                     return childPart.getKeyRange(op, rhs);,                 },                 Integer length = getColumn().getMaxLength();,                 if (type.isFixedWidth() && length != null) {,                     if (lowerRange != KeyRange.UNBOUND) {,                         lowerRange = StringUtil.padChar(lowerRange, length);,                     },                     if (upperRange != KeyRange.UNBOUND) {,                         upperRange = StringUtil.padChar(upperRange, length);,                     },                 },                 return KeyRange.getKeyRange(lowerRange, lowerInclusive, upperRange, false);,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return Collections.<Expression>emptyList();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/expression/function/RoundDecimalExpression.java,roundAndPreserveOperator,244-245,[                            if(decimal.compareTo(rounded) > 0) {,                                 return stepNextInScale(rounded);],,roundAndPreserveOperator,265-266,[                            if(decimal.compareTo(rounded) > 0) {,                                 return stepNextInScale(rounded);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/expression/function/RoundDecimalExpression.java,roundAndPreserveOperator,251-252,[                            if(decimal.compareTo(rounded) < 0) {,                                 return stepPrevInScale(rounded);],,roundAndPreserveOperator,258-259,[                            if(decimal.compareTo(rounded) < 0) {,                                 return stepPrevInScale(rounded);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,71-74,[                return new DoubleSumAggregator(sortOrder, ptr) {,                     @Override,                     protected PDataType getInputDataType() {,                         return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,78-81,[                return new NumberSumAggregator(sortOrder, ptr) {,                     @Override,                     protected PDataType getInputDataType() {,                         return type;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/UpperFunction.java,evaluate,54-54,[        ptr.set(PDataType.VARCHAR.toBytes(sourceStr.toUpperCase()));],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/ColumnProjectionFilter.java,<init>,65-65,[        this.emptyCFName = emptyCFName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/RowKeyComparisonFilter.java,<init>,57-57,[        this.essentialCF = essentialCF;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/filter/RowKeyComparisonFilter.java,,84-128,[    private final class RowKeyTuple extends BaseTuple {,         private byte[] buf;,         private int offset;,         private int length;, ,         public void setKey(byte[] buf, int offset, int length) {,             this.buf = buf;,             this.offset = offset;,             this.length = length;,         }, ,         @Override,         public void getKey(ImmutableBytesWritable ptr) {,             ptr.set(buf, offset, length);,         }, ,         @Override,         public KeyValue getValue(byte[] cf, byte[] cq) {,             return null;,         }, ,         @Override,         public boolean isImmutable() {,             return true;,         }, ,         @Override,         public String toString() {,             return Bytes.toStringBinary(buf, offset, length);,         }, ,         @Override,         public int size() {,             return 0;,         }, ,         @Override,         public KeyValue getValue(int index) {,             throw new IndexOutOfBoundsException(Integer.toString(index));,         }, ,         @Override,         public boolean getValue(byte[] family, byte[] qualifier,,                 ImmutableBytesWritable ptr) {,             return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,57-57,[        this.lowerInclusiveKey = lowerInclusiveKey;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,58-58,[        this.upperExclusiveKey = upperExclusiveKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/filter/SkipScanFilterTest.java,,64-88,[                new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return width <= 0;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return width <= 0 ? PDataType.VARCHAR : PDataType.CHAR;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return width <= 0 ? null : width;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, , 				@Override, 				public SortOrder getSortOrder() {, 					return SortOrder.getDefault();],,
BAD_PRACTICE,DMI_RANDOM_USED_ONLY_ONCE,org/apache/phoenix/flume/DefaultKeyGenerator.java,generate,57-57,[            return String.valueOf(new Random().nextLong());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,397-397,[        final Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,411-411,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testApacheLogRegex,271-271,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testEventsWithHeaders,349-349,[            if(conn != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,400-400,[            rs  = conn.createStatement().executeQuery("select count(*) from "+fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/SchemaHandler.java,createTable,38-38,[            status = connection.createStatement().execute(createTableDdl);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,191-191,[                position++;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,configure,110-110,[                keyGenerator =  DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,143-143,[                 SchemaHandler.createTable(connection,createTableDdl);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,84-84,[               String payload = new String(payloadBytes);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,136-136,[       } catch(Exception ex){],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,72-72,[       PreparedStatement colUpsert = connection.prepareStatement(upsertStatement);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,76-76,[               eventSerializer =  EventSerializers.valueOf(eventSerializerType.toUpperCase());],,
CORRECTNESS,NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH,org/apache/phoenix/flume/sink/PhoenixSink.java,process,186-186,[            transaction.rollback();],,process,191-191,[            transaction.rollback();],,process,180-180,[            transaction.rollback();],,process,140-140,[        Transaction transaction = null;],,process,144-144,[            transaction = channel.getTransaction();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,89-89,[         Class<? extends EventSerializer> clazz = (Class<? extends EventSerializer>) Class.forName(eventSerializer.getClassName());],,initializeSerializer,74-74,[       EventSerializers eventSerializer = null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,93-93,[       } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/IndexQosRpcControllerFactory.java,,66-83,[        public IndexQosRpcController(PayloadCarryingRpcController delegate, Configuration conf) {,             super(delegate);,             this.conf = conf;,             this.priority = PhoenixIndexRpcSchedulerFactory.getMinPriority(conf);,         }, ,         @Override,         public void setPriority(final TableName tn) {,             // if its an index table, then we override to the index priority,             if (isIndexTable(tn)) {,                 setPriority(this.priority);,             } else {,                 super.setPriority(tn);,             },         }, ,         private boolean isIndexTable(TableName tn) {,             return conf.get(IndexQosCompat.getTableIndexQosConfKey(tn.getNameAsString())) == null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/hbase/index/Indexer.java,start,169-169,[        } catch (Exception ex) {],,
STYLE,EQ_UNUSUAL,org/apache/phoenix/hbase/index/Indexer.java,equals,334-334,[      return o == null ? false : o.hashCode() == this.hashCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/Indexer.java,,290-334,[    public MultiMutation(ImmutableBytesPtr rowkey) {,       this.rowKey = rowkey;,     }, ,     /**,      * @param stored,      */,     public void addAll(Mutation stored) {,       // add all the kvs,       for (Entry<byte[], List<Cell>> kvs : stored.getFamilyCellMap().entrySet()) {,         byte[] family = kvs.getKey();,         List<Cell> list = getKeyValueList(family, kvs.getValue().size());,         list.addAll(kvs.getValue());,         familyMap.put(family, list);,       }, ,       // add all the attributes, not overriding already stored ones,       for (Entry<String, byte[]> attrib : stored.getAttributesMap().entrySet()) {,         if (this.getAttribute(attrib.getKey()) == null) {,           this.setAttribute(attrib.getKey(), attrib.getValue());,         },       },     }, ,     private List<Cell> getKeyValueList(byte[] family, int hint) {,       List<Cell> list = familyMap.get(family);,       if (list == null) {,         list = new ArrayList<Cell>(hint);,       },       return list;,     }, ,     @Override,     public byte[] getRow(){,       return this.rowKey.copyBytesIfNecessary();,     }, ,     @Override,     public int hashCode() {,       return this.rowKey.hashCode();,     }, ,     @Override,     public boolean equals(Object o) {,       return o == null ? false : o.hashCode() == this.hashCode();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancer.java,,72-72,[    public static final byte[] PARENT_TABLE_KEY = Bytes.toBytes("PARENT_TABLE");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,400-400,[        HMaster master = cluster.getMaster();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,insertData,227-227,[        Put p = new Put("a".getBytes());],,insertData,229-229,[        p.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,232-232,[        Put p1 = new Put("b".getBytes());],,insertData,234-234,[        p1.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,237-237,[        Put p2 = new Put("c".getBytes());],,insertData,239-239,[        p2.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,242-242,[        Put p3 = new Put("c1".getBytes());],,insertData,244-244,[        p3.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,247-247,[        Put p4 = new Put("d".getBytes());],,insertData,249-249,[        p4.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRetainAssignmentDuringMasterStartUp,382-384,[        if (admin != null) {,             admin.close();,             admin = new HBaseAdmin(master.getConfiguration());],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,411-413,[        if (admin != null) {,             admin.close();,             admin = new HBaseAdmin(cluster.getMaster().getConfiguration());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRetainAssignmentDuringMasterStartUp,384-384,[            admin = new HBaseAdmin(master.getConfiguration());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,413-413,[            admin = new HBaseAdmin(cluster.getMaster().getConfiguration());],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testBalanceByTable,318-318,[        byte[][] split1 = new byte[12][];],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/hbase/index/builder/BaseIndexBuilder.java,getBatchId,82-82,[    return null;],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/covered/CoveredColumnsIndexBuilder.java,addCurrentStateMutationsForBatch,321-321,[    List<IndexedColumnGroup> columnHints = new ArrayList<IndexedColumnGroup>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/CoveredColumnsIndexBuilder.java,,157-160,[    Collections.sort(sorted, new Comparator<Batch>() {,       @Override,       public int compare(Batch o1, Batch o2) {,         return Longs.compare(o1.getTimestamp(), o2.getTimestamp());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,323-327,[    EnvironmentEdge edge = new EnvironmentEdge() {, ,       @Override,       public long currentTimeMillis() {,         return ts;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,140-166,[    public ListMatchingVerifier(String msg, List<Cell> kvs, ColumnReference... columns) {,       this.expectedKvs = kvs;,       this.columns = columns;,       this.msg = msg;,     }, ,     @Override,     public void verify(TableState state) {,       try {,         Scanner kvs =,             ((LocalTableState) state).getIndexedColumnsTableState(Arrays.asList(columns)).getFirst();, ,         int count = 0;,         KeyValue kv;,         while ((kv = kvs.next()) != null) {,           Cell next = expectedKvs.get(count++);,           assertEquals(,             msg + ": Unexpected kv in table state!\nexpected v1: ",                 + Bytes.toString(next.getValue()) + "\nactual v1:" + Bytes.toString(kv.getValue()),,             next, kv);,         }, ,         assertEquals(msg + ": Didn't find enough kvs in table state!", expectedKvs.size(), count);,       } catch (IOException e) {,         fail(msg + ": Got an exception while reading local table state! " + e.getMessage());,       },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,67-82,[  public class TestState {, ,     private HTable table;,     private long ts;,     private VerifyingIndexCodec codec;, ,     /**,      * @param primary,      * @param codec,      * @param ts,      */,     public TestState(HTable primary, VerifyingIndexCodec codec, long ts) {,       this.table = primary;,       this.ts = ts;,       this.codec = codec;,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,169-189,[  private class VerifyingIndexCodec extends CoveredIndexCodecForTesting {, ,     private Queue<TableStateVerifier> verifiers = new ArrayDeque<TableStateVerifier>();, ,     @Override,     public Iterable<IndexUpdate> getIndexDeletes(TableState state) {,       verify(state);,       return super.getIndexDeletes(state);,     }, ,     @Override,     public Iterable<IndexUpdate> getIndexUpserts(TableState state) {,       verify(state);,       return super.getIndexUpserts(state);,     }, ,     private void verify(TableState state) {,       TableStateVerifier verifier = verifiers.poll();,       if (verifier == null) return;,       verifier.verify(state);,     }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,getTableName,51-51,[    return tableName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,setTable,43-43,[    this.tableName = tableName;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,74-81,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];,         KeyValue kv = new KeyValue(row, fam, qual, ts, Type.Put, stored);,         kv.setMvccVersion(0);,         list.add(kv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,119-125,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,165-171,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/data/LazyValueGetter.java,<init>,49-49,[    this.row = currentRow;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/covered/example/CoveredColumnIndexCodec.java,,47-47,[  public static final byte[] INDEX_ROW_COLUMN_FAMILY = Bytes.toBytes("INDEXED_COLUMNS");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,getNextCellHint,101-101,[    return currentHint.getHint(KeyValueUtil.ensureKeyValue(peeked));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,,202-208,[  class DeleteColumnHinter implements Hinter {, ,     @Override,     public KeyValue getHint(KeyValue kv) {,       return KeyValue.createLastOnRow(kv.getBuffer(), kv.getRowOffset(), kv.getRowLength(),,         kv.getBuffer(), kv.getFamilyOffset(), kv.getFamilyLength(), kv.getBuffer(),,         kv.getQualifierOffset(), kv.getQualifierLength());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getFamily,54-54,[    return this.family;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getQualifier,58-58,[    return this.qualifier;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,<init>,48-48,[    this.family = family;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,<init>,49-49,[    this.qualifier = qualifier;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/update/IndexUpdateManager.java,,45-92,[  class MutationComparator implements Comparator<Mutation> {, ,     @Override,     public int compare(Mutation o1, Mutation o2) {,       // always sort rows first,       int compare = o1.compareTo(o2);,       if (compare != 0) {,         return compare;,       }, ,       // if same row, sort by reverse timestamp (larger first),       compare = Longs.compare(o2.getTimeStamp(), o1.getTimeStamp());,       if (compare != 0) {,         return compare;,       },       // deletes always sort before puts for the same row,       if (o1 instanceof Delete) {,         // same row, same ts == same delete since we only delete rows,         if (o2 instanceof Delete) {,           return 0;,         } else {,           // o2 has to be a put,           return -1;,         },       },       // o1 must be a put,       if (o2 instanceof Delete) {,         return 1;,       } else if (o2 instanceof Put) {,         return comparePuts((Put) o1, (Put) o2);,       }, ,       throw new RuntimeException(,           "Got unexpected mutation types! Can only be Put or Delete, but got: " + o1 + ", and ",               + o2);,     }, ,     private int comparePuts(Put p1, Put p2) {,       int p1Size = p1.size();,       int p2Size = p2.size();,       int compare = p1Size - p2Size;,       if (compare == 0) {,         // TODO: make this a real comparison,         // this is a little cheating, but we don't really need to worry too much about this being,         // the same - chances are that exact matches here are really the same update.,         return Longs.compare(p1.heapSize(), p2.heapSize());,       },       return compare;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/hbase/index/exception/SingleIndexWriteFailureException.java,<init>,49-49,[    super("Failed to make index update:\n\t table: " + targetTableName + "\n\t edits: " + mutations],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/parallel/Task.java,isBatchFailed,38-38,[    return this.batch.isAborted();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/parallel/ThreadPoolManager.java,getExecutor,68-68,[    ((ShutdownOnUnusedThreadPoolExecutor) pool).addReference();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/hbase/index/scanner/FilteredKeyValueScanner.java,seekToNextUnfilteredKeyValue,86-99,[            switch (code) {,             // included, so we are done,             case INCLUDE:,             case INCLUDE_AND_NEXT_COL:,                 return true;,                 // not included, so we need to go to the next row,             case SKIP:,             case NEXT_COL:,             case NEXT_ROW:,                 delegate.next();,                 break;,             // use a seek hint to find out where we should go,             case SEEK_NEXT_USING_HINT:,                 delegate.seek(KeyValueUtil.ensureKeyValue(filter.getNextCellHint(peeked)));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/scanner/ScannerBuilder.java,,125-162,[    return new Scanner() {, ,       @Override,       public KeyValue next() {,         try {,           return kvScanner.next();,         } catch (IOException e) {,           throw new RuntimeException("Error reading kvs from local memstore!");,         },       }, ,       @Override,       public boolean seek(KeyValue next) throws IOException {,         // check to see if the next kv is after the current key, in which case we can use reseek,,         // which will be more efficient,         KeyValue peek = kvScanner.peek();,         // there is another value and its before the requested one - we can do a reseek!,         if (peek != null) {,           int compare = KeyValue.COMPARATOR.compare(peek, next);,           if (compare < 0) {,             return kvScanner.reseek(next);,           } else if (compare == 0) {,             // we are already at the given key!,             return true;,           },         },         return kvScanner.seek(next);,       }, ,       @Override,       public KeyValue peek() throws IOException {,         return kvScanner.peek();,       }, ,       @Override,       public void close() {,         kvScanner.close();,       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/table/CachingHTableFactory.java,,49-66,[    public HTableInterfaceLRUMap(int cacheSize) {,       super(cacheSize);,     }, ,     @Override,     protected boolean removeLRU(LinkEntry entry) {,       HTableInterface table = (HTableInterface) entry.getValue();,       if (LOG.isDebugEnabled()) {,         LOG.debug("Closing connection to table: " + Bytes.toString(table.getTableName()),             + " because it was evicted from the cache.");,       },       try {,         table.close();,       } catch (IOException e) {,         LOG.info("Failed to correctly close HTable: " + Bytes.toString(table.getTableName()),             + " ignoring since being removed from queue.");,       },       return true;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,getFamily,74-74,[      return COLUMN_FAMILY;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,,37-37,[    public static final byte [] COLUMN_FAMILY = Bytes.toBytes("INDEXEDKEYVALUE_FAKED_FAMILY");],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/hbase/index/write/KillServerOnFailurePolicy.java,handleFailure,76-76,[      System.exit(1);],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/ParallelWriterIndexCommitter.java,write,116-116,[            final List<Mutation> mutations = kvBuilder.cloneIfNecessary((List<Mutation>)entry.getValue());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,105-111,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,179-183,[    }).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         failed[0] = true;,         throw new RuntimeException(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,173-177,[    Mockito.when(table2.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         waitOnAbortedLatch.await();,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,234-246,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         LOG.info("Write started");,         writeStartedLatch.countDown();,         // when we interrupt the thread for shutdown, we should see this throw an interrupt too,         try {,         waitOnAbortedLatch.await();,         } catch (InterruptedException e) {,           LOG.info("Correctly interrupted while writing!");,           throw e;,         },         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,266-275,[    Thread primaryWriter = new Thread() {, ,       @Override,       public void run() {,         try {,           writer.write(indexUpdates);,         } catch (IndexWriteException e) {,           failedWrite[0] = true;,         },       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleIndexWriter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleWriterIndexCommitter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,202-202,[    allowIndexTableToRecover = new CountDownLatch(1);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,206-206,[    List<HRegion> online = new ArrayList<HRegion>();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testAddRemoveSingleRegion,127-127,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleAddsForSingleRegion,155-155,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleRegions,180-180,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,testMultipleRegions,193-193,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,87-87,[            return 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,84-92,[      r1 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 1;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,99-99,[            return 2;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,96-104,[      r2 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 2;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TrackingParallelWriterIndexCommitter.java,write,119-119,[            final List<Mutation> mutations = (List<Mutation>)entry.getValue();],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/hbase/index/write/recovery/TrackingParallelWriterIndexCommitter.java,call,161-161,[                                    return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/index/BaseIndexCodec.java,getBatchId,57-57,[    return null;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,buildDataRowKey,482-482,[                indexPosOffset++;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,deserialize,220-220,[        List<IndexMaintainer> maintainers = Collections.emptyList();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getDataEmptyKeyValueCF,1201-1201,[        return dataEmptyKeyValueCF;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getIndexTableName,819-819,[        return indexTableName;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/index/IndexMaintainer.java,hasIndexedColumnChanged,775-775,[        		if (Bytes.compareTo(oldValue.get(), oldValue.getOffset(), oldValue.getLength(), ],,hasIndexedColumnChanged,771-771,[        		if ((oldValue == null && !newValueSetAsNull) || (oldValue != null && newValueSetAsNull)) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,604-628,[            builder.addField(new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return false;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return MetaDataUtil.getViewIndexIdDataType();,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return null;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, ,                 @Override,                 public SortOrder getSortOrder() {,                     return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,650-674,[                builder.addField(new PDatum() {, ,                     @Override,                     public boolean isNullable() {,                         return true;,                     }, ,                     @Override,                     public PDataType getDataType() {,                         return IndexUtil.getIndexColumnDataType(true, dataType);,                     }, ,                     @Override,                     public Integer getMaxLength() {,                         return null;,                     }, ,                     @Override,                     public Integer getScale() {,                         return null;,                     }, ,                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,91-91,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,144-144,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,138-138,[                valueMap.get(ref);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,144-144,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,91-149,[        Connection conn = DriverManager.getConnection(getUrl());,         String fullTableName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier(tableName));,         String fullIndexName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier("idx"));,         conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );,         try {,             conn.createStatement().execute("CREATE INDEX idx ON " + fullTableName + "(" + indexColumns + ") " + (includeColumns.isEmpty() ? "" : "INCLUDE (" + includeColumns + ") ") + (indexProps.isEmpty() ? "" : indexProps));,             PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class);,             PTable table = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(), fullTableName));,             PTable index = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(),fullIndexName));,             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             table.getIndexMaintainers(ptr);,             List<IndexMaintainer> c1 = IndexMaintainer.deserialize(ptr, builder);,             assertEquals(1,c1.size());,             IndexMaintainer im1 = c1.get(0);,             ,             StringBuilder buf = new StringBuilder("UPSERT INTO " + fullTableName  + " VALUES(");,             for (int i = 0; i < values.length; i++) {,                 buf.append("?,");,             },             buf.setCharAt(buf.length()-1, ')');,             PreparedStatement stmt = conn.prepareStatement(buf.toString());,             for (int i = 0; i < values.length; i++) {,                 stmt.setObject(i+1, values[i]);,             },             stmt.execute();,             	Iterator<Pair<byte[],List<KeyValue>>> iterator = PhoenixRuntime.getUncommittedDataIterator(conn);,             List<KeyValue> dataKeyValues = iterator.next().getSecond();,             Map<ColumnReference,byte[]> valueMap = Maps.newHashMapWithExpectedSize(dataKeyValues.size());,             ImmutableBytesWritable rowKeyPtr = new ImmutableBytesWritable(dataKeyValues.get(0).getRow());,             Put dataMutation = new Put(rowKeyPtr.copyBytes());,             for (KeyValue kv : dataKeyValues) {,                 valueMap.put(new ColumnReference(kv.getFamily(),kv.getQualifier()), kv.getValue());,                 dataMutation.add(kv);,             },             ValueGetter valueGetter = newValueGetter(valueMap);,             ,             List<Mutation> indexMutations =,                     IndexTestUtil.generateIndexData(index, table, dataMutation, ptr, builder);,             assertEquals(1,indexMutations.size());,             assertTrue(indexMutations.get(0) instanceof Put);,             Mutation indexMutation = indexMutations.get(0);,             ImmutableBytesWritable indexKeyPtr = new ImmutableBytesWritable(indexMutation.getRow());,             ptr.set(rowKeyPtr.get(), rowKeyPtr.getOffset(), rowKeyPtr.getLength());,             byte[] mutablelndexRowKey = im1.buildRowKey(valueGetter, ptr, null, null);,             byte[] immutableIndexRowKey = indexKeyPtr.copyBytes();,             assertArrayEquals(immutableIndexRowKey, mutablelndexRowKey);,             for (ColumnReference ref : im1.getCoverededColumns()) {,                 valueMap.get(ref);,             },             byte[] dataRowKey = im1.buildDataRowKey(indexKeyPtr, null);,             assertArrayEquals(dataRowKey, dataKeyValues.get(0).getRow());,         } finally {,             try {,                 conn.createStatement().execute("DROP TABLE " + fullTableName);,             } finally {,                 conn.close();,             },         },     }],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,94-94,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,111-111,[            PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMetaDataCacheFactory.java,,50-59,[        return new IndexMetaDataCache() {, ,             @Override,             public void close() throws IOException {,                 chunk.close();,             }, ,             @Override,             public List<IndexMaintainer> getIndexMaintainers() {,                 return maintainers;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/PhoenixIndexFailurePolicy.java,,176-191,[                                new Batch.Call<MetaDataService, MetaDataResponse>() {,                                 @Override,                                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                                     ServerRpcController controller = new ServerRpcController();,                                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                             new BlockingRpcCallback<MetaDataResponse>();,                                     UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                                     for (Mutation m : tableMetadata) {,                                         MutationProto mp = ProtobufUtil.toProto(m);,                                         builder.addTableMetadataMutations(mp.toByteString());,                                     },                                     instance.updateIndexState(controller, builder.build(), rpcCallback);,                                     if(controller.getFailedOn() != null) {,                                         throw controller.getFailedOn();,                                     },                                     return rpcCallback.get();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/iterate/AggregateResultScannerTest.java,getViewConstant,122-122,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,96-127,[        SumAggregateFunction func = new SumAggregateFunction(Arrays.<Expression>asList(new KeyValueColumnExpression(new PLongColumn() {,             @Override,             public PName getName() {,                 return SINGLE_COLUMN_NAME;,             },             @Override,             public PName getFamilyName() {,                 return SINGLE_COLUMN_FAMILY_NAME;,             },             @Override,             public int getPosition() {,                 return 0;,             },             ,             @Override,             public SortOrder getSortOrder() {,             	return SortOrder.getDefault();,             },             ,             @Override,             public Integer getArraySize() {,                 return 0;,             },             ,             @Override,             public byte[] getViewConstant() {,                 return null;,             },             ,             @Override,             public boolean isViewReferenced() {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,131-145,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,55-69,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,105-119,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/MappedByteBufferSortedQueue.java,reachedEnd,378-378,[                file.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,,60-74,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/iterate/MergeSortTopNResultIterator.java,compare,69-69,[            return order.isAscending() ? cmp : -cmp;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ParallelIterators.java,,271-274,[            Collections.sort(futures, new Comparator<Pair<KeyRange,Future<PeekingResultIterator>>>() {,                 @Override,                 public int compare(Pair<KeyRange, Future<PeekingResultIterator>> o1, Pair<KeyRange, Future<PeekingResultIterator>> o2) {,                     return factor * Bytes.compareTo(o1.getFirst().getLowerRange(), o2.getFirst().getLowerRange());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,<init>,136-136,[                        tempFile.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/SpoolingResultIterator.java,,98-103,[            DeferredFileOutputStream spoolTo = new DeferredFileOutputStream(size, tempFile) {,                 @Override,                 protected void thresholdReached() throws IOException {,                     super.thresholdReached();,                     chunk.close();,                 }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,reachedEnd,254-254,[                file.delete();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/jdbc/PhoenixConnection.java,getURL,358-358,[        return url;],,getUrl,38-38,[],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/jdbc/PhoenixConnection.java,<init>,160-160,[        final PName tenantId = JDBCUtil.getTenantId(url, info);],,<init>,159-159,[        this.info = info == null ? new Properties() : PropertiesUtil.deepCopy(info);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixConnection.java,,181-186,[            this.services = !needsDelegate ? services : new DelegateConnectionQueryServices(services) {,                 final ReadOnlyProps augmentedProps = new ReadOnlyProps(tmpAugmentedProps);,     ,                 @Override,                 public ReadOnlyProps getProps() {,                     return augmentedProps;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,191-191,[    public static final byte[] ARRAY_SIZE_BYTES = Bytes.toBytes(ARRAY_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,68-68,[    private static final KeyValue CACHE_SIZE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CACHE_SIZE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,136-136,[    public static final byte[] COLUMN_COUNT_BYTES = Bytes.toBytes(COLUMN_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,153-153,[    public static final byte[] COLUMN_SIZE_BYTES = Bytes.toBytes(COLUMN_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,66-66,[    private static final KeyValue CURRENT_VALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CURRENT_VALUE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,71-71,[    private static final KeyValue CYCLE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CYCLE_FLAG_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,141-141,[    public static final byte[] DATA_TABLE_NAME_BYTES = Bytes.toBytes(DATA_TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,150-150,[    public static final byte[] DATA_TYPE_BYTES = Bytes.toBytes(DATA_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,156-156,[    public static final byte[] DECIMAL_DIGITS_BYTES = Bytes.toBytes(DECIMAL_DIGITS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,177-177,[    public static final byte[] DEFAULT_COLUMN_FAMILY_NAME_BYTES = Bytes.toBytes(DEFAULT_COLUMN_FAMILY_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,181-181,[    public static final byte[] DISABLE_WAL_BYTES = Bytes.toBytes(DISABLE_WAL);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,236-236,[    public static final byte[] GUIDE_POSTS_BYTES = Bytes.toBytes(GUIDE_POSTS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,175-175,[    public static final byte[] IMMUTABLE_ROWS_BYTES = Bytes.toBytes(IMMUTABLE_ROWS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,67-67,[    private static final KeyValue INCREMENT_BY_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, INCREMENT_BY_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,231-231,[    public static final byte[] INDEX_DISABLE_TIMESTAMP_BYTES = Bytes.toBytes(INDEX_DISABLE_TIMESTAMP);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,143-143,[    public static final byte[] INDEX_STATE_BYTES = Bytes.toBytes(INDEX_STATE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,187-187,[    public static final byte[] INDEX_TYPE_BYTES = Bytes.toBytes(INDEX_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,195-195,[    public static final byte[] IS_VIEW_REFERENCED_BYTES = Bytes.toBytes(IS_VIEW_REFERENCED);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,242-242,[    public static final byte[] LAST_STATS_UPDATE_TIME_BYTES = Bytes.toBytes(LAST_STATS_UPDATE_TIME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,72-72,[    private static final KeyValue LIMIT_REACHED_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, LIMIT_REACHED_FLAG_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,189-189,[    public static final byte[] LINK_TYPE_BYTES = Bytes.toBytes(LINK_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,240-240,[    public static final byte[] MAX_KEY_BYTES = Bytes.toBytes(MAX_KEY);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,70-70,[    private static final KeyValue MAX_VALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, MAX_VALUE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,238-238,[    public static final byte[] MIN_KEY_BYTES = Bytes.toBytes(MIN_KEY);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,69-69,[    private static final KeyValue MIN_VALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, MIN_VALUE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,183-183,[    public static final byte[] MULTI_TENANT_BYTES = Bytes.toBytes(MULTI_TENANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,159-159,[    public static final byte[] NULLABLE_BYTES = Bytes.toBytes(NULLABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,165-165,[    public static final byte[] ORDINAL_POSITION_BYTES = Bytes.toBytes(ORDINAL_POSITION);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,132-132,[    public static final byte[] PK_NAME_BYTES = Bytes.toBytes(PK_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,138-138,[    public static final byte[] SALT_BUCKETS_BYTES = Bytes.toBytes(SALT_BUCKETS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/Sequence.java,,66-66,[    private static final KeyValue CURRENT_VALUE_KV = KeyValue.createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, SEQUENCE_FAMILY_BYTES, CURRENT_VALUE_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,205-205,[    public static final byte[] SEQUENCE_TABLE_NAME_BYTES = SchemaUtil.getTableNameAsBytes(SYSTEM_CATALOG_SCHEMA, TYPE_SEQUENCE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,173-173,[    public static final byte[] SORT_ORDER_BYTES = Bytes.toBytes(SORT_ORDER);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,211-211,[    public static final byte[] START_WITH_BYTES = Bytes.toBytes(START_WITH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,108-108,[    public static final byte[] SYSTEM_CATALOG_NAME_BYTES = SchemaUtil.getTableNameAsBytes(SYSTEM_CATALOG_TABLE_BYTES, SYSTEM_CATALOG_SCHEMA_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,105-105,[    public static final byte[] SYSTEM_CATALOG_SCHEMA_BYTES = Bytes.toBytes(SYSTEM_CATALOG_TABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,106-106,[    public static final byte[] SYSTEM_CATALOG_TABLE_BYTES = Bytes.toBytes(SYSTEM_CATALOG_SCHEMA);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,112-112,[    public static final byte[] SYSTEM_STATS_NAME_BYTES = SchemaUtil.getTableNameAsBytes(SYSTEM_CATALOG_TABLE_BYTES, SYSTEM_STATS_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,200-200,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,117-117,[    public static final byte[] TABLE_NAME_BYTES = Bytes.toBytes(TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,134-134,[    public static final byte[] TABLE_SEQ_NUM_BYTES = Bytes.toBytes(TABLE_SEQ_NUM);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,119-119,[    public static final byte[] TABLE_TYPE_BYTES = Bytes.toBytes(TABLE_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,193-193,[    public static final byte[] VIEW_CONSTANT_BYTES = Bytes.toBytes(VIEW_CONSTANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,197-197,[    public static final byte[] VIEW_INDEX_ID_BYTES = Bytes.toBytes(VIEW_INDEX_ID);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,179-179,[    public static final byte[] VIEW_STATEMENT_BYTES = Bytes.toBytes(VIEW_STATEMENT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,185-185,[    public static final byte[] VIEW_TYPE_BYTES = Bytes.toBytes(VIEW_TYPE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,110-110,[    public static final byte[] SYSTEM_STATS_BYTES = Bytes.toBytes(SYSTEM_STATS_TABLE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,226-226,[    public static final byte[] KEY_SEQ_BYTES = Bytes.toBytes(KEY_SEQ);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,121-121,[    public static final byte[] PHYSICAL_NAME_BYTES = Bytes.toBytes(PHYSICAL_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,234-234,[    public static final byte[] REGION_NAME_BYTES = Bytes.toBytes(REGION_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,146-146,[    public static final byte[] TENANT_ID_BYTES = Bytes.toBytes(TENANT_ID);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getCatalogs,325-325,[        Statement stmt = connection.createStatement();],,getCatalogs,326-326,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,440-440,[        Statement stmt = connection.createStatement();],,getColumns,441-441,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,565-565,[        Statement stmt = connection.createStatement();],,getIndexInfo,566-566,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,711-711,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,773-773,[        Statement stmt = connection.createStatement();],,getSchemas,774-774,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,805-805,[        Statement stmt = connection.createStatement();],,getSuperTables,806-806,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,913-913,[        Statement stmt = connection.createStatement();],,getTables,914-914,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,441-441,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,566-566,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,711-711,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,774-774,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,806-806,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,914-914,[        return stmt.executeQuery(buf.toString());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,,82-499,[        super(connection);,         this.statement = parser.nextStatement(new ExecutableNodeFactory());,         if (this.statement == null) { throw new EOFException(); },         this.query = null; // TODO: add toString on SQLStatement,         this.parameterCount = statement.getBindCount();,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixConnection connection, String query) throws SQLException {,         super(connection);,         this.query = query;,         this.statement = parseStatement(query);,         this.parameterCount = statement.getBindCount();,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixPreparedStatement statement) throws SQLException {,         super(statement.connection);,         this.query = statement.query;,         this.statement = statement.statement;,         this.parameterCount = statement.parameters.size();,         this.parameters = new ArrayList<Object>(statement.parameters);,     }, ,     @Override,     public void addBatch() throws SQLException {,         throwIfUnboundParameters();,         batch.add(new PhoenixPreparedStatement(this));,     }, ,     /**,      * Set a bind parameter's value.,      * @param parameterIndex 1-based index of the bind parameter to be set,      * @param value value to be set,      * @throws SQLException if the bind parameter index is invalid,      */,     private void setParameter(int parameterIndex, Object value) throws SQLException {,         if (parameterIndex < 1 || parameterIndex > parameterCount) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND),                     .setMessage("Can't set parameter at index " + parameterIndex + ", " +,                              parameterCount + " bind parameters are defined"),                     .build().buildException();,         },         if (parameterIndex < 1) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND),                     .setMessage("Invalid bind parameter index " + parameterIndex),                     .build().buildException();,         },         this.parameters.set(parameterIndex - 1, value);,     }, , ,     @Override,     public void clearParameters() throws SQLException {,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     @Override,     public List<Object> getParameters() {,         return parameters;,     }, ,     private void throwIfUnboundParameters() throws SQLException {,         int i = 0;,         for (Object param : getParameters()) {,             if (param == BindManager.UNBOUND_PARAMETER) {,                 throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND),                     .setMessage("Parameter " + (i + 1) + " is unbound").build().buildException();,             },             i++;,         },     }, , ,     public QueryPlan compileQuery() throws SQLException {,         return compileQuery(statement, query);,     }, ,     public MutationPlan compileMutation() throws SQLException {,         return compileMutation(statement, query);,     }, ,     boolean execute(boolean batched) throws SQLException {,         throwIfUnboundParameters();,         if (!batched && statement.getOperation().isMutation() && !batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return execute(statement);,     }, ,     @Override,     public boolean execute() throws SQLException {,         return execute(false);,     }, ,     @Override,     public ResultSet executeQuery() throws SQLException {,         throwIfUnboundParameters();,         return executeQuery(statement);,     }, ,     @Override,     public int executeUpdate() throws SQLException {,         throwIfUnboundParameters();,         if (!batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return executeMutation(statement);,     }, ,     public QueryPlan optimizeQuery() throws SQLException {,         throwIfUnboundParameters();,         return optimizeQuery(statement);,     }, ,     @Override,     public ResultSetMetaData getMetaData() throws SQLException {,         if (statement.getOperation().isMutation()) {,             return null;,         },         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             // Just compile top level query without optimizing to get ResultSetMetaData,             QueryPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return new PhoenixResultSetMetaData(this.getConnection(), plan.getProjector());,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public ParameterMetaData getParameterMetaData() throws SQLException {,         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             StatementPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return plan.getParameterMetaData();,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public String toString() {,         return query;,     }, ,     @Override,     public void setArray(int parameterIndex, Array x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setBytes(int parameterIndex, byte[] x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, Blob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBoolean(int parameterIndex, boolean x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setByte(int parameterIndex, byte x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Clob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setDate(int parameterIndex, Date x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex, new Date(cal.getTimeInMillis()));,     }, ,     @Override,     public void setDouble(int parameterIndex, double x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setFloat(int parameterIndex, float x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setInt(int parameterIndex, int x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setLong(int parameterIndex, long x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, NClob value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNString(int parameterIndex, String value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType) throws SQLException {,         setParameter(parameterIndex, null);,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {,         setParameter(parameterIndex, null);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o) throws SQLException {,         setParameter(parameterIndex, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o, int targetSqlType) throws SQLException {,         PDataType targetType = PDataType.fromTypeId(targetSqlType);,         PDataType sourceType = PDataType.fromLiteral(o);,         o = targetType.toObject(o, sourceType);,         setParameter(parameterIndex, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {,         setObject(parameterIndex, x, targetSqlType);,     }, ,     @Override,     public void setRef(int parameterIndex, Ref x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setRowId(int parameterIndex, RowId x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setShort(int parameterIndex, short x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setString(int parameterIndex, String x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex, new Time(cal.getTimeInMillis()));,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex,  DateUtil.getTimestamp(cal.getTimeInMillis(), x.getNanos()));,     }, ,     @Override,     public void setURL(int parameterIndex, URL x) throws SQLException {,         setParameter(parameterIndex, x.toExternalForm()); // Just treat as String,     }, ,     @Override,     public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,setParameter,128-128,[            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND)],,setParameter,127-127,[        if (parameterIndex < 1) {],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixResultSet.java,next,737-737,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,228-228,[                            throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,274-274,[                                    throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixStatement.java,,369-433,[            return new QueryPlan() {, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;,                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     return new ExplainPlan(Collections.singletonList("EXPLAIN PLAN"));,                 }, ,                 @Override,                 public ResultIterator iterator() throws SQLException {,                     return iterator;,                 }, ,                 @Override,                 public long getEstimatedSize() {,                     return 0;,                 }, ,                 @Override,                 public TableRef getTableRef() {,                     return null;,                 }, ,                 @Override,                 public RowProjector getProjector() {,                     return EXPLAIN_PLAN_ROW_PROJECTOR;,                 }, ,                 @Override,                 public Integer getLimit() {,                     return null;,                 }, ,                 @Override,                 public OrderBy getOrderBy() {,                     return OrderBy.EMPTY_ORDER_BY;,                 }, ,                 @Override,                 public GroupBy getGroupBy() {,                     return GroupBy.EMPTY_GROUP_BY;,                 }, ,                 @Override,                 public List<KeyRange> getSplits() {,                     return Collections.emptyList();,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return plan.getContext();,                 }, ,                 @Override,                 public FilterableStatement getStatement() {,                     return null;,                 }, ,                 @Override,                 public boolean isDegenerate() {,                     return false;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/job/AbstractRoundRobinQueue.java,offer,115-115,[        offer(o);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,82-82,[                return new JobFutureTask<T>(runnable, value);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,77-77,[                return new JobFutureTask<T>(call);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/join/HashCacheFactory.java,,67-121,[    private class HashCacheImpl implements HashCache {,         private final Map<ImmutableBytesPtr,List<Tuple>> hashCache;,         private final MemoryChunk memoryChunk;,         ,         private HashCacheImpl(byte[] hashCacheBytes, MemoryChunk memoryChunk) {,             try {,                 this.memoryChunk = memoryChunk;,                 byte[] hashCacheByteArray = hashCacheBytes;,                 int offset = 0;,                 ByteArrayInputStream input = new ByteArrayInputStream(hashCacheByteArray, offset, hashCacheBytes.length);,                 DataInputStream dataInput = new DataInputStream(input);,                 int nExprs = dataInput.readInt();,                 List<Expression> onExpressions = new ArrayList<Expression>(nExprs);,                 for (int i = 0; i < nExprs; i++) {,                     int expressionOrdinal = WritableUtils.readVInt(dataInput);,                     Expression expression = ExpressionType.values()[expressionOrdinal].newInstance();,                     expression.readFields(dataInput);,                     onExpressions.add(expression);                        ,                 },                 int exprSize = dataInput.readInt();,                 offset += exprSize;,                 int nRows = dataInput.readInt();,                 long estimatedSize = SizedUtil.sizeOfMap(nRows, SizedUtil.IMMUTABLE_BYTES_WRITABLE_SIZE, SizedUtil.RESULT_SIZE) + hashCacheBytes.length;,                 this.memoryChunk.resize(estimatedSize);,                 HashMap<ImmutableBytesPtr,List<Tuple>> hashCacheMap = new HashMap<ImmutableBytesPtr,List<Tuple>>(nRows * 5 / 4);,                 offset += Bytes.SIZEOF_INT;,                 // Build Map with evaluated hash key as key and row as value,                 for (int i = 0; i < nRows; i++) {,                     int resultSize = (int)Bytes.readVLong(hashCacheByteArray, offset);,                     offset += WritableUtils.decodeVIntSize(hashCacheByteArray[offset]);,                     ImmutableBytesWritable value = new ImmutableBytesWritable(hashCacheByteArray,offset,resultSize);,                     Tuple result = new ResultTuple(ResultUtil.toResult(value));,                     ImmutableBytesPtr key = TupleUtil.getConcatenatedValue(result, onExpressions);,                     List<Tuple> tuples = hashCacheMap.get(key);,                     if (tuples == null) {,                         tuples = new LinkedList<Tuple>();,                         hashCacheMap.put(key, tuples);,                     },                     tuples.add(result);,                     offset += resultSize;,                 },                 this.hashCache = Collections.unmodifiableMap(hashCacheMap);,             } catch (IOException e) { // Not possible with ByteArrayInputStream,                 throw new RuntimeException(e);,             },         }, ,         @Override,         public void close() {,             memoryChunk.close();,         },         ,         @Override,         public List<Tuple> get(ImmutableBytesPtr hashKey) {,             return hashCache.get(hashKey);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,earlyEvaluation,109-109,[    	return earlyEvaluation;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getFieldPositions,117-117,[    	return fieldPositions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinExpressions,101-101,[        return joinExpressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinIds,97-97,[        return joinIds;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinTypes,105-105,[        return joinTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getSchemas,113-113,[    	return schemas;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/TupleProjector.java,getExpressions,247-247,[        return expressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/join/TupleProjector.java,<init>,74-74,[    	this.expressions = expressions;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/join/TupleProjector.java,,46-46,[    public static final byte[] VALUE_COLUMN_FAMILY = Bytes.toBytes("_v");],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/TupleProjector.java,getProjectedValue,158-158,[            return projectedValue;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/logging/PerformanceLog.java,instanceLog,76-76,[		getFileOutputStream().write(message.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/logging/PerformanceLog.java,log,82-82,[		getFileOutputStream().write(message.getBytes());],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/logging/PerformanceLog.java,getFileOutputStream,90-100,[		if (fostream == null) {, 			String folderName = "results";, 			File folder = new File(folderName);, 			if (!folder.exists()) {, 				folder.mkdir();, 			}, 			String generatedFileName = folderName, 					+ "/", 					+ (fileName.endsWith("|") ? fileName.substring(0,, 							fileName.length() - 1) : fileName) + ".txt";, 			fostream = new FileOutputStream(generatedFileName);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/logging/PerformanceLog.java,getFileOutputStream,94-94,[				folder.mkdir();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/CsvBulkLoadTool.java,parseOptions,121-121,[        if (cmdLine.hasOption(HELP_OPT.getOpt())) {],,parseOptions,114-114,[        CommandLine cmdLine = null;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/CsvBulkLoadTool.java,run,184-184,[                getJdbcUrl(cmdLine.getOptionValue(ZK_QUORUM_OPT.getOpt())));],,run,176-176,[        CommandLine cmdLine = null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,84-84,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,119-119,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,195-195,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,161-161,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,79-79,[        Statement stmt = conn.createStatement();],,testBasicImport,80-80,[        stmt.execute("CREATE TABLE TABLE1 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,113-113,[        Statement stmt = conn.createStatement();],,testFullOptionImport,114-114,[        stmt.execute("CREATE TABLE TABLE2 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,186-186,[        Statement stmt = conn.createStatement();],,testImportOneIndexTable,187-187,[        stmt.execute("CREATE TABLE TABLE4 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,151-151,[        Statement stmt = conn.createStatement();],,testImportWithIndex,152-152,[        stmt.execute("CREATE TABLE TABLE3 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,79-79,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,113-113,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,186-186,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,151-151,[        Statement stmt = conn.createStatement();],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/mapreduce/CsvToKeyValueMapper.java,apply,245-251,[                                if (input.isEmpty()) {,                                     // An empty string represents a null that was passed in to,                                     // the configuration, which corresponds to an input column,                                     // which is to be skipped,                                     return null;,                                 },                                 return ColumnInfo.fromString(input);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,76-85,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(50);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,87-96,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 MemoryChunk c3 = rmm2.allocate(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 1000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,118-127,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(40);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,129-139,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 MemoryChunk c3 = rmm2.allocate(10);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 c3.resize(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 2000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,160-170,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c2 = rmm1.allocate(20);,                 sleepFor(4000);,                 c1.resize(20); // resize down to test that other thread is notified,                 sleepFor(2000);,                 c2.close();,                 c1.close();,                 assertTrue(rmm1.getAvailableMemory() == rmm1.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,172-184,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 ChildMemoryManager rmm2 = new ChildMemoryManager(gmm,100);,                 MemoryChunk c3 = rmm2.allocate(10);,                 long startTime = System.currentTimeMillis();,                 c3.resize(60); // Test that resize waits if memory not available,                 assertTrue(c1.getSize() == 20); // c1 was resized not closed,                 assertTrue(System.currentTimeMillis() - startTime >= 2000); // we waited some time before the allocate happened,                 c3.close();,                 assertTrue(rmm2.getAvailableMemory() == rmm2.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/optimize/QueryOptimizer.java,,289-340,[        Collections.sort(bestCandidates, new Comparator<QueryPlan>() {, ,             @Override,             public int compare(QueryPlan plan1, QueryPlan plan2) {,                 PTable table1 = plan1.getTableRef().getTable();,                 PTable table2 = plan2.getTableRef().getTable();,                 int c = plan2.getContext().getScanRanges().getRanges().size() - plan1.getContext().getScanRanges().getRanges().size();,                 boolean bothLocalIndexes = table1.getIndexType() == IndexType.LOCAL && table2.getIndexType() == IndexType.LOCAL;,                 // Account for potential view constants which are always bound,                 if (plan1 == dataPlan) { // plan2 is index plan. Ignore the viewIndexId if present,                     c += boundRanges - (table2.getViewIndexId() == null || bothLocalIndexes ? 0 : 1);,                     // if table2 is local index table and query doesn't have any condition on the,                     // indexed columns then give first priority to the local index.,                     if(table2.getIndexType()==IndexType.LOCAL && plan2.getContext().getScanRanges().getRanges().size()==0) c++;,                 } else { // plan1 is index plan. Ignore the viewIndexId if present,                     c -= boundRanges - (table1.getViewIndexId() == null || bothLocalIndexes ? 0 : 1);,                     // if table1 is local index table and query doesn't have any condition on the,                     // indexed columns then give first priority to the local index.,                     if (!bothLocalIndexes && table1.getIndexType() == IndexType.LOCAL,                             && plan1.getContext().getScanRanges().getRanges().isEmpty()) c--;,                     // if both tables are index tables then select plan below based on number of,                     // columns and type of index.,                     if(table1.getType()==PTableType.INDEX && table2.getType()==PTableType.INDEX && !bothLocalIndexes) c=0;,                 },                 if (c != 0) return c;,                 if (plan1.getGroupBy()!=null && plan2.getGroupBy()!=null) {,                     if (plan1.getGroupBy().isOrderPreserving() != plan2.getGroupBy().isOrderPreserving()) {,                         return plan1.getGroupBy().isOrderPreserving() ? -1 : 1;,                     } ,                 },                 // Use smaller table (table with fewest kv columns),                 c = (table1.getColumns().size() - table1.getPKColumns().size()) - (table2.getColumns().size() - table2.getPKColumns().size());,                 if (c != 0) return c;,                 ,                 // If all things are equal, don't choose local index as it forces scan,                 // on every region.,                 if (table1.getIndexType() == IndexType.LOCAL) {,                     return 1;,                 },                 if (table2.getIndexType() == IndexType.LOCAL) {,                     return -1;,                 }, ,                 // All things being equal, just use the table based on the Hint.USE_DATA_OVER_INDEX_TABLE,                 if (table1.getType() == PTableType.INDEX) {,                     return comparisonOfDataVersusIndexTable;,                 },                 if (table2.getType() == PTableType.INDEX) {,                     return -comparisonOfDataVersusIndexTable;,                 },                 ,                 return 0;],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/phoenix/parse/ColumnDef.java,<init>,103-103,[                 scale = scale == null ? PDataType.DEFAULT_SCALE : scale > maxLength ? maxLength : scale; ],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/FunctionParseNode.java,create,241-241,[                throw (SQLException) e.getTargetException();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/FunctionParseNode.java,validate,213-213,[                    if (!args[i].getAllowedValues().contains(value.toString().toUpperCase())) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getAllowedTypes,413-413,[            return allowedTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getArgs,320-320,[            return args;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/HintNode.java,<init>,143-143,[                Hint key = Hint.valueOf(hintWord.toUpperCase());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,221-224,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,311-314,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.like(children.get(0),children.get(1),node.isNegate(), node.getLikeType());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,321-324,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.not(children.get(0));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,331-334,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.cast(children.get(0), node.getDataType(), node.getMaxLength(), node.getScale());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,341-344,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.inList(children, node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,352-355,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.in(children.get(0), children.get(1), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,363-366,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.isNull(children.get(0), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,373-376,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.comparison(node.getFilterOp(), children.get(0), children.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,384-390,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 if(node.isNegate()) {,                     return NODE_FACTORY.not(NODE_FACTORY.and(children));,                 } else {,                     return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,455-458,[        return leaveCompoundNode(node, l, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.concat(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,500-503,[        return leaveCompoundNode(node, flattenedChildren, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.rowValueConstructor(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,231-234,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,515-518,[	    return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.upsertStmtArrayNode(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,566-569,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.arrayAny(nodes.get(0), (ComparisonParseNode) nodes.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,577-580,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.arrayAll(nodes.get(0), (ComparisonParseNode) nodes.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,588-591,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.elementRef(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,241-244,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.subtract(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,251-254,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.add(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,261-264,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.multiply(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,271-274,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.divide(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,281-284,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.modulus(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,291-294,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.function(node.getName(),children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,301-304,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.caseWhen(children);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLLexer.java,mML_HINT,3482-3482,[					t = input.LA(1);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mCHAR_ESC,3290-3358,[					switch (alt12) {, 						case 1 :, 							// PhoenixSQL.g:1130:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1131:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1132:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1133:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1134:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1135:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1136:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1137:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1138:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1139:11: '%', 							{, 							match('%'); , 							 setText("\\%"); ],,mCHAR_ESC,3227-3371,[			switch (alt13) {, 				case 1 :, 					// PhoenixSQL.g:1129:9: '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					{, 					match('\\'); , 					// PhoenixSQL.g:1130:9: ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					int alt12=10;, 					switch ( input.LA(1) ) {, 					case 'n':, 						{, 						alt12=1;, 						}, 						break;, 					case 'r':, 						{, 						alt12=2;, 						}, 						break;, 					case 't':, 						{, 						alt12=3;, 						}, 						break;, 					case 'b':, 						{, 						alt12=4;, 						}, 						break;, 					case 'f':, 						{, 						alt12=5;, 						}, 						break;, 					case '\"':, 						{, 						alt12=6;, 						}, 						break;, 					case '\'':, 						{, 						alt12=7;, 						}, 						break;, 					case '\\':, 						{, 						alt12=8;, 						}, 						break;, 					case '_':, 						{, 						alt12=9;, 						}, 						break;, 					case '%':, 						{, 						alt12=10;, 						}, 						break;, 					default:, 						NoViableAltException nvae =, 							new NoViableAltException("", 12, 0, input);, 						throw nvae;, 					}, 					switch (alt12) {, 						case 1 :, 							// PhoenixSQL.g:1130:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1131:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1132:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1133:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1134:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1135:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1136:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1137:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1138:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1139:11: '%', 							{, 							match('%'); , 							 setText("\\%"); , 							}, 							break;, , 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1141:9: '\\'\\'', 					{, 					match("''"); , , 					 setText("\'"); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mDECIMAL,2336-2340,[			switch (alt7) {, 				case 1 :, 					// PhoenixSQL.g:970:9: POSINTEGER, 					{, 					mPOSINTEGER(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mSL_COMMENT,3595-3606,[			switch (alt16) {, 				case 1 :, 					// PhoenixSQL.g:1166:8: SL_COMMENT1, 					{, 					mSL_COMMENT1(); , , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1166:22: SL_COMMENT2, 					{, 					mSL_COMMENT2(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mTokens,3677-4577,[		switch (alt18) {, 			case 1 :, 				// PhoenixSQL.g:1:10: ADD, 				{, 				mADD(); , , 				}, 				break;, 			case 2 :, 				// PhoenixSQL.g:1:14: ALL, 				{, 				mALL(); , , 				}, 				break;, 			case 3 :, 				// PhoenixSQL.g:1:18: ALTER, 				{, 				mALTER(); , , 				}, 				break;, 			case 4 :, 				// PhoenixSQL.g:1:24: ANALYZE, 				{, 				mANALYZE(); , , 				}, 				break;, 			case 5 :, 				// PhoenixSQL.g:1:32: AND, 				{, 				mAND(); , , 				}, 				break;, 			case 6 :, 				// PhoenixSQL.g:1:36: ANY, 				{, 				mANY(); , , 				}, 				break;, 			case 7 :, 				// PhoenixSQL.g:1:40: ARRAY, 				{, 				mARRAY(); , , 				}, 				break;, 			case 8 :, 				// PhoenixSQL.g:1:46: AS, 				{, 				mAS(); , , 				}, 				break;, 			case 9 :, 				// PhoenixSQL.g:1:49: ASC, 				{, 				mASC(); , , 				}, 				break;, 			case 10 :, 				// PhoenixSQL.g:1:53: BETWEEN, 				{, 				mBETWEEN(); , , 				}, 				break;, 			case 11 :, 				// PhoenixSQL.g:1:61: BY, 				{, 				mBY(); , , 				}, 				break;, 			case 12 :, 				// PhoenixSQL.g:1:64: CACHE, 				{, 				mCACHE(); , , 				}, 				break;, 			case 13 :, 				// PhoenixSQL.g:1:70: CASCADE, 				{, 				mCASCADE(); , , 				}, 				break;, 			case 14 :, 				// PhoenixSQL.g:1:78: CASE, 				{, 				mCASE(); , , 				}, 				break;, 			case 15 :, 				// PhoenixSQL.g:1:83: CAST, 				{, 				mCAST(); , , 				}, 				break;, 			case 16 :, 				// PhoenixSQL.g:1:88: COLUMN, 				{, 				mCOLUMN(); , , 				}, 				break;, 			case 17 :, 				// PhoenixSQL.g:1:95: CONSTRAINT, 				{, 				mCONSTRAINT(); , , 				}, 				break;, 			case 18 :, 				// PhoenixSQL.g:1:106: CREATE, 				{, 				mCREATE(); , , 				}, 				break;, 			case 19 :, 				// PhoenixSQL.g:1:113: CURRENT, 				{, 				mCURRENT(); , , 				}, 				break;, 			case 20 :, 				// PhoenixSQL.g:1:121: CYCLE, 				{, 				mCYCLE(); , , 				}, 				break;, 			case 21 :, 				// PhoenixSQL.g:1:127: DELETE, 				{, 				mDELETE(); , , 				}, 				break;, 			case 22 :, 				// PhoenixSQL.g:1:134: DESC, 				{, 				mDESC(); , , 				}, 				break;, 			case 23 :, 				// PhoenixSQL.g:1:139: DISABLE, 				{, 				mDISABLE(); , , 				}, 				break;, 			case 24 :, 				// PhoenixSQL.g:1:147: DISTINCT, 				{, 				mDISTINCT(); , , 				}, 				break;, 			case 25 :, 				// PhoenixSQL.g:1:156: DROP, 				{, 				mDROP(); , , 				}, 				break;, 			case 26 :, 				// PhoenixSQL.g:1:161: ELSE, 				{, 				mELSE(); , , 				}, 				break;, 			case 27 :, 				// PhoenixSQL.g:1:166: END, 				{, 				mEND(); , , 				}, 				break;, 			case 28 :, 				// PhoenixSQL.g:1:170: EXISTS, 				{, 				mEXISTS(); , , 				}, 				break;, 			case 29 :, 				// PhoenixSQL.g:1:177: EXPLAIN, 				{, 				mEXPLAIN(); , , 				}, 				break;, 			case 30 :, 				// PhoenixSQL.g:1:185: FALSE, 				{, 				mFALSE(); , , 				}, 				break;, 			case 31 :, 				// PhoenixSQL.g:1:191: FIRST, 				{, 				mFIRST(); , , 				}, 				break;, 			case 32 :, 				// PhoenixSQL.g:1:197: FOR, 				{, 				mFOR(); , , 				}, 				break;, 			case 33 :, 				// PhoenixSQL.g:1:201: FROM, 				{, 				mFROM(); , , 				}, 				break;, 			case 34 :, 				// PhoenixSQL.g:1:206: FULL, 				{, 				mFULL(); , , 				}, 				break;, 			case 35 :, 				// PhoenixSQL.g:1:211: GROUP, 				{, 				mGROUP(); , , 				}, 				break;, 			case 36 :, 				// PhoenixSQL.g:1:217: HAVING, 				{, 				mHAVING(); , , 				}, 				break;, 			case 37 :, 				// PhoenixSQL.g:1:224: IF, 				{, 				mIF(); , , 				}, 				break;, 			case 38 :, 				// PhoenixSQL.g:1:227: ILIKE, 				{, 				mILIKE(); , , 				}, 				break;, 			case 39 :, 				// PhoenixSQL.g:1:233: IN, 				{, 				mIN(); , , 				}, 				break;, 			case 40 :, 				// PhoenixSQL.g:1:236: INCLUDE, 				{, 				mINCLUDE(); , , 				}, 				break;, 			case 41 :, 				// PhoenixSQL.g:1:244: INCREMENT, 				{, 				mINCREMENT(); , , 				}, 				break;, 			case 42 :, 				// PhoenixSQL.g:1:254: INDEX, 				{, 				mINDEX(); , , 				}, 				break;, 			case 43 :, 				// PhoenixSQL.g:1:260: INNER, 				{, 				mINNER(); , , 				}, 				break;, 			case 44 :, 				// PhoenixSQL.g:1:266: INTO, 				{, 				mINTO(); , , 				}, 				break;, 			case 45 :, 				// PhoenixSQL.g:1:271: IS, 				{, 				mIS(); , , 				}, 				break;, 			case 46 :, 				// PhoenixSQL.g:1:274: JOIN, 				{, 				mJOIN(); , , 				}, 				break;, 			case 47 :, 				// PhoenixSQL.g:1:279: KEY, 				{, 				mKEY(); , , 				}, 				break;, 			case 48 :, 				// PhoenixSQL.g:1:283: LAST, 				{, 				mLAST(); , , 				}, 				break;, 			case 49 :, 				// PhoenixSQL.g:1:288: LEFT, 				{, 				mLEFT(); , , 				}, 				break;, 			case 50 :, 				// PhoenixSQL.g:1:293: LIKE, 				{, 				mLIKE(); , , 				}, 				break;, 			case 51 :, 				// PhoenixSQL.g:1:298: LIMIT, 				{, 				mLIMIT(); , , 				}, 				break;, 			case 52 :, 				// PhoenixSQL.g:1:304: LOCAL, 				{, 				mLOCAL(); , , 				}, 				break;, 			case 53 :, 				// PhoenixSQL.g:1:310: MAXVALUE, 				{, 				mMAXVALUE(); , , 				}, 				break;, 			case 54 :, 				// PhoenixSQL.g:1:319: MINVALUE, 				{, 				mMINVALUE(); , , 				}, 				break;, 			case 55 :, 				// PhoenixSQL.g:1:328: NEXT, 				{, 				mNEXT(); , , 				}, 				break;, 			case 56 :, 				// PhoenixSQL.g:1:333: NOT, 				{, 				mNOT(); , , 				}, 				break;, 			case 57 :, 				// PhoenixSQL.g:1:337: NULL, 				{, 				mNULL(); , , 				}, 				break;, 			case 58 :, 				// PhoenixSQL.g:1:342: NULLS, 				{, 				mNULLS(); , , 				}, 				break;, 			case 59 :, 				// PhoenixSQL.g:1:348: ON, 				{, 				mON(); , , 				}, 				break;, 			case 60 :, 				// PhoenixSQL.g:1:351: OR, 				{, 				mOR(); , , 				}, 				break;, 			case 61 :, 				// PhoenixSQL.g:1:354: ORDER, 				{, 				mORDER(); , , 				}, 				break;, 			case 62 :, 				// PhoenixSQL.g:1:360: OUTER, 				{, 				mOUTER(); , , 				}, 				break;, 			case 63 :, 				// PhoenixSQL.g:1:366: PRIMARY, 				{, 				mPRIMARY(); , , 				}, 				break;, 			case 64 :, 				// PhoenixSQL.g:1:374: REBUILD, 				{, 				mREBUILD(); , , 				}, 				break;, 			case 65 :, 				// PhoenixSQL.g:1:382: RIGHT, 				{, 				mRIGHT(); , , 				}, 				break;, 			case 66 :, 				// PhoenixSQL.g:1:388: SELECT, 				{, 				mSELECT(); , , 				}, 				break;, 			case 67 :, 				// PhoenixSQL.g:1:395: SEQUENCE, 				{, 				mSEQUENCE(); , , 				}, 				break;, 			case 68 :, 				// PhoenixSQL.g:1:404: SET, 				{, 				mSET(); , , 				}, 				break;, 			case 69 :, 				// PhoenixSQL.g:1:408: SOME, 				{, 				mSOME(); , , 				}, 				break;, 			case 70 :, 				// PhoenixSQL.g:1:413: SPLIT, 				{, 				mSPLIT(); , , 				}, 				break;, 			case 71 :, 				// PhoenixSQL.g:1:419: START, 				{, 				mSTART(); , , 				}, 				break;, 			case 72 :, 				// PhoenixSQL.g:1:425: TABLE, 				{, 				mTABLE(); , , 				}, 				break;, 			case 73 :, 				// PhoenixSQL.g:1:431: TABLES, 				{, 				mTABLES(); , , 				}, 				break;, 			case 74 :, 				// PhoenixSQL.g:1:438: THEN, 				{, 				mTHEN(); , , 				}, 				break;, 			case 75 :, 				// PhoenixSQL.g:1:443: TRUE, 				{, 				mTRUE(); , , 				}, 				break;, 			case 76 :, 				// PhoenixSQL.g:1:448: UNUSABLE, 				{, 				mUNUSABLE(); , , 				}, 				break;, 			case 77 :, 				// PhoenixSQL.g:1:457: UPSERT, 				{, 				mUPSERT(); , , 				}, 				break;, 			case 78 :, 				// PhoenixSQL.g:1:464: USABLE, 				{, 				mUSABLE(); , , 				}, 				break;, 			case 79 :, 				// PhoenixSQL.g:1:471: VALUE, 				{, 				mVALUE(); , , 				}, 				break;, 			case 80 :, 				// PhoenixSQL.g:1:477: VALUES, 				{, 				mVALUES(); , , 				}, 				break;, 			case 81 :, 				// PhoenixSQL.g:1:484: VIEW, 				{, 				mVIEW(); , , 				}, 				break;, 			case 82 :, 				// PhoenixSQL.g:1:489: WHEN, 				{, 				mWHEN(); , , 				}, 				break;, 			case 83 :, 				// PhoenixSQL.g:1:494: WHERE, 				{, 				mWHERE(); , , 				}, 				break;, 			case 84 :, 				// PhoenixSQL.g:1:500: WITH, 				{, 				mWITH(); , , 				}, 				break;, 			case 85 :, 				// PhoenixSQL.g:1:505: WITHIN, 				{, 				mWITHIN(); , , 				}, 				break;, 			case 86 :, 				// PhoenixSQL.g:1:512: HINT_START, 				{, 				mHINT_START(); , , 				}, 				break;, 			case 87 :, 				// PhoenixSQL.g:1:523: COMMENT_START, 				{, 				mCOMMENT_START(); , , 				}, 				break;, 			case 88 :, 				// PhoenixSQL.g:1:537: COMMENT_AND_HINT_END, 				{, 				mCOMMENT_AND_HINT_END(); , , 				}, 				break;, 			case 89 :, 				// PhoenixSQL.g:1:558: SL_COMMENT1, 				{, 				mSL_COMMENT1(); , , 				}, 				break;, 			case 90 :, 				// PhoenixSQL.g:1:570: SL_COMMENT2, 				{, 				mSL_COMMENT2(); , , 				}, 				break;, 			case 91 :, 				// PhoenixSQL.g:1:582: BIND_NAME, 				{, 				mBIND_NAME(); , , 				}, 				break;, 			case 92 :, 				// PhoenixSQL.g:1:592: NAME, 				{, 				mNAME(); , , 				}, 				break;, 			case 93 :, 				// PhoenixSQL.g:1:597: NUMBER, 				{, 				mNUMBER(); , , 				}, 				break;, 			case 94 :, 				// PhoenixSQL.g:1:604: LONG, 				{, 				mLONG(); , , 				}, 				break;, 			case 95 :, 				// PhoenixSQL.g:1:609: DECIMAL, 				{, 				mDECIMAL(); , , 				}, 				break;, 			case 96 :, 				// PhoenixSQL.g:1:617: DOUBLE, 				{, 				mDOUBLE(); , , 				}, 				break;, 			case 97 :, 				// PhoenixSQL.g:1:624: DOUBLE_QUOTE, 				{, 				mDOUBLE_QUOTE(); , , 				}, 				break;, 			case 98 :, 				// PhoenixSQL.g:1:637: EQ, 				{, 				mEQ(); , , 				}, 				break;, 			case 99 :, 				// PhoenixSQL.g:1:640: LT, 				{, 				mLT(); , , 				}, 				break;, 			case 100 :, 				// PhoenixSQL.g:1:643: GT, 				{, 				mGT(); , , 				}, 				break;, 			case 101 :, 				// PhoenixSQL.g:1:646: DOUBLE_EQ, 				{, 				mDOUBLE_EQ(); , , 				}, 				break;, 			case 102 :, 				// PhoenixSQL.g:1:656: NOEQ1, 				{, 				mNOEQ1(); , , 				}, 				break;, 			case 103 :, 				// PhoenixSQL.g:1:662: NOEQ2, 				{, 				mNOEQ2(); , , 				}, 				break;, 			case 104 :, 				// PhoenixSQL.g:1:668: CONCAT, 				{, 				mCONCAT(); , , 				}, 				break;, 			case 105 :, 				// PhoenixSQL.g:1:675: COMMA, 				{, 				mCOMMA(); , , 				}, 				break;, 			case 106 :, 				// PhoenixSQL.g:1:681: LPAREN, 				{, 				mLPAREN(); , , 				}, 				break;, 			case 107 :, 				// PhoenixSQL.g:1:688: RPAREN, 				{, 				mRPAREN(); , , 				}, 				break;, 			case 108 :, 				// PhoenixSQL.g:1:695: SEMICOLON, 				{, 				mSEMICOLON(); , , 				}, 				break;, 			case 109 :, 				// PhoenixSQL.g:1:705: COLON, 				{, 				mCOLON(); , , 				}, 				break;, 			case 110 :, 				// PhoenixSQL.g:1:711: QUESTION, 				{, 				mQUESTION(); , , 				}, 				break;, 			case 111 :, 				// PhoenixSQL.g:1:720: LSQUARE, 				{, 				mLSQUARE(); , , 				}, 				break;, 			case 112 :, 				// PhoenixSQL.g:1:728: RSQUARE, 				{, 				mRSQUARE(); , , 				}, 				break;, 			case 113 :, 				// PhoenixSQL.g:1:736: LCURLY, 				{, 				mLCURLY(); , , 				}, 				break;, 			case 114 :, 				// PhoenixSQL.g:1:743: RCURLY, 				{, 				mRCURLY(); , , 				}, 				break;, 			case 115 :, 				// PhoenixSQL.g:1:750: AT, 				{, 				mAT(); , , 				}, 				break;, 			case 116 :, 				// PhoenixSQL.g:1:753: TILDE, 				{, 				mTILDE(); , , 				}, 				break;, 			case 117 :, 				// PhoenixSQL.g:1:759: PLUS, 				{, 				mPLUS(); , , 				}, 				break;, 			case 118 :, 				// PhoenixSQL.g:1:764: MINUS, 				{, 				mMINUS(); , , 				}, 				break;, 			case 119 :, 				// PhoenixSQL.g:1:770: ASTERISK, 				{, 				mASTERISK(); , , 				}, 				break;, 			case 120 :, 				// PhoenixSQL.g:1:779: DIVIDE, 				{, 				mDIVIDE(); , , 				}, 				break;, 			case 121 :, 				// PhoenixSQL.g:1:786: PERCENT, 				{, 				mPERCENT(); , , 				}, 				break;, 			case 122 :, 				// PhoenixSQL.g:1:794: OUTER_JOIN, 				{, 				mOUTER_JOIN(); , , 				}, 				break;, 			case 123 :, 				// PhoenixSQL.g:1:805: STRING_LITERAL, 				{, 				mSTRING_LITERAL(); , , 				}, 				break;, 			case 124 :, 				// PhoenixSQL.g:1:820: WS, 				{, 				mWS(); , , 				}, 				break;, 			case 125 :, 				// PhoenixSQL.g:1:823: EOL, 				{, 				mEOL(); , , 				}, 				break;, 			case 126 :, 				// PhoenixSQL.g:1:827: ML_HINT, 				{, 				mML_HINT(); , , 				}, 				break;, 			case 127 :, 				// PhoenixSQL.g:1:835: ML_COMMENT, 				{, 				mML_COMMENT(); , , 				}, 				break;, 			case 128 :, 				// PhoenixSQL.g:1:846: SL_COMMENT, 				{, 				mSL_COMMENT(); , , 				}, 				break;, 			case 129 :, 				// PhoenixSQL.g:1:857: DOT, 				{, 				mDOT(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/parse/PhoenixSQLLexer.java,,5267-5331,[		public DFA18(BaseRecognizer recognizer) {, 			this.recognizer = recognizer;, 			this.decisionNumber = 18;, 			this.eot = DFA18_eot;, 			this.eof = DFA18_eof;, 			this.min = DFA18_min;, 			this.max = DFA18_max;, 			this.accept = DFA18_accept;, 			this.special = DFA18_special;, 			this.transition = DFA18_transition;, 		}, 		@Override, 		public String getDescription() {, 			return "1:1: Tokens : ( ADD | ALL | ALTER | ANALYZE | AND | ANY | ARRAY | AS | ASC | BETWEEN | BY | CACHE | CASCADE | CASE | CAST | COLUMN | CONSTRAINT | CREATE | CURRENT | CYCLE | DELETE | DESC | DISABLE | DISTINCT | DROP | ELSE | END | EXISTS | EXPLAIN | FALSE | FIRST | FOR | FROM | FULL | GROUP | HAVING | IF | ILIKE | IN | INCLUDE | INCREMENT | INDEX | INNER | INTO | IS | JOIN | KEY | LAST | LEFT | LIKE | LIMIT | LOCAL | MAXVALUE | MINVALUE | NEXT | NOT | NULL | NULLS | ON | OR | ORDER | OUTER | PRIMARY | REBUILD | RIGHT | SELECT | SEQUENCE | SET | SOME | SPLIT | START | TABLE | TABLES | THEN | TRUE | UNUSABLE | UPSERT | USABLE | VALUE | VALUES | VIEW | WHEN | WHERE | WITH | WITHIN | HINT_START | COMMENT_START | COMMENT_AND_HINT_END | SL_COMMENT1 | SL_COMMENT2 | BIND_NAME | NAME | NUMBER | LONG | DECIMAL | DOUBLE | DOUBLE_QUOTE | EQ | LT | GT | DOUBLE_EQ | NOEQ1 | NOEQ2 | CONCAT | COMMA | LPAREN | RPAREN | SEMICOLON | COLON | QUESTION | LSQUARE | RSQUARE | LCURLY | RCURLY | AT | TILDE | PLUS | MINUS | ASTERISK | DIVIDE | PERCENT | OUTER_JOIN | STRING_LITERAL | WS | EOL | ML_HINT | ML_COMMENT | SL_COMMENT | DOT );";, 		}, 		@Override, 		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {, 			IntStream input = _input;, 			int _s = s;, 			switch ( s ) {, 					case 0 : , 						int LA18_28 = input.LA(1);, 						s = -1;, 						if ( ((LA18_28 >= '\u0000' && LA18_28 <= '\uFFFF')) ) {s = 27;}, 						else s = 121;, 						if ( s>=0 ) return s;, 						break;, , 					case 1 : , 						int LA18_113 = input.LA(1);, 						s = -1;, 						if ( ((LA18_113 >= '\u0000' && LA18_113 <= '\uFFFF')) ) {s = 213;}, 						else s = 212;, 						if ( s>=0 ) return s;, 						break;, , 					case 2 : , 						int LA18_117 = input.LA(1);, 						s = -1;, 						if ( ((LA18_117 >= '\u0000' && LA18_117 <= '\uFFFF')) ) {s = 213;}, 						else s = 214;, 						if ( s>=0 ) return s;, 						break;, , 					case 3 : , 						int LA18_209 = input.LA(1);, 						s = -1;, 						if ( ((LA18_209 >= '\u0000' && LA18_209 <= '\uFFFF')) ) {s = 292;}, 						else s = 291;, 						if ( s>=0 ) return s;, 						break;, , 					case 4 : , 						int LA18_112 = input.LA(1);, 						s = -1;, 						if ( (LA18_112=='+') ) {s = 209;}, 						else if ( ((LA18_112 >= '\u0000' && LA18_112 <= '*')||(LA18_112 >= ',' && LA18_112 <= '\uFFFF')) ) {s = 211;}, 						else s = 210;, 						if ( s>=0 ) return s;, 						break;, 			}, 			NoViableAltException nvae =, 				new NoViableAltException(getDescription(), 18, _s, input);, 			error(nvae);, 			throw nvae;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7754-7754,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5521); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7885-7885,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term5663); if (state.failed) return ret;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/PhoenixSQLParser.java,getTokenNames,247-247,[	@Override public String[] getTokenNames() { return PhoenixSQLParser.tokenNames; }],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/parse/PhoenixSQLParser.java,,73-73,[	public static final String[] tokenNames = new String[] {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,add_expression,7165-7165,[			if (state.failed) return ret;],,add_expression,7180-7180,[					match(input,PLUS,FOLLOW_PLUS_in_add_expression5213); if (state.failed) return ret;],,add_expression,7184-7184,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_index_node,2536-2536,[			match(input,ALTER,FOLLOW_ALTER_in_alter_index_node2415); if (state.failed) return ret;],,alter_index_node,2537-2537,[			match(input,INDEX,FOLLOW_INDEX_in_alter_index_node2417); if (state.failed) return ret;],,alter_index_node,2548-2548,[					match(input,IF,FOLLOW_IF_in_alter_index_node2420); if (state.failed) return ret;],,alter_index_node,2558-2558,[			if (state.failed) return ret;],,alter_index_node,2549-2549,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_index_node2424); if (state.failed) return ret;],,alter_index_node,2559-2559,[			match(input,ON,FOLLOW_ON_in_alter_index_node2432); if (state.failed) return ret;],,alter_index_node,2563-2563,[			if (state.failed) return ret;],,alter_index_node,2571-2571,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_table_node,2610-2610,[			match(input,ALTER,FOLLOW_ALTER_in_alter_table_node2486); if (state.failed) return ret;],,alter_table_node,2622-2622,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,2632-2632,[					match(input,TABLE,FOLLOW_TABLE_in_alter_table_node2489); if (state.failed) return ret;],,alter_table_node,2638-2638,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_alter_table_node2495); if (state.failed) return ret;],,alter_table_node,2647-2647,[			if (state.failed) return ret;],,alter_table_node,2667-2667,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,2679-2679,[					match(input,DROP,FOLLOW_DROP_in_alter_table_node2513); if (state.failed) return ret;],,alter_table_node,2712-2712,[					match(input,ADD,FOLLOW_ADD_in_alter_table_node2534); if (state.failed) return ret;],,alter_table_node,2769-2769,[					match(input,SET,FOLLOW_SET_in_alter_table_node2564); if (state.failed) return ret;],,alter_table_node,2680-2680,[					match(input,COLUMN,FOLLOW_COLUMN_in_alter_table_node2515); if (state.failed) return ret;],,alter_table_node,2723-2723,[							match(input,IF,FOLLOW_IF_in_alter_table_node2537); if (state.failed) return ret;],,alter_table_node,2776-2776,[					if (state.failed) return ret;],,alter_table_node,2691-2691,[							match(input,IF,FOLLOW_IF_in_alter_table_node2518); if (state.failed) return ret;],,alter_table_node,2724-2724,[							match(input,NOT,FOLLOW_NOT_in_alter_table_node2539); if (state.failed) return ret;],,alter_table_node,2737-2737,[					if (state.failed) return ret;],,alter_table_node,2701-2701,[					if (state.failed) return ret;],,alter_table_node,2692-2692,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node2522); if (state.failed) return ret;],,alter_table_node,2725-2725,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node2543); if (state.failed) return ret;],,alter_table_node,2753-2753,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,and_expression,6059-6059,[			if (state.failed) return ret;],,and_expression,6074-6074,[					match(input,AND,FOLLOW_AND_in_and_expression4443); if (state.failed) return ret;],,and_expression,6078-6078,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,array_expression,7486-7486,[			if (state.failed) return ret;],,array_expression,7497-7497,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_array_expression5454); if (state.failed) return ret;],,array_expression,7501-7501,[					if (state.failed) return ret;],,array_expression,7502-7502,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_array_expression5460); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_expression,7096-7096,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,8880-8880,[				if (state.backtracking>0) {state.failed=true; return ret;}],,bind_name,8897-8897,[					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name6382); if (state.failed) return ret;],,bind_name,8890-8890,[					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name6369); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,6434-6434,[			if (state.failed) return ret;],,boolean_expression,6494-6494,[				if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6791-6791,[					match(input,IS,FOLLOW_IS_in_boolean_expression4708); if (state.failed) return ret;],,boolean_expression,6509-6509,[					if (state.failed) return ret;],,boolean_expression,6830-6830,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4746); if (state.failed) return ret;],,boolean_expression,6865-6865,[						if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6808-6808,[					match(input,NULL,FOLLOW_NULL_in_boolean_expression4715); if (state.failed) return ret;],,boolean_expression,6877-6877,[							match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4751); if (state.failed) return ret;],,boolean_expression,6893-6893,[							match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression4793); if (state.failed) return ret;],,boolean_expression,6909-6909,[							match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression4835); if (state.failed) return ret;],,boolean_expression,6927-6927,[							match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4881); if (state.failed) return ret;],,boolean_expression,6951-6951,[							match(input,IN,FOLLOW_IN_in_boolean_expression4930); if (state.failed) return ret;],,boolean_expression,6802-6802,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4712); if (state.failed) return ret;],,boolean_expression,6648-6648,[						if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6910-6910,[							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4837); if (state.failed) return ret;],,boolean_expression,6669-6669,[							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4623); if (state.failed) return ret;],,boolean_expression,6589-6589,[							if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6633-6633,[							if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7011-7011,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4977); if (state.failed) return ret;],,boolean_expression,7028-7028,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5024); if (state.failed) return ret;],,boolean_expression,6983-6983,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6696-6696,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6745-6745,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6881-6881,[							if (state.failed) return ret;],,boolean_expression,6897-6897,[							if (state.failed) return ret;],,boolean_expression,6931-6931,[							if (state.failed) return ret;],,boolean_expression,6718-6718,[							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4647); if (state.failed) return ret;],,boolean_expression,6767-6767,[							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4672); if (state.failed) return ret;],,boolean_expression,6660-6660,[							if (state.failed) return ret;],,boolean_expression,6706-6706,[									all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4638); if (state.failed) return ret;],,boolean_expression,6712-6712,[									any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4644); if (state.failed) return ret;],,boolean_expression,6755-6755,[									all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4663); if (state.failed) return ret;],,boolean_expression,6761-6761,[									any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4669); if (state.failed) return ret;],,boolean_expression,6914-6914,[							if (state.failed) return ret;],,boolean_expression,6932-6932,[							match(input,AND,FOLLOW_AND_in_boolean_expression4887); if (state.failed) return ret;],,boolean_expression,6999-6999,[									if (state.failed) return ret;],,boolean_expression,6673-6673,[							if (state.failed) return ret;],,boolean_expression,6915-6915,[							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4843); if (state.failed) return ret;],,boolean_expression,7015-7015,[									if (state.failed) return ret;],,boolean_expression,7032-7032,[									if (state.failed) return ret;],,boolean_expression,6674-6674,[							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4629); if (state.failed) return ret;],,boolean_expression,6722-6722,[							if (state.failed) return ret;],,boolean_expression,6771-6771,[							if (state.failed) return ret;],,boolean_expression,6545-6545,[							if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6572-6572,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6616-6616,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7016-7016,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4983); if (state.failed) return ret;],,boolean_expression,7033-7033,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5030); if (state.failed) return ret;],,boolean_expression,6936-6936,[							if (state.failed) return ret;],,boolean_expression,6723-6723,[							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4653); if (state.failed) return ret;],,boolean_expression,6772-6772,[							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4678); if (state.failed) return ret;],,boolean_expression,6968-6968,[									if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,9025-9025,[				if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9035-9035,[					match(input,CASE,FOLLOW_CASE_in_case_statement6465); if (state.failed) return ret;],,case_statement,9105-9105,[					match(input,CASE,FOLLOW_CASE_in_case_statement6509); if (state.failed) return ret;],,case_statement,9120-9120,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement6512); if (state.failed) return ret;],,case_statement,9039-9039,[					if (state.failed) return ret;],,case_statement,9136-9136,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9010-9010,[					if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9153-9153,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement6529); if (state.failed) return ret;],,case_statement,9164-9164,[					match(input,END,FOLLOW_END_in_case_statement6539); if (state.failed) return ret;],,case_statement,9054-9054,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement6472); if (state.failed) return ret;],,case_statement,9124-9124,[							if (state.failed) return ret;],,case_statement,9070-9070,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9125-9125,[							match(input,THEN,FOLLOW_THEN_in_case_statement6518); if (state.failed) return ret;],,case_statement,9087-9087,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement6489); if (state.failed) return ret;],,case_statement,9098-9098,[					match(input,END,FOLLOW_END_in_case_statement6499); if (state.failed) return ret;],,case_statement,9157-9157,[							if (state.failed) return ret;],,case_statement,9058-9058,[							if (state.failed) return ret;],,case_statement,9059-9059,[							match(input,THEN,FOLLOW_THEN_in_case_statement6478); if (state.failed) return ret;],,case_statement,9129-9129,[							if (state.failed) return ret;],,case_statement,9091-9091,[							if (state.failed) return ret;],,case_statement,9063-9063,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_def_name_with_sort_order,1970-1970,[			if (state.failed) return ret;],,col_def_name_with_sort_order,1984-1984,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_def_name_with_sort_order2045); if (state.failed) return ret;],,col_def_name_with_sort_order,1990-1990,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_def_name_with_sort_order2049); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_name_with_sort_order,1814-1814,[			if (state.failed) return ret;],,col_name_with_sort_order,1828-1828,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_name_with_sort_order1940); if (state.failed) return ret;],,col_name_with_sort_order,1834-1834,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_name_with_sort_order1944); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_def,3037-3037,[			if (state.failed) return ret;],,column_def,3041-3041,[			if (state.failed) return ret;],,column_def,3052-3052,[					match(input,LPAREN,FOLLOW_LPAREN_in_column_def2769); if (state.failed) return ret;],,column_def,3087-3087,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_column_def2790); if (state.failed) return ret;],,column_def,3053-3053,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2773); if (state.failed) return ret;],,column_def,3103-3103,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_column_def2796); if (state.failed) return ret;],,column_def,3064-3064,[							match(input,COMMA,FOLLOW_COMMA_in_column_def2776); if (state.failed) return ret;],,column_def,3071-3071,[					match(input,RPAREN,FOLLOW_RPAREN_in_column_def2784); if (state.failed) return ret;],,column_def,3146-3146,[							nn=(Token)match(input,NOT,FOLLOW_NOT_in_column_def2812); if (state.failed) return ret;],,column_def,3152-3152,[					n=(Token)match(input,NULL,FOLLOW_NULL_in_column_def2817); if (state.failed) return ret;],,column_def,3168-3168,[					pk=(Token)match(input,PRIMARY,FOLLOW_PRIMARY_in_column_def2824); if (state.failed) return ret;],,column_def,3120-3120,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_column_def2805); if (state.failed) return ret;],,column_def,3114-3114,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2801); if (state.failed) return ret;],,column_def,3065-3065,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def2780); if (state.failed) return ret;],,column_def,3169-3169,[					match(input,KEY,FOLLOW_KEY_in_column_def2826); if (state.failed) return ret;],,column_def,3183-3183,[							order=(Token)match(input,ASC,FOLLOW_ASC_in_column_def2831); if (state.failed) return ret;],,column_def,3189-3189,[							order=(Token)match(input,DESC,FOLLOW_DESC_in_column_def2835); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2246-2246,[				if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2231-2231,[					if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2259-2259,[					if (state.failed) return ret;],,column_name,2269-2269,[					if (state.failed) return ret;],,column_name,2270-2270,[					match(input,DOT,FOLLOW_DOT_in_column_name2227); if (state.failed) return ret;],,column_name,2274-2274,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,comparison_op,6335-6335,[				if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,6344-6344,[					match(input,EQ,FOLLOW_EQ_in_comparison_op4537); if (state.failed) return ret;],,comparison_op,6351-6351,[					match(input,LT,FOLLOW_LT_in_comparison_op4544); if (state.failed) return ret;],,comparison_op,6358-6358,[					match(input,GT,FOLLOW_GT_in_comparison_op4551); if (state.failed) return ret;],,comparison_op,6365-6365,[					match(input,LT,FOLLOW_LT_in_comparison_op4558); if (state.failed) return ret;],,comparison_op,6373-6373,[					match(input,GT,FOLLOW_GT_in_comparison_op4567); if (state.failed) return ret;],,comparison_op,6387-6387,[						if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,6366-6366,[					match(input,EQ,FOLLOW_EQ_in_comparison_op4560); if (state.failed) return ret;],,comparison_op,6374-6374,[					match(input,EQ,FOLLOW_EQ_in_comparison_op4569); if (state.failed) return ret;],,comparison_op,6314-6314,[					if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,6289-6289,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,concat_expression,7291-7291,[			if (state.failed) return ret;],,concat_expression,7306-7306,[					match(input,CONCAT,FOLLOW_CONCAT_in_concat_expression5301); if (state.failed) return ret;],,concat_expression,7310-7310,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_index_node,1207-1207,[			match(input,CREATE,FOLLOW_CREATE_in_create_index_node1473); if (state.failed) return ret;],,create_index_node,1224-1224,[			match(input,INDEX,FOLLOW_INDEX_in_create_index_node1480); if (state.failed) return ret;],,create_index_node,1218-1218,[					l=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_create_index_node1477); if (state.failed) return ret;],,create_index_node,1235-1235,[					match(input,IF,FOLLOW_IF_in_create_index_node1483); if (state.failed) return ret;],,create_index_node,1236-1236,[					match(input,NOT,FOLLOW_NOT_in_create_index_node1485); if (state.failed) return ret;],,create_index_node,1246-1246,[			if (state.failed) return ret;],,create_index_node,1247-1247,[			match(input,ON,FOLLOW_ON_in_create_index_node1497); if (state.failed) return ret;],,create_index_node,1237-1237,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_index_node1489); if (state.failed) return ret;],,create_index_node,1251-1251,[			if (state.failed) return ret;],,create_index_node,1255-1255,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1512); if (state.failed) return ret;],,create_index_node,1259-1259,[			if (state.failed) return ret;],,create_index_node,1260-1260,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1518); if (state.failed) return ret;],,create_index_node,1273-1273,[					match(input,INCLUDE,FOLLOW_INCLUDE_in_create_index_node1530); if (state.failed) return ret;],,create_index_node,1277-1277,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1533); if (state.failed) return ret;],,create_index_node,1319-1319,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_index_node1568); if (state.failed) return ret;],,create_index_node,1303-1303,[					if (state.failed) return ret;],,create_index_node,1320-1320,[					match(input,ON,FOLLOW_ON_in_create_index_node1570); if (state.failed) return ret;],,create_index_node,1281-1281,[					if (state.failed) return ret;],,create_index_node,1282-1282,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1539); if (state.failed) return ret;],,create_index_node,1324-1324,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_sequence_node,1367-1367,[			match(input,CREATE,FOLLOW_CREATE_in_create_sequence_node1610); if (state.failed) return ret;],,create_sequence_node,1368-1368,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_create_sequence_node1612); if (state.failed) return ret;],,create_sequence_node,1379-1379,[					match(input,IF,FOLLOW_IF_in_create_sequence_node1616); if (state.failed) return ret;],,create_sequence_node,1380-1380,[					match(input,NOT,FOLLOW_NOT_in_create_sequence_node1618); if (state.failed) return ret;],,create_sequence_node,1390-1390,[			if (state.failed) return ret;],,create_sequence_node,1381-1381,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_sequence_node1622); if (state.failed) return ret;],,create_sequence_node,1401-1401,[					match(input,START,FOLLOW_START_in_create_sequence_node1639); if (state.failed) return ret;],,create_sequence_node,1437-1437,[					match(input,INCREMENT,FOLLOW_INCREMENT_in_create_sequence_node1659); if (state.failed) return ret;],,create_sequence_node,1473-1473,[					match(input,MINVALUE,FOLLOW_MINVALUE_in_create_sequence_node1679); if (state.failed) return ret;],,create_sequence_node,1412-1412,[							match(input,WITH,FOLLOW_WITH_in_create_sequence_node1641); if (state.failed) return ret;],,create_sequence_node,1493-1493,[					match(input,MAXVALUE,FOLLOW_MAXVALUE_in_create_sequence_node1696); if (state.failed) return ret;],,create_sequence_node,1448-1448,[							match(input,BY,FOLLOW_BY_in_create_sequence_node1661); if (state.failed) return ret;],,create_sequence_node,1421-1421,[					if (state.failed) return ret;],,create_sequence_node,1513-1513,[					cyc=(Token)match(input,CYCLE,FOLLOW_CYCLE_in_create_sequence_node1715); if (state.failed) return ret;],,create_sequence_node,1457-1457,[					if (state.failed) return ret;],,create_sequence_node,1477-1477,[					if (state.failed) return ret;],,create_sequence_node,1529-1529,[					match(input,CACHE,FOLLOW_CACHE_in_create_sequence_node1729); if (state.failed) return ret;],,create_sequence_node,1497-1497,[					if (state.failed) return ret;],,create_sequence_node,1533-1533,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_table_node,914-914,[			match(input,CREATE,FOLLOW_CREATE_in_create_table_node1215); if (state.failed) return ret;],,create_table_node,915-915,[			match(input,TABLE,FOLLOW_TABLE_in_create_table_node1217); if (state.failed) return ret;],,create_table_node,926-926,[					match(input,IF,FOLLOW_IF_in_create_table_node1220); if (state.failed) return ret;],,create_table_node,927-927,[					match(input,NOT,FOLLOW_NOT_in_create_table_node1222); if (state.failed) return ret;],,create_table_node,937-937,[			if (state.failed) return ret;],,create_table_node,941-941,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_table_node1244); if (state.failed) return ret;],,create_table_node,928-928,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_node1226); if (state.failed) return ret;],,create_table_node,945-945,[			if (state.failed) return ret;],,create_table_node,965-965,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_table_node1257); if (state.failed) return ret;],,create_table_node,959-959,[					if (state.failed) return ret;],,create_table_node,997-997,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_table_node1284); if (state.failed) return ret;],,create_table_node,981-981,[					if (state.failed) return ret;],,create_table_node,998-998,[					match(input,ON,FOLLOW_ON_in_create_table_node1286); if (state.failed) return ret;],,create_table_node,1002-1002,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_view_node,1044-1044,[			match(input,CREATE,FOLLOW_CREATE_in_create_view_node1326); if (state.failed) return ret;],,create_view_node,1045-1045,[			match(input,VIEW,FOLLOW_VIEW_in_create_view_node1328); if (state.failed) return ret;],,create_view_node,1056-1056,[					match(input,IF,FOLLOW_IF_in_create_view_node1331); if (state.failed) return ret;],,create_view_node,1057-1057,[					match(input,NOT,FOLLOW_NOT_in_create_view_node1333); if (state.failed) return ret;],,create_view_node,1067-1067,[			if (state.failed) return ret;],,create_view_node,1058-1058,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_view_node1337); if (state.failed) return ret;],,create_view_node,1078-1078,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_view_node1355); if (state.failed) return ret;],,create_view_node,1118-1118,[					match(input,AS,FOLLOW_AS_in_create_view_node1382); if (state.failed) return ret;],,create_view_node,1119-1119,[					match(input,SELECT,FOLLOW_SELECT_in_create_view_node1384); if (state.failed) return ret;],,create_view_node,1082-1082,[					if (state.failed) return ret;],,create_view_node,1120-1120,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_create_view_node1386); if (state.failed) return ret;],,create_view_node,1164-1164,[					if (state.failed) return ret;],,create_view_node,1121-1121,[					match(input,FROM,FOLLOW_FROM_in_create_view_node1398); if (state.failed) return ret;],,create_view_node,1102-1102,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_view_node1368); if (state.failed) return ret;],,create_view_node,1096-1096,[							if (state.failed) return ret;],,create_view_node,1125-1125,[					if (state.failed) return ret;],,create_view_node,1136-1136,[							match(input,WHERE,FOLLOW_WHERE_in_create_view_node1415); if (state.failed) return ret;],,create_view_node,1140-1140,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,delete_node,4065-4065,[			match(input,DELETE,FOLLOW_DELETE_in_delete_node3490); if (state.failed) return ret;],,delete_node,4085-4085,[			match(input,FROM,FOLLOW_FROM_in_delete_node3499); if (state.failed) return ret;],,delete_node,4079-4079,[					if (state.failed) return ret;],,delete_node,4089-4089,[			if (state.failed) return ret;],,delete_node,4100-4100,[					match(input,WHERE,FOLLOW_WHERE_in_delete_node3514); if (state.failed) return ret;],,delete_node,4120-4120,[					match(input,ORDER,FOLLOW_ORDER_in_delete_node3531); if (state.failed) return ret;],,delete_node,4141-4141,[					match(input,LIMIT,FOLLOW_LIMIT_in_delete_node3550); if (state.failed) return ret;],,delete_node,4121-4121,[					match(input,BY,FOLLOW_BY_in_delete_node3533); if (state.failed) return ret;],,delete_node,4104-4104,[					if (state.failed) return ret;],,delete_node,4145-4145,[					if (state.failed) return ret;],,delete_node,4125-4125,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,double_literal,8833-8833,[			d=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_double_literal6341); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_index_node,2475-2475,[			match(input,DROP,FOLLOW_DROP_in_drop_index_node2364); if (state.failed) return ret;],,drop_index_node,2476-2476,[			match(input,INDEX,FOLLOW_INDEX_in_drop_index_node2366); if (state.failed) return ret;],,drop_index_node,2487-2487,[					match(input,IF,FOLLOW_IF_in_drop_index_node2369); if (state.failed) return ret;],,drop_index_node,2497-2497,[			if (state.failed) return ret;],,drop_index_node,2488-2488,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_index_node2373); if (state.failed) return ret;],,drop_index_node,2498-2498,[			match(input,ON,FOLLOW_ON_in_drop_index_node2381); if (state.failed) return ret;],,drop_index_node,2502-2502,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_sequence_node,1635-1635,[			match(input,DROP,FOLLOW_DROP_in_drop_sequence_node1802); if (state.failed) return ret;],,drop_sequence_node,1636-1636,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_drop_sequence_node1804); if (state.failed) return ret;],,drop_sequence_node,1647-1647,[					match(input,IF,FOLLOW_IF_in_drop_sequence_node1808); if (state.failed) return ret;],,drop_sequence_node,1657-1657,[			if (state.failed) return ret;],,drop_sequence_node,1648-1648,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_sequence_node1812); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_table_node,2372-2372,[			match(input,DROP,FOLLOW_DROP_in_drop_table_node2302); if (state.failed) return ret;],,drop_table_node,2384-2384,[				if (state.backtracking>0) {state.failed=true; return ret;}],,drop_table_node,2400-2400,[					match(input,TABLE,FOLLOW_TABLE_in_drop_table_node2311); if (state.failed) return ret;],,drop_table_node,2394-2394,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_drop_table_node2307); if (state.failed) return ret;],,drop_table_node,2416-2416,[					match(input,IF,FOLLOW_IF_in_drop_table_node2315); if (state.failed) return ret;],,drop_table_node,2426-2426,[			if (state.failed) return ret;],,drop_table_node,2417-2417,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_node2319); if (state.failed) return ret;],,drop_table_node,2437-2437,[					c=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_drop_table_node2330); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_def,3305-3305,[			if (state.failed) return ret;],,dyn_column_def,3309-3309,[			if (state.failed) return ret;],,dyn_column_def,3320-3320,[					match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_def2924); if (state.failed) return ret;],,dyn_column_def,3355-3355,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_def2945); if (state.failed) return ret;],,dyn_column_def,3321-3321,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2928); if (state.failed) return ret;],,dyn_column_def,3371-3371,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_def2951); if (state.failed) return ret;],,dyn_column_def,3332-3332,[							match(input,COMMA,FOLLOW_COMMA_in_dyn_column_def2931); if (state.failed) return ret;],,dyn_column_def,3339-3339,[					match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_def2939); if (state.failed) return ret;],,dyn_column_def,3388-3388,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_def2960); if (state.failed) return ret;],,dyn_column_def,3382-3382,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2956); if (state.failed) return ret;],,dyn_column_def,3333-3333,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def2935); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_name_or_def,3437-3437,[			if (state.failed) return ret;],,dyn_column_name_or_def,3451-3451,[					if (state.failed) return ret;],,dyn_column_name_or_def,3462-3462,[							match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_name_or_def3005); if (state.failed) return ret;],,dyn_column_name_or_def,3497-3497,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_name_or_def3026); if (state.failed) return ret;],,dyn_column_name_or_def,3463-3463,[							l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3009); if (state.failed) return ret;],,dyn_column_name_or_def,3513-3513,[							lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_name_or_def3032); if (state.failed) return ret;],,dyn_column_name_or_def,3474-3474,[									match(input,COMMA,FOLLOW_COMMA_in_dyn_column_name_or_def3012); if (state.failed) return ret;],,dyn_column_name_or_def,3481-3481,[							match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_name_or_def3020); if (state.failed) return ret;],,dyn_column_name_or_def,3530-3530,[							match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_name_or_def3041); if (state.failed) return ret;],,dyn_column_name_or_def,3524-3524,[									a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3037); if (state.failed) return ret;],,dyn_column_name_or_def,3475-3475,[									s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3016); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,explain_node,874-874,[			match(input,EXPLAIN,FOLLOW_EXPLAIN_in_explain_node1185); if (state.failed) return ret;],,explain_node,878-878,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,expression,5961-5961,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2125-2125,[				if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2110-2110,[					if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2138-2138,[					if (state.failed) return ret;],,fam_prop_name,2148-2148,[					if (state.failed) return ret;],,fam_prop_name,2149-2149,[					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2145); if (state.failed) return ret;],,fam_prop_name,2153-2153,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,8478-8478,[				if (state.backtracking>0) {state.failed=true; return ret;}],,from_table_name,8491-8491,[					if (state.failed) return ret;],,from_table_name,8501-8501,[					if (state.failed) return ret;],,from_table_name,8502-8502,[					match(input,DOT,FOLLOW_DOT_in_from_table_name6081); if (state.failed) return ret;],,from_table_name,8506-8506,[					if (state.failed) return ret;],,from_table_name,8463-8463,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hintClause,4246-4246,[			c=(Token)match(input,ML_HINT,FOLLOW_ML_HINT_in_hintClause3631); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hinted_select_node,3832-3832,[					if (state.failed) return ret;],,hinted_select_node,3841-3841,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,identifier,8933-8933,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_name,8296-8296,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_pk_constraint,1873-1873,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal,8752-8752,[			n=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_int_literal6287); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1578-1578,[				if (state.backtracking>0) {state.failed=true; return ret;}],,int_literal_or_bind,1591-1591,[					if (state.failed) return ret;],,int_literal_or_bind,1601-1601,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,join_part,5685-5685,[				if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5227-5227,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5670-5670,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5406-5406,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5538-5538,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5606-5606,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5274-5274,[					if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5342-5342,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5474-5474,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5210-5210,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5653-5653,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5254-5254,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5389-5389,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5521-5521,[						if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5589-5589,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5325-5325,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5457-5457,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5190-5190,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5697-5697,[					if (state.failed) return ret;],,join_part,5717-5717,[					if (state.failed) return ret;],,join_part,5633-5633,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5369-5369,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5501-5501,[							if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5569-5569,[								if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5305-5305,[								if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5437-5437,[								if (state.backtracking>0) {state.failed=true; return ret;}],,join_part,5698-5698,[					match(input,JOIN,FOLLOW_JOIN_in_join_part4189); if (state.failed) return ret;],,join_part,5718-5718,[					match(input,JOIN,FOLLOW_JOIN_in_join_part4210); if (state.failed) return ret;],,join_part,5719-5719,[					match(input,LPAREN,FOLLOW_LPAREN_in_join_part4212); if (state.failed) return ret;],,join_part,5702-5702,[					if (state.failed) return ret;],,join_part,5703-5703,[					match(input,ON,FOLLOW_ON_in_join_part4195); if (state.failed) return ret;],,join_part,5723-5723,[					if (state.failed) return ret;],,join_part,5724-5724,[					match(input,RPAREN,FOLLOW_RPAREN_in_join_part4218); if (state.failed) return ret;],,join_part,5725-5725,[					match(input,ON,FOLLOW_ON_in_join_part4220); if (state.failed) return ret;],,join_part,5707-5707,[					if (state.failed) return ret;],,join_part,5729-5729,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,join_type,5782-5782,[				if (state.backtracking>0) {state.failed=true; return ret;}],,join_type,5813-5813,[					match(input,LEFT,FOLLOW_LEFT_in_join_type4261); if (state.failed) return ret;],,join_type,5836-5836,[					match(input,RIGHT,FOLLOW_RIGHT_in_join_type4278); if (state.failed) return ret;],,join_type,5859-5859,[					match(input,FULL,FOLLOW_FULL_in_join_type4294); if (state.failed) return ret;],,join_type,5801-5801,[							match(input,INNER,FOLLOW_INNER_in_join_type4246); if (state.failed) return ret;],,join_type,5824-5824,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4263); if (state.failed) return ret;],,join_type,5847-5847,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4280); if (state.failed) return ret;],,join_type,5870-5870,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4297); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4190-4190,[				if (state.backtracking>0) {state.failed=true; return ret;}],,limit,4203-4203,[					if (state.failed) return ret;],,limit,4213-4213,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,8646-8646,[				if (state.backtracking>0) {state.failed=true; return ret;}],,literal,8705-8705,[					match(input,NULL,FOLLOW_NULL_in_literal6231); if (state.failed) return ret;],,literal,8712-8712,[					match(input,TRUE,FOLLOW_TRUE_in_literal6243); if (state.failed) return ret;],,literal,8719-8719,[					match(input,FALSE,FOLLOW_FALSE_in_literal6256); if (state.failed) return ret;],,literal,8655-8655,[					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal6163); if (state.failed) return ret;],,literal,8692-8692,[					t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal6219); if (state.failed) return ret;],,literal,8665-8665,[					if (state.failed) return ret;],,literal,8675-8675,[					if (state.failed) return ret;],,literal,8685-8685,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,8561-8561,[					if (state.failed) return ret;],,literal_or_bind,8571-8571,[					if (state.failed) return ret;],,literal_or_bind,8548-8548,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,long_literal,8794-8794,[			l=(Token)match(input,LONG,FOLLOW_LONG_in_long_literal6314); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,multiply_divide_modulo_expression,7356-7356,[			if (state.failed) return ret;],,multiply_divide_modulo_expression,7378-7378,[						if (state.backtracking>0) {state.failed=true; return ret;}],,multiply_divide_modulo_expression,7385-7385,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,negate_expression,7442-7442,[					m=(Token)match(input,MINUS,FOLLOW_MINUS_in_negate_expression5418); if (state.failed) return ret;],,negate_expression,7451-7451,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,nextStatement,422-422,[					match(input,EOF,FOLLOW_EOF_in_nextStatement867); if (state.failed) return ret;],,nextStatement,401-401,[				if (state.backtracking>0) {state.failed=true; return ret;}],,nextStatement,414-414,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,non_select_node,718-718,[				if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,636-636,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,669-669,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,693-693,[					if (state.backtracking>0) {state.failed=true; return ret;}],,non_select_node,730-730,[					if (state.failed) return ret;],,non_select_node,739-739,[					if (state.failed) return ret;],,non_select_node,748-748,[					if (state.failed) return ret;],,non_select_node,757-757,[					if (state.failed) return ret;],,non_select_node,766-766,[					if (state.failed) return ret;],,non_select_node,775-775,[					if (state.failed) return ret;],,non_select_node,784-784,[					if (state.failed) return ret;],,non_select_node,793-793,[					if (state.failed) return ret;],,non_select_node,802-802,[					if (state.failed) return ret;],,non_select_node,811-811,[					if (state.failed) return ret;],,non_select_node,820-820,[					if (state.failed) return ret;],,non_select_node,829-829,[					if (state.failed) return ret;],,non_select_node,838-838,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,not_expression,6237-6237,[					match(input,LPAREN,FOLLOW_LPAREN_in_not_expression4511); if (state.failed) return ret;],,not_expression,6205-6205,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression4489); if (state.failed) return ret;],,not_expression,6231-6231,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression4508); if (state.failed) return ret;],,not_expression,6214-6214,[					if (state.failed) return ret;],,not_expression,6241-6241,[					if (state.failed) return ret;],,not_expression,6242-6242,[					match(input,RPAREN,FOLLOW_RPAREN_in_not_expression4517); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,547-547,[					match(input,SELECT,FOLLOW_SELECT_in_oneStatement954); if (state.failed) return ret;],,oneStatement,537-537,[				if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,561-561,[					if (state.failed) return ret;],,oneStatement,551-551,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,or_expression,5996-5996,[			if (state.failed) return ret;],,or_expression,6011-6011,[					match(input,OR,FOLLOW_OR_in_or_expression4398); if (state.failed) return ret;],,or_expression,6015-6015,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseAlias,5918-5918,[					match(input,AS,FOLLOW_AS_in_parseAlias4328); if (state.failed) return ret;],,parseAlias,5927-5927,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseNoReserved,8964-8964,[			n=(Token)match(input,NAME,FOLLOW_NAME_in_parseNoReserved6438); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,4689-4689,[			if (state.failed) return ret;],,parseOrderByField,4705-4705,[					match(input,ASC,FOLLOW_ASC_in_parseOrderByField3916); if (state.failed) return ret;],,parseOrderByField,4712-4712,[					match(input,DESC,FOLLOW_DESC_in_parseOrderByField3922); if (state.failed) return ret;],,parseOrderByField,4729-4729,[					match(input,NULLS,FOLLOW_NULLS_in_parseOrderByField3937); if (state.failed) return ret;],,parseOrderByField,4741-4741,[						if (state.backtracking>0) {state.failed=true; return ret;}],,parseOrderByField,4751-4751,[							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField3940); if (state.failed) return ret;],,parseOrderByField,4758-4758,[							match(input,LAST,FOLLOW_LAST_in_parseOrderByField3946); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,pk_constraint,1699-1699,[					match(input,COMMA,FOLLOW_COMMA_in_pk_constraint1847); if (state.failed) return ret;],,pk_constraint,1705-1705,[			match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_pk_constraint1850); if (state.failed) return ret;],,pk_constraint,1709-1709,[			if (state.failed) return ret;],,pk_constraint,1710-1710,[			match(input,PRIMARY,FOLLOW_PRIMARY_in_pk_constraint1856); if (state.failed) return ret;],,pk_constraint,1711-1711,[			match(input,KEY,FOLLOW_KEY_in_pk_constraint1858); if (state.failed) return ret;],,pk_constraint,1712-1712,[			match(input,LPAREN,FOLLOW_LPAREN_in_pk_constraint1860); if (state.failed) return ret;],,pk_constraint,1716-1716,[			if (state.failed) return ret;],,pk_constraint,1717-1717,[			match(input,RPAREN,FOLLOW_RPAREN_in_pk_constraint1866); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_name,2854-2854,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_value,2189-2189,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,query,489-489,[			match(input,SELECT,FOLLOW_SELECT_in_query921); if (state.failed) return ret;],,query,493-493,[			if (state.failed) return ret;],,query,494-494,[			match(input,EOF,FOLLOW_EOF_in_query927); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,recoverFromMismatchedToken,310-310,[	            Object inserted = getMissingSymbol(input, e, ttype, follow);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_expression,3575-3575,[			match(input,SELECT,FOLLOW_SELECT_in_select_expression3079); if (state.failed) return ret;],,select_expression,3579-3579,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_node,3671-3671,[					match(input,ALL,FOLLOW_ALL_in_select_node3154); if (state.failed) return ret;],,select_node,3665-3665,[					d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_select_node3150); if (state.failed) return ret;],,select_node,3680-3680,[			if (state.failed) return ret;],,select_node,3681-3681,[			match(input,FROM,FOLLOW_FROM_in_select_node3170); if (state.failed) return ret;],,select_node,3685-3685,[			if (state.failed) return ret;],,select_node,3696-3696,[					match(input,WHERE,FOLLOW_WHERE_in_select_node3185); if (state.failed) return ret;],,select_node,3716-3716,[					match(input,GROUP,FOLLOW_GROUP_in_select_node3202); if (state.failed) return ret;],,select_node,3737-3737,[					match(input,HAVING,FOLLOW_HAVING_in_select_node3221); if (state.failed) return ret;],,select_node,3717-3717,[					match(input,BY,FOLLOW_BY_in_select_node3204); if (state.failed) return ret;],,select_node,3700-3700,[					if (state.failed) return ret;],,select_node,3757-3757,[					match(input,ORDER,FOLLOW_ORDER_in_select_node3238); if (state.failed) return ret;],,select_node,3778-3778,[					match(input,LIMIT,FOLLOW_LIMIT_in_select_node3257); if (state.failed) return ret;],,select_node,3758-3758,[					match(input,BY,FOLLOW_BY_in_select_node3240); if (state.failed) return ret;],,select_node,3741-3741,[					if (state.failed) return ret;],,select_node,3721-3721,[					if (state.failed) return ret;],,select_node,3782-3782,[					if (state.failed) return ret;],,select_node,3762-3762,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,4477-4477,[					if (state.failed) return ret;],,selectable,4506-4506,[					if (state.failed) return ret;],,selectable,4518-4518,[					if (state.failed) return ret;],,selectable,4507-4507,[					match(input,DOT,FOLLOW_DOT_in_selectable3735); if (state.failed) return ret;],,selectable,4519-4519,[					match(input,DOT,FOLLOW_DOT_in_selectable3754); if (state.failed) return ret;],,selectable,4464-4464,[				if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4508-4508,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3737); if (state.failed) return ret;],,selectable,4491-4491,[							if (state.failed) return ret;],,selectable,4523-4523,[					if (state.failed) return ret;],,selectable,4524-4524,[					match(input,DOT,FOLLOW_DOT_in_selectable3760); if (state.failed) return ret;],,selectable,4525-4525,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3762); if (state.failed) return ret;],,selectable,4449-4449,[					if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4432-4432,[						if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4415-4415,[							if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,4398-4398,[								if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,single_table_ref,4923-4923,[				if (state.backtracking>0) {state.failed=true; return ret;}],,single_table_ref,5043-5043,[					match(input,LPAREN,FOLLOW_LPAREN_in_single_table_ref4119); if (state.failed) return ret;],,single_table_ref,5044-5044,[					match(input,SELECT,FOLLOW_SELECT_in_single_table_ref4121); if (state.failed) return ret;],,single_table_ref,4935-4935,[					if (state.failed) return ret;],,single_table_ref,4980-4980,[					if (state.failed) return ret;],,single_table_ref,5048-5048,[					if (state.failed) return ret;],,single_table_ref,4956-4956,[									match(input,AS,FOLLOW_AS_in_single_table_ref4061); if (state.failed) return ret;],,single_table_ref,5001-5001,[									match(input,AS,FOLLOW_AS_in_single_table_ref4088); if (state.failed) return ret;],,single_table_ref,5026-5026,[							match(input,LPAREN,FOLLOW_LPAREN_in_single_table_ref4099); if (state.failed) return ret;],,single_table_ref,5049-5049,[					match(input,RPAREN,FOLLOW_RPAREN_in_single_table_ref4127); if (state.failed) return ret;],,single_table_ref,4965-4965,[							if (state.failed) return ret;],,single_table_ref,5010-5010,[							if (state.failed) return ret;],,single_table_ref,5030-5030,[							if (state.failed) return ret;],,single_table_ref,5070-5070,[									match(input,AS,FOLLOW_AS_in_single_table_ref4131); if (state.failed) return ret;],,single_table_ref,5031-5031,[							match(input,RPAREN,FOLLOW_RPAREN_in_single_table_ref4105); if (state.failed) return ret;],,single_table_ref,5079-5079,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,statement,457-457,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subquery_expression,3613-3613,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subtract_expression,7228-7228,[			if (state.failed) return ret;],,subtract_expression,7243-7243,[					match(input,MINUS,FOLLOW_MINUS_in_subtract_expression5257); if (state.failed) return ret;],,subtract_expression,7247-7247,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,8391-8391,[				if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,8376-8376,[					if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,8359-8359,[						if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,8404-8404,[					if (state.failed) return ret;],,table_name,8414-8414,[					if (state.failed) return ret;],,table_name,8415-8415,[					match(input,DOT,FOLLOW_DOT_in_table_name6033); if (state.failed) return ret;],,table_name,8419-8419,[					if (state.failed) return ret;],,table_name,8342-8342,[							if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_ref,4867-4867,[			if (state.failed) return ret;],,table_ref,4871-4871,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7725-7725,[				if (state.backtracking>0) {state.failed=true; return ret;}],,term,7911-7911,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5704); if (state.failed) return ret;],,term,7930-7930,[					match(input,CAST,FOLLOW_CAST_in_term5728); if (state.failed) return ret;],,term,7685-7685,[					if (state.backtracking>0) {state.failed=true; return ret;}],,term,7754-7754,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5521); if (state.failed) return ret;],,term,8029-8029,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7669-7669,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7931-7931,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5730); if (state.failed) return ret;],,term,8045-8045,[							match(input,CURRENT,FOLLOW_CURRENT_in_term5804); if (state.failed) return ret;],,term,8051-8051,[					match(input,VALUE,FOLLOW_VALUE_in_term5807); if (state.failed) return ret;],,term,7737-7737,[					if (state.failed) return ret;],,term,7747-7747,[					if (state.failed) return ret;],,term,7770-7770,[					if (state.failed) return ret;],,term,7785-7785,[					if (state.failed) return ret;],,term,7863-7863,[					if (state.failed) return ret;],,term,7883-7883,[					if (state.failed) return ret;],,term,7904-7904,[					if (state.failed) return ret;],,term,7755-7755,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_term5523); if (state.failed) return ret;],,term,8039-8039,[							n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term5800); if (state.failed) return ret;],,term,8052-8052,[					match(input,FOR,FOLLOW_FOR_in_term5809); if (state.failed) return ret;],,term,7771-7771,[					match(input,DOT,FOLLOW_DOT_in_term5545); if (state.failed) return ret;],,term,7786-7786,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5565); if (state.failed) return ret;],,term,7864-7864,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5627); if (state.failed) return ret;],,term,7884-7884,[					match(input,LPAREN,FOLLOW_LPAREN_in_term5659); if (state.failed) return ret;],,term,7915-7915,[					if (state.failed) return ret;],,term,7916-7916,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5710); if (state.failed) return ret;],,term,7935-7935,[					if (state.failed) return ret;],,term,7759-7759,[					if (state.failed) return ret;],,term,7865-7865,[					t=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_term5631); if (state.failed) return ret;],,term,7885-7885,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term5663); if (state.failed) return ret;],,term,7936-7936,[					match(input,AS,FOLLOW_AS_in_term5736); if (state.failed) return ret;],,term,8056-8056,[					if (state.failed) return ret;],,term,7775-7775,[					if (state.failed) return ret;],,term,7790-7790,[					if (state.failed) return ret;],,term,7760-7760,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_term5529); if (state.failed) return ret;],,term,7866-7866,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5633); if (state.failed) return ret;],,term,7791-7791,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5571); if (state.failed) return ret;],,term,7889-7889,[					if (state.failed) return ret;],,term,7940-7940,[					if (state.failed) return ret;],,term,7890-7890,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5669); if (state.failed) return ret;],,term,7802-7802,[							wg=(Token)match(input,WITHIN,FOLLOW_WITHIN_in_term5576); if (state.failed) return ret;],,term,7951-7951,[							match(input,LPAREN,FOLLOW_LPAREN_in_term5743); if (state.failed) return ret;],,term,7803-7803,[							wg=(Token)match(input,GROUP,FOLLOW_GROUP_in_term5578); if (state.failed) return ret;],,term,8007-8007,[					match(input,RPAREN,FOLLOW_RPAREN_in_term5777); if (state.failed) return ret;],,term,7952-7952,[							length=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term5747); if (state.failed) return ret;],,term,7989-7989,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term5765); if (state.failed) return ret;],,term,7998-7998,[							ar=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_term5770); if (state.failed) return ret;],,term,7804-7804,[							wg=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_term5580); if (state.failed) return ret;],,term,7999-7999,[							ar=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_term5772); if (state.failed) return ret;],,term,7963-7963,[									match(input,COMMA,FOLLOW_COMMA_in_term5750); if (state.failed) return ret;],,term,7970-7970,[							match(input,RPAREN,FOLLOW_RPAREN_in_term5758); if (state.failed) return ret;],,term,7805-7805,[							wg=(Token)match(input,ORDER,FOLLOW_ORDER_in_term5582); if (state.failed) return ret;],,term,7964-7964,[									scale=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term5754); if (state.failed) return ret;],,term,7806-7806,[							wg=(Token)match(input,BY,FOLLOW_BY_in_term5584); if (state.failed) return ret;],,term,7810-7810,[							if (state.failed) return ret;],,term,7822-7822,[								if (state.backtracking>0) {state.failed=true; return ret;}],,term,7832-7832,[									a=(Token)match(input,ASC,FOLLOW_ASC_in_term5593); if (state.failed) return ret;],,term,7838-7838,[									wg=(Token)match(input,DESC,FOLLOW_DESC_in_term5597); if (state.failed) return ret;],,term,7844-7844,[							wg=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_term5600); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,update_statistics_node,2816-2816,[			match(input,ANALYZE,FOLLOW_ANALYZE_in_update_statistics_node2603); if (state.failed) return ret;],,update_statistics_node,2820-2820,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,upsert_node,3876-3876,[			match(input,UPSERT,FOLLOW_UPSERT_in_upsert_node3349); if (state.failed) return ret;],,upsert_node,3896-3896,[			match(input,INTO,FOLLOW_INTO_in_upsert_node3358); if (state.failed) return ret;],,upsert_node,3890-3890,[					if (state.failed) return ret;],,upsert_node,3900-3900,[			if (state.failed) return ret;],,upsert_node,3911-3911,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node3373); if (state.failed) return ret;],,upsert_node,3933-3933,[				if (state.backtracking>0) {state.failed=true; return ret;}],,upsert_node,3946-3946,[					match(input,VALUES,FOLLOW_VALUES_in_upsert_node3393); if (state.failed) return ret;],,upsert_node,3947-3947,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node3395); if (state.failed) return ret;],,upsert_node,3915-3915,[					if (state.failed) return ret;],,upsert_node,3963-3963,[					if (state.failed) return ret;],,upsert_node,3916-3916,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node3379); if (state.failed) return ret;],,upsert_node,3951-3951,[					if (state.failed) return ret;],,upsert_node,3952-3952,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node3401); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,value_expression,7130-7130,[			if (state.failed) return ret;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,8886-8898,[			switch (alt149) {, 				case 1 :, 					// PhoenixSQL.g:919:9: n= BIND_NAME, 					{, 					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name6369); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { String bind = n.getText().substring(1); updateBind(bind); ret = bind; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:920:9: QUESTION, 					{, 					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name6382); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = nextBind(); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,6989-7034,[							switch (alt125) {, 								case 1 :, 									// PhoenixSQL.g:722:38: (r= bind_expression ), 									{, 									// PhoenixSQL.g:722:38: (r= bind_expression ), 									// PhoenixSQL.g:722:39: r= bind_expression, 									{, 									pushFollow(FOLLOW_bind_expression_in_boolean_expression4936);, 									r=bind_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:723:35: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:723:35: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:723:36: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4977); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4981);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4983); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:724:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									{, 									// PhoenixSQL.g:724:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									// PhoenixSQL.g:724:36: LPAREN v= one_or_more_expressions RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5024); if (state.failed) return ret;, 									pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression5028);, 									v=one_or_more_expressions();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5030); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}],,boolean_expression,6499-7058,[			switch (alt127) {, 				case 1 :, 					// PhoenixSQL.g:716:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 					{, 					// PhoenixSQL.g:716:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 					// PhoenixSQL.g:716:30: op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 					{, 					pushFollow(FOLLOW_comparison_op_in_boolean_expression4613);, 					op=comparison_op();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:716:47: (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 					int alt122=4;, 					switch ( input.LA(1) ) {, 					case ARRAY:, 					case BIND_NAME:, 					case CASE:, 					case CAST:, 					case CURRENT:, 					case DECIMAL:, 					case DOUBLE:, 					case FALSE:, 					case LONG:, 					case MINUS:, 					case NAME:, 					case NEXT:, 					case NULL:, 					case NUMBER:, 					case QUESTION:, 					case STRING_LITERAL:, 					case TRUE:, 						{, 						alt122=1;, 						}, 						break;, 					case LPAREN:, 						{, 						int LA122_2 = input.LA(2);, 						if ( (LA122_2==ARRAY||LA122_2==BIND_NAME||(LA122_2 >= CASE && LA122_2 <= CAST)||LA122_2==CURRENT||LA122_2==DECIMAL||LA122_2==DOUBLE||LA122_2==FALSE||(LA122_2 >= LONG && LA122_2 <= LPAREN)||LA122_2==MINUS||(LA122_2 >= NAME && LA122_2 <= NEXT)||(LA122_2 >= NOT && LA122_2 <= NULL)||LA122_2==NUMBER||LA122_2==QUESTION||LA122_2==STRING_LITERAL||LA122_2==TRUE) ) {, 							alt122=1;, 						}, 						else if ( (LA122_2==SELECT) ) {, 							alt122=2;, 						}, , 						else {, 							if (state.backtracking>0) {state.failed=true; return ret;}, 							int nvaeMark = input.mark();, 							try {, 								input.consume();, 								NoViableAltException nvae =, 									new NoViableAltException("", 122, 2, input);, 								throw nvae;, 							} finally {, 								input.rewind(nvaeMark);, 							}, 						}, , 						}, 						break;, 					case ALL:, 						{, 						int LA122_3 = input.LA(2);, 						if ( (LA122_3==LPAREN) ) {, 							int LA122_6 = input.LA(3);, 							if ( (LA122_6==ARRAY||LA122_6==BIND_NAME||(LA122_6 >= CASE && LA122_6 <= CAST)||LA122_6==CURRENT||LA122_6==DECIMAL||LA122_6==DOUBLE||LA122_6==FALSE||(LA122_6 >= LONG && LA122_6 <= LPAREN)||LA122_6==MINUS||(LA122_6 >= NAME && LA122_6 <= NEXT)||LA122_6==NULL||LA122_6==NUMBER||LA122_6==QUESTION||LA122_6==STRING_LITERAL||LA122_6==TRUE) ) {, 								alt122=3;, 							}, 							else if ( (LA122_6==SELECT) ) {, 								alt122=4;, 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								int nvaeMark = input.mark();, 								try {, 									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 										input.consume();, 									}, 									NoViableAltException nvae =, 										new NoViableAltException("", 122, 6, input);, 									throw nvae;, 								} finally {, 									input.rewind(nvaeMark);, 								}, 							}, , 						}, , 						else {, 							if (state.backtracking>0) {state.failed=true; return ret;}, 							int nvaeMark = input.mark();, 							try {, 								input.consume();, 								NoViableAltException nvae =, 									new NoViableAltException("", 122, 3, input);, 								throw nvae;, 							} finally {, 								input.rewind(nvaeMark);, 							}, 						}, , 						}, 						break;, 					case ANY:, 						{, 						int LA122_4 = input.LA(2);, 						if ( (LA122_4==LPAREN) ) {, 							int LA122_6 = input.LA(3);, 							if ( (LA122_6==ARRAY||LA122_6==BIND_NAME||(LA122_6 >= CASE && LA122_6 <= CAST)||LA122_6==CURRENT||LA122_6==DECIMAL||LA122_6==DOUBLE||LA122_6==FALSE||(LA122_6 >= LONG && LA122_6 <= LPAREN)||LA122_6==MINUS||(LA122_6 >= NAME && LA122_6 <= NEXT)||LA122_6==NULL||LA122_6==NUMBER||LA122_6==QUESTION||LA122_6==STRING_LITERAL||LA122_6==TRUE) ) {, 								alt122=3;, 							}, 							else if ( (LA122_6==SELECT) ) {, 								alt122=4;, 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								int nvaeMark = input.mark();, 								try {, 									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 										input.consume();, 									}, 									NoViableAltException nvae =, 										new NoViableAltException("", 122, 6, input);, 									throw nvae;, 								} finally {, 									input.rewind(nvaeMark);, 								}, 							}, , 						}, , 						else {, 							if (state.backtracking>0) {state.failed=true; return ret;}, 							int nvaeMark = input.mark();, 							try {, 								input.consume();, 								NoViableAltException nvae =, 									new NoViableAltException("", 122, 4, input);, 								throw nvae;, 							} finally {, 								input.rewind(nvaeMark);, 							}, 						}, , 						}, 						break;, 					default:, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						NoViableAltException nvae =, 							new NoViableAltException("", 122, 0, input);, 						throw nvae;, 					}, 					switch (alt122) {, 						case 1 :, 							// PhoenixSQL.g:716:48: r= value_expression, 							{, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4618);, 							r=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:716:69: ( LPAREN r= subquery_expression RPAREN ), 							{, 							// PhoenixSQL.g:716:69: ( LPAREN r= subquery_expression RPAREN ), 							// PhoenixSQL.g:716:70: LPAREN r= subquery_expression RPAREN, 							{, 							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4623); if (state.failed) return ret;, 							pushFollow(FOLLOW_subquery_expression_in_boolean_expression4627);, 							r=subquery_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4629); if (state.failed) return ret;, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:716:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 							{, 							// PhoenixSQL.g:716:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 							// PhoenixSQL.g:716:110: (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN, 							{, 							// PhoenixSQL.g:716:110: (all= ALL |any= ANY ), 							int alt120=2;, 							int LA120_0 = input.LA(1);, 							if ( (LA120_0==ALL) ) {, 								alt120=1;, 							}, 							else if ( (LA120_0==ANY) ) {, 								alt120=2;, 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 120, 0, input);, 								throw nvae;, 							}, , 							switch (alt120) {, 								case 1 :, 									// PhoenixSQL.g:716:111: all= ALL, 									{, 									all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4638); if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:716:121: any= ANY, 									{, 									any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4644); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4647); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4651);, 							r=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4653); if (state.failed) return ret;, 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:716:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 							{, 							// PhoenixSQL.g:716:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 							// PhoenixSQL.g:716:168: (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN, 							{, 							// PhoenixSQL.g:716:168: (all= ALL |any= ANY ), 							int alt121=2;, 							int LA121_0 = input.LA(1);, 							if ( (LA121_0==ALL) ) {, 								alt121=1;, 							}, 							else if ( (LA121_0==ANY) ) {, 								alt121=2;, 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 121, 0, input);, 								throw nvae;, 							}, , 							switch (alt121) {, 								case 1 :, 									// PhoenixSQL.g:716:169: all= ALL, 									{, 									all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression4663); if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:716:179: any= ANY, 									{, 									any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression4669); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4672); if (state.failed) return ret;, 							pushFollow(FOLLOW_subquery_expression_in_boolean_expression4676);, 							r=subquery_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4678); if (state.failed) return ret;, 							}, , 							}, 							break;, , 					}, , 					if ( state.backtracking==0 ) {ret = all != null ? factory.wrapInAll(op, l, r) : any != null ? factory.wrapInAny(op, l, r) : factory.comparison(op,l,r); }, 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:717:22: ( IS (n= NOT )? NULL ), 					{, 					// PhoenixSQL.g:717:22: ( IS (n= NOT )? NULL ), 					// PhoenixSQL.g:717:23: IS (n= NOT )? NULL, 					{, 					match(input,IS,FOLLOW_IS_in_boolean_expression4708); if (state.failed) return ret;, 					// PhoenixSQL.g:717:27: (n= NOT )?, 					int alt123=2;, 					int LA123_0 = input.LA(1);, 					if ( (LA123_0==NOT) ) {, 						alt123=1;, 					}, 					switch (alt123) {, 						case 1 :, 							// PhoenixSQL.g:717:27: n= NOT, 							{, 							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4712); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					match(input,NULL,FOLLOW_NULL_in_boolean_expression4715); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.isNull(l,n!=null); }, 					}, , 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:718:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 					{, 					// PhoenixSQL.g:718:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 					// PhoenixSQL.g:718:24: (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 					{, 					// PhoenixSQL.g:718:25: (n= NOT )?, 					int alt124=2;, 					int LA124_0 = input.LA(1);, 					if ( (LA124_0==NOT) ) {, 						alt124=1;, 					}, 					switch (alt124) {, 						case 1 :, 							// PhoenixSQL.g:718:25: n= NOT, 							{, 							n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression4746); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					// PhoenixSQL.g:718:31: ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( EXISTS LPAREN r= subquery_expression RPAREN ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 					int alt126=5;, 					switch ( input.LA(1) ) {, 					case LIKE:, 						{, 						alt126=1;, 						}, 						break;, 					case ILIKE:, 						{, 						alt126=2;, 						}, 						break;, 					case EXISTS:, 						{, 						alt126=3;, 						}, 						break;, 					case BETWEEN:, 						{, 						alt126=4;, 						}, 						break;, 					case IN:, 						{, 						alt126=5;, 						}, 						break;, 					default:, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						NoViableAltException nvae =, 							new NoViableAltException("", 126, 0, input);, 						throw nvae;, 					}, 					switch (alt126) {, 						case 1 :, 							// PhoenixSQL.g:718:32: ( LIKE r= value_expression ), 							{, 							// PhoenixSQL.g:718:32: ( LIKE r= value_expression ), 							// PhoenixSQL.g:718:33: LIKE r= value_expression, 							{, 							match(input,LIKE,FOLLOW_LIKE_in_boolean_expression4751); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4755);, 							r=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_SENSITIVE); }, 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:719:32: ( ILIKE r= value_expression ), 							{, 							// PhoenixSQL.g:719:32: ( ILIKE r= value_expression ), 							// PhoenixSQL.g:719:33: ILIKE r= value_expression, 							{, 							match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression4793); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4797);, 							r=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_INSENSITIVE); }, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:720:32: ( EXISTS LPAREN r= subquery_expression RPAREN ), 							{, 							// PhoenixSQL.g:720:32: ( EXISTS LPAREN r= subquery_expression RPAREN ), 							// PhoenixSQL.g:720:33: EXISTS LPAREN r= subquery_expression RPAREN, 							{, 							match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression4835); if (state.failed) return ret;, 							match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4837); if (state.failed) return ret;, 							pushFollow(FOLLOW_subquery_expression_in_boolean_expression4841);, 							r=subquery_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4843); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.exists(l,r,n!=null);}, 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:721:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 							{, 							// PhoenixSQL.g:721:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 							// PhoenixSQL.g:721:33: BETWEEN r1= value_expression AND r2= value_expression, 							{, 							match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression4881); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4885);, 							r1=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							match(input,AND,FOLLOW_AND_in_boolean_expression4887); if (state.failed) return ret;, 							pushFollow(FOLLOW_value_expression_in_boolean_expression4891);, 							r2=value_expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.between(l,r1,r2,n!=null); }, 							}, , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:722:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 							{, 							// PhoenixSQL.g:722:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 							// PhoenixSQL.g:722:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 							{, 							// PhoenixSQL.g:722:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 							// PhoenixSQL.g:722:34: IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 							{, 							match(input,IN,FOLLOW_IN_in_boolean_expression4930); if (state.failed) return ret;, 							// PhoenixSQL.g:722:37: ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 							int alt125=3;, 							int LA125_0 = input.LA(1);, 							if ( (LA125_0==BIND_NAME||LA125_0==QUESTION) ) {, 								alt125=1;, 							}, 							else if ( (LA125_0==LPAREN) ) {, 								int LA125_2 = input.LA(2);, 								if ( (LA125_2==SELECT) ) {, 									alt125=2;, 								}, 								else if ( (LA125_2==ARRAY||LA125_2==BIND_NAME||(LA125_2 >= CASE && LA125_2 <= CAST)||LA125_2==CURRENT||LA125_2==DECIMAL||LA125_2==DOUBLE||LA125_2==FALSE||(LA125_2 >= LONG && LA125_2 <= LPAREN)||LA125_2==MINUS||(LA125_2 >= NAME && LA125_2 <= NEXT)||(LA125_2 >= NOT && LA125_2 <= NULL)||LA125_2==NUMBER||LA125_2==QUESTION||LA125_2==STRING_LITERAL||LA125_2==TRUE) ) {, 									alt125=3;, 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 125, 2, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 125, 0, input);, 								throw nvae;, 							}, , 							switch (alt125) {, 								case 1 :, 									// PhoenixSQL.g:722:38: (r= bind_expression ), 									{, 									// PhoenixSQL.g:722:38: (r= bind_expression ), 									// PhoenixSQL.g:722:39: r= bind_expression, 									{, 									pushFollow(FOLLOW_bind_expression_in_boolean_expression4936);, 									r=bind_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:723:35: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:723:35: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:723:36: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression4977); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression4981);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression4983); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null);}, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:724:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									{, 									// PhoenixSQL.g:724:35: ( LPAREN v= one_or_more_expressions RPAREN ), 									// PhoenixSQL.g:724:36: LPAREN v= one_or_more_expressions RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5024); if (state.failed) return ret;, 									pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression5028);, 									v=one_or_more_expressions();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5030); if (state.failed) return ret;, 									if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}, 									}, , 									}, 									break;, , 							}, , 							}, , 							}, , 							}, 							break;, , 					}, , 					}, , 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:727:23: , 					{, 					if ( state.backtracking==0 ) { ret = l; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,9083-9092,[					switch (alt151) {, 						case 1 :, 							// PhoenixSQL.g:934:107: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement6489); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement6493);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,case_statement,9149-9158,[					switch (alt153) {, 						case 1 :, 							// PhoenixSQL.g:935:73: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement6529); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement6533);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2252-2275,[			switch (alt37) {, 				case 1 :, 					// PhoenixSQL.g:463:9: field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2211);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:464:9: family= identifier DOT field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2225);, 					family=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_column_name2227); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_column_name2231);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(family, field); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,comparison_op,6340-6391,[			switch (alt119) {, 				case 1 :, 					// PhoenixSQL.g:707:4: EQ, 					{, 					match(input,EQ,FOLLOW_EQ_in_comparison_op4537); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.EQUAL; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:708:4: LT, 					{, 					match(input,LT,FOLLOW_LT_in_comparison_op4544); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.LESS; }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:709:4: GT, 					{, 					match(input,GT,FOLLOW_GT_in_comparison_op4551); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.GREATER; }, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:710:4: LT EQ, 					{, 					match(input,LT,FOLLOW_LT_in_comparison_op4558); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_comparison_op4560); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.LESS_OR_EQUAL; }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:711:4: GT EQ, 					{, 					match(input,GT,FOLLOW_GT_in_comparison_op4567); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_comparison_op4569); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.GREATER_OR_EQUAL; }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:712:4: ( NOEQ1 | NOEQ2 ), 					{, 					if ( (input.LA(1) >= NOEQ1 && input.LA(1) <= NOEQ2) ) {, 						input.consume();, 						state.errorRecovery=false;, 						state.failed=false;, 					}, 					else {, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						MismatchedSetException mse = new MismatchedSetException(null,input);, 						throw mse;, 					}, 					if ( state.backtracking==0 ) { ret = CompareOp.NOT_EQUAL; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2131-2154,[			switch (alt36) {, 				case 1 :, 					// PhoenixSQL.g:454:9: propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2129);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(propName); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:455:9: familyName= identifier DOT propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2143);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2145); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2149);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(familyName, propName); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,8484-8507,[			switch (alt146) {, 				case 1 :, 					// PhoenixSQL.g:850:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name6065);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:851:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name6079);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_from_table_name6081); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_from_table_name6085);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1584-1602,[			switch (alt28) {, 				case 1 :, 					// PhoenixSQL.g:412:7: n= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_int_literal_or_bind1764);, 					n=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = n; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:413:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_int_literal_or_bind1776);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = b; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,join_part,5690-5730,[			switch (alt107) {, 				case 1 :, 					// PhoenixSQL.g:668:4: j= join_type JOIN r= single_table_ref ON e= expression, 					{, 					pushFollow(FOLLOW_join_type_in_join_part4187);, 					j=join_type();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,JOIN,FOLLOW_JOIN_in_join_part4189); if (state.failed) return ret;, 					pushFollow(FOLLOW_single_table_ref_in_join_part4193);, 					r=single_table_ref();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,ON,FOLLOW_ON_in_join_part4195); if (state.failed) return ret;, 					pushFollow(FOLLOW_expression_in_join_part4199);, 					e=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.joinPart(j, e, r); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:669:4: j= join_type JOIN LPAREN r= table_ref RPAREN ON e= expression, 					{, 					pushFollow(FOLLOW_join_type_in_join_part4208);, 					j=join_type();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,JOIN,FOLLOW_JOIN_in_join_part4210); if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_join_part4212); if (state.failed) return ret;, 					pushFollow(FOLLOW_table_ref_in_join_part4216);, 					r=table_ref();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_join_part4218); if (state.failed) return ret;, 					match(input,ON,FOLLOW_ON_in_join_part4220); if (state.failed) return ret;, 					pushFollow(FOLLOW_expression_in_join_part4224);, 					e=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.joinPart(j, e, r); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4196-4214,[			switch (alt87) {, 				case 1 :, 					// PhoenixSQL.g:601:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_limit3589);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(b); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:602:7: l= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_limit3601);, 					l=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(l); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,8651-8720,[			switch (alt148) {, 				case 1 :, 					// PhoenixSQL.g:862:9: t= STRING_LITERAL, 					{, 					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal6163); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.literal(t.getText()); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:863:9: l= int_literal, 					{, 					pushFollow(FOLLOW_int_literal_in_literal6177);, 					l=int_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:864:9: l= long_literal, 					{, 					pushFollow(FOLLOW_long_literal_in_literal6191);, 					l=long_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:865:9: l= double_literal, 					{, 					pushFollow(FOLLOW_double_literal_in_literal6205);, 					l=double_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = l; }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:866:9: t= DECIMAL, 					{, 					t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal6219); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {, 					            try {, 					                ret = factory.literal(new BigDecimal(t.getText()));, 					            } catch (NumberFormatException e) { // Shouldn't happen since we just parsed a decimal, 					                throwRecognitionException(t);, 					            }, 					        }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:873:9: NULL, 					{, 					match(input,NULL,FOLLOW_NULL_in_literal6231); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(null);}, 					}, 					break;, 				case 7 :, 					// PhoenixSQL.g:874:9: TRUE, 					{, 					match(input,TRUE,FOLLOW_TRUE_in_literal6243); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(Boolean.TRUE);}, 					}, 					break;, 				case 8 :, 					// PhoenixSQL.g:875:9: FALSE, 					{, 					match(input,FALSE,FOLLOW_FALSE_in_literal6256); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.literal(Boolean.FALSE);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,8554-8572,[			switch (alt147) {, 				case 1 :, 					// PhoenixSQL.g:856:9: e= literal, 					{, 					pushFollow(FOLLOW_literal_in_literal_or_bind6117);, 					e=literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = e; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:857:9: b= bind_name, 					{, 					pushFollow(FOLLOW_bind_name_in_literal_or_bind6131);, 					b=bind_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.bind(b); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,543-562,[			switch (alt2) {, 				case 1 :, 					// PhoenixSQL.g:343:10: SELECT s= hinted_select_node, 					{, 					match(input,SELECT,FOLLOW_SELECT_in_oneStatement954); if (state.failed) return ret;, 					pushFollow(FOLLOW_hinted_select_node_in_oneStatement958);, 					s=hinted_select_node();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret =s;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:344:10: ns= non_select_node, 					{, 					pushFollow(FOLLOW_non_select_node_in_oneStatement974);, 					ns=non_select_node();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret =ns;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,4701-4713,[			switch (alt94) {, 				case 1 :, 					// PhoenixSQL.g:642:10: ASC, 					{, 					match(input,ASC,FOLLOW_ASC_in_parseOrderByField3916); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = true;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:642:38: DESC, 					{, 					match(input,DESC,FOLLOW_DESC_in_parseOrderByField3922); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = false;}],,parseOrderByField,4747-4759,[					switch (alt95) {, 						case 1 :, 							// PhoenixSQL.g:643:17: FIRST, 							{, 							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField3940); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = false;}, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:643:46: LAST, 							{, 							match(input,LAST,FOLLOW_LAST_in_parseOrderByField3946); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = true;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,select_list,4292-4334,[			switch (alt89) {, 				case 1 :, 					// PhoenixSQL.g:612:9: n= selectable ( COMMA n= selectable )*, 					{, 					pushFollow(FOLLOW_selectable_in_select_list3663);, 					n=selectable();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(n);}, 					// PhoenixSQL.g:612:36: ( COMMA n= selectable )*, 					loop88:, 					while (true) {, 						int alt88=2;, 						int LA88_0 = input.LA(1);, 						if ( (LA88_0==COMMA) ) {, 							alt88=1;, 						}, , 						switch (alt88) {, 						case 1 :, 							// PhoenixSQL.g:612:37: COMMA n= selectable, 							{, 							match(input,COMMA,FOLLOW_COMMA_in_select_list3668); if (state.failed) return ret;, 							pushFollow(FOLLOW_selectable_in_select_list3672);, 							n=selectable();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret.add(n);}, 							}, 							break;, , 						default :, 							break loop88;, 						}, 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:613:7: ASTERISK, 					{, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list3684); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = Collections.<AliasedNode>singletonList(factory.aliasedNode(null, factory.wildcard()));}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,4470-4526,[			switch (alt91) {, 				case 1 :, 					// PhoenixSQL.g:618:9: field= expression (a= parseAlias )?, 					{, 					pushFollow(FOLLOW_expression_in_selectable3713);, 					field=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:618:26: (a= parseAlias )?, 					int alt90=2;, 					int LA90_0 = input.LA(1);, 					if ( (LA90_0==AS||LA90_0==NAME) ) {, 						alt90=1;, 					}, 					switch (alt90) {, 						case 1 :, 							// PhoenixSQL.g:618:27: a= parseAlias, 							{, 							pushFollow(FOLLOW_parseAlias_in_selectable3718);, 							a=parseAlias();, 							state._fsp--;, 							if (state.failed) return ret;, 							}, 							break;, , 					}, , 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(a, field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:619:8: familyName= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable3733);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3735); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3737); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.family(familyName));}, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:620:9: s= identifier DOT t= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable3752);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3754); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_selectable3758);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable3760); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable3762); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.tableWildcard(factory.table(s, t))); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,8397-8420,[			switch (alt145) {, 				case 1 :, 					// PhoenixSQL.g:844:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name6017);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:845:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name6031);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_table_name6033); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_table_name6037);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,zero_or_more_expressions,8159-8167,[			switch (alt142) {, 				case 1 :, 					// PhoenixSQL.g:830:9: v= expression, 					{, 					pushFollow(FOLLOW_expression_in_zero_or_more_expressions5902);, 					v=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(v);}],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,nextStatement,96-96,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseExpression,154-154,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseLiteral,172-172,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseQuery,135-135,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseStatement,116-116,[                throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,125-128,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,140-143,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/pig/PhoenixHBaseLoader.java,initializePhoenixPigConfiguration,139-139,[            this.tableName = pair.getFirst();],,initializePhoenixPigConfiguration,125-125,[        Pair<String,String> pair = null;],,initializePhoenixPigConfiguration,132-132,[             } else if (location.startsWith(PHOENIX_QUERY_SCHEME)) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/pig/PhoenixHBaseLoader.java,getPartitionKeys,237-237,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,dropTable,576-576,[      conn.createStatement().execute(String.format("DROP TABLE %s",tableFullName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,113-113,[        conn.createStatement().execute(ddl);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,setUp,101-101,[                ConfigurationUtil.toProperties(conf));],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,110-110,[        final String ddl = String.format("CREATE TABLE %s "],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithBinaryDataTypes,241-241,[            assertEquals(i * 5, rs.getInt(2));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithBinaryDataTypes,235-235,[                .executeQuery(String.format("SELECT col1 , col2 , col3 , col4 , col5 , col6, col7  FROM %s ORDER BY col1" , tableName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithDateTime,291-291,[                .executeQuery(String.format("SELECT col1 , col2 , col3 , col4 FROM %s " , tableName));],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,setUp,73-73,[        pigServer = new PigServer(ExecType.LOCAL, getTestClusterConfig());],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,newConfiguration,108-108,[        phoenixConfiguration.configure(zkQuorum, tableName.toUpperCase(), 100);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,testSelectStatement,67-67,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,testSelectStatementForSpecificColumns,87-87,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pig/PhoenixPigConfigurationIT.java,testUpsertStatement,47-47,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/pig/hadoop/PhoenixOutputFormat.java,,65-65,[			return new PhoenixRecordWriter(getConnection(context.getConfiguration()), config);],,,84-84,[	    config = new PhoenixPigConfiguration(configuration);	    ],,,87-87,[			connection = config.getConnection();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/pig/hadoop/PhoenixRecord.java,<init>,56-56,[		this.fieldSchemas = fieldSchemas;],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pig/hadoop/PhoenixRecordWriter.java,<init>,56-56,[		this.statement = this.conn.prepareStatement(config.getUpsertStatement());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/pig/util/ColumnInfoToStringEncoderDecoderTest.java,testEncodeDecodeWithNulls,56-56,[        final String columnInfoStr = ColumnInfoToStringEncoderDecoder.encode(Lists.newArrayList(columnInfo1,columnInfo2));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/QuerySchemaParserFunction.java,,71-74,[                                                            new Function<ColumnProjector,String>() {,                                                                 @Override,                                                                 public String apply(ColumnProjector column) {,                                                                     return column.getName();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/QuerySchemaParserFunctionTest.java,tearDown,107-107,[        conn.close();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunction.java,,63-66,[            columnInfos = Lists.transform(projectedColumns, new Function<ColumnProjector,ColumnInfo>() {,             	@Override, 				public ColumnInfo apply(final ColumnProjector columnProjector) {, 					return new ColumnInfo(columnProjector.getName(), columnProjector.getExpression().getDataType().getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunctionTest.java,tearDown,72-72,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunctionTest.java,testValidSelectQuery,65-65,[        final List<ColumnInfo> actualColumnInfos = function.apply(selectQuery);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/pig/util/TypeUtil.java,transformToTuple,290-290,[        } catch( Exception ex) {],,
MT_CORRECTNESS,LI_LAZY_INIT_UPDATE_STATIC,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,doTeardown,135-140,[        if (driver != null) {,             try {,                 driver.close();,             } finally {,                 PhoenixTestDriver driver = BaseConnectionlessQueryTest.driver;,                 BaseConnectionlessQueryTest.driver = null;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,125-125,[            A_TIME = new ColumnRef(new TableRef(table), table.getColumn("A_TIME").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,126-126,[            A_TIMESTAMP = new ColumnRef(new TableRef(table), table.getColumn("A_TIMESTAMP").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,119-119,[            ORGANIZATION_ID = new ColumnRef(new TableRef(table), table.getColumn("ORGANIZATION_ID").getPosition()).newColumnExpression();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,770-770,[            } catch (Exception e) {],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1049-1049,[        initEntityHistoryTableValues(tenantId, splits, null);],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1053-1053,[        initEntityHistoryTableValues(tenantId, splits, date, null);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/query/BaseTest.java,setUpTestDriver,482-483,[        if (driver == null) {,             driver = initAndRegisterDriver(url, props);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,770-770,[            } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/BaseTest.java,destroyDriver,621-621,[            } catch (Exception ignored) {}],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,769-769,[                conn.createStatement().execute("DROP SEQUENCE " + SchemaUtil.getTableName(rs.getString(1), rs.getString(2)));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorTables,748-748,[                    conn.createStatement().executeUpdate(ddl);],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1050-1050,[    }],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/phoenix/query/BaseTest.java,initEntityHistoryTableValues,1054-1054,[    }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,46-49,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,56-59,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create(conf);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearCache,1624-1624,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearCacheForTable,1899-1899,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,addColumnsIfNotExists,1438-1438,[            metaConnection.createStatement().executeUpdate("ALTER TABLE " + tableName + " ADD IF NOT EXISTS " + columns );],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,463-470,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.addColumn(tenantId, tableName, columns, tableTimeStamp, tableSeqNum, isImmutableRows);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1591-1602,[                        HConstants.EMPTY_END_ROW, new Batch.Call<MetaDataService, ClearCacheResponse>() {,                     @Override,                     public ClearCacheResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<ClearCacheResponse> rpcCallback =,                                 new BlockingRpcCallback<ClearCacheResponse>();,                         ClearCacheRequest.Builder builder = ClearCacheRequest.newBuilder();,                         instance.clearCache(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1658-1673,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         instance.updateIndexState(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1867-1879,[                        new Batch.Call<MetaDataService, ClearCacheForTableResponse>() {,                             @Override,                             public ClearCacheForTableResponse call(MetaDataService instance) throws IOException {,                                 ServerRpcController controller = new ServerRpcController();,                                 BlockingRpcCallback<ClearCacheForTableResponse> rpcCallback = new BlockingRpcCallback<ClearCacheForTableResponse>();,                                 ClearCacheForTableRequest.Builder builder = ClearCacheForTableRequest.newBuilder();,                                 builder.setTenantId(HBaseZeroCopyByteString.wrap(tenantId));,                                 builder.setTableName(HBaseZeroCopyByteString.wrap(tableName));,                                 builder.setSchemaName(HBaseZeroCopyByteString.wrap(schemaName));,                                 builder.setClientTimestamp(clientTS);,                                 instance.clearCacheForTable(controller, builder.build(), rpcCallback);,                                 if (controller.getFailedOn() != null) { throw controller.getFailedOn(); },                                 return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,488-495,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.removeColumn(tenantId, tableName, familyName, columnName, tableTimeStamp, tableSeqNum);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,843-855,[                    ht.coprocessorService(MetaDataService.class, null, null, new Batch.Call<MetaDataService,Long>() {,                         @Override,                         public Long call(MetaDataService instance) throws IOException {,                             ServerRpcController controller = new ServerRpcController();,                             BlockingRpcCallback<GetVersionResponse> rpcCallback =,                                     new BlockingRpcCallback<GetVersionResponse>();,                             GetVersionRequest.Builder builder = GetVersionRequest.newBuilder();,                             ,                             instance.getVersion(controller, builder.build(), rpcCallback);,                             if(controller.getFailedOn() != null) {,                                 throw controller.getFailedOn();,                             },                             return rpcCallback.get().getVersion();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1117-1132,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,             @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         CreateTableRequest.Builder builder = CreateTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         instance.createTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1144-1161,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     GetTableRequest.Builder builder = GetTableRequest.newBuilder();,                     builder.setTenantId(HBaseZeroCopyByteString.wrap(tenantIdBytes));,                     builder.setSchemaName(HBaseZeroCopyByteString.wrap(schemaBytes));,                     builder.setTableName(HBaseZeroCopyByteString.wrap(tableBytes));,                     builder.setTableTimestamp(tableTimestamp);,                     builder.setClientTimestamp(clientTimestamp);,                     ,                    instance.getTable(controller, builder.build(), rpcCallback);,                    if(controller.getFailedOn() != null) {,                        throw controller.getFailedOn();,                    },                    return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1175-1193,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         DropTableRequest.Builder builder = DropTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setTableType(tableType.getSerializedValue());,                         builder.setCascade(cascade);,                         ,                         instance.dropTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1343-1359,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     AddColumnRequest.Builder builder = AddColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     ,                     instance.addColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1394-1409,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     DropColumnRequest.Builder builder = DropColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     instance.dropColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,call,1530-1530,[                        } catch (Exception e) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/ConnectionlessTest.java,testConnectionlessUpsert,103-103,[        PreparedStatement statement = conn.prepareStatement(dmlStmt);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getLowerRange,262-262,[        return lowerRange;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getUpperRange,270-270,[        return upperRange;],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeCoalesceTest.java,,39-159,[    private static final Random RANDOM = new Random(1);,     private final List<KeyRange> expected, input;, ,     public KeyRangeCoalesceTest(List<KeyRange> expected, List<KeyRange> input) {,         this.expected = expected;,         this.input = input;,     }, ,     @Parameters(name="{0} coalesces to {1}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("Z"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("E"), true),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),,                         PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PDataType.CHAR.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PDataType.CHAR.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 )},,                 {expect(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("Z"), false),                 ),,                 input(,                         PDataType.CHAR.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PDataType.CHAR.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                     EMPTY_RANGE,                 )},         });,     },     @Test,     public void coalesce() {,         assertEquals(expected, KeyRange.coalesce(input));,         List<KeyRange> tmp = new ArrayList<KeyRange>(input);,         Collections.reverse(tmp);,         assertEquals(expected, KeyRange.coalesce(input));,         Collections.shuffle(tmp, RANDOM);,         assertEquals(expected, KeyRange.coalesce(input));,     },     ,     private static final List<KeyRange> expect(KeyRange... kr) {,         return asList(kr);,     },     ,     private static final List<KeyRange> input(KeyRange... kr) {,         return asList(kr);],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeIntersectTest.java,,41-96,[    public KeyRangeIntersectTest(KeyRange a, KeyRange b, KeyRange intersection) {,         this.a = a;,         this.b = b;,         this.intersection = intersection;,     }, ,     @Parameters(name="intersection of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), false, toBytes("E"), false),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,                 {,                     EVERYTHING_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EMPTY_RANGE,                 },,                 {,                     EMPTY_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,         });,     },     @Test,     public void intersect() {,         assertEquals(intersection, a.intersect(b));,         assertEquals(intersection, b.intersect(a));,     }],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeUnionTest.java,,41-96,[    public KeyRangeUnionTest(KeyRange a, KeyRange b, KeyRange union) {,         this.a = a;,         this.b = b;,         this.union = union;,     }, ,     @Parameters(name="union of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("F"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("F"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 },,                 {,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     EMPTY_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                 },,                 {,                     EVERYTHING_RANGE,,                     PDataType.CHAR.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EVERYTHING_RANGE,,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,         });,     },     @Test,     public void union() {,         assertEquals(union, a.union(b));,         assertEquals(union, b.union(a));,     }],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,137-137,[    public static final byte[] ARRAY_VALUE_COLUMN_FAMILY = Bytes.toBytes("a");],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,200-200,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,154-154,[    public static final byte[] EMPTY_COLUMN_BYTES = Bytes.toBytes(EMPTY_COLUMN_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,113-113,[    public final static byte[] NAME_SEPARATOR_BYTES = Bytes.toBytes(NAME_SEPARATOR);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/KeyRange.java,,66-66,[    public static final KeyRange IS_NOT_NULL_RANGE = new KeyRange(ByteUtil.nextKey(QueryConstants.SEPARATOR_BYTE_ARRAY), true, UNBOUND, false);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,126-126,[    public final static byte[] SINGLE_COLUMN = SINGLE_COLUMN_NAME.getBytes();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixStatement.java,,309-309,[    private static final byte[] EXPLAIN_PLAN_FAMILY = QueryConstants.SINGLE_COLUMN_FAMILY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,141-141,[    public static final byte[] TRUE = new byte[] {1};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,133-133,[    public final static byte[] UNGROUPED_AGG_ROW_KEY = Bytes.toBytes("a");],,
MALICIOUS_CODE,MS_OOI_PKGPROTECT,org/apache/phoenix/query/QueryConstants.java,,121-121,[    public final static byte[] SYSTEM_SCHEMA_NAME_BYTES = Bytes.toBytes(SYSTEM_SCHEMA_NAME);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/query/QueryServicesOptions.java,,114-114,[    public static boolean DEFAULT_GROUPBY_SPILLABLE = true;],,
CORRECTNESS,GC_UNRELATED_TYPES,org/apache/phoenix/query/StatsManagerImpl.java,getStats,131-131,[        PTableStats stats = tableStatsMap.get(table);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/query/StatsManagerImpl.java,getStats,147-147,[                services.getExecutor().submit(new Callable<Void>() {],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/phoenix/schema/ColumnRef.java,equals,87-93,[        if (this == obj) return true;,         if (obj == null) return false;,         if (getClass() != obj.getClass()) return false;,         ColumnRef other = (ColumnRef)obj;,         if (columnPosition != other.columnPosition) return false;,         if (!tableRef.equals(other.tableRef)) return false;,         return true;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,createTableInternal,967-967,[                isParentImmutableRows = parent.isImmutableRows();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,buildIndex,594-594,[                                scn++;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,dropColumn,2214-2214,[                    table = connection.getMetaDataCache().getTable(new PTableKey(tenantId, fullTableName));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/schema/MetaDataClient.java,deleteFromStatsTable,1603-1603,[        Connection conn = DriverManager.getConnection(connection.getURL(), props);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/MetaDataClient.java,getNewEmptyColumnFamilyOrNull,2047-2047,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,deleteFromStatsTable,1613-1613,[            conn.createStatement().execute(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,dropColumnMutations,2005-2005,[        connection.createStatement().execute(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,updateStatistics,491-491,[        ResultSet rs = connection.createStatement().executeQuery(query);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1302-1309,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public byte[] getViewConstant() {,                                 return viewColumnConstants[columnPosition];,                             },                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,1313-1316,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,2007-2010,[        Collections.sort(columnsToDrop,new Comparator<PColumn> () {,             @Override,             public int compare(PColumn left, PColumn right) {,                return Ints.compare(left.getPosition(), right.getPosition());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PArrayDataType.java,positionAtArrayElement,333-333,[                    count = -count;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/PArrayDataType.java,createArrayBytes,459-459,[        return null;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PColumnImpl.java,getViewConstant,179-179,[        return viewConstant;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PDataType.java,compareTo,5651-5651,[                lhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PDataType.java,compareTo,5640-5640,[                rhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PDataType.java,getDecimalPrecisionAndScale,6964-6964,[            d /= 10;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PDataType.java,getJavaClassNameBytes,7304-7304,[        return clazzNameBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PDataType.java,getSqlTypeNameBytes,7308-7308,[        return sqlTypeNameBytes;],,
MALICIOUS_CODE,MS_EXPOSE_REP,org/apache/phoenix/schema/PDataType.java,getArrayFactory,7296-7296,[		return ARRAY_FACTORY;],,
MALICIOUS_CODE,MS_FINAL_PKGPROTECT,org/apache/phoenix/schema/PDataType.java,,7263-7263,[			.values().length];],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/PDataType.java,,6758-6758,[    public static final byte[] FALSE_BYTES = new byte[] {FALSE_BYTE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/PDataType.java,,6760-6760,[    public static final byte[] NULL_BYTES = ByteUtil.EMPTY_BYTE_ARRAY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/PDataType.java,,6759-6759,[    public static final byte[] TRUE_BYTES = new byte[] {TRUE_BYTE};],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,2090-2090,[                return -rhsType.compareTo(rhs, lhs, TIME);],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,2497-2497,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).longValue()));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,2927-2927,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).doubleValue()));],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/schema/PDataType.java,toObject,3054-3054,[                return null;],,toObject,3067-3067,[            return null;],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,539-539,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).longValue()));],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/schema/PArrayDataType.java,,50-657,[	public PArrayDataType() {, 	}, , 	public byte[] toBytes(Object object, PDataType baseType, SortOrder sortOrder) {, 		if(object == null) {, 			throw new ConstraintViolationException(this + " may not be null");, 		}, 		PhoenixArray arr = ((PhoenixArray)object);,         int noOfElements = arr.numElements;,         if(noOfElements == 0) {,         	return ByteUtil.EMPTY_BYTE_ARRAY;,         },         TrustedByteArrayOutputStream byteStream = null;, 		if (!baseType.isFixedWidth()) {, 	        Pair<Integer, Integer> nullsVsNullRepeationCounter = new Pair<Integer, Integer>();, 	        int size = estimateByteSize(object, nullsVsNullRepeationCounter,, 	                PDataType.fromTypeId((baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE)));, 		    size += ((2 * Bytes.SIZEOF_BYTE) + (noOfElements - nullsVsNullRepeationCounter.getFirst()) * Bytes.SIZEOF_BYTE), 		                                + (nullsVsNullRepeationCounter.getSecond() * 2 * Bytes.SIZEOF_BYTE);, 		    // Assume an offset array that fit into Short.MAX_VALUE.  Also not considering nulls that could be > 255, 		    // In both of these cases, finally an array copy would happen, 		    int capacity = noOfElements * Bytes.SIZEOF_SHORT;, 		    // Here the int for noofelements, byte for the version, int for the offsetarray position and 2 bytes for the end seperator,             byteStream = new TrustedByteArrayOutputStream(size + capacity + Bytes.SIZEOF_INT + Bytes.SIZEOF_BYTE +  Bytes.SIZEOF_INT);, 		} else {, 		    int size = arr.getMaxLength() * noOfElements;, 		    // Here the int for noofelements, byte for the version, 		    byteStream = new TrustedByteArrayOutputStream(size);, 		}, 		DataOutputStream oStream = new DataOutputStream(byteStream);, 		// Handles bit inversion also, 		return createArrayBytes(byteStream, oStream, (PhoenixArray)object, noOfElements, baseType, sortOrder);, 	}, 	,     public static int serializeNulls(DataOutputStream oStream, int nulls) throws IOException {,         // We need to handle 3 different cases here,         // 1) Arrays with repeating nulls in the middle which is less than 255,         // 2) Arrays with repeating nulls in the middle which is less than 255 but greater than bytes.MAX_VALUE,         // 3) Arrays with repeating nulls in the middle greaterh than 255,         // Take a case where we have two arrays that has the following elements,         // Array 1 - size : 240, elements = abc, bcd, null, null, bcd,null,null......,null, abc,         // Array 2 - size : 16 : elements = abc, bcd, null, null, bcd, null, null...null, abc,         // In both case the elements and the value array will be the same but the Array 1 is actually smaller because it has more nulls.,         // Now we should have mechanism to show that we treat arrays with more nulls as lesser.  Hence in the above case as ,         // 240 > Bytes.MAX_VALUE, by always inverting the number of nulls we would get a +ve value,         // For Array 2, by inverting we would get a -ve value.  On comparison Array 2 > Array 1.,         // Now for cases where the number of nulls is greater than 255, we would write an those many (byte)1, it is bigger than 255.,         // This would ensure that we don't compare with triple zero which is used as an end  byte,         if (nulls > 0) {,             oStream.write(QueryConstants.SEPARATOR_BYTE);,             int nMultiplesOver255 = nulls / 255;,             while (nMultiplesOver255-- > 0) {,                 // Don't write a zero byte, as we need to ensure that the only triple zero,                 // byte occurs at the end of the array (i.e. the terminator byte for the,                 // element plus the double zero byte at the end of the array).,                 oStream.write((byte)1); ,             },             int nRemainingNulls = nulls % 255; // From 0 to 254,             // Write a byte for the remaining null elements,             if (nRemainingNulls > 0) {,                 // Remaining null elements is from 1 to 254.,                 // Subtract one and invert so that more remaining nulls becomes smaller than less ,                 // remaining nulls and min byte value is always greater than 1, the repeating value  ,                 // used for arrays with more than 255 repeating null elements.,                 // The reason we invert is that  an array with less null elements has a non,                 // null element sooner than an array with more null elements. Thus, the more,                 // null elements you have, the smaller the array becomes.,                 byte nNullByte = SortOrder.invert((byte)(nRemainingNulls-1));,                 oStream.write(nNullByte); // Single byte for repeating nulls,             },         },         return 0;,     },  ,     public static void writeEndSeperatorForVarLengthArray(DataOutputStream oStream) throws IOException {,         oStream.write(QueryConstants.SEPARATOR_BYTE);,         oStream.write(QueryConstants.SEPARATOR_BYTE);,     }, , 	public static boolean useShortForOffsetArray(int maxOffset) {, 		// If the max offset is less than Short.MAX_VALUE then offset array can use short, 		if (maxOffset <= (2 * Short.MAX_VALUE)) {, 			return true;, 		}, 		// else offset array can use Int, 		return false;, 	}, , 	public int toBytes(Object object, byte[] bytes, int offset) {, 	    PhoenixArray array = (PhoenixArray)object;,         if (array == null || array.baseType == null) {,             return 0;,         },         return estimateByteSize(object, null, PDataType.fromTypeId((array.baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE)));, 	}, , 	// Estimates the size of the given array and also calculates the number of nulls and its repetition factor,     public int estimateByteSize(Object o, Pair<Integer, Integer> nullsVsNullRepeationCounter, PDataType baseType) {,         if (baseType.isFixedWidth()) { return baseType.getByteSize(); },         if (baseType.isArrayType()) {,             PhoenixArray array = (PhoenixArray)o;,             int noOfElements = array.numElements;,             int totalVarSize = 0;,             int nullsRepeationCounter = 0;,             int nulls = 0;,             int totalNulls = 0;,             for (int i = 0; i < noOfElements; i++) {,                 totalVarSize += array.estimateByteSize(i);,                 if (!PDataType.fromTypeId((baseType.getSqlType() - PDataType.ARRAY_TYPE_BASE)).isFixedWidth()) {,                     if (array.isNull(i)) {,                         nulls++;,                     } else {,                         if (nulls > 0) {,                             totalNulls += nulls;,                             nulls = 0;,                             nullsRepeationCounter++;,                         },                     },                 },             },             if (nullsVsNullRepeationCounter != null) {,                 if (nulls > 0) {,                     totalNulls += nulls;,                     // do not increment nullsRepeationCounter to identify trailing nulls,                 },                 nullsVsNullRepeationCounter.setFirst(totalNulls);,                 nullsVsNullRepeationCounter.setSecond(nullsRepeationCounter);,             },             return totalVarSize;,         },         // Non fixed width types must override this,         throw new UnsupportedOperationException();,     },     , 	public boolean isCoercibleTo(PDataType targetType, Object value) {, 	    return targetType.isCoercibleTo(targetType, value);, 	}, 	, 	public boolean isCoercibleTo(PDataType targetType, PDataType expectedTargetType) {, 		if(!targetType.isArrayType()) {, 			return false;, 		} else {, 			PDataType targetElementType = PDataType.fromTypeId(targetType.getSqlType(), 					- PDataType.ARRAY_TYPE_BASE);, 			PDataType expectedTargetElementType = PDataType.fromTypeId(expectedTargetType, 					.getSqlType() - PDataType.ARRAY_TYPE_BASE);, 			return expectedTargetElementType.isCoercibleTo(targetElementType);, 		},     }, 	, 	public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value,, 			PDataType srcType, Integer maxLength, Integer scale,, 			Integer desiredMaxLength, Integer desiredScale) {,         if (value == null) return true;, 		PhoenixArray pArr = (PhoenixArray) value;, 		Object[] arr = (Object[]) pArr.array;, 		PDataType baseType = PDataType.fromTypeId(srcType.getSqlType(), 				- PDataType.ARRAY_TYPE_BASE);, 		for (int i = 0 ; i < arr.length; i++) {, 			if (!baseType.isSizeCompatible(ptr, arr[i], baseType, srcType.getMaxLength(arr[i]),, 					scale, desiredMaxLength, desiredScale)) {, 				return false;, 			}, 		}, 		return true;, 	}, 	,     public void coerceBytes(ImmutableBytesWritable ptr, Object value, PDataType actualType, Integer maxLength,,             Integer scale, Integer desiredMaxLength, Integer desiredScale, PDataType desiredType,,             SortOrder actualModifer, SortOrder expectedModifier) {,         if (ptr.getLength() == 0) { // a zero length ptr means null which will not be coerced to anything different,             return;,         },         PDataType baseType = PDataType.fromTypeId(actualType.getSqlType() - PDataType.ARRAY_TYPE_BASE);,         PDataType desiredBaseType = PDataType.fromTypeId(desiredType.getSqlType() - PDataType.ARRAY_TYPE_BASE);,         if ((Objects.equal(maxLength, desiredMaxLength) || maxLength == null || desiredMaxLength == null),                 && actualType.isBytesComparableWith(desiredType),                 && baseType.isFixedWidth() == desiredBaseType.isFixedWidth() && actualModifer == expectedModifier) { ,             return; ,         },         if (value == null || actualType != desiredType) {,             value = toObject(ptr.get(), ptr.getOffset(), ptr.getLength(), baseType, actualModifer, maxLength,,                     desiredScale, desiredBaseType);,             PhoenixArray pArr = (PhoenixArray)value;,             // VARCHAR <=> CHAR,             if(baseType.isFixedWidth() != desiredBaseType.isFixedWidth()) {,                 if (!pArr.isPrimitiveType()) {,                     pArr = new PhoenixArray(pArr, desiredMaxLength);,                 },             },             baseType = desiredBaseType;,             ptr.set(toBytes(pArr, baseType, expectedModifier));,         } else {,             PhoenixArray pArr = (PhoenixArray)value;,             pArr = new PhoenixArray(pArr, desiredMaxLength);,             ptr.set(toBytes(pArr, baseType, expectedModifier));,         },     }, , ,     public Object toObject(String value) {, 		throw new IllegalArgumentException("This operation is not suppported");, 	}, , 	public Object toObject(byte[] bytes, int offset, int length, PDataType baseType, , 			SortOrder sortOrder, Integer maxLength, Integer scale, PDataType desiredDataType) {, 		return createPhoenixArray(bytes, offset, length, sortOrder,, 				baseType, maxLength, desiredDataType);, 	}, ,     public static boolean positionAtArrayElement(Tuple tuple, ImmutableBytesWritable ptr, int index,,             Expression arrayExpr, PDataType pDataType, Integer maxLen) {,         if (!arrayExpr.evaluate(tuple, ptr)) {,             return false;,         } else if (ptr.getLength() == 0) { return true; }, ,         // Given a ptr to the entire array, set ptr to point to a particular element within that array,         // given the type of an array element (see comments in PDataTypeForArray),         positionAtArrayElement(ptr, index - 1, pDataType, maxLen);,         return true;,     },     public static void positionAtArrayElement(ImmutableBytesWritable ptr, int arrayIndex, PDataType baseDataType,,             Integer byteSize) {,         byte[] bytes = ptr.get();,         int initPos = ptr.getOffset();,         if (!baseDataType.isFixedWidth()) {,             int noOfElements = Bytes.toInt(bytes, (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)),,                     Bytes.SIZEOF_INT);,             boolean useShort = true;,             if (noOfElements < 0) {,                 noOfElements = -noOfElements;,                 useShort = false;,             },             if (arrayIndex >= noOfElements) {,                 ptr.set(ByteUtil.EMPTY_BYTE_ARRAY);,                 return;,             }, ,             int indexOffset = Bytes.toInt(bytes,,                     (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + 2 * Bytes.SIZEOF_INT))) + ptr.getOffset();,             if(arrayIndex >= noOfElements) {,                 ptr.set(ByteUtil.EMPTY_BYTE_ARRAY);,             } else {,                 // Skip those many offsets as given in the arrayIndex,                 // If suppose there are 5 elements in the array and the arrayIndex = 3,                 // This means we need to read the 4th element of the array,                 // So inorder to know the length of the 4th element we will read the offset of 4th element and the,                 // offset of 5th element.,                 // Subtracting the offset of 5th element and 4th element will give the length of 4th element,                 // So we could just skip reading the other elements.,                 int currOffset = getOffset(bytes, arrayIndex, useShort, indexOffset);,                 int elementLength = 0;,                 if (arrayIndex == (noOfElements - 1)) {,                     elementLength = bytes[currOffset + initPos] == QueryConstants.SEPARATOR_BYTE ? 0 : indexOffset,                             - (currOffset + initPos) - 3;,                 } else {,                     elementLength = bytes[currOffset + initPos] == QueryConstants.SEPARATOR_BYTE ? 0 : getOffset(bytes,,                             arrayIndex + 1, useShort, indexOffset) - currOffset - 1;,                 },                 ptr.set(bytes, currOffset + initPos, elementLength);,             },         } else {,             int elemByteSize = (byteSize == null ? baseDataType.getByteSize() : byteSize);,             int offset = arrayIndex * elemByteSize;,             if (offset >= ptr.getLength()) {,                 ptr.set(ByteUtil.EMPTY_BYTE_ARRAY);,             } else {,                 ptr.set(bytes, ptr.getOffset() + offset, elemByteSize);,             },         },     },     ,     public static void positionAtArrayElement(ImmutableBytesWritable ptr, int arrayIndex, PDataType baseDataType,,             Integer byteSize, int offset, int length, int noOfElements, boolean first) {,         byte[] bytes = ptr.get();,         if (!baseDataType.isFixedWidth()) {,             int indexOffset = Bytes.toInt(bytes, (offset + length - (Bytes.SIZEOF_BYTE + 2 * Bytes.SIZEOF_INT))),                     + offset;,             boolean useShort = true;,             if (first) {,                 int count = Bytes.toInt(bytes,,                         (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)), Bytes.SIZEOF_INT);,                 if (count < 0) {,                     count = -count;,                     useShort = false;,                 },             },             if (arrayIndex >= noOfElements) {,                 return;,             } else {,                 // Skip those many offsets as given in the arrayIndex,                 // If suppose there are 5 elements in the array and the arrayIndex = 3,                 // This means we need to read the 4th element of the array,                 // So inorder to know the length of the 4th element we will read the offset of 4th element and the,                 // offset of 5th element.,                 // Subtracting the offset of 5th element and 4th element will give the length of 4th element,                 // So we could just skip reading the other elements.,                 int currOffset = getOffset(bytes, arrayIndex, useShort, indexOffset);,                 int elementLength = 0;,                 if (arrayIndex == (noOfElements - 1)) {,                     elementLength = bytes[currOffset + offset] == QueryConstants.SEPARATOR_BYTE ? 0 : indexOffset,                             - (currOffset + offset) - 3;,                 } else {,                     elementLength = bytes[currOffset + offset] == QueryConstants.SEPARATOR_BYTE ? 0 : getOffset(bytes,,                             arrayIndex + 1, useShort, indexOffset) - currOffset - 1;,                 },                 ptr.set(bytes, currOffset + offset, elementLength);,             },         } else {,             int elemByteSize = (byteSize == null ? baseDataType.getByteSize() : byteSize);,             offset += arrayIndex * elemByteSize;,             if (offset >= offset + length) {,                 return;,             } else {,                 ptr.set(bytes, offset, elemByteSize);,             },         },     }, ,     private static int getOffset(byte[] bytes, int arrayIndex, boolean useShort, int indexOffset) {,         int offset;,         if (useShort) {,             offset = indexOffset + (Bytes.SIZEOF_SHORT * arrayIndex);,             return Bytes.toShort(bytes, offset, Bytes.SIZEOF_SHORT) + Short.MAX_VALUE;,         } else {,             offset = indexOffset + (Bytes.SIZEOF_INT * arrayIndex);,             return Bytes.toInt(bytes, offset, Bytes.SIZEOF_INT);,         },     },     ,     private static int getOffset(ByteBuffer indexBuffer, int arrayIndex, boolean useShort, int indexOffset ) {,         int offset;,         if(useShort) {,             offset = indexBuffer.getShort() + Short.MAX_VALUE;,         } else {,             offset = indexBuffer.getInt();,         },         return offset;,     }, , 	public Object toObject(Object object, PDataType actualType) {, 		return object;, 	}, , 	public Object toObject(Object object, PDataType actualType, SortOrder sortOrder) {, 		// How to use the sortOrder ? Just reverse the elements, 		return toObject(object, actualType);, 	}, 	, 	/**, 	 * creates array bytes, 	 * @param byteStream, 	 * @param oStream, 	 * @param array, 	 * @param noOfElements, 	 * @param baseType, 	 * @param sortOrder , 	 * @param maxLength , 	 * @param capacity, 	 * @return, 	 */,     private byte[] createArrayBytes(TrustedByteArrayOutputStream byteStream, DataOutputStream oStream,,             PhoenixArray array, int noOfElements, PDataType baseType, SortOrder sortOrder) {,         try {,             if (!baseType.isFixedWidth()) {,                 int[] offsetPos = new int[noOfElements];,                 int nulls = 0;,                 for (int i = 0; i < noOfElements; i++) {,                     byte[] bytes = array.toBytes(i);,                     if (bytes.length == 0) {,                         offsetPos[i] = byteStream.size();,                         nulls++;,                     } else {,                         nulls = serializeNulls(oStream, nulls);,                         offsetPos[i] = byteStream.size();,                         if (sortOrder == SortOrder.DESC) {,                             SortOrder.invert(bytes, 0, bytes, 0, bytes.length);,                         },                         oStream.write(bytes, 0, bytes.length);,                         oStream.write(QueryConstants.SEPARATOR_BYTE);,                     },                 },                 // Double seperator byte to show end of the non null array,                 PArrayDataType.writeEndSeperatorForVarLengthArray(oStream);,                 noOfElements = PArrayDataType.serailizeOffsetArrayIntoStream(oStream, byteStream, noOfElements,,                         offsetPos[offsetPos.length - 1], offsetPos);,                 serializeHeaderInfoIntoStream(oStream, noOfElements);,             } else {,                 for (int i = 0; i < noOfElements; i++) {,                     byte[] bytes = array.toBytes(i);,                     int length = bytes.length;,                     if (sortOrder == SortOrder.DESC) {,                         SortOrder.invert(bytes, 0, bytes, 0, bytes.length);,                     },                     oStream.write(bytes, 0, length);,                 },             },             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             ptr.set(byteStream.getBuffer(), 0, byteStream.size());,             return ByteUtil.copyKeyBytesIfNecessary(ptr);,         } catch (IOException e) {,             try {,                 byteStream.close();,                 oStream.close();,             } catch (IOException ioe) {, ,             },         },         // This should not happen,         return null;,     }, ,     public static int serailizeOffsetArrayIntoStream(DataOutputStream oStream, TrustedByteArrayOutputStream byteStream,,             int noOfElements, int maxOffset, int[] offsetPos) throws IOException {,         int offsetPosition = (byteStream.size());,         byte[] offsetArr = null;,         boolean useInt = true;,         if (PArrayDataType.useShortForOffsetArray(maxOffset)) {,             offsetArr = new byte[PArrayDataType.initOffsetArray(noOfElements, Bytes.SIZEOF_SHORT)];,             useInt = false;,         } else {,             offsetArr = new byte[PArrayDataType.initOffsetArray(noOfElements, Bytes.SIZEOF_INT)];,             noOfElements = -noOfElements;,         },         int off = 0;,         if(useInt) {,             for (int pos : offsetPos) {,                 Bytes.putInt(offsetArr, off, pos);,                 off += Bytes.SIZEOF_INT;,             },         } else {,             for (int pos : offsetPos) {,                 Bytes.putShort(offsetArr, off, (short)(pos - Short.MAX_VALUE));,                 off += Bytes.SIZEOF_SHORT;,             },         },         oStream.write(offsetArr);,         oStream.writeInt(offsetPosition);,         return noOfElements;,     }, ,     public static void serializeHeaderInfoIntoBuffer(ByteBuffer buffer, int noOfElements) {,         // No of elements,         buffer.putInt(noOfElements);,         // Version of the array,         buffer.put(ARRAY_SERIALIZATION_VERSION);,     }, ,     public static void serializeHeaderInfoIntoStream(DataOutputStream oStream, int noOfElements) throws IOException {,         // No of elements,         oStream.writeInt(noOfElements);,         // Version of the array,         oStream.write(ARRAY_SERIALIZATION_VERSION);,     }, , 	public static int initOffsetArray(int noOfElements, int baseSize) {, 		// for now create an offset array equal to the noofelements, 		return noOfElements * baseSize;,     }, ,     // Any variable length array would follow the below order,     // Every element would be seperated by a seperator byte '0',     // Null elements are counted and once a first non null element appears we,     // write the count of the nulls prefixed with a seperator byte,     // Trailing nulls are not taken into account,     // The last non null element is followed by two seperator bytes,     // For eg,     // a, b, null, null, c, null would be ,     // 65 0 66 0 0 2 67 0 0 0,     // a null null null b c null d would be,     // 65 0 0 3 66 0 67 0 0 1 68 0 0 0, 	// Follow the above example to understand how this works,     private Object createPhoenixArray(byte[] bytes, int offset, int length, SortOrder sortOrder,,             PDataType baseDataType, Integer maxLength, PDataType desiredDataType) {,         if (bytes == null || bytes.length == 0) { return null; },         Object[] elements;,         if (!baseDataType.isFixedWidth()) {,             ByteBuffer buffer = ByteBuffer.wrap(bytes, offset, length);,             int initPos = buffer.position();,             buffer.position((buffer.limit() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)));,             int noOfElements = buffer.getInt();,             boolean useShort = true;,             int baseSize = Bytes.SIZEOF_SHORT;,             if (noOfElements < 0) {,                 noOfElements = -noOfElements;,                 baseSize = Bytes.SIZEOF_INT;,                 useShort = false;,             },             if (baseDataType == desiredDataType) {,                 elements = (Object[])java.lang.reflect.Array.newInstance(baseDataType.getJavaClass(), noOfElements);,             } else {,                 elements = (Object[])java.lang.reflect.Array.newInstance(desiredDataType.getJavaClass(), noOfElements);,             },             buffer.position(buffer.limit() - (Bytes.SIZEOF_BYTE + (2 * Bytes.SIZEOF_INT)));,             int indexOffset = buffer.getInt();,             buffer.position(initPos);,             buffer.position(indexOffset + initPos);,             ByteBuffer indexArr = ByteBuffer.allocate(initOffsetArray(noOfElements, baseSize));,             byte[] array = indexArr.array();,             buffer.get(array);,             int countOfElementsRead = 0;,             int i = 0;,             int currOffset = -1;,             int nextOff = -1;,             boolean foundNull = false;,             if (noOfElements != 0) {,                 while (countOfElementsRead <= noOfElements) {,                     if (countOfElementsRead == 0) {,                         currOffset = getOffset(indexArr, countOfElementsRead, useShort, indexOffset);,                         countOfElementsRead++;,                     } else {,                         currOffset = nextOff;,                     },                     if (countOfElementsRead == noOfElements) {,                         nextOff = indexOffset - 2;,                     } else {,                         nextOff = getOffset(indexArr, countOfElementsRead + 1, useShort, indexOffset);,                     },                     countOfElementsRead++;,                     if ((bytes[currOffset + initPos] != QueryConstants.SEPARATOR_BYTE) && foundNull) {,                         // Found a non null element,                         foundNull = false;,                     },                     if (bytes[currOffset + initPos] == QueryConstants.SEPARATOR_BYTE) {,                         // Null element,                         foundNull = true;,                         i++;,                         continue;,                     },                     int elementLength = nextOff - currOffset;,                     buffer.position(currOffset + initPos);,                     // Subtract the seperator from the element length,                     byte[] val = new byte[elementLength - 1];,                     buffer.get(val);,                     if (baseDataType == desiredDataType) {,                         elements[i++] = baseDataType.toObject(val, sortOrder);,                     } else {,                         elements[i++] = desiredDataType.toObject(val, sortOrder, baseDataType);,                     },                 },             },         } else {,             int elemLength = (maxLength == null ? baseDataType.getByteSize() : maxLength);,             int noOfElements = length / elemLength;,             if (baseDataType == desiredDataType) {,                 elements = (Object[])java.lang.reflect.Array.newInstance(baseDataType.getJavaClass(), noOfElements);,             } else {,                 elements = (Object[])java.lang.reflect.Array.newInstance(desiredDataType.getJavaClass(), noOfElements);,             },             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             for (int i = 0; i < noOfElements; i++) {,                 ptr.set(bytes, offset + i * elemLength, elemLength);,                 if (baseDataType == desiredDataType) {,                     elements[i] = baseDataType.toObject(ptr, sortOrder);,                 } else {,                     elements[i] = desiredDataType.toObject(ptr, baseDataType, sortOrder);,                 },             },         },         if(baseDataType == desiredDataType) {,             return PArrayDataType.instantiatePhoenixArray(baseDataType, elements);,         } else {,             return PArrayDataType.instantiatePhoenixArray(desiredDataType, elements);,         },     }, 	,     public static PhoenixArray instantiatePhoenixArray(PDataType actualType, Object[] elements) {,         return PDataType.instantiatePhoenixArray(actualType, elements);,     }, 	, 	public int compareTo(Object lhs, Object rhs) {, 		PhoenixArray lhsArr = (PhoenixArray) lhs;, 		PhoenixArray rhsArr = (PhoenixArray) rhs;, 		if(lhsArr.equals(rhsArr)) {, 			return 0;, 		}, 		return 1;, 	}, , 	public static int getArrayLength(ImmutableBytesWritable ptr,, 			PDataType baseType, Integer maxLength) {, 		byte[] bytes = ptr.get();, 		if(baseType.isFixedWidth()) {, 		    int elemLength = maxLength == null ? baseType.getByteSize() : maxLength;, 			return (ptr.getLength() / elemLength);, 		}, 		return Bytes.toInt(bytes, (ptr.getOffset() + ptr.getLength() - (Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT)));, 	}, ,     public static int estimateSize(int size, PDataType baseType) {,         if(baseType.isFixedWidth()) {,             return baseType.getByteSize() * size;,         } else {,             return size * ValueSchema.ESTIMATED_VARIABLE_LENGTH_SIZE;,         },         ,     },     ,     public Object getSampleValue(PDataType baseType, Integer arrayLength, Integer elemLength) {,         Preconditions.checkArgument(arrayLength == null || arrayLength >= 0);,         if (arrayLength == null) {,             arrayLength = 1;,         },         Object[] array = new Object[arrayLength];,         for (int i = 0; i < arrayLength; i++) {,             array[i] = baseType.getSampleValue(elemLength, arrayLength);,         },         return instantiatePhoenixArray(baseType, array);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,toObject,587-587,[            if (!(o instanceof Long) || o == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,toObject,750-750,[          if (!(o instanceof Long) || o == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,toObject,897-897,[          if(!(o instanceof Long) || o == null) {],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,1146-1146,[                return -((BigDecimal)rhs).compareTo(BigDecimal.valueOf(((Number)lhs).doubleValue()));],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/PDataType.java,isSizeCompatible,1606-1606,[                maxLength = v.precision();],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/PDataType.java,isSizeCompatible,1607-1607,[                scale = v.scale();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/PDataType.java,coerceBytes,1627-1627,[                super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength, desiredScale, expectedModifier);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/PDataType.java,isSizeCompatible,1613-1613,[            if (desiredMaxLength != null && desiredScale != null && maxLength != null && scale != null &&],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/schema/PDataType.java,isCoercibleTo,1555-1555,[                        } catch(Exception e) {],,isCoercibleTo,1566-1566,[                        } catch(Exception e) {],,isCoercibleTo,1575-1575,[                        } catch(Exception e) {],,isCoercibleTo,1584-1584,[                        } catch(Exception e) {],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/PDataType.java,compareTo,1496-1496,[            return -rhsType.compareTo(rhs, lhs, this);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6287-6290,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveBytePhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6706-6710,[            return new PhoenixArrayFactory() {,                 ,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6630-6633,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveDoublePhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6518-6521,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveFloatPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6081-6084,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveIntPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,5970-5973,[            return new PhoenixArrayFactory() {,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray.PrimitiveLongPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6189-6192,[          return new PhoenixArrayFactory() {,               @Override,               public PhoenixArray newArray(PDataType type, Object[] elements) {,                   return new PhoenixArray.PrimitiveShortPhoenixArray(type, elements);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PDataType.java,,6728-6732,[            return new PhoenixArrayFactory() {,                 ,                 @Override,                 public PhoenixArray newArray(PDataType type, Object[] elements) {,                     return new PhoenixArray(type, elements);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/schema/PDataTypeForArraysTest.java,testVariableLengthArrayWithElementsMoreThanShortMax,313-313,[	            str += "-";],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,getSerializedBytes,45-45,[        return serializedBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,toBytes,49-49,[        return nameBytesValue;],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/phoenix/schema/PMetaDataImpl.java,clone,234-234,[        return new PMetaDataImpl(this.metaData);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PMetaDataImpl.java,,185-199,[                return new Iterator<PTable>() {, ,                     @Override,                     public boolean hasNext() {,                         return iterator.hasNext();,                     }, ,                     @Override,                     public PTable next() {,                         return iterator.next().table;,                     }, ,                     @Override,                     public void remove() {,                         throw new UnsupportedOperationException();],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/schema/PNameImpl.java,getBytesPtr,74-76,[        if (data.ptr == null) {,             synchronized (data.bytesName) {,                 if (data.ptr == null) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/schema/PTable.java,fromToken,107-107,[            return IndexType.valueOf(token.trim().toUpperCase());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,95-95,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,137-137,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,53-53,[            return byteValue;],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,231-231,[		if (this.numElements != ((PhoenixArray) obj).numElements) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/PhoenixArray.java,boundaryCheck,156-156,[		if ((--index) + count > arr.length) {],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,231-237,[		if (this.numElements != ((PhoenixArray) obj).numElements) {, 			return false;, 		}, 		if (this.baseType != ((PhoenixArray) obj).baseType) {, 			return false;, 		}, 		return Arrays.deepEquals((Object[]) this.array,],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/schema/PhoenixArray.java,<init>,96-96,[		this.numElements = elements.length;],,<init>,88-88,[    		    if (elements != null && elements.length > 0) {],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,541-541,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,526-526,[			return booleanArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,541-547,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((boolean[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,541-547,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((boolean[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,531-531,[			return this.baseType.estimateByteSize(booleanArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,536-536,[			return this.baseType.toBytes(booleanArr[pos]);],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,498-498,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,483-483,[			return byteArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,498-504,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((byte[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,498-504,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((byte[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,488-488,[			return this.baseType.estimateByteSize(byteArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,493-493,[			return this.baseType.toBytes(byteArr[pos]);],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,412-412,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,397-397,[			return doubleArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,412-418,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((double[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,412-418,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((double[]) this.array,],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,455-455,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,440-440,[			return floatArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,455-461,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((float[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,455-461,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((float[]) this.array,],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,283-283,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,268-268,[			return intArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,283-289,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((int[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,283-289,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((int[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,273-273,[			return this.baseType.estimateByteSize(intArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,278-278,[			return this.baseType.toBytes(intArr[pos]);],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,368-368,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,354-354,[			return longArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,368-374,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((long[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,368-374,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((long[]) this.array,],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/schema/PhoenixArray.java,equals,326-326,[			if (this.numElements != ((PhoenixArray) obj).numElements) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PhoenixArray.java,convertObjectArrayToPrimitiveArray,311-311,[			return shortArr;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/schema/PhoenixArray.java,equals,326-332,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((short[]) this.array,],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/schema/PhoenixArray.java,equals,326-332,[			if (this.numElements != ((PhoenixArray) obj).numElements) {, 				return false;, 			}, 			if (this.baseType != ((PhoenixArray) obj).baseType) {, 				return false;, 			}, 			return Arrays.equals((short[]) this.array,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,estimateByteSize,316-316,[			return this.baseType.estimateByteSize(shortArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/PhoenixArray.java,toBytes,321-321,[			return this.baseType.toBytes(shortArr[pos]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,56-56,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,65-65,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,52-52,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,61-61,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getSchemaName,67-67,[            c = this.schemaName == that.getSchemaName() ? 0 : this.schemaName == null ? -1 : that.getSchemaName() == null ? 1 : this.schemaName.compareTo(that.getSchemaName());],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getTenantId,65-65,[        int c = this.tenantId == that.getTenantId() ? 0 : this.tenantId == null ? -1 : that.getTenantId() == null ? 1 : this.tenantId.compareTo(that.getTenantId());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/schema/SortOrderTest.java,descSortOrderTransformsOp,59-79,[	    	switch (op) {, 			case EQUAL:, 				assertSame(CompareOp.EQUAL, oppositeOp);, 				break;, 			case GREATER:, 				assertSame(CompareOp.LESS, oppositeOp);, 				break;, 			case GREATER_OR_EQUAL:, 				assertSame(CompareOp.LESS_OR_EQUAL, oppositeOp);, 				break;, 			case LESS:, 				assertSame(CompareOp.GREATER, oppositeOp);, 				break;, 			case LESS_OR_EQUAL:, 				assertSame(CompareOp.GREATER_OR_EQUAL, oppositeOp);, 				break;, 			case NOT_EQUAL:, 				assertSame(CompareOp.NOT_EQUAL, oppositeOp);, 				break;, 			case NO_OP:, 				assertSame(CompareOp.NO_OP, oppositeOp);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/ValueBitSetTest.java,,35-54,[                PDatum datum = new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return fieldIndex <= nNotNull;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.values()[fieldIndex % PDataType.values().length];,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     }, 					@Override, 					public SortOrder getSortOrder() {, 						return SortOrder.getDefault();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/stat/StatisticsCollector.java,collectStatsForSplitRegions,227-227,[            count = scanRegion(scanner, count);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/stat/StatisticsCollector.java,getGuidePosts,332-332,[        return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/stat/StatisticsCollector.java,getMaxKey,310-310,[        return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/stat/StatisticsCollector.java,getMinKey,315-315,[        return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/stat/StatisticsCollector.java,getInternalScanner,182-182,[            if (scanner != null) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/stat/StatisticsScanner.java,close,105-105,[            toThrow = e;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/schema/stat/StatisticsScanner.java,<init>,45-45,[        this.family = family;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/tuple/SingleKeyValueTuple.java,toString,86-86,[        return "SingleKeyValueTuple[" + keyValue == null ? keyPtr.get() == UNITIALIZED_KEY_BUFFER ? "null" : Bytes.toStringBinary(keyPtr.get(),keyPtr.getOffset(),keyPtr.getLength()) : keyValue.toString() + "]";],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,65-65,[    return conn.prepareStatement(sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,230-230,[    return conn.prepareStatement(sql, autoGeneratedKeys);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,161-161,[    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,219-219,[    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,235-235,[    return conn.prepareStatement(sql, columnIndexes);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegatingConnection.java,prepareStatement,240-240,[    return conn.prepareStatement(sql, columnNames);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/trace/PhoenixMetricsSink.java,,106-186,[    return new PhoenixMetricsRecord() {, ,       @Override,       public String name() {,         return record.name();,       }, ,       @Override,       public String description() {,         return record.description();,       }, ,       @Override,       public Iterable<PhoenixAbstractMetric> metrics() {,         final Iterable<AbstractMetric> iterable = record.metrics();,         return new Iterable<PhoenixAbstractMetric>(){, ,           @Override,           public Iterator<PhoenixAbstractMetric> iterator() {,             final Iterator<AbstractMetric> iter = iterable.iterator();,             return Iterators.transform(iter, new Function<AbstractMetric, PhoenixAbstractMetric>() {, ,               @Override,               @Nullable,               public PhoenixAbstractMetric apply(@Nullable final AbstractMetric input) {,                 if (input == null) {,                   return null;,                 },                 return new PhoenixAbstractMetric() {, ,                   @Override,                   public Number value() {,                     return input.value();,                   }, ,                   @Override,                   public String getName() {,                     return input.name();,                   }, ,                   @Override,                   public String toString() {,                     return input.toString();,                   },                 };,               },             });,           },         };,       }, ,       @Override,       public Collection<PhoenixMetricTag> tags() {,         Collection<PhoenixMetricTag> tags = new ArrayList<PhoenixMetricTag>();,         Collection<MetricsTag> origTags = record.tags();,         for (final MetricsTag tag : origTags) {,           tags.add(new PhoenixMetricTag() {, ,             @Override,             public String name() {,               return tag.name();,             }, ,             @Override,             public String description() {,               return tag.description();,             }, ,             @Override,             public String value() {,               return tag.value();,             }, ,             @Override,             public String toString() {,               return tag.toString();,             }, ,           });,         },         return tags;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/trace/PhoenixMetricsWriterTest.java,,90-130,[    Mockito.doAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         PhoenixMetricsRecord record = (PhoenixMetricsRecord) invocation.getArguments()[0];,         //validate that we got the right fields in the record,         assertEquals("phoenix.987654", record.name());,         assertEquals("Some generic trace", record.description());,         int count = 0;,         for (PhoenixAbstractMetric metric : record.metrics()) {,           count++;,           //find the matching metric in the list,           boolean found = false;,           for(AbstractMetric expected : metrics){,             if(expected.name().equals(metric.getName())){,               found = true;,               // make sure the rest of the info matches,               assertEquals("Metric value mismatch", expected.value(), metric.value());,             },           },           assertTrue("Didn't find an expected metric to match "+metric, found);,         },         assertEquals("Number of metrics is received is wrong", metrics.size(), count);, ,         count = 0;,         for (PhoenixMetricTag tag : record.tags()) {,           count++;,           // find the matching metric in the list,           boolean found = false;,           for (MetricsTag expected : tags) {,             if (expected.name().equals(tag.name())) {,               found = true;,               // make sure the rest of the info matches,               assertEquals("Tag value mismatch", expected.value(), tag.value());,               assertEquals("Tag description mismatch", expected.description(), tag.description());,             },           },           assertTrue("Didn't find an expected metric to match " + tag, found);,         },         assertEquals("Number of tags is received is wrong", tags.size(), count);,         return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/trace/PhoenixTableMetricsWriter.java,lazyInitialize,109-109,[            } catch (Exception e) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/PhoenixTableMetricsWriter.java,createTable,157-157,[        PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/PhoenixTableMetricsWriter.java,addMetrics,247-247,[            PreparedStatement ps = conn.prepareStatement(stmt);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/trace/PhoenixTableMetricsWriterIT.java,testCreatesTable,58-58,[        } catch (Exception e) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/trace/PhoenixTracingEndToEndIT.java,testClientServerIndexingTracing,207-207,[        updated.await(200, TimeUnit.SECONDS);// should be way more than GC pauses],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/trace/TraceMetricSource.java,,139-139,[    marker.add(new MetricsTag(new MetricsInfoImpl("stat", "num spans"), Integer],,,144-144,[      for (Metric span : spans) {],,,156-156,[      spans = new ArrayList<Metric>();],,,129-129,[      spans.add(builder);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/trace/TraceMetricSource.java,,170-195,[  private class Metric {, ,     List<Pair<MetricsInfo, Long>> counters = new ArrayList<Pair<MetricsInfo, Long>>();,     List<MetricsTag> tags = new ArrayList<MetricsTag>();,     private String id;,     private String desc;, ,     public Metric(Span span) {,       this.id = Long.toString(span.getTraceId());,       this.desc = span.getDescription();,     }, ,     /**,      * @param metricsInfoImpl,      * @param startTimeMillis,      */,     public void addCounter(MetricsInfo metricsInfoImpl, long startTimeMillis) {,       counters.add(new Pair<MetricsInfo, Long>(metricsInfoImpl, startTimeMillis));,     }, ,     /**,      * @param metricsTag,      */,     public void add(MetricsTag metricsTag) {,       tags.add(metricsTag);,     }],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/trace/TraceReader.java,getDynamicCountColumns,219-219,[        ResultSet results = conn.createStatement().executeQuery(request);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/TraceReader.java,readAll,94-94,[        ResultSet results = conn.prepareStatement(query).executeQuery();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/trace/TraceReader.java,hashCode,318-318,[            return new Long(id).hashCode();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/trace/TraceReader.java,hashCode,251-251,[            return new Long(traceid).hashCode();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/PhoenixTableMetricsWriterIT.java,writeMetrics,108-108,[        assertEquals("Didn't get expected orphaned spans!" + trace.orphans, 1, trace.orphans.size());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/TraceReader.java,toString,282-282,[            if (orphans.size() > 0) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/trace/TracingCompat.java,addAnnotation,52-52,[        span.addKVAnnotation(message.getBytes(), Bytes.toBytes(Integer.toString(value)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/trace/TracingCompat.java,readAnnotation,56-56,[        return new Pair<String, String>(new String(key), Bytes.toString(value));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/trace/util/NullSpan.java,,33-33,[  public static Span INSTANCE = new NullSpan();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/util/Tracing.java,after,300-300,[            scope.close();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/Base62Encoder.java,,25-25,[    public static final char[] digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/BitSet.java,<init>,110-110,[        this.bits = bits;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,nextKey,394-394,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,previousKey,435-435,[            return null;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/util/FirstLastNthValueDataContainer.java,,56-56,[        this.offset = offset;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/FirstLastNthValueDataContainer.java,getPayload,130-130,[        Entry<byte[], byte[]> firstEntry = data.firstEntry();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/GeneratePerformanceData.java,main,54-54,[                        "\n").getBytes());],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/IndexUtil.java,,68-68,[    public static final byte[] INDEX_COLUMN_NAME_SEP_BYTES = Bytes.toBytes(INDEX_COLUMN_NAME_SEP);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/IndexUtil.java,deserializeDataTableColumnsToJoin,279-279,[        if (columnsBytes == null) return null;],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/phoenix/util/KeyValueUtil.java,,165-205,[	private static class SearchComparator implements Comparator<Cell> {, 	  private final KeyValueBuilder kvBuilder;,     private final byte[] row;,     private final byte[] family;,     private final byte[] qualifier;,     private final int rowOff;,     private final int rowLen;, ,     public SearchComparator(KeyValueBuilder kvBuilder, byte[] r, int rOff, int rLen, byte[] f, byte[] q) {,       this.kvBuilder = kvBuilder;,       row = r;,       family = f;,       qualifier = q;,       rowOff = rOff;,       rowLen = rLen;,     }, , 		@Override,     public int compare(final Cell l, final Cell ignored) {, 			assert ignored == null;,       KVComparator comparator = kvBuilder.getKeyValueComparator();, 			// row, 			int val = comparator.compareRows(l.getRowArray(), l.getRowOffset(), , 			  l.getRowLength(), row, rowOff, rowLen);, 			if (val != 0) {, 				return val;, 			}, 			// family, 			val = kvBuilder.compareFamily(l, family, 0, family.length);, 			if (val != 0) {, 				return val;, 			}, 			// qualifier,       val = kvBuilder.compareQualifier(l, qualifier, 0, qualifier.length);, 			if (val != 0) {, 				return val;, 			}, 			// We want the latest TS and type, so we get the first one., 			// This assumes they KV are passed in ordered from latest to earliest,, 			// as that's the order the server sends them., 			return 1;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,408-408,[    public static final byte[] IS_LOCAL_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_LOCAL_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,405-405,[    public static final byte[] IS_VIEW_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_VIEW_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,70-70,[    public static final byte[] LOCAL_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(LOCAL_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,68-68,[    public static final byte[] VIEW_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,75-75,[    public static final byte[] PARENT_TABLE_KEY_BYTES = Bytes.toBytes("PARENT_TABLE");],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,72-72,[    public static final byte[] VIEW_INDEX_SEQUENCE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_SEQUENCE_PREFIX);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/MetaDataUtil.java,getParentTableName,140-140,[            return null;],,getParentTableName,150-150,[            return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/MetaDataUtil.java,deleteViewIndexSequences,349-349,[        connection.createStatement().executeUpdate("DELETE FROM " + PhoenixDatabaseMetaData.SEQUENCE_TABLE_NAME + ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/PhoenixContextExecutorTest.java,,35-41,[            PhoenixContextExecutor.callWithoutPropagation(new Callable<Object>() {,                 @Override,                 public Object call() {,                     assertEquals(,                             PhoenixContextExecutor.class.getClassLoader(),,                             Thread.currentThread().getContextClassLoader());,                     return null;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/PhoenixRuntime.java,getColumnInfo,362-362,[        columnName = columnName.trim().toUpperCase(); ],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/PhoenixRuntime.java,main,148-148,[                    PhoenixRuntime.executeStatements(conn,],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/util/PhoenixRuntime.java,usageError,608-608,[            System.exit(-1);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/util/PropertiesUtilTest.java,verifyValidCopy,50-50,[        copy.containsKey(PhoenixRuntime.TENANT_ID_ATTRIB); //This checks the map and NOT the defaults in java.util.Properties],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/util/QueryUtil.java,apply,108-108,[                                        return getEscapedFullColumnName(columnInfo.getColumnName());],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ScanUtil.java,newScan,114-114,[            TreeMap<byte [], NavigableSet<byte []>> existingMap = (TreeMap<byte[], NavigableSet<byte[]>>)scan.getFamilyMap();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/compile/ScanRanges.java,,43-43,[    public static final ScanRanges EVERYTHING = new ScanRanges(null,ScanUtil.SINGLE_COLUMN_SLOT_SPAN,EVERYTHING_RANGES, false, false);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ScanUtil.java,getKey,267-267,[            return null;],,getKey,279-279,[            return null;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/ScanUtilTest.java,<init>,107-107,[        this.expectedKey = expectedKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,58-77,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.CHAR;,                     },                     @Override,                     public Integer getMaxLength() {,                         return width;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,81-100,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.VARCHAR;,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/SchemaUtil.java,normalizeIdentifier,141-141,[        return name.toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/SchemaUtil.java,addMetaDataColumn,457-457,[                stmt.executeUpdate("ALTER TABLE SYSTEM.\"TABLE\" ADD IF NOT EXISTS " + columnDef);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,44-44,[    public final static String[] LIKE_ESCAPE_SEQS = new String[]{"\\"+SINGLE_CHAR_LIKE, "\\"+MULTI_CHAR_LIKE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,45-45,[    public final static String[] LIKE_UNESCAPED_SEQS = new String[]{""+SINGLE_CHAR_LIKE, ""+MULTI_CHAR_LIKE};],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/StringUtilTest.java,testLpad,26-26,[        byte[] input = inputString.getBytes();],,testLpad,27-27,[        byte[] fill = fillString.getBytes();],,testLpad,29-29,[        assertArrayEquals("Incorrect output of lpad", expectedOutput.getBytes(), output);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,139-139,[    public final static List<String> ENTITYHISTIDS = Lists.newArrayList(ENTITYHISTID1, ENTITYHISTID2, ENTITYHISTID3, ENTITYHISTID4, ENTITYHISTID5, ENTITYHISTID6, ENTITYHISTID7, ENTITYHISTID8, ENTITYHISTID9);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,127-127,[    public final static List<String> PARENTIDS = Lists.newArrayList(PARENTID1, PARENTID2, PARENTID3, PARENTID4, PARENTID5, PARENTID6, PARENTID7, PARENTID8, PARENTID9);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,97-97,[    public final static byte[] A = Bytes.toBytes(A_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,99-99,[    public final static byte[] B = Bytes.toBytes(B_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,101-101,[    public final static byte[] C = Bytes.toBytes(C_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,92-92,[    public static final byte[] CF = Bytes.toBytes(CF_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,103-103,[    public final static byte[] D = Bytes.toBytes(D_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,105-105,[    public final static byte[] E = Bytes.toBytes(E_VALUE);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,createTable,431-431,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,upsertRow,406-406,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,getBuffer,36-36,[        return buf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,toByteArray,41-41,[            return buf;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,testExecute_NullField,125-125,[        verify(preparedStatement).setNull(3, columnInfoList.get(2).getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,tearDown,73-73,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,tearDown,47-47,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_EmptyString,52-52,[        Array emptyArray = converter.toArray("");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_MultipleElements,67-67,[        Array multiElementArray = converter.toArray("one:two");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_SingleElement,59-59,[        Array singleElementArray = converter.toArray("value");],,

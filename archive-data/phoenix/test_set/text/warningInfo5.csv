CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/hadoop/hbase/ipc/PhoenixIndexRpcSchedulerTest.java,testIndexPriorityWritesToIndexHandler,55-55,[        queue.poll(20, TimeUnit.SECONDS);],,testIndexPriorityWritesToIndexHandler,61-61,[        queue.poll(20, TimeUnit.SECONDS);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,131-131,[        this.regionStartKeyInHFile = regionStartKeyInHFile;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,129-129,[        this.viewConstants = viewConstants;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,98-98,[        this.regionStartKeyInHFile = regionStartKeyInHFile;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,<init>,96-96,[        this.viewConstants = viewConstants;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReader.java,midkey,498-498,[        return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReaderGenerator.java,preStoreFileReaderOpen,113-113,[                    if (mergeRegions == null || mergeRegions.getFirst() == null) return reader;],,preStoreFileReaderOpen,119-119,[                        return reader;],,preStoreFileReaderOpen,152-152,[                if(indexMaintainers.isEmpty()) return reader;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexHalfStoreFileReaderGenerator.java,preStoreFileReaderOpen,94-94,[            if(scvf != null) scan.setFilter(scvf);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,<init>,137-137,[    this.splitrow = splitrow;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,createDaughters,267-267,[      if (metaEntries == null || metaEntries.isEmpty()) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,getZKNode,531-531,[    } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/hadoop/hbase/regionserver/IndexSplitTransaction.java,transitionZKNode,452-452,[      } catch (Exception e) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/hadoop/hbase/regionserver/LocalIndexSplitter.java,preRollBackSplit,191-191,[            if (st != null) {],,
STYLE,DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,setUp,99-99,[    Path hbaseRootDir = UTIL.getDataTestDir();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,setUp,98-105,[    setupCluster();,     Path hbaseRootDir = UTIL.getDataTestDir();,     this.conf = HBaseConfiguration.create(UTIL.getConfiguration());,     this.fs = UTIL.getDFSCluster().getFileSystem();,     this.hbaseRootDir = new Path(this.conf.get(HConstants.HBASE_DIR));,     this.oldLogDir = new Path(this.hbaseRootDir, HConstants.HREGION_OLDLOGDIR_NAME);,     this.logDir = new Path(this.hbaseRootDir, HConstants.HREGION_LOGDIR_NAME);,   }],,setup,44-56,[		props = new Properties();, 		spoolDir =  Files.createTempDir();, 		props.put(QueryServices.SPOOL_DIRECTORY, spoolDir.getPath());,         props.setProperty(QueryServices.SPOOL_THRESHOLD_BYTES_ATTRIB, Integer.toString(1));, 		conn = DriverManager.getConnection(getUrl(), props);, 		Statement stmt = conn.createStatement();, 		stmt.execute("CREATE TABLE test (ID varchar NOT NULL PRIMARY KEY) SPLIT ON ('EA','EZ')");, 		stmt.execute("UPSERT INTO test VALUES ('AA')");, 		stmt.execute("UPSERT INTO test VALUES ('EB')");    , 		stmt.execute("UPSERT INTO test VALUES ('FA')");    , 		stmt.close();, 		conn.commit();, 	}],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/hadoop/hbase/regionserver/wal/WALReplayWithIndexWritesAndCompressedWALIT.java,deleteDir,154-154,[    if (this.fs.exists(p)) {],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/Sandbox.java,main,60-60,[        System.out.printf("\tYou can now connect with url 'jdbc:phoenix:localhost:%d'\n" +],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/GlobalCache.java,,85-88,[                            .weigher(new Weigher<ImmutableBytesPtr, PMetaDataEntity>() {,                                 @Override,                                 public int weigh(ImmutableBytesPtr key, PMetaDataEntity table) {,                                     return SizedUtil.IMMUTABLE_BYTES_PTR_SIZE + key.getLength() + table.getEstimatedSize();],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,addServerCache,289-289,[        if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Cache " + cacheId + " successfully added to servers.", connection));}],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/ServerCacheClient.java,removeServerCache,315-315,[    		if (LOG.isDebugEnabled()) {LOG.debug(addCustomAnnotations("Removing Cache " + cacheId + " from servers.", connection));}],,
CORRECTNESS,RV_EXCEPTION_NOT_THROWN,org/apache/phoenix/cache/ServerCacheClient.java,call,209-209,[                                                            new IOException(e);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/ServerCacheClient.java,getId,135-135,[            return id;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/ServerCacheClient.java,<init>,119-119,[            this.id = id;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/cache/TenantCacheImpl.java,,67-71,[                        .removalListener(new RemovalListener<ImmutableBytesPtr, Closeable>(){,                             @Override,                             public void onRemoval(RemovalNotification<ImmutableBytesPtr, Closeable> notification) {,                                 Closeables.closeAllQuietly(Collections.singletonList(notification.getValue()));,                             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/cache/aggcache/SpillFile.java,close,79-79,[                    file.delete();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/cache/aggcache/SpillManager.java,loadEntry,279-279,[        return null;],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_HASHCODE,org/apache/phoenix/cache/aggcache/SpillManager.java,getPartition,251-251,[        return Math.abs(key.hashCode()) % numSpillFiles;],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/phoenix/cache/aggcache/SpillManager.java,getAggregators,201-201,[            input.skip(keyLength);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,81-81,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,getValue,72-72,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,87-87,[            return aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,<init>,68-68,[            this.aggs = aggs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/cache/aggcache/SpillManager.java,setValue,86-86,[            this.aggs = arg0;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,191-191,[        newDirectory = null;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,redistribute,143-143,[        byteMap = null;],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/cache/aggcache/SpillMap.java,doubleDirectory,194-194,[        b2Index = (keyNew.hashCode() & ((1 << globalDepth) - 1)) | (1 << globalDepth);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/cache/aggcache/SpillMap.java,get,208-208,[        if (!(key instanceof ImmutableBytesPtr)) {],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/phoenix/cache/aggcache/SpillMap.java,flushBuffer,383-383,[                buffer = null;],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/cache/aggcache/SpillableGroupByCache.java,next,371-371,[                            + aggs.toString() + " value = " + Bytes.toStringBinary(value));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateFunctionCompiler.java,,43-65,[        return new BaseMutationPlan(context, create.getOperation()) {, ,             @Override,             public MutationState execute() throws SQLException {,                 try {,                     return client.createFunction(create);,                 } finally {,                     if (client.getConnection() != connection) {,                         client.getConnection().close();,                     },                 },             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE",                         + (create.getFunctionInfo().isReplace() ? " OR REPLACE" : ""),                         + " FUNCTION"));,             }, ,             @Override,             public StatementContext getContext() {,                 return context;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateIndexCompiler.java,,82-90,[        return new BaseMutationPlan(context, operation) {,             @Override,             public MutationState execute() throws SQLException {,                 return client.createIndex(create, splits);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE INDEX"));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateSequenceCompiler.java,,235-244,[        return new BaseMutationPlan(context, operation) {, ,             @Override,             public MutationState execute() throws SQLException {,                 return client.createSequence(sequence, startsWith, incrementBy, cacheSize, minValue, maxValue);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE SEQUENCE"));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,133-136,[                            new DelegateConnectionQueryServices(connection.getQueryServices()) {,                                 @Override,                                 public PMetaData addTable(PTable table, long resolvedTime) throws SQLException {,                                     return connection.addTable(table, resolvedTime);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/CreateTableCompiler.java,,178-193,[        return new BaseMutationPlan(context, operation) {, ,             @Override,             public MutationState execute() throws SQLException {,                 try {,                     return client.createTable(create, splits, parent, viewStatement, viewType, viewColumnConstants, isViewColumnReferenced);,                 } finally {,                     if (client.getConnection() != connection) {,                         client.getConnection().close();,                     },                 },             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("CREATE TABLE"));],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,defaultReturn,235-235,[            return null;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/compile/CreateTableCompiler.java,visitLeave,260-260,[                return null;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/DeleteCompiler.java,compile,398-398,[        final ColumnResolver resolver = resolverToBe;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/DeleteCompiler.java,compile,315-315,[        Set<PTable> immutableIndex = Collections.emptySet();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/DropSequenceCompiler.java,,45-54,[        return new BaseMutationPlan(context, operation) {           , ,             @Override,             public MutationState execute() throws SQLException {,                 return client.dropSequence(sequence);,             }, ,             @Override,             public ExplainPlan getExplainPlan() throws SQLException {,                 return new ExplainPlan(Collections.singletonList("DROP SEQUENCE"));],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/compile/ExpressionCompiler.java,visitLeave,1270-1270,[        Object[] elements = (Object[]) java.lang.reflect.Array.newInstance(theArrayElemDataType.getJavaClass(), children.size());],,visitLeave,1250-1250,[        if (isChildTypeUnknown && arrayElemDataType != null && arrayElemDataType.isCoercibleTo(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,753-781,[                new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children, final Expression expression) {,                 PDataType type = expression.getDataType();,                 if (type != null && type.isCoercibleTo(PDate.INSTANCE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDecimal.INSTANCE;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,827-827,[                	return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,784-833,[        new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 boolean foundDate = false;,                 Determinism determinism = Determinism.ALWAYS;,                 PDataType theType = null;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue; ,                     } else if (type.isCoercibleTo(PTimestamp.INSTANCE)) {,                         if (foundDate) {,                             throw TypeMismatchException.newException(type, node.toString());,                         },                         if (theType == null || (theType != PTimestamp.INSTANCE && theType != PUnsignedTimestamp.INSTANCE)) {,                             theType = type;,                         },                         foundDate = true;,                     }else if (type == PDecimal.INSTANCE) {,                         if (theType == null || !theType.isCoercibleTo(PTimestamp.INSTANCE)) {,                             theType = PDecimal.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         if (theType == null) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                     return new DecimalAddExpression(children);,                 } else if (theType == PLong.INSTANCE) {,                     return new LongAddExpression(children);,                 } else if (theType == PDouble.INSTANCE) {,                     return new DoubleAddExpression(children);,                 } else if (theType == null) {,                 	return LiteralExpression.newConstant(null, theType, determinism);,                 } else if (theType == PTimestamp.INSTANCE || theType == PUnsignedTimestamp.INSTANCE) {,                     return new TimestampAddExpression(children);,                 } else if (theType.isCoercibleTo(PDate.INSTANCE)) {,                     return new DateAddExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,846-905,[        return visitLeave(node, children, new ArithmeticExpressionBinder() {,             @Override,             public PDatum getBindMetaData(int i, List<Expression> children,,                     final Expression expression) {,                 final PDataType type;,                 // If we're binding the first parameter and the second parameter,                 // is a date,                 // we know that the first parameter must be a date type too.,                 if (i == 0 && (type = children.get(1).getDataType()) != null,                         && type.isCoercibleTo(PDate.INSTANCE)) {,                     return new PDatum() {,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return type;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         }                        ,                     };,                 } else if (expression.getDataType() != null,                         && expression.getDataType().isCoercibleTo(,                     PDate.INSTANCE)) {,                     return new PDatum() { // Same as with addition,                         @Override,                         public boolean isNullable() {,                             return expression.isNullable();,                         },                         @Override,                         public PDataType getDataType() {,                             return PDecimal.INSTANCE;,                         },                         @Override,                         public Integer getMaxLength() {,                             return expression.getMaxLength();,                         },                         @Override,                         public Integer getScale() {,                             return expression.getScale();,                         },                         @Override,                         public SortOrder getSortOrder() {,                             return expression.getSortOrder();,                         },                     };,                 },                 // Otherwise just go with what was calculated for the expression,                 return expression;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/ExpressionCompiler.java,create,1000-1000,[                	return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,907-1006,[        }, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node,,                     List<Expression> children) throws SQLException {,                 int i = 0;,                 PDataType theType = null;,                 Expression e1 = children.get(0);,                 Expression e2 = children.get(1);,                 Determinism determinism = e1.getDeterminism().combine(e2.getDeterminism());,                 PDataType type1 = e1.getDataType();,                 PDataType type2 = e2.getDataType();,                 // TODO: simplify this special case for DATE conversion,                 /**,                  * For date1-date2, we want to coerce to a LONG because this,                  * cannot be compared against another date. It has essentially,                  * become a number. For date1-5, we want to preserve the DATE,                  * type because this can still be compared against another date,                  * and cannot be multiplied or divided. Any other time occurs is,                  * an error. For example, 5-date1 is an error. The nulls occur if,                  * we have bind variables.,                  */,                 boolean isType1Date = ,                         type1 != null ,                         && type1 != PTimestamp.INSTANCE,                         && type1 != PUnsignedTimestamp.INSTANCE,                         && type1.isCoercibleTo(PDate.INSTANCE);,                 boolean isType2Date = ,                         type2 != null,                         && type2 != PTimestamp.INSTANCE,                         && type2 != PUnsignedTimestamp.INSTANCE,                         && type2.isCoercibleTo(PDate.INSTANCE);,                 if (isType1Date || isType2Date) {,                     if (isType1Date && isType2Date) {,                         i = 2;,                         theType = PDecimal.INSTANCE;,                     } else if (isType1Date && type2 != null,                             && type2.isCoercibleTo(PDecimal.INSTANCE)) {,                         i = 2;,                         theType = PDate.INSTANCE;,                     } else if (type1 == null || type2 == null) {,                         /*,                          * FIXME: Could be either a Date or BigDecimal, but we,                          * don't know if we're comparing to a date or a number,                          * which would be disambiguate it.,                          */,                         i = 2;,                         theType = null;,                     },                 } else if(type1 == PTimestamp.INSTANCE || type2 == PTimestamp.INSTANCE) {,                     i = 2;,                     theType = PTimestamp.INSTANCE;,                 } else if(type1 == PUnsignedTimestamp.INSTANCE || type2 == PUnsignedTimestamp.INSTANCE) {,                     i = 2;,                     theType = PUnsignedTimestamp.INSTANCE;,                 },                 ,                 for (; i < children.size(); i++) {,                     // This logic finds the common type to which all child types are coercible,                     // without losing precision.,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type == PDecimal.INSTANCE) {,                         // Coerce return type to DECIMAL from LONG or DOUBLE if DECIMAL child found,,                         // unless we're doing date arithmetic.,                         if (theType == null,                                 || !theType.isCoercibleTo(PDate.INSTANCE)) {,                             theType = PDecimal.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         // Coerce return type to DOUBLE from LONG if DOUBLE child found,,                         // unless we're doing date arithmetic or we've found another child of type DECIMAL,                         if (theType == null,                                 || (theType != PDecimal.INSTANCE && !theType.isCoercibleTo(PDate.INSTANCE) )) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                     return new DecimalSubtractExpression(children);,                 } else if (theType == PLong.INSTANCE) {,                     return new LongSubtractExpression(children);,                 } else if (theType == PDouble.INSTANCE) {,                     return new DoubleSubtractExpression(children);,                 } else if (theType == null) {,                 	return LiteralExpression.newConstant(null, theType, determinism);,                 } else if (theType == PTimestamp.INSTANCE || theType == PUnsignedTimestamp.INSTANCE) {,                     return new TimestampSubtractExpression(children);,                 } else if (theType.isCoercibleTo(PDate.INSTANCE)) {,                     return new DateSubtractExpression(children);,                 } else {,                     throw TypeMismatchException.newException(theType, node.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1019-1051,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 Determinism determinism = Determinism.ALWAYS;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDecimal.INSTANCE) {,                         theType = PDecimal.INSTANCE;,                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         if (theType == null) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                   return new DecimalMultiplyExpression( children);,                 } else if (theType == PLong.INSTANCE) {,                   return new LongMultiplyExpression( children);,                 } else if (theType == PDouble.INSTANCE) {,                   return new DoubleMultiplyExpression( children);,                 } else {,                   return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1079-1111,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 PDataType theType = null;,                 Determinism determinism = Determinism.ALWAYS;,                 for(int i = 0; i < children.size(); i++) {,                     Expression e = children.get(i);,                     determinism = determinism.combine(e.getDeterminism());,                     PDataType type = e.getDataType();,                     if (type == null) {,                         continue;,                     } else if (type == PDecimal.INSTANCE) {,                         theType = PDecimal.INSTANCE;,                     } else if (type.isCoercibleTo(PLong.INSTANCE)) {,                         if (theType == null) {,                             theType = PLong.INSTANCE;,                         },                     } else if (type.isCoercibleTo(PDouble.INSTANCE)) {,                         if (theType == null) {,                             theType = PDouble.INSTANCE;,                         },                     } else {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 if (theType == PDecimal.INSTANCE) {,                   return new DecimalDivideExpression( children);,                 } else if (theType == PLong.INSTANCE) {,                   return new LongDivideExpression( children);,                 } else if (theType == PDouble.INSTANCE) {,                   return new DoubleDivideExpression(children);,                 } else {,                   return LiteralExpression.newConstant(null, theType, determinism);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1124-1135,[        return visitLeave(node, children, null, new ArithmeticExpressionFactory() {,             @Override,             public Expression create(ArithmeticParseNode node, List<Expression> children) throws SQLException {,                 // ensure integer types,                 for(Expression child : children) {,                     PDataType type = child.getDataType();,                     if(type != null && !type.isCoercibleTo(PLong.INSTANCE)) {,                         throw TypeMismatchException.newException(type, node.toString());,                     },                 },                 ,                 return new ModulusExpression(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ExpressionCompiler.java,,1260-1263,[                            new DelegateDatum(arrayElemChild) {,                     @Override,                     public PDataType getDataType() {,                         return theArrayElemDataType;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/compile/ExpressionProjector.java,getValue,80-80,[                throw (SQLException) e.getCause();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/FromCompiler.java,resolveColumnFamily,705-705,[                    } catch (ColumnFamilyNotFoundException e) {}],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,551-551,[            if (!lType.isComparableTo(rType))],,getCommonType,558-558,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,556-556,[            if ((lType == null || lType.isCoercibleTo(PTinyint.INSTANCE))],,getCommonType,561-561,[            if ((lType == null || lType.isCoercibleTo(PSmallint.INSTANCE))],,getCommonType,563-563,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,566-566,[            if ((lType == null || lType.isCoercibleTo(PInteger.INSTANCE))],,getCommonType,568-568,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,571-571,[            if ((lType == null || lType.isCoercibleTo(PLong.INSTANCE))],,getCommonType,573-573,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,576-576,[            if ((lType == null || lType.isCoercibleTo(PDouble.INSTANCE))],,getCommonType,578-578,[                return lType == null ? rType : lType; // to preserve UNSIGNED type],,getCommonType,581-581,[            if ((lType == null || lType.isCoercibleTo(PDecimal.INSTANCE))],,getCommonType,586-586,[            if ((lType == null || lType.isCoercibleTo(PDate.INSTANCE))],,getCommonType,588-588,[                return lType == null ? rType : lType;],,getCommonType,591-591,[            if ((lType == null || lType.isCoercibleTo(PTimestamp.INSTANCE))],,getCommonType,593-593,[                return lType == null ? rType : lType;],,getCommonType,596-596,[            if ((lType == null || lType.isCoercibleTo(PVarchar.INSTANCE))],,getCommonType,601-601,[            if ((lType == null || lType.isCoercibleTo(PBoolean.INSTANCE))],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/compile/JoinCompiler.java,getCommonType,551-551,[            if (!lType.isComparableTo(rType))],,getCommonType,556-556,[            if ((lType == null || lType.isCoercibleTo(PTinyint.INSTANCE))],,getCommonType,561-561,[            if ((lType == null || lType.isCoercibleTo(PSmallint.INSTANCE))],,getCommonType,566-566,[            if ((lType == null || lType.isCoercibleTo(PInteger.INSTANCE))],,getCommonType,571-571,[            if ((lType == null || lType.isCoercibleTo(PLong.INSTANCE))],,getCommonType,576-576,[            if ((lType == null || lType.isCoercibleTo(PDouble.INSTANCE))],,getCommonType,581-581,[            if ((lType == null || lType.isCoercibleTo(PDecimal.INSTANCE))],,getCommonType,586-586,[            if ((lType == null || lType.isCoercibleTo(PDate.INSTANCE))],,getCommonType,591-591,[            if ((lType == null || lType.isCoercibleTo(PTimestamp.INSTANCE))],,getCommonType,596-596,[            if ((lType == null || lType.isCoercibleTo(PVarchar.INSTANCE))],,getCommonType,601-601,[            if ((lType == null || lType.isCoercibleTo(PBoolean.INSTANCE))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/phoenix/compile/JoinCompiler.java,,442-606,[    public class JoinSpec {,         private final JoinType type;,         private final List<EqualParseNode> onConditions;,         private final JoinTable joinTable;,         private final boolean singleValueOnly;,         private Set<TableRef> dependencies;,         private OnNodeVisitor onNodeVisitor;, ,         private JoinSpec(JoinType type, ParseNode onNode, JoinTable joinTable,,                 boolean singleValueOnly, ColumnResolver resolver) throws SQLException {,             this.type = type;,             this.onConditions = new ArrayList<EqualParseNode>();,             this.joinTable = joinTable;,             this.singleValueOnly = singleValueOnly;,             this.dependencies = new HashSet<TableRef>();,             this.onNodeVisitor = new OnNodeVisitor(resolver, onConditions, dependencies, joinTable, statement.getConnection());,             if (onNode != null) {,                 onNode.accept(this.onNodeVisitor);,             },         }, ,         public void addOnCondition(ParseNode node) throws SQLException {,             node.accept(onNodeVisitor);,         }, ,         public JoinType getType() {,             return type;,         }, ,         public List<EqualParseNode> getOnConditions() {,             return onConditions;,         }, ,         public JoinTable getJoinTable() {,             return joinTable;,         }, ,         public boolean isSingleValueOnly() {,             return singleValueOnly;,         }, ,         public Set<TableRef> getDependencies() {,             return dependencies;,         }, ,         public Pair<List<Expression>, List<Expression>> compileJoinConditions(StatementContext lhsCtx, StatementContext rhsCtx, boolean sortExpressions) throws SQLException {,             if (onConditions.isEmpty()) {,                 return new Pair<List<Expression>, List<Expression>>(,                         Collections.<Expression> singletonList(LiteralExpression.newConstant(1)),,                         Collections.<Expression> singletonList(LiteralExpression.newConstant(1)));,             }, ,             List<Pair<Expression, Expression>> compiled = Lists.<Pair<Expression, Expression>> newArrayListWithExpectedSize(onConditions.size());,             ExpressionCompiler lhsCompiler = new ExpressionCompiler(lhsCtx);,             ExpressionCompiler rhsCompiler = new ExpressionCompiler(rhsCtx);,             for (EqualParseNode condition : onConditions) {,                 lhsCompiler.reset();,                 Expression left = condition.getLHS().accept(lhsCompiler);,                 rhsCompiler.reset();,                 Expression right = condition.getRHS().accept(rhsCompiler);,                 PDataType toType = getCommonType(left.getDataType(), right.getDataType());,                 if (left.getDataType() != toType) {,                     left = CoerceExpression.create(left, toType);,                 },                 if (right.getDataType() != toType) {,                     right = CoerceExpression.create(right, toType);,                 },                 compiled.add(new Pair<Expression, Expression>(left, right));,             },             if (sortExpressions) {,                 Collections.sort(compiled, new Comparator<Pair<Expression, Expression>>() {,                     @Override,                     public int compare(Pair<Expression, Expression> o1, Pair<Expression, Expression> o2) {,                         Expression e1 = o1.getFirst();,                         Expression e2 = o2.getFirst();,                         boolean isFixed1 = e1.getDataType().isFixedWidth();,                         boolean isFixed2 = e2.getDataType().isFixedWidth();,                         boolean isFixedNullable1 = e1.isNullable() &&isFixed1;,                         boolean isFixedNullable2 = e2.isNullable() && isFixed2;,                         if (isFixedNullable1 == isFixedNullable2) {,                             if (isFixed1 == isFixed2) {,                                 return 0;,                             } else if (isFixed1) {,                                 return -1;,                             } else {,                                 return 1;,                             },                         } else if (isFixedNullable1) {,                             return 1;,                         } else {,                             return -1;,                         },                     },                 });,             },             List<Expression> lConditions = Lists.<Expression> newArrayListWithExpectedSize(compiled.size());,             List<Expression> rConditions = Lists.<Expression> newArrayListWithExpectedSize(compiled.size());,             for (Pair<Expression, Expression> pair : compiled) {,                 lConditions.add(pair.getFirst());,                 rConditions.add(pair.getSecond());,             }, ,             return new Pair<List<Expression>, List<Expression>>(lConditions, rConditions);,         }, ,         private PDataType getCommonType(PDataType lType, PDataType rType) throws SQLException {,             if (lType == rType),                 return lType;, ,             if (!lType.isComparableTo(rType)),                 throw new SQLExceptionInfo.Builder(SQLExceptionCode.TYPE_MISMATCH),                     .setMessage("On-clause LHS expression and RHS expression must be comparable. LHS type: " + lType + ", RHS type: " + rType),                     .build().buildException();, ,             if ((lType == null || lType.isCoercibleTo(PTinyint.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PTinyint.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PSmallint.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PSmallint.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PInteger.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PInteger.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PLong.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PLong.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PDouble.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PDouble.INSTANCE))) {,                 return lType == null ? rType : lType; // to preserve UNSIGNED type,             }, ,             if ((lType == null || lType.isCoercibleTo(PDecimal.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PDecimal.INSTANCE))) {,                 return PDecimal.INSTANCE;,             }, ,             if ((lType == null || lType.isCoercibleTo(PDate.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PDate.INSTANCE))) {,                 return lType == null ? rType : lType;,             }, ,             if ((lType == null || lType.isCoercibleTo(PTimestamp.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PTimestamp.INSTANCE))) {,                 return lType == null ? rType : lType;,             }, ,             if ((lType == null || lType.isCoercibleTo(PVarchar.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PVarchar.INSTANCE))) {,                 return PVarchar.INSTANCE;,             }, ,             if ((lType == null || lType.isCoercibleTo(PBoolean.INSTANCE)),                     && (rType == null || rType.isCoercibleTo(PBoolean.INSTANCE))) {,                 return PBoolean.INSTANCE;,             }, ,             return PVarbinary.INSTANCE;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/compile/JoinCompiler.java,getStarJoinVector,373-373,[                return null;],,getStarJoinVector,382-382,[                    return null;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/phoenix/schema/ColumnRef.java,equals,84-90,[        if (this == obj) return true;,         if (obj == null) return false;,         if (getClass() != obj.getClass()) return false;,         ColumnRef other = (ColumnRef)obj;,         if (columnPosition != other.columnPosition) return false;,         if (!tableRef.equals(other.tableRef)) return false;,         return true;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/compile/JoinQueryCompilerTest.java,getJoinTable,139-139,[        PhoenixStatement stmt = connection.createStatement().unwrap(PhoenixStatement.class);],,
STYLE,NS_DANGEROUS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/OrderPreservingTracker.java,isOrderPreserving,179-179,[            isOrderPreserving &= entry.orderPreserving != OrderPreserving.NO && prevOrderPreserving == OrderPreserving.YES && (pos == prevPos || pos - prevSlotSpan == prevPos  || hasEqualityConstraints(prevPos+prevSlotSpan, pos));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/OrderPreservingTracker.java,,158-166,[            Collections.sort(orderPreservingInfos, new Comparator<Info>() {,                 @Override,                 public int compare(Info o1, Info o2) {,                     int cmp = o1.pkPosition-o2.pkPosition;,                     if (cmp != 0) return cmp;,                     // After pk position, sort on reverse OrderPreserving ordinal: NO, YES_IF_LAST, YES,                     // In this way, if we have an ORDER BY over a YES_IF_LAST followed by a YES, we'll,                     // allow subsequent columns to be ordered.,                     return o2.orderPreserving.ordinal() - o1.orderPreserving.ordinal();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/PostDDLCompiler.java,,88-119,[                new ColumnResolver() {, ,                     @Override,                     public List<TableRef> getTables() {,                         return tableRefs;,                     }, ,                     @Override,                     public TableRef resolveTable(String schemaName, String tableName) throws SQLException {,                         throw new UnsupportedOperationException();,                     }, ,                     @Override,                     public ColumnRef resolveColumn(String schemaName, String tableName, String colName),                             throws SQLException {,                         throw new UnsupportedOperationException();,                     }, , 					@Override, 					public List<PFunction> getFunctions() {, 						return Collections.<PFunction>emptyList();, 					}, , 					@Override, 					public PFunction resolveFunction(String functionName), 							throws SQLException {, 						throw new FunctionNotFoundException(functionName);, 					}, , 					@Override, 					public boolean hasUDFs() {, 						return false;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,286-286,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/compile/PostDDLCompiler.java,execute,286-286,[                            if (cache != null) { // Remove server cache if there is one],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/PostIndexDDLCompiler.java,compile,119-119,[        }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/compile/PostIndexDDLCompiler.java,compile,119-119,[        }],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/phoenix/compile/ProjectionCompiler.java,addElement,677-677,[            isCaseSensitive &= elementCount == 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/ProjectionCompiler.java,,630-634,[                expression.accept(new SingleAggregateFunctionVisitor() {,                     @Override,                     public Iterator<Expression> visitEnter(SingleAggregateFunction function) {,                         aggFuncSet.add(function);,                         return Iterators.emptyIterator();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNegativeArrayIndex,1217-1217,[        } catch (Exception e) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/compile/QueryCompilerTest.java,testNonArrayColumnWithIndex,1240-1240,[        } catch (Exception e) {],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/compile/QueryCompilerTest.java,testAggregateExpressionIndex,1563-1563,[            stmt.close();],,testAggregateExpressionIndex,1553-1553,[        Statement stmt = null;],,testAggregateExpressionIndex,1555-1555,[            stmt = conn.createStatement();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/compile/QueryCompilerTest.java,testDivideByZeroExpressionIndex,1606-1606,[            stmt.close();],,testDivideByZeroExpressionIndex,1596-1596,[        Statement stmt = null;],,testDivideByZeroExpressionIndex,1598-1598,[            stmt = conn.createStatement();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/compile/QueryCompilerTest.java,testNonDeterministicExpressionIndex,1527-1527,[            stmt.close();],,testNonDeterministicExpressionIndex,1517-1517,[        Statement stmt = null;],,testNonDeterministicExpressionIndex,1519-1519,[            stmt = conn.createStatement();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/compile/QueryCompilerTest.java,testStatelessExpressionIndex,1545-1545,[            stmt.close();],,testStatelessExpressionIndex,1535-1535,[        Statement stmt = null;],,testStatelessExpressionIndex,1537-1537,[            stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testArrayNotLastInMultipartPK,192-192,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testDescVarbinaryNotSupported,1569-1569,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testExecuteWithNonEmptyBatch,1368-1368,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArrayElemRefInUpsert,1308-1308,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testSelectColumnsInOneFamily,1918-1918,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testSelectColumnsInOneFamilyWithSchema,1938-1938,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection1,2021-2021,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection1,2027-2027,[            conn.createStatement().execute("DROP TABLE IF EXISTS t");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection2,2034-2034,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection2,2040-2040,[            conn.createStatement().execute("DROP TABLE IF EXISTS t");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection3,2047-2047,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection3,2053-2053,[            conn.createStatement().execute("DROP TABLE IF EXISTS t");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection4,2060-2060,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection4,2066-2066,[            conn.createStatement().execute("DROP TABLE IF EXISTS t");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection5,2073-2073,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjection5,2079-2079,[            conn.createStatement().execute("DROP TABLE IF EXISTS t");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjectionWithArrayPrimaryKey,2086-2086,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testServerArrayElementProjectionWithArrayPrimaryKey,2092-2092,[            conn.createStatement().execute("DROP TABLE IF EXISTS t");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testVarBinaryNotLastInMultipartPK,171-171,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryCompilerTest.java,testVarbinaryArrayNotSupported,1321-1321,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testGroupByLimitOptimization,1454-1454,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidPrimaryKeyDecl,1414-1414,[                conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testNoFromClauseSelect,1980-1980,[         rs = conn.createStatement().executeQuery("SELECT * FROM (" + query + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/QueryCompilerTest.java,testNoGroupByLimitOptimization,1475-1475,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,compileQuery,440-440,[        QueryPlan plan = getQueryPlan(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,getQueryPlan,454-454,[            PhoenixPreparedStatement statement = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,projectQuery,445-445,[        QueryPlan plan = getQueryPlan(query, Collections.emptyList());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testCountAggregatorFirst,697-697,[                Scan scan = compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testFunkyColumnNames,674-674,[            compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testIntAndLongMinValue,1651-1651,[        QueryPlan plan = getQueryPlan(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidArithmetic,731-731,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testInvalidNextValueFor,1347-1347,[                compileQuery(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testKeyOrderedGroupByOptimization,478-478,[            QueryPlan plan = getQueryPlan(query, binds);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryCompilerTest.java,testNotKeyOrderedGroupByOptimization,660-660,[            QueryPlan plan = getQueryPlan(query, binds);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/compile/QueryMetaDataTest.java,testBasicResultSetMetaData,310-310,[        assertEquals("organization_id".toUpperCase(),md.getColumnName(1));],,testBasicResultSetMetaData,311-311,[        assertEquals("a_string".toUpperCase(),md.getColumnName(2));],,testBasicResultSetMetaData,312-312,[        assertEquals("b_string".toUpperCase(),md.getColumnName(3));],,testBasicResultSetMetaData,313-313,[        assertEquals("i".toUpperCase(),md.getColumnName(4));],,testBasicResultSetMetaData,314-314,[        assertEquals("a_date".toUpperCase(),md.getColumnName(5));],,testBasicResultSetMetaData,322-322,[        assertEquals("atable".toUpperCase(),md.getTableName(1));],,testBasicResultSetMetaData,326-326,[        assertEquals("i".toUpperCase(),md.getColumnLabel(4));],,testBasicResultSetMetaData,327-327,[        assertEquals("a_date".toUpperCase(),md.getColumnLabel(5));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryMetaDataTest.java,testCoerceToDecimalArithmeticMetaData,280-280,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryMetaDataTest.java,testLongArithmeticMetaData,294-294,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryOptimizerTest.java,testAssertQueryAgainstTenantSpecificViewDoesNotGoThroughIndex,553-553,[        Connection conn = DriverManager.getConnection(getUrl(), new Properties());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/QueryOptimizerTest.java,testAssertQueryAgainstTenantSpecificViewGoesThroughIndex,517-517,[        Connection conn = DriverManager.getConnection(getUrl(), new Properties());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/QueryOptimizerTest.java,testAssertQueryPlanDetails,449-449,[            stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,465-465,[            stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,477-477,[            stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,493-493,[                stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,499-499,[                stmt = conn.prepareStatement(sql);],,testAssertQueryPlanDetails,505-505,[                stmt = conn.prepareStatement(sql);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/compile/ScanRanges.java,getSlotSpans,594-594,[        return slotSpan;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/SubqueryRewriter.java,,122-131,[        return leaveCompoundNode(node, l, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 if (children.isEmpty()) {,                     return null;,                 },                 if (children.size() == 1) {,                     return children.get(0);,                 },                 return NODE_FACTORY.and(children);],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/phoenix/compile/SubselectRewriter.java,flatten,167-167,[                            && ((TableWildcardParseNode) node).getTableName().equals(tableAlias))) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/TenantSpecificViewIndexCompileTest.java,assertExplainPlanIsCorrect,249-249,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/TenantSpecificViewIndexCompileTest.java,testOrderByOptimizedOutWithMultiplePredicatesInView,172-172,[        assertOrderByHasBeenOptimizedOut(conn, sql);],,testOrderByOptimizedOutWithMultiplePredicatesInView,178-178,[        assertOrderByHasBeenOptimizedOut(conn, sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/TenantSpecificViewIndexCompileTest.java,testOrderByOptimizedOutWithPredicateInView,136-136,[        assertOrderByHasBeenOptimizedOut(conn, sql);],,testOrderByOptimizedOutWithPredicateInView,144-144,[        assertOrderByHasBeenOptimizedOut(conn, sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/TenantSpecificViewIndexCompileTest.java,testOrderByOptimizedOutWithoutPredicateInView,88-88,[        assertOrderByHasBeenOptimizedOut(conn, sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/compile/TenantSpecificViewIndexCompileTest.java,assertOrderByHasBeenOptimizedOut,254-254,[        PreparedStatement stmt = conn.prepareStatement(sql);],,
CORRECTNESS,GC_UNRELATED_TYPES,org/apache/phoenix/compile/TupleProjectionCompiler.java,createProjectedTable,138-138,[            if (!isWildcard && !families.contains(sourceColumn.getFamilyName())) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/compile/UpsertCompiler.java,compile,264-264,[        List<PColumn> allColumnsToBe = Collections.emptyList();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/UpsertCompiler.java,setValues,116-116,[        RowTimestampColInfo rowTsColInfo = new RowTimestampColInfo(useServerTimestamp, rowTimestamp);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/compile/ViewCompilerTest.java,testViewInvalidation,89-89,[            conn.createStatement().executeQuery("SELECT * FROM s2.v3");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/compile/ViewCompilerTest.java,assertViewType,62-62,[            conn.createStatement().execute(viewDDL);],,assertViewType,70-70,[            conn.createStatement().execute("DROP VIEW " + table.getName().getString());],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/compile/WhereOptimizer.java,pushKeyExpressionsToScan,244-244,[                    useSkipScan |= !stopExtracting && !forcedRangeScan && forcedSkipScan;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/compile/WhereOptimizer.java,,567-604,[            return new SingleKeySlot(new KeyPart() {, ,                 @Override,                 public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                     KeyRange range = childPart.getKeyRange(op, rhs);,                     byte[] lower = range.getLowerRange();,                     if (!range.lowerUnbound()) {,                         ptr.set(lower);,                         // Do the reverse translation so we can optimize out the coerce expression,                         // For the actual type of the coerceBytes call, we use the node type instead of the rhs type, because,                         // for IN, the rhs type will be VARBINARY and no coerce will be done in that case (and we need it to,                         // be done).,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         lower = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     byte[] upper = range.getUpperRange();,                     if (!range.upperUnbound()) {,                         ptr.set(upper);,                         // Do the reverse translation so we can optimize out the coerce expression,                         node.getChild().getDataType().coerceBytes(ptr, node.getDataType(), rhs.getSortOrder(), node.getChild().getSortOrder());,                         upper = ByteUtil.copyKeyBytesIfNecessary(ptr);,                     },                     return KeyRange.getKeyRange(lower, range.isLowerInclusive(), upper, range.isUpperInclusive());,                 }, ,                 @Override,                 public List<Expression> getExtractNodes() {,                     return extractNodes;,                 }, ,                 @Override,                 public PColumn getColumn() {,                     return childPart.getColumn();,                 }, ,                 @Override,                 public PTable getTable() {,                     return childPart.getTable();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/phoenix/compile/WhereOptimizer.java,,1174-1206,[        private class SingleKeySlot implements KeySlots {,             private final KeySlot slot;,             private final KeyRange minMaxRange;,             ,             private SingleKeySlot(KeyPart part, int pkPosition, List<KeyRange> ranges) {,                 this(part, pkPosition, 1, ranges);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, List<KeyRange> ranges, OrderPreserving orderPreserving) {,                 this(part, pkPosition, 1, ranges, orderPreserving);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges) {,                 this(part,pkPosition,pkSpan,ranges, null, null);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges, OrderPreserving orderPreserving) {,                 this(part,pkPosition,pkSpan,ranges, null, orderPreserving);,             },             ,             private SingleKeySlot(KeyPart part, int pkPosition, int pkSpan, List<KeyRange> ranges, KeyRange minMaxRange, OrderPreserving orderPreserving) {,                 this.slot = new KeySlot(part, pkPosition, pkSpan, ranges, orderPreserving);,                 this.minMaxRange = minMaxRange;,             },             ,             @Override,             public Iterator<KeySlot> iterator() {,                 return Iterators.<KeySlot>singletonIterator(slot);,             }, ,             @Override,             public KeyRange getMinMaxRange() {,                 return minMaxRange;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtEndOfRVC,1491-1491,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullAtStartOfRVC,1526-1526,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/compile/WhereOptimizerTest.java,testNullInMiddleOfRVC,1508-1508,[        List<Object> binds = Arrays.<Object>asList(tenantId, parentId, createdDate);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testAndWithRVC,1956-1956,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testFullyQualifiedRVCWithNonTenantSpecificView,1781-1781,[    	Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testFullyQualifiedRVCWithTenantSpecificViewAndConnection,1753-1753,[    	Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testStartKeyStopKey,209-209,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testTrailingIsNull,1910-1910,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/compile/WhereOptimizerTest.java,testTrailingIsNullWithOr,1930-1930,[        Connection conn = DriverManager.getConnection(getUrl());],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java,,112-112,[                ((RegionCoprocessorEnvironment) e).getRegionServerServices().getConfiguration();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java,,185-197,[                scanner = new DelegateRegionScanner(scanner) {,                     // This isn't very obvious but close() could be called in a thread,                     // that is different from the thread that created the scanner.,                     @Override,                     public void close() throws IOException {,                         try {,                             delegate.close();,                         } finally {,                             if (child != null) {,                                 child.stop();,                             },                         },                     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java,,262-413,[        return new RegionScanner() {, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 try {,                     return s.next(results);,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionInfo().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             @Override,             public boolean next(List<Cell> result, ScannerContext scannerContext) throws IOException {,                 try {,                     return s.next(result, scannerContext);,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionInfo().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             @Override,             public void close() throws IOException {,                 s.close();,             }, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() throws IOException {,                 return s.isFilterDone();,             }, ,             @Override,             public boolean reseek(byte[] row) throws IOException {,                 return s.reseek(row);,             }, ,             @Override,             public long getMvccReadPoint() {,                 return s.getMvccReadPoint();,             }, ,             @Override,             public boolean nextRaw(List<Cell> result) throws IOException {,                 try {,                     boolean next = s.nextRaw(result);,                     Cell arrayElementCell = null;,                     if (result.size() == 0) {,                         return next;,                     },                     if (arrayFuncRefs != null && arrayFuncRefs.length > 0 && arrayKVRefs.size() > 0) {,                         int arrayElementCellPosition = replaceArrayIndexElement(arrayKVRefs, arrayFuncRefs, result);,                         arrayElementCell = result.get(arrayElementCellPosition);,                     },                     if (ScanUtil.isLocalIndex(scan) && !ScanUtil.isAnalyzeTable(scan)) {,                         IndexUtil.wrapResultUsingOffset(c, result, offset, dataColumns,,                             tupleProjector, dataRegion, indexMaintainer, viewConstants, ptr);,                     },                     if (projector != null) {,                         Tuple tuple = projector.projectResults(new ResultTuple(Result.create(result)));,                         result.clear();,                         result.add(tuple.getValue(0));,                         if(arrayElementCell != null),                             result.add(arrayElementCell);,                     },                     // There is a scanattribute set to retrieve the specific array element,                     return next;,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionInfo().getRegionNameAsString(), t);,                     return false; // impossible,                 },             }, ,             @Override,             public boolean nextRaw(List<Cell> result, ScannerContext scannerContext),                 throws IOException {,               try {,                 boolean next = s.nextRaw(result, scannerContext);,                 Cell arrayElementCell = null;,                 if (result.size() == 0) {,                     return next;,                 },                 if (arrayFuncRefs != null && arrayFuncRefs.length > 0 && arrayKVRefs.size() > 0) {,                     int arrayElementCellPosition = replaceArrayIndexElement(arrayKVRefs, arrayFuncRefs, result);,                     arrayElementCell = result.get(arrayElementCellPosition);,                 },                 if ((offset > 0 || ScanUtil.isLocalIndex(scan))  && !ScanUtil.isAnalyzeTable(scan)) {,                     IndexUtil.wrapResultUsingOffset(c, result, offset, dataColumns,,                         tupleProjector, dataRegion, indexMaintainer, viewConstants, ptr);,                 },                 if (projector != null) {,                     Tuple tuple = projector.projectResults(new ResultTuple(Result.create(result)));,                     result.clear();,                     result.add(tuple.getValue(0));,                     if(arrayElementCell != null),                         result.add(arrayElementCell);,                 },                 // There is a scanattribute set to retrieve the specific array element,                 return next;,               } catch (Throwable t) {,                 ServerUtil.throwIOException(c.getEnvironment().getRegion().getRegionInfo().getRegionNameAsString(), t);,                 return false; // impossible,               },             }, ,             private int replaceArrayIndexElement(final Set<KeyValueColumnExpression> arrayKVRefs,,                     final Expression[] arrayFuncRefs, List<Cell> result) {,                 // make a copy of the results array here, as we're modifying it below,                 MultiKeyValueTuple tuple = new MultiKeyValueTuple(ImmutableList.copyOf(result));,                 // The size of both the arrays would be same?,                 // Using KeyValueSchema to set and retrieve the value,                 // collect the first kv to get the row,                 Cell rowKv = result.get(0);,                 for (KeyValueColumnExpression kvExp : arrayKVRefs) {,                     if (kvExp.evaluate(tuple, ptr)) {,                         for (int idx = tuple.size() - 1; idx >= 0; idx--) {,                             Cell kv = tuple.getValue(idx);,                             if (Bytes.equals(kvExp.getColumnFamily(), 0, kvExp.getColumnFamily().length,,                                     kv.getFamilyArray(), kv.getFamilyOffset(), kv.getFamilyLength()),                                 && Bytes.equals(kvExp.getColumnName(), 0, kvExp.getColumnName().length,,                                         kv.getQualifierArray(), kv.getQualifierOffset(), kv.getQualifierLength())) {,                                 // remove the kv that has the full array values.,                                 result.remove(idx);,                                 break;,                             },                         },                     },                 },                 byte[] value = kvSchema.toBytes(tuple, arrayFuncRefs,,                         kvSchemaBitSet, ptr);,                 // Add a dummy kv with the exact value of the array index,                 result.add(new KeyValue(rowKv.getRowArray(), rowKv.getRowOffset(), rowKv.getRowLength(),,                         QueryConstants.ARRAY_VALUE_COLUMN_FAMILY, 0, QueryConstants.ARRAY_VALUE_COLUMN_FAMILY.length,,                         QueryConstants.ARRAY_VALUE_COLUMN_QUALIFIER, 0,,                         QueryConstants.ARRAY_VALUE_COLUMN_QUALIFIER.length, HConstants.LATEST_TIMESTAMP,,                         Type.codeToType(rowKv.getTypeByte()), value, 0, value.length));,                 return result.size() - 1;,             }, ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();,             }, ,             @Override,             public int getBatch() {,                 return s.getBatch();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/GroupedAggregateRegionObserver.java,,474-577,[        return new BaseRegionScanner() {,             private long rowCount = 0;,             private ImmutableBytesWritable currentKey = null;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return scanner.getRegionInfo();,             }, ,             @Override,             public void close() throws IOException {,                 scanner.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 boolean hasMore;,                 boolean atLimit;,                 boolean aggBoundary = false;,                 MultiKeyValueTuple result = new MultiKeyValueTuple();,                 ImmutableBytesWritable key = null;,                 Aggregator[] rowAggregators = aggregators.getAggregators();,                 // If we're calculating no aggregate functions, we can exit at the,                 // start of a new row. Otherwise, we have to wait until an agg,                 int countOffset = rowAggregators.length == 0 ? 1 : 0;,                 Region region = c.getEnvironment().getRegion();,                 region.startRegionOperation();,                 try {,                     synchronized (scanner) {,                         do {,                             List<Cell> kvs = new ArrayList<Cell>();,                             // Results are potentially returned even when the return,                             // value of s.next is false,                             // since this is an indication of whether or not there,                             // are more values after the,                             // ones returned,                             hasMore = scanner.nextRaw(kvs);,                             if (!kvs.isEmpty()) {,                                 result.setKeyValues(kvs);,                                 key = TupleUtil.getConcatenatedValue(result, expressions);,                                 aggBoundary = currentKey != null && currentKey.compareTo(key) != 0;,                                 if (!aggBoundary) {,                                     aggregators.aggregate(rowAggregators, result);,                                     if (logger.isDebugEnabled()) {,                                         logger.debug(LogUtil.addCustomAnnotations(,                                             "Row passed filters: " + kvs,                                             + ", aggregated values: ",                                             + Arrays.asList(rowAggregators),,                                             ScanUtil.getCustomAnnotations(scan)));,                                     },                                     currentKey = key;,                                 },                             },                             atLimit = rowCount + countOffset >= limit;,                             // Do rowCount + 1 b/c we don't have to wait for a complete,                             // row in the case of a DISTINCT with a LIMIT,                         } while (hasMore && !aggBoundary && !atLimit);,                     },                 } finally {,                     region.closeRegionOperation();,                 }, ,                 if (currentKey != null) {,                     byte[] value = aggregators.toBytes(rowAggregators);,                     KeyValue keyValue =,                             KeyValueUtil.newKeyValue(currentKey.get(), currentKey.getOffset(),,                                 currentKey.getLength(), SINGLE_COLUMN_FAMILY, SINGLE_COLUMN,,                                 AGG_TIMESTAMP, value, 0, value.length);,                     results.add(keyValue);,                     if (logger.isDebugEnabled()) {,                         logger.debug(LogUtil.addCustomAnnotations("Adding new aggregate row: ",                                 + keyValue,                                 + ",for current key ",                                 + Bytes.toStringBinary(currentKey.get(), currentKey.getOffset(),,                                     currentKey.getLength()) + ", aggregated values: ",                                 + Arrays.asList(rowAggregators), ScanUtil.getCustomAnnotations(scan)));,                     },                     // If we're at an aggregation boundary, reset the,                     // aggregators and,                     // aggregate with the current result (which is not a part of,                     // the returned result).,                     if (aggBoundary) {,                         aggregators.reset(rowAggregators);,                         aggregators.aggregate(rowAggregators, result);,                         currentKey = key;,                         rowCount++;,                         atLimit |= rowCount >= limit;,                     },                 },                 // Continue if there are more,                 if (!atLimit && (hasMore || aggBoundary)) {,                     return true;,                 },                 currentKey = null;,                 return false;,             }, ,             @Override,             public long getMaxResultSize() {,                 return scanner.getMaxResultSize();,             },             @Override,             public int getBatch() {,                 return scanner.getBatch();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/coprocessor/HashJoinRegionScanner.java,processResults,144-144,[                    resultQueue.offer(tuple);],,processResults,151-151,[                resultQueue.offer(tuple);],,processResults,167-167,[                                    resultQueue.offer(lhs);],,processResults,178-178,[                            resultQueue.offer(joined);],,processResults,187-187,[                            resultQueue.offer(joined);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,getPhysicalTableForView,1120-1120,[            byte[] sName = SchemaUtil.getSchemaNameFromFullName(famBytes).getBytes();],,getPhysicalTableForView,1121-1121,[            byte[] tName = SchemaUtil.getTableNameFromFullName(famBytes).getBytes();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,221-221,[    public static final byte[] ROW_KEY_ORDER_OPTIMIZABLE_BYTES = Bytes.toBytes(ROW_KEY_ORDER_OPTIMIZABLE);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,loadTable,1054-1054,[        if (table == null],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,getFunction,967-967,[        return new PFunction(tenantId, functionName.getString(), arguments, returnType.getString(),],,getFunction,931-931,[        PName returnType =],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,doGetFunctions,3134-3134,[        if (functions != null && !functions.isEmpty()) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,2382-2382,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,mutateColumn,2656-2656,[            if (result != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,buildTable,1054-1054,[        if (table == null],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,getFunctions,2958-2958,[            List<Pair<byte[], Long>> functions = new ArrayList<Pair<byte[], Long>>(request.getFunctionNamesCount());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,961-964,[        Collections.sort(arguments, new Comparator<FunctionArgument>() {,             @Override,             public int compare(FunctionArgument o1, FunctionArgument o2) {,                 return o1.getArgPosition() - o2.getArgPosition();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,2323-2323,[                                    table.getPKColumn(new String(],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,2320-2320,[                                } else if (pkCount > COLUMN_NAME_INDEX],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,2459-2462,[        Collections.sort(keys, new Comparator<byte[]>() {,             @Override,             public int compare(byte[] o1, byte[] o2) {,                 return Bytes.compareTo(o1, o2);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,2568-2568,[                                        columnToDelete = table.getPKColumn(new String(],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,updateMutation,2565-2565,[                                    } else if (pkCount > COLUMN_NAME_INDEX],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,compareTo,1708-1708,[            return (this.ordinalPosition < o.ordinalPosition ? -1 : this.ordinalPosition > o.ordinalPosition ? 1 : 0);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,1697-1708,[    private final class PutWithOrdinalPosition implements Comparable<PutWithOrdinalPosition>{,         private final Put put;,         private final int ordinalPosition;,         ,         public PutWithOrdinalPosition(Put put, int ordinalPos) {,             this.put = put;,             this.ordinalPosition = ordinalPos;,         }, ,         @Override,         public int compareTo(PutWithOrdinalPosition o) {,             return (this.ordinalPosition < o.ordinalPosition ? -1 : this.ordinalPosition > o.ordinalPosition ? 1 : 0);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getColumnName,175-175,[            return columnName;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/MetaDataProtocol.java,getFamilyName,179-179,[            return familyName;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/coprocessor/MetaDataRegionObserver.java,run,186-186,[                    Long disabledTimeStampVal = 0L;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/coprocessor/ScanRegionObserver.java,doPostScannerOpen,204-204,[            indexMaintainer = indexMaintainers.get(0);],,doPostScannerOpen,203-203,[            List<IndexMaintainer> indexMaintainers = localIndexBytes == null ? null : IndexMaintainer.deserialize(localIndexBytes);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/coprocessor/ScanRegionObserver.java,deserializeArrayPostionalExpressionInfoFromScan,140-140,[            return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/ScanRegionObserver.java,,256-312,[        return new BaseRegionScanner() {,             private Tuple tuple = firstTuple;, ,             @Override,             public boolean isFilterDone() {,                 return tuple == null;,             }, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return s.getRegionInfo();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 try {,                     if (isFilterDone()) {,                         return false;,                     }, ,                     for (int i = 0; i < tuple.size(); i++) {,                         results.add(tuple.getValue(i));,                     }, ,                     tuple = iterator.next();,                     return !isFilterDone();,                 } catch (Throwable t) {,                     ServerUtil.throwIOException(region.getRegionInfo().getRegionNameAsString(), t);,                     return false;,                 },             }, ,             @Override,             public void close() throws IOException {,                 try {,                     s.close();,                 } finally {,                     try {,                         if(iterator != null) {,                             iterator.close();,                         },                     } catch (SQLException e) {,                         ServerUtil.throwIOException(region.getRegionInfo().getRegionNameAsString(), e);,                     } finally {,                         chunk.close();,                     },                 },             }, ,             @Override,             public long getMaxResultSize() {,                 return s.getMaxResultSize();,             }, ,             @Override,             public int getBatch() {,               return s.getBatch();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/coprocessor/SequenceRegionObserver.java,preAppend,425-425,[                long serverTimestamp = MetaDataUtil.getClientTimeStamp(m);],,preAppend,392-392,[                Mutation m = null;],,preAppend,393-393,[                switch (op) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,testMajorCompactionPreventsUpdateStatsFromRunning,104-104,[        String tableName = "testMajorCompactionPreventsUpdateStatsFromRunning".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,testStateBeforeAndAfterMajorCompaction,76-76,[        String tableName = "testStateBeforeAndAfterMajorCompaction".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,testStateBeforeAndAfterUpdateStatsCommand,61-61,[        String tableName = "testStateBeforeAndAfterUpdateStatsCommand".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,testUpdateStatsPreventsAnotherUpdateStatsFromRunning,117-117,[        String tableName = "testUpdateStatsPreventsAnotherUpdateStatsFromRunning".toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,createTableAndGetRegion,145-145,[            conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,runUpdateStats,156-156,[            return conn.createStatement().executeUpdate("UPDATE STATISTICS " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/coprocessor/StatisticsCollectionRunTrackerIT.java,testStateBeforeAndAfterMajorCompaction,84-84,[            PreparedStatement stmt = conn.prepareStatement(upsert);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/coprocessor/SuffixFilter.java,toByteArray,43-43,[        return suffix;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/coprocessor/SuffixFilter.java,<init>,38-38,[        this.suffix = suffix;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,doPostScannerOpen,373-394,[                                    switch (KeyValue.Type.codeToType(cell.getTypeByte())) {,                                     case Put:,                                         // If Put, point delete old Put,                                         Delete del = new Delete(oldRow);,                                         del.addDeleteMarker(new KeyValue(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength(),,                                             cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength(),,                                             cell.getQualifierArray(), cell.getQualifierOffset(),,                                             cell.getQualifierLength(), cell.getTimestamp(), KeyValue.Type.Delete,,                                             ByteUtil.EMPTY_BYTE_ARRAY, 0, 0));,                                         mutations.add(del);, ,                                         Put put = new Put(newRow);,                                         put.add(newCell);,                                         mutations.add(put);,                                         break;,                                     case Delete:,                                     case DeleteColumn:,                                     case DeleteFamily:,                                     case DeleteFamilyVersion:,                                         Delete delete = new Delete(newRow);,                                         delete.addDeleteMarker(newCell);,                                         mutations.add(delete);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,,561-594,[        RegionScanner scanner = new BaseRegionScanner() {,             private boolean done = !hadAny;, ,             @Override,             public HRegionInfo getRegionInfo() {,                 return innerScanner.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() {,                 return done;,             }, ,             @Override,             public void close() throws IOException {,                 innerScanner.close();,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 if (done) return false;,                 done = true;,                 results.add(aggKeyValue);,                 return false;,             }, ,             @Override,             public long getMaxResultSize() {,                 return scan.getMaxResultSize();,             }, ,             @Override,             public int getBatch() {,                 return innerScanner.getBatch();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,run,702-702,[                  if (stats != null) stats.close();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,,693-702,[            User.runAsLoginUser(new PrivilegedExceptionAction<Void>() {,               @Override,               public Void run() throws Exception {,                 StatisticsCollector stats = new StatisticsCollector(env,,                   table.getNameAsString(), clientTimeStamp);,                 try {,                   stats.splitStats(region, l, r);,                   return null;,                 } finally {,                   if (stats != null) stats.close();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/coprocessor/UngroupedAggregateRegionObserver.java,,751-780,[        RegionScanner scanner = new BaseRegionScanner() {,             @Override,             public HRegionInfo getRegionInfo() {,                 return region.getRegionInfo();,             }, ,             @Override,             public boolean isFilterDone() {,                 return true;,             }, ,             @Override,             public void close() throws IOException {,                 // no-op because we want to manage closing of the inner scanner ourselves.,             }, ,             @Override,             public boolean next(List<Cell> results) throws IOException {,                 results.add(aggKeyValue);,                 return false;,             }, ,             @Override,             public long getMaxResultSize() {,                 return scan.getMaxResultSize();,             }, ,             @Override,             public int getBatch() {,                 return innerScanner.getBatch();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,6002-6002,[    public static com.google.protobuf.Parser<AddColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6269-6269,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6252-6252,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,8427-8427,[    public static com.google.protobuf.Parser<ClearCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,8650-8650,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,8635-8635,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,8845-8845,[    public static com.google.protobuf.Parser<ClearCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,9032-9032,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,9019-9019,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,10135-10135,[    public static com.google.protobuf.Parser<ClearTableFromCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,10514-10514,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,10491-10491,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,10894-10894,[    public static com.google.protobuf.Parser<ClearTableFromCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,11081-11081,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,11068-11068,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,4397-4397,[    public static com.google.protobuf.Parser<CreateFunctionRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4742-4742,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4721-4721,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,3769-3769,[    public static com.google.protobuf.Parser<CreateTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,4040-4040,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,4023-4023,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,6592-6592,[    public static com.google.protobuf.Parser<DropColumnRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,6859-6859,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,6842-6842,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,7197-7197,[    public static com.google.protobuf.Parser<DropFunctionRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,7499-7499,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,7480-7480,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,5184-5184,[    public static com.google.protobuf.Parser<DropTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,5552-5552,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,5531-5531,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,2881-2881,[    public static com.google.protobuf.Parser<GetFunctionsRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,3270-3270,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,3247-3247,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,1930-1930,[    public static com.google.protobuf.Parser<GetTableRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,2348-2348,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,2323-2323,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,9199-9199,[    public static com.google.protobuf.Parser<GetVersionRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,9422-9422,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,9407-9407,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,9633-9633,[    public static com.google.protobuf.Parser<GetVersionResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,9860-9860,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,9845-9845,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,448-448,[    public static com.google.protobuf.Parser<MetaDataResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,970-970,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,,7862-7862,[    public static com.google.protobuf.Parser<UpdateIndexStateRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,clone,8129-8129,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/MetaDataProtos.java,maybeForceBuilderInitialization,8112-8112,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,,1457-1457,[    public static com.google.protobuf.Parser<PFunction> PARSER =],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,getClassname,1565-1575,[      java.lang.Object ref = classname_;,       if (ref instanceof java.lang.String) {,         return (java.lang.String) ref;,       } else {,         com.google.protobuf.ByteString bs = ,             (com.google.protobuf.ByteString) ref;,         java.lang.String s = bs.toStringUtf8();,         if (bs.isValidUtf8()) {,           classname_ = s;,         },         return s;],,getClassName,138-148,[      java.lang.Object ref = className_;,       if (ref instanceof java.lang.String) {,         return (java.lang.String) ref;,       } else {,         com.google.protobuf.ByteString bs = ,             (com.google.protobuf.ByteString) ref;,         java.lang.String s = bs.toStringUtf8();,         if (bs.isValidUtf8()) {,           className_ = s;,         },         return s;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,getClassnameBytes,1583-1591,[      java.lang.Object ref = classname_;,       if (ref instanceof java.lang.String) {,         com.google.protobuf.ByteString b = ,             com.google.protobuf.ByteString.copyFromUtf8(,                 (java.lang.String) ref);,         classname_ = b;,         return b;,       } else {,         return (com.google.protobuf.ByteString) ref;],,getClassNameBytes,156-164,[      java.lang.Object ref = className_;,       if (ref instanceof java.lang.String) {,         com.google.protobuf.ByteString b = ,             com.google.protobuf.ByteString.copyFromUtf8(,                 (java.lang.String) ref);,         className_ = b;,         return b;,       } else {,         return (com.google.protobuf.ByteString) ref;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,getTimeStamp,1608-1608,[      return timeStamp_;],,getTimestamp,192-192,[            return timestamp;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,hasClassname,1559-1559,[      return ((bitField0_ & 0x00000002) == 0x00000002);],,hasClassName,132-132,[      return ((bitField0_ & 0x00000001) == 0x00000001);],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,clone,2108-2108,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,,199-199,[    public static com.google.protobuf.Parser<PFunctionArg> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,clone,709-709,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PFunctionProtos.java,maybeForceBuilderInitialization,684-684,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PGuidePostsProtos.java,,144-144,[    public static com.google.protobuf.Parser<PGuidePosts> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PGuidePostsProtos.java,clone,446-446,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PGuidePostsProtos.java,maybeForceBuilderInitialization,427-427,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,403-403,[    public static com.google.protobuf.Parser<PColumn> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,1120-1120,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/PTableProtos.java,maybeForceBuilderInitialization,1081-1081,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,3472-3472,[    public static com.google.protobuf.Parser<PTable> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,4761-4761,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/PTableProtos.java,,2023-2023,[    public static com.google.protobuf.Parser<PTableStats> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/PTableProtos.java,clone,2445-2445,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,,109-109,[    public static com.google.protobuf.Parser<ServerCacheFactory> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,clone,363-363,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCacheFactoryProtos.java,maybeForceBuilderInitialization,348-348,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,829-829,[    public static com.google.protobuf.Parser<AddServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,1234-1234,[        return create().mergeFrom(buildPartial());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,1810-1810,[    public static com.google.protobuf.Parser<AddServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2037-2037,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2022-2022,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,134-134,[    public static com.google.protobuf.Parser<ImmutableBytesWritable> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,439-439,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,420-420,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2267-2267,[    public static com.google.protobuf.Parser<RemoveServerCacheRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,2529-2529,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,2512-2512,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,,2790-2790,[    public static com.google.protobuf.Parser<RemoveServerCacheResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,clone,3017-3017,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/ServerCachingProtos.java,maybeForceBuilderInitialization,3002-3002,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,,119-119,[    public static com.google.protobuf.Parser<StatCollectRequest> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,clone,377-377,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,maybeForceBuilderInitialization,360-360,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,,634-634,[    public static com.google.protobuf.Parser<StatCollectResponse> PARSER =],,
BAD_PRACTICE,CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,clone,861-861,[        return create().mergeFrom(buildPartial());],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/phoenix/coprocessor/generated/StatCollectorProtos.java,maybeForceBuilderInitialization,846-846,[        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AbsFunctionEnd2EndIT.java,initTable,52-52,[            closeStmtAndConn(stmt, conn);],,initTable,43-43,[        Connection conn = null;],,initTable,46-46,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/AbsFunctionEnd2EndIT.java,initTable,52-52,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AggregateQueryIT.java,testSplitWithCachedMeta,122-122,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AggregateQueryIT.java,testSumOverNullIntegerColumn,65-65,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AggregateQueryIT.java,testSumOverNullIntegerColumn,63-63,[        conn.createStatement().execute("UPSERT INTO atable(organization_id,entity_id,a_integer) VALUES('" + getOrganizationId() + "','" + ROW3 + "',NULL)");],,
STYLE,RV_CHECK_FOR_POSITIVE_INDEXOF,org/apache/phoenix/end2end/AlterSessionIT.java,testSetConsistencyInURL,86-86,[            assertTrue(queryPlan.indexOf("TIMELINE") > 0);],,
STYLE,RV_CHECK_FOR_POSITIVE_INDEXOF,org/apache/phoenix/end2end/AlterSessionIT.java,testUpdateConsistency,64-64,[            assertTrue(queryPlan.indexOf("TIMELINE") > 0);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,905-905,[                rs = conn.createStatement().executeQuery(query);],,testDropColumnsWithImutability,916-916,[                rs = conn.createStatement().executeQuery(query);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/AlterTableIT.java,testAddColumnForNewColumnFamily,1102-1102,[            HColumnDescriptor[] columnFamilies = admin.getTableDescriptor(Bytes.toBytes("testAddColumnForNewColumnFamily".toUpperCase())).getColumnFamilies();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/AlterTableIT.java,testAddingPkColAndSettingProperties,2046-2046,[            String tableName = "testAddingPkColAndSettingProperties".toUpperCase();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,729-729,[            closeConnection(conn);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,706-706,[        Connection conn = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,709-709,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/AlterTableIT.java,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,717-717,[                closeStatement(stmt);],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,707-707,[        PreparedStatement stmt = null;],,testDisallowAddingNotNullableColumnNotPartOfPkForExistingTable,714-714,[                stmt = conn.prepareStatement(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,alterTableFromDifferentClient,933-933,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,alterTableFromDifferentClient,935-935,[        PreparedStatement stmtInsert1 = conn1.prepareStatement("upsert into test_simpletable (id, field1) values ( ?, ?)");],,alterTableFromDifferentClient,947-947,[        PreparedStatement pstmt2 = conn1.prepareStatement("upsert into test_simpletable (id, field1, field2) values ( ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddColumnsUsingNewConnection,967-967,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddMultipleColumns,984-984,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddNewColumnFamilyProperties,1627-1627,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddProperyToExistingColumnFamily,1664-1664,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddTTLToExistingColumnFamily,1697-1697,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCharColToPK,161-161,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,577-577,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAlterStoreNulls,1982-1982,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testAlterTableWithVarBinaryKey,99-99,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDisableWAL,752-752,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,782-782,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDisableWAL,811-811,[            Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnFromSaltedTable,543-543,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropColumnsWithImutability,837-837,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropMultipleColumns,1041-1041,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testDropVarCols,686-686,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetHColumnPropertyAndAddColumnForDefaultCFForTableWithOnlyPKCols,1827-1827,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetHColumnPropertyAndAddColumnForNewCFForTableWithOnlyPKCols,1855-1855,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetHColumnPropertyForTableWithOnlyPKCols,1777-1777,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetPropertyAndAddColumnForDefaultColumnFamily,1605-1605,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetSaltedTableAsImmutable,509-509,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSetTTLForTableWithOnlyPKCols,1742-1742,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testSettingTTLWhenAddingColumnNotAllowed,1716-1716,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AlterTableIT.java,testTTLAssignmentForNewEmptyCF,1885-1885,[    	Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddVarCols,621-621,[                conn.createStatement().executeQuery(query);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/AlterTableIT.java,testAddColsIntoSystemTable,131-131,[          conn.createStatement().executeQuery(query);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,970-970,[        String baseTable = "testAlteringPkOfBaseTableWithDivergedView".toUpperCase();],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,971-971,[        String view1 = "view1".toUpperCase();],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,972-972,[        String divergedView = "divergedView".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAlterSaltedBaseTableWithViews,1050-1050,[        String baseTable = "testAlterSaltedBaseTableWithViews".toUpperCase();],,testAlterSaltedBaseTableWithViews,1051-1051,[        String view1 = "view1".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAlteringViewConditionallyModifiesHTableMetadata,1080-1080,[        String baseTable = "testAlteringViewConditionallyModifiesBaseTable".toUpperCase();],,testAlteringViewConditionallyModifiesHTableMetadata,1081-1081,[        String view1 = "view1".toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,getSystemCatalogEntriesForTable,522-522,[        ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM SYSTEM.CATALOG WHERE TABLE_NAME='"+ tableName +"'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAddPKColumnToBaseTableWhoseViewsHaveIndices,848-848,[            .execute(],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,856-856,[            tenantConn.createStatement().execute("CREATE VIEW " + view1 + " AS SELECT * FROM " + baseTable);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,862-862,[            tenantConn.createStatement().execute("CREATE VIEW " + view2 + " AS SELECT * FROM " + view1);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,868-868,[            tenantConn.createStatement().execute("CREATE INDEX " + view2Index + " ON " + view2 + " (v1) include (v2)");],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,874-874,[            tenantConn.createStatement().execute("CREATE VIEW " + view3 + " AS SELECT * FROM " + baseTable);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,881-881,[            tenantConn.createStatement().execute("CREATE INDEX " + view3Index + " ON " + view3 + " (v1) include (v2)");],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,890-890,[            globalConn.createStatement().execute("ALTER TABLE " + baseTable + " ADD v3 VARCHAR, k2 VARCHAR PRIMARY KEY, k3 VARCHAR PRIMARY KEY");],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,919-919,[            ResultSet rs = tenantConn.createStatement().executeQuery("SELECT K2, K3, V3 FROM " + view1);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,928-928,[            rs = tenantConn.createStatement().executeQuery("SELECT K2, K3, V3 FROM " + view2);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,941-941,[            ResultSet rs = tenantConn.createStatement().executeQuery("SELECT K2, K3, V3 FROM " + view3);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,956-956,[            tenantConn.createStatement().executeUpdate(upsert);],,testAddPKColumnToBaseTableWhoseViewsHaveIndices,962-962,[            ResultSet rs = tenantConn.createStatement().executeQuery(sql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,686-686,[            conn.createStatement().execute(baseTableDDL);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,690-690,[                tenant1Conn.createStatement().execute(view1DDL);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,693-693,[                tenant1Conn.createStatement().execute(view2DDL);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,698-698,[                tenant2Conn.createStatement().execute(view3DDL);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,702-702,[            conn.createStatement().execute(view4DDL);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,705-705,[            conn.createStatement().execute(alterBaseTable);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,708-708,[            conn.createStatement().execute("SELECT V3 FROM " + view4);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,712-712,[                tenant1Conn.createStatement().execute("SELECT V3 from " + view1);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,713-713,[                tenant1Conn.createStatement().execute("SELECT V3 from " + view2);],,testAddingColumnToBaseTablePropagatesToEntireViewHierarchy,718-718,[                tenant2Conn.createStatement().execute("SELECT V3 from " + view3);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,981-981,[            conn.createStatement().execute(baseTableDDL);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,985-985,[                tenant1Conn.createStatement().execute(view1DDL);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,990-990,[                tenant2Conn.createStatement().execute(divergedViewDDL);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,992-992,[                tenant2Conn.createStatement().execute("ALTER VIEW " + divergedView + " DROP COLUMN V2");],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,996-996,[                tenant2Conn.createStatement().execute(indexDDL);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1000-1000,[            conn.createStatement().execute(alterBaseTable);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1005-1005,[                tenant1Conn.createStatement().execute("SELECT KV from " + view1);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1006-1006,[                tenant1Conn.createStatement().execute("SELECT PK2 from " + view1);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1011-1011,[                tenant2Conn.createStatement().execute("SELECT PK2 from " + divergedView);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1013-1013,[                    tenant2Conn.createStatement().execute("SELECT KV FROM " + divergedView);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1022-1022,[                tenantConn.createStatement().executeUpdate(upsert);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1028-1028,[                ResultSet rs = tenantConn.createStatement().executeQuery(sql);],,testAddingPkAndKeyValueColumnsToBaseTableWithDivergedView,1039-1039,[            conn.createStatement().execute(alterBaseTable);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAlterSaltedBaseTableWithViews,1054-1054,[            conn.createStatement().execute(baseTableDDL);],,testAlterSaltedBaseTableWithViews,1058-1058,[                tenant1Conn.createStatement().execute(view1DDL);],,testAlterSaltedBaseTableWithViews,1065-1065,[            conn.createStatement().execute(alterBaseTable);],,testAlterSaltedBaseTableWithViews,1072-1072,[                tenant1Conn.createStatement().execute("SELECT KV from " + view1);],,testAlterSaltedBaseTableWithViews,1073-1073,[                tenant1Conn.createStatement().execute("SELECT PK2 from " + view1);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAlteringViewConditionallyModifiesHTableMetadata,1084-1084,[            conn.createStatement().execute(baseTableDDL);],,testAlteringViewConditionallyModifiesHTableMetadata,1088-1088,[                tenant1Conn.createStatement().execute(view1DDL);],,testAlteringViewConditionallyModifiesHTableMetadata,1091-1091,[                tenant1Conn.createStatement().execute(alterView);],,testAlteringViewConditionallyModifiesHTableMetadata,1097-1097,[                tenant1Conn.createStatement().execute(alterView);],,testAlteringViewConditionallyModifiesHTableMetadata,1106-1106,[                tenant1Conn.createStatement().execute(alterView);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAlteringViewThatHasChildViews,590-590,[            conn.createStatement().execute(baseTableDDL);],,testAlteringViewThatHasChildViews,593-593,[            conn.createStatement().execute(childViewDDL);],,testAlteringViewThatHasChildViews,597-597,[            conn.createStatement().execute(addColumnToChildViewDDL);],,testAlteringViewThatHasChildViews,601-601,[            conn.createStatement().execute(grandChildViewDDL);],,testAlteringViewThatHasChildViews,605-605,[            conn.createStatement().execute(dropColumnFromChildView);],,testAlteringViewThatHasChildViews,609-609,[            conn.createStatement().execute(dropColumnFromChildView);],,testAlteringViewThatHasChildViews,613-613,[            conn.createStatement().execute(addColumnToChildView);],,testAlteringViewThatHasChildViews,615-615,[            conn.createStatement().execute("SELECT V5 FROM " + childView);    ],,testAlteringViewThatHasChildViews,619-619,[                conn.createStatement().execute("SELECT V5 FROM " + grandChildView);],,testAlteringViewThatHasChildViews,627-627,[            conn.createStatement().execute(dropColumnFromGrandChildView);],,testAlteringViewThatHasChildViews,631-631,[            conn.createStatement().execute(dropColumnFromGrandChildView);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testCacheInvalidatedAfterAddingColumnToBaseTableWithViews,543-543,[            globalConn.createStatement().execute(tableDDL);],,testCacheInvalidatedAfterAddingColumnToBaseTableWithViews,549-549,[                tenantConn.createStatement().execute(viewDDL);],,testCacheInvalidatedAfterAddingColumnToBaseTableWithViews,552-552,[                globalConn.createStatement().execute("ALTER TABLE " + baseTable + " ADD NEW_COL VARCHAR");],,testCacheInvalidatedAfterAddingColumnToBaseTableWithViews,555-555,[                tenantConn.createStatement().execute("SELECT NEW_COL FROM " + viewName);],,testCacheInvalidatedAfterAddingColumnToBaseTableWithViews,556-556,[                tenantConn.createStatement().execute("SELECT NEW_COL FROM " + baseTable);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testChangingPKOfBaseTableChangesPKForAllViews,743-743,[            globalConn.createStatement().execute(baseTableDDL);],,testChangingPKOfBaseTableChangesPKForAllViews,747-747,[            tenant1Conn.createStatement().execute(view1DDL);],,testChangingPKOfBaseTableChangesPKForAllViews,750-750,[            tenant1Conn.createStatement().execute(view2DDL);],,testChangingPKOfBaseTableChangesPKForAllViews,754-754,[            tenant2Conn.createStatement().execute(view3DDL);],,testChangingPKOfBaseTableChangesPKForAllViews,757-757,[            globalConn.createStatement().execute(view4DDL);],,testChangingPKOfBaseTableChangesPKForAllViews,760-760,[            globalConn.createStatement().execute(alterBaseTable);],,testChangingPKOfBaseTableChangesPKForAllViews,764-764,[            globalConn.createStatement().execute("SELECT * FROM " + baseTable);],,testChangingPKOfBaseTableChangesPKForAllViews,767-767,[            tenant1Conn.createStatement().execute("SELECT * FROM " + view1);],,testChangingPKOfBaseTableChangesPKForAllViews,770-770,[            tenant1Conn.createStatement().execute("SELECT * FROM " + view2);],,testChangingPKOfBaseTableChangesPKForAllViews,773-773,[            tenant2Conn.createStatement().execute("SELECT * FROM " + view3);],,testChangingPKOfBaseTableChangesPKForAllViews,776-776,[            globalConn.createStatement().execute("SELECT * FROM " + view4);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testDivergedViewsStayDiverged,642-642,[            conn.createStatement().execute(tableDDL);],,testDivergedViewsStayDiverged,645-645,[            conn.createStatement().execute(viewDDL);],,testDivergedViewsStayDiverged,648-648,[            conn.createStatement().execute(viewDDL);],,testDivergedViewsStayDiverged,652-652,[            conn.createStatement().execute(dropColumn);],,testDivergedViewsStayDiverged,655-655,[            conn.createStatement().execute(alterBaseTable);],,testDivergedViewsStayDiverged,660-660,[                conn.createStatement().execute(sql);],,testDivergedViewsStayDiverged,667-667,[            conn.createStatement().execute(sql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testDropColumnOnTableWithViewsNotAllowed,567-567,[            conn.createStatement().execute(tableDDL);],,testDropColumnOnTableWithViewsNotAllowed,570-570,[            conn.createStatement().execute(viewDDL);],,testDropColumnOnTableWithViewsNotAllowed,574-574,[                conn.createStatement().execute(dropColumn);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/AlterTableWithViewsIT.java,testAddPKColumnToBaseTableWhoseViewsHaveIndices,895-895,[            PreparedStatement stmt = globalConn.prepareStatement(upsert);],,
STYLE,FE_FLOATING_POINT_EQUALITY,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testRandomFunction,315-315,[            assertTrue(rs.getDouble(1) != rs.getDouble(2));],,testRandomFunction,316-316,[            assertTrue(rs.getDouble(2) != rs.getDouble(3));],,testRandomFunction,317-317,[            assertTrue(rs.getDouble(3) == rs.getDouble(5));],,testRandomFunction,318-318,[            assertTrue(rs.getDouble(4) != rs.getDouble(5));],,testRandomFunction,320-320,[            assertTrue(rand0 != rs.getDouble(1));],,testRandomFunction,321-321,[            assertTrue(rand1 != rs.getDouble(3));],,testRandomFunction,322-322,[            assertTrue(rand2 != rs.getDouble(4));],,testRandomFunction,326-326,[            assertTrue(rs.getDouble(1) != rs.getDouble(2));],,testRandomFunction,327-327,[            assertTrue(rs.getDouble(2) != rs.getDouble(3));],,testRandomFunction,328-328,[            assertTrue(rs.getDouble(3) == rs.getDouble(5));],,testRandomFunction,329-329,[            assertTrue(rs.getDouble(4) != rs.getDouble(5));],,testRandomFunction,331-331,[            assertTrue(rand01 != rs.getDouble(1));],,testRandomFunction,332-332,[            assertTrue(rand11 != rs.getDouble(3));],,testRandomFunction,333-333,[            assertTrue(rand21 != rs.getDouble(4));],,testRandomFunction,334-334,[            assertTrue(rs.getDouble(1) != rs.getDouble(2));],,testRandomFunction,335-335,[            assertTrue(rs.getDouble(2) != rs.getDouble(3));],,testRandomFunction,336-336,[            assertTrue(rs.getDouble(3) == rs.getDouble(5));],,testRandomFunction,337-337,[            assertTrue(rs.getDouble(4) != rs.getDouble(5));],,testRandomFunction,342-342,[            assertTrue(rs.getDouble(1) != rs.getDouble(2));],,testRandomFunction,343-343,[            assertTrue(rs.getDouble(2) != rs.getDouble(3));],,testRandomFunction,344-344,[            assertTrue(rs.getDouble(3) == rs.getDouble(5));],,testRandomFunction,345-345,[            assertTrue(rs.getDouble(4) != rs.getDouble(5));],,testRandomFunction,346-346,[            assertTrue(rand0 != rs.getDouble(1));],,testRandomFunction,347-347,[            assertTrue(rand1 == rs.getDouble(3));],,testRandomFunction,348-348,[            assertTrue(rand2 == rs.getDouble(4));],,testRandomFunction,350-350,[            assertTrue(rand01 != rs.getDouble(1));],,testRandomFunction,351-351,[            assertTrue(rand11 == rs.getDouble(3));],,testRandomFunction,352-352,[            assertTrue(rand21 == rs.getDouble(4));],,testRandomFunction,354-354,[            assertTrue(rand12 == rs.getDouble(3));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalArithmeticWithIntAndLong,400-400,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalAveraging,240-240,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertSelect,132-132,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testDecimalUpsertValue,48-48,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArithmeticQueryIT.java,testRandomFunction,300-300,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ArithmeticQueryIT.java,createTableWithValues,1040-1040,[        conn.createStatement().execute(ddl.toString());],,createTableWithValues,1041-1041,[        conn.createStatement().execute(dmll.toString() + dmlr.toString());],,createTableWithValues,1044-1044,[        ResultSet rs = conn.createStatement().executeQuery(select.toString());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,testArrayAppendFunctionIntToCharArray,172-172,[        rs = conn.createStatement().executeQuery("SELECT ARRAY_APPEND(varchars,234) FROM regions WHERE region_name = 'SF Bay Area'");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,testArrayAppendFunctionVarcharToIntegerArray,181-181,[        rs = conn.createStatement().executeQuery("SELECT ARRAY_APPEND(integers,'234') FROM regions WHERE region_name = 'SF Bay Area'");],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,testArrayAppendFunctionDouble2,126-126,[        Double[] doubles = new Double[]{23.45, 46.345, 23.234, 45.6, 5.78, new Double(23)};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,testArrayAppendFunctionWithUpsert3,324-324,[        Double[] doubles = new Double[]{5.67, 7.87, new Double(9)};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,testArrayAppendFunctionWithUpsertSelect1,357-357,[        Double[] doubles = new Double[]{5.67, 7.87, new Double(9), new Double(5)};],,testArrayAppendFunctionWithUpsertSelect1,363-363,[        doubles = new Double[]{56.7, 7.87, new Double(9.2), new Double(5)};],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,initTablesDesc,51-51,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,initTablesDesc,61-61,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ArrayConcatFunctionIT.java,testArrayConcatFunctionIntToCharArray,172-172,[        rs = conn.createStatement().executeQuery("SELECT ARRAY_CAT(varchars,ARRAY[23,45]) FROM regions WHERE region_name = 'SF Bay Area'");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ArrayConcatFunctionIT.java,testArrayConcatFunctionVarcharToIntegerArray,181-181,[        rs = conn.createStatement().executeQuery("SELECT ARRAY_CAT(integers,ARRAY['a', 'b']) FROM regions WHERE region_name = 'SF Bay Area'");],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayConcatFunctionIT.java,testArrayConcatFunctionDouble2,110-110,[        Double[] doubles = new Double[]{23.45, 46.345, 23.234, 45.6, 5.78, new Double(23)};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayConcatFunctionIT.java,testArrayConcatFunctionWithUpsert3,324-324,[        Double[] doubles = new Double[]{5.67, 7.87, new Double(9), new Double(8)};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayConcatFunctionIT.java,testArrayConcatFunctionWithUpsertSelect1,357-357,[        Double[] doubles = new Double[]{5.67, 7.87, new Double(9), new Double(4), 5.67, 7.87, new Double(9), new Double(4)};],,testArrayConcatFunctionWithUpsertSelect1,363-363,[        doubles = new Double[]{56.7, 7.87, new Double(9.2), new Double(3.4), 56.7, 7.87, new Double(9.2), new Double(3.4)};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,926-926,[        Double d = new Double(2.0);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectGetString,944-944,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArraySelectSingleArrayElemWithCast,907-907,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,912-912,[        conn = DriverManager.getConnection(getUrl(), props);],,testArraySelectSingleArrayElemWithCast,922-922,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCast,1026-1026,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,1031-1031,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCast,1041-1041,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithCastForVarLengthArr,1060-1060,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,1064-1064,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithCastForVarLengthArr,1075-1075,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithDescOrder,815-815,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,821-821,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithDescOrder,835-835,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithFloatArray,852-852,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,857-857,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithFloatArray,864-864,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testArrayWithVarCharArray,880-880,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithVarCharArray,885-885,[        conn = DriverManager.getConnection(getUrl(), props);],,testArrayWithVarCharArray,892-892,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testCharPrimaryKey,2715-2715,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testCharPrimaryKey,2721-2721,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc1,2074-2074,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc1,2080-2080,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc2,2099-2099,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc2,2105-2105,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc3,2124-2124,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc3,2130-2130,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc4,2149-2149,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc4,2155-2155,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc5,2174-2174,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc5,2180-2180,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc6,2199-2199,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc6,2205-2205,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc7,2224-2224,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc7,2230-2230,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testComparisonOperatorsForDesc8,2249-2249,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testComparisonOperatorsForDesc8,2255-2255,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testFixedWidthCharArray,1096-1096,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,1101-1101,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,1108-1108,[        conn = DriverManager.getConnection(getUrl(), props);],,testFixedWidthCharArray,1119-1119,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArray,1716-1716,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1723-1723,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithArray,1737-1737,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testPKWithDescArray,2019-2019,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithDescArray,2026-2026,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithDescArray,2038-2038,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithDescArray,2048-2048,[        conn = DriverManager.getConnection(getUrl(), props);],,testPKWithDescArray,2057-2057,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testScanByArrayValue,145-145,[		Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testScanWithArrayInWhereClause,189-189,[		Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection1,2274-2274,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection1,2280-2280,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection10,2537-2537,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection10,2543-2543,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection11,2564-2564,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection11,2570-2570,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection12,2603-2603,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection12,2609-2609,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection13,2646-2646,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection13,2652-2652,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection14,2685-2685,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection14,2691-2691,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection2,2302-2302,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection2,2308-2308,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection3,2331-2331,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection3,2337-2337,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection4,2361-2361,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection4,2367-2367,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection5,2391-2391,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection5,2397-2397,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection6,2419-2419,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection6,2425-2425,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection7,2448-2448,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection7,2454-2454,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection8,2477-2477,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection8,2483-2483,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testServerArrayElementProjection9,2507-2507,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testServerArrayElementProjection9,2513-2513,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithColumnRef,756-756,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertSelectWithSelectAsSubQuery1,430-430,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,389-389,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1643-1643,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1680-1680,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1564-1564,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1570-1570,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithDiffSizeArrays,1584-1584,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonInWhereClauseWithSameArrays,1526-1526,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1533-1533,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonInWhereClauseWithSameArrays,1547-1547,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArrayIT.java,testVarLengthArrComparisonWithNulls,1602-1602,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1608-1608,[        conn = DriverManager.getConnection(getUrl(), props);],,testVarLengthArrComparisonWithNulls,1622-1622,[        conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testArrayRefToLiteral,1785-1785,[            if (conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/ArrayIT.java,testPKWithArrayNotInEnd,1761-1761,[            if (conn != null) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInGroupByClause,1206-1206,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testArrayIndexUsedInWhereClause,1175-1175,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testSelectSpecificIndexOfAnArrayAsArrayFunction,314-314,[			conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,406-406,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1660-1660,[            conn.createArrayOf("DOUBLE", doubleArr);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNullUsingPreparedStmt,1699-1699,[            conn.createArrayOf("VARCHAR", strArr);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRef,649-649,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArray,681-681,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testSelectWithArrayWithColumnRefWithVarLengthArrayWithNullValue,716-716,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithArray,389-389,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,testUpsertValuesWithNull,1643-1643,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayIT.java,analyzeTable,174-174,[		PreparedStatement statement = conn.prepareStatement(analyse);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/end2end/ArrayIT.java,testVariableLengthArrayWithNullValue,1235-1235,[			String[] strArr = new String[1];],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,testArrayPrependFunctionIntToCharArray,242-242,[        rs = conn.createStatement().executeQuery("SELECT ARRAY_PREPEND(234,varchars) FROM regions WHERE region_name = 'SF Bay Area'");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,testArrayPrependFunctionVarcharToIntegerArray,251-251,[        rs = conn.createStatement().executeQuery("SELECT ARRAY_PREPEND('234',integers) FROM regions WHERE region_name = 'SF Bay Area'");],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,testArrayPrependFunctionDouble2,196-196,[        Double[] doubles = new Double[]{new Double(23), 23.45, 46.345, 23.234, 45.6, 5.78};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,testArrayPrependFunctionWithUpsert3,394-394,[        Double[] doubles = new Double[]{new Double(9), 5.67, 7.87};],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,testArrayPrependFunctionWithUpsertSelect1,427-427,[        Double[] doubles = new Double[]{new Double(5), new Double(9), 5.67, 7.87};],,testArrayPrependFunctionWithUpsertSelect1,433-433,[        doubles = new Double[]{new Double(5), new Double(9.2), 56.7, 7.87};],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,initTableWithVarArray,33-33,[        conn.createStatement().execute("CREATE TABLE t ( k VARCHAR PRIMARY KEY, a " + type + "[],b " + type + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,initTablesDesc,65-65,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,initTableWithVarArray,35-35,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO t VALUES(?,?," + value + ")");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ArrayPrependFunctionIT.java,initTablesDesc,75-75,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertBigIntWithNulls,71-71,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertBooleanWithNulls,143-143,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertCharWithNulls1,273-273,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertCharWithNulls2,288-288,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertDateWithNulls1,179-179,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertDateWithNulls2,195-195,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertDoubleWithNulls,161-161,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertFloatWithNulls,89-89,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertIntWithNulls,33-33,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertSmallIntWithNulls,107-107,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertTimeStampWithNulls1,243-243,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertTimeStampWithNulls2,258-258,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertTimeWithNulls1,211-211,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertTimeWithNulls2,227-227,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertTinyIntWithNulls,125-125,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ArraysWithNullsIT.java,testArrayUpsertVarcharWithNulls,53-53,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/AutoCommitIT.java,testMutationJoin,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseQueryIT.java,analyzeTable,128-128,[        conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseQueryIT.java,initTable,98-98,[            conn.createStatement().execute(indexDDL);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testDateDateSubtract,617-617,[        statement.setDate(3, new Date(date.getTime() + TestUtil.MILLIS_IN_DAY - 1));],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,97-97,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableView,59-59,[            try { conn.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewNonString,71-71,[            try { conn.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,testUpdatableViewsWithSameNameDifferentTenants,97-97,[            try { conn1.close();} catch (Exception ignored) {}],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,103-103,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,120-120,[            conn.createStatement().execute("UPSERT INTO v(k2,v1,v2) VALUES(" + i + ",'" + valuePrefix + "v1-" + (i%5) + "','" + valuePrefix + "v2-" + (i%2) + "')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createBaseTable,111-111,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndPopulateTenantView,117-117,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndVerifyIndex,133-133,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN SELECT k1, k2, v2 FROM v WHERE v2='" + valuePrefix + "v2-1'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,createAndVerifyIndexNonStringTenantId,157-157,[        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN SELECT k1, k2, v2 FROM v WHERE v2='" + valuePrefix + "v2-1'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseTenantSpecificViewIndexIT.java,verifyViewData,173-173,[        ResultSet rs = conn.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,89-89,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableView,96-96,[        conn.createStatement().execute(ddl);],,testUpdatableView,98-98,[        conn.createStatement().execute(ddl);],,testUpdatableView,105-105,[        rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName);],,testUpdatableView,100-100,[            conn.createStatement().execute("UPSERT INTO " + fullTableName + " VALUES(" + (i % 4) + "," + (i+100) + "," + (i > 5 ? 2 : 1) + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,205-205,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/BaseViewIT.java,testUpdatableViewIndex,168-168,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/BinaryRowKeyIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/CSVCommonsLoaderIT.java,testAllDatatypes,545-545,[                            .toString().toUpperCase());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,186-186,[        Connection conn = DriverManager.getConnection(url, props);],,testUnfoundSingleColumnCaseStatement,191-191,[        Connection upsertConn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/CaseStatementIT.java,testUnfoundSingleColumnCaseStatement,201-201,[        PreparedStatement stmt = upsertConn.prepareStatement(upsertStmt);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/CbrtFunctionEnd2EndIT.java,initTable,54-54,[            closeStmtAndConn(stmt, conn);],,initTable,43-43,[        Connection conn = null;],,initTable,46-46,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/CbrtFunctionEnd2EndIT.java,initTable,54-54,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testAddTime,719-719,[      conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testAddTimeStamp,653-653,[      conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testDateDateSubtract,607-607,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testSubtractDate,787-787,[      conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testSubtractTime,753-753,[      conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testSubtractTimeStamp,686-686,[      conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ClientTimeArithmeticQueryIT.java,testValidArithmetic,170-170,[                PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CoalesceFunctionIT.java,testCoalesce,48-48,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/CoalesceFunctionIT.java,wrongDataTypeOfSecondParameter,232-232,[            conn.createStatement().executeQuery(],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ColumnProjectionOptimizationIT.java,testSelectFromViewOnExistingTable,237-237,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CompareDecimalToLongIT.java,initTableValues,40-40,[        Connection conn = DriverManager.getConnection(url);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/end2end/ConnectionQueryServicesTestImpl.java,,41-41,[    protected int NUM_SLAVES_BASE = 1; // number of slaves for the cluster],,
MALICIOUS_CODE,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,75-75,[        badContextClassloader = new URLClassLoader(new URL[] {],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,setUpBeforeClass,69-69,[        stmt.execute("CREATE TABLE test (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,67-67,[        Connection conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,setUpBeforeClass,68-68,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,100-100,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,101-101,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,94-112,[        Runnable target = new Runnable() {, , ,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     ResultSet rs = stmt.executeQuery("select * from test where name = 'name2'");,                     while (rs.next()) {,                         // Just make sure we run over all records,                     },                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,126-126,[                    Connection conn = DriverManager.getConnection(getUrl());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,122-136,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     ResultSet tablesRs = conn.getMetaData().getTables(null, null, null, null);,                     while (tablesRs.next()) {,                         // Just make sure we run over all records,                     },                     tablesRs.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,run,152-152,[                    stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");],,run,153-153,[                    stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");],,run,154-154,[                    conn.commit();],,run,155-155,[                    ResultSet rs = stmt.executeQuery("SELECT * FROM T2");],,run,156-156,[                    assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,150-150,[                    Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ContextClassloaderIT.java,run,151-151,[                    Statement stmt = conn.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/ContextClassloaderIT.java,,146-164,[        Runnable target = new Runnable() {,             @Override,             public void run() {,                 try {,                     Connection conn = DriverManager.getConnection(getUrl());,                     Statement stmt = conn.createStatement();,                     stmt.execute("CREATE TABLE T2 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR)");,                     stmt.execute("UPSERT INTO T2 VALUES (1, 'name1')");,                     conn.commit();,                     ResultSet rs = stmt.executeQuery("SELECT * FROM T2");,                     assertTrue(rs.next());,                     assertFalse(rs.next());,                     rs.close();,                     stmt.close();,                     conn.close();,                 } catch (SQLException e) {,                     throw new RuntimeException(e);,                 },             }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CreateTableIT.java,testAlterDeletedTable,420-420,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testAlterDeletedTable,424-424,[        Connection connAt50 = DriverManager.getConnection(getUrl(), props);],,testAlterDeletedTable,428-428,[        Connection connAt20 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CreateTableIT.java,testStartKeyStopKey,51-51,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/CustomEntityDataIT.java,initTableValues,50-50,[        Connection conn = DriverManager.getConnection(url, props);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/DateTimeIT.java,callYearFunction,399-399,[                stmt.executeQuery(String],,callYearFunction,401-401,[        assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/DateTimeIT.java,callYearFunction,397-397,[        Statement stmt = conn.createStatement();],,callYearFunction,398-398,[        ResultSet rs =],,callYearFunction,400-400,[                    .format("SELECT %s FROM SYSTEM.CATALOG LIMIT 1", invocation));],,callYearFunction,399-399,[                stmt.executeQuery(String],,callYearFunction,401-401,[        assertTrue(rs.next());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,selectBetweenDates,305-305,[        ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,testDateBetweenLiterals,390-390,[            ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,testSelectLiteralDate,316-316,[        ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,testSelectLiteralDateCompare,325-325,[        ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,testSelectWhereDateAndToDateEqual,343-343,[        ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,testSelectWhereDatesEqual,334-334,[        ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,testSelectWhereSameDatesUnequal,362-362,[        ResultSet rs = statement.executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DateTimeIT.java,callYearFunction,399-399,[                stmt.executeQuery(String],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidCharacters,86-86,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('zzxxuuyyzzxxuuyy', 'hex')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidEncoding,127-127,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'someNonexistFormat')");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DecodeFunctionIT.java,invalidLength,101-101,[			conn.createStatement().executeQuery("SELECT * FROM test_table WHERE some_column = DECODE('8', 'hex')");],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,471-471,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,339-339,[            } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,411-411,[            } catch (Exception ex) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteForTableWithRowTimestampCol,487-487,[        String tableName = "testDeleteForTableWithRowTimestampCol".toUpperCase();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,446-446,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTable,433-433,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,306-306,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteAllFromTableWithIndex,287-287,[            Statement stm = con.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteForTableWithRowTimestampCol,500-500,[                    .prepareStatement("UPSERT INTO " + tableName + " (HOST, STAT_DATE, CORE, DB) VALUES(?,?,?,?)");],,testDeleteForTableWithRowTimestampCol,520-520,[                    .prepareStatement("UPSERT INTO " + tableName + " (HOST, CORE, DB) VALUES(?,?,?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteForTableWithRowTimestampCol,490-490,[            Statement stm = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,376-376,[                    .prepareStatement("UPSERT INTO web_stats(HOST, DOMAIN, FEATURE, DATE, CORE, DB, ACTIVE_VISITOR) VALUES(?,?, ? , ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DeleteIT.java,testDeleteRowFromTableWithImmutableIndex,361-361,[            Statement stm = con.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DeleteIT.java,testDeleteForTableWithRowTimestampCol,491-491,[            stm.execute("CREATE TABLE IF NOT EXISTS " + tableName +],,testDeleteForTableWithRowTimestampCol,510-510,[            conn.createStatement().execute("DELETE FROM " + tableName);],,testDeleteForTableWithRowTimestampCol,514-514,[            ResultSet rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + tableName);],,testDeleteForTableWithRowTimestampCol,529-529,[            conn.createStatement().execute("DELETE FROM " + tableName);],,testDeleteForTableWithRowTimestampCol,533-533,[            rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DeleteIT.java,assertTableCount,131-131,[        ResultSet rs = conn.createStatement().executeQuery("SELECT count(*) FROM " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DeleteIT.java,testDeleteForTableWithRowTimestampCol,500-500,[                    .prepareStatement("UPSERT INTO " + tableName + " (HOST, STAT_DATE, CORE, DB) VALUES(?,?,?,?)");],,testDeleteForTableWithRowTimestampCol,520-520,[                    .prepareStatement("UPSERT INTO " + tableName + " (HOST, CORE, DB) VALUES(?,?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DeleteIT.java,assertIndexUsed,142-142,[            PreparedStatement stmt = conn.prepareStatement("EXPLAIN " + query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/DerivedTableIT.java,<init>,69-69,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/DerivedTableIT.java,<init>,70-70,[        this.plans = plans;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DerivedTableIT.java,initTable,82-82,[                conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DerivedTableIT.java,testDerivedTableWithGroupBy,311-311,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testDerivedTableWithGroupBy,333-333,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/DisableLocalIndexIT.java,testDisabledLocalIndexes,61-61,[        conn.createStatement().execute("CREATE TABLE " + tableName + " (k1 VARCHAR NOT NULL, k2 VARCHAR, CONSTRAINT PK PRIMARY KEY(K1,K2)) MULTI_TENANT=true");],,testDisabledLocalIndexes,62-62,[        conn.createStatement().execute("UPSERT INTO " + tableName + " VALUES('t1','x')");],,testDisabledLocalIndexes,63-63,[        conn.createStatement().execute("UPSERT INTO " + tableName + " VALUES('t2','y')");],,testDisabledLocalIndexes,81-81,[        tsconn.createStatement().execute("CREATE VIEW A.BAR(V1 VARCHAR) AS SELECT * FROM " + tableName);],,testDisabledLocalIndexes,86-86,[            conn.createStatement().execute("CREATE LOCAL INDEX I2 ON " + tableName + "(k2)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testAmbiguousStaticSelect,196-196,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/DynamicColumnIT.java,testFakeCFDynamicUpsert,213-213,[            statement.executeQuery();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicFamilyIT.java,doBeforeTestSetup,99-99,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseInsensitiveDynCol,239-239,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/DynamicFamilyIT.java,testGetCaseSensitiveDynCol,264-264,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,doBeforeTestSetup,56-56,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testFullUpsert,138-138,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testMultiUpsert,105-105,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/DynamicUpsertIT.java,testUpsert,75-75,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testInvalidEncodingType,145-145,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/EncodeFunctionIT.java,testUnsupportedEncodingType,130-130,[            conn.createStatement().executeQuery("SELECT * FROM TEST_TABLE WHERE pk = ENCODE(1, 'HEX')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/EncodeFunctionIT.java,testEncodeHelper,56-56,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/EvaluationOfORIT.java,testFalseOrFalse,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/EvaluationOfORIT.java,testPKOrNotPKInOREvaluation,51-51,[	    Connection conn = DriverManager.getConnection(getUrl(), props);	    ],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,121-121,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,224-224,[            statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExecuteStatementsIT.java,testCharPadding,167-167,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,132-132,[        PreparedStatement statement = conn.prepareStatement(query);],,testCharPadding,134-134,[        statement = conn.prepareStatement(],,testCharPadding,163-163,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,171-171,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,175-175,[            assertCharacterPadding(conn.prepareStatement(query), rowKey, testString);],,testCharPadding,179-179,[            statement = conn.prepareStatement(query);],,testCharPadding,185-185,[            statement = conn.prepareStatement(query);],,testCharPadding,194-194,[            statement = conn.prepareStatement(upsert);],,testCharPadding,205-205,[            statement = conn.prepareStatement(upsert);],,testCharPadding,212-212,[            assertCharacterPadding(conn.prepareStatement(query), A_VALUE, B_VALUE);            ],,testCharPadding,215-215,[            statement = conn.prepareStatement(upsert);],,testCharPadding,219-219,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,223-223,[            statement = conn.prepareStatement(query);],,testCharPadding,225-225,[            assertCharacterPadding(conn.prepareStatement(query), testString2, testString2);],,testCharPadding,228-228,[            statement = conn.prepareStatement(upsert);],,testCharPadding,234-234,[            assertCharacterPadding(conn.prepareStatement(query), rowKey2, rowKey2);],,testCharPadding,237-237,[            statement = conn.prepareStatement(upsert);],,testCharPadding,243-243,[            statement = conn.prepareStatement(query);],,testCharPadding,254-254,[                statement = conn.prepareStatement(upsert);],,testCharPadding,268-268,[                statement = conn.prepareStatement(upsert);],,testCharPadding,281-281,[            statement = conn.prepareStatement(upsert);],,testCharPadding,287-287,[            assertCharacterPadding(conn.prepareStatement(query), "morning1", "xyz");],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/ExpFunctionEnd2EndIT.java,initTable,55-55,[            closeStmtAndConn(stmt, conn);],,initTable,44-44,[        Connection conn = null;],,initTable,47-47,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/ExpFunctionEnd2EndIT.java,initTable,55-55,[            closeStmtAndConn(stmt, conn);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,184-184,[        PreparedStatement statement = conn.prepareStatement(query);],,getResultSet,185-185,[        ResultSet rs = statement.executeQuery();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateFunctions,114-114,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,testDateFunctions,132-132,[            rs = getResultSet(conn, queryPrefix + queryDateArg);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testDateGroupBy,158-158,[            rs = getResultSet(conn, query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testToDateFunctionBind,61-61,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,testTypeMismatchToDateFunctionBind,82-82,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ExtendedQueryExecIT.java,getResultSet,184-184,[        PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/FunkyNamesIT.java,initTableValues,46-46,[        Connection conn = DriverManager.getConnection(url, props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/GetSetByteBitFunctionEnd2EndIT.java,initTable,56-56,[            closeStmtAndConn(stmt, conn);],,initTable,47-47,[        Connection conn = null;],,initTable,50-50,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/GetSetByteBitFunctionEnd2EndIT.java,initTable,56-56,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testBooleanInGroupBy,126-126,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testBooleanInGroupBy,130-130,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO bool_gb(id,v2,v3) VALUES(?,?,?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByCaseIT.java,testExpressionInGroupBy,84-84,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/GroupByCaseIT.java,testGroupByCase,217-217,[        conn.createStatement().executeQuery(GROUPBY1);],,testGroupByCase,218-218,[        conn.createStatement().executeQuery(GROUPBY2);],,testGroupByCase,221-221,[            conn.createStatement().executeQuery(GROUPBY3);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/GroupByCaseIT.java,testBooleanInGroupBy,151-151,[            ResultSet rs = conn.createStatement().executeQuery("SELECT v1, v2, v3 from bool_gb group by " + gb);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testGroupByCondition,87-87,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByCondition,117-117,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testGroupByWithIntegerDivision1,583-583,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByWithIntegerDivision1,589-589,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testGroupByWithIntegerDivision2,619-619,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByWithIntegerDivision2,625-625,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeDeleteUngroupedAggregation,539-539,[        Connection conn = DriverManager.getConnection(url, props);],,testPointInTimeDeleteUngroupedAggregation,556-556,[        Connection futureConn = DriverManager.getConnection(getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 3), props);],,testPointInTimeDeleteUngroupedAggregation,566-566,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,328-328,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,337-337,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeGroupedAggregation,352-352,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedAggregation,425-425,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,449-449,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedAggregation,461-461,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeUngroupedLimitedAggregation,484-484,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,501-501,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeUngroupedLimitedAggregation,513-513,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/GroupByIT.java,testPointInTimeGroupedAggregation,332-332,[        stmt.execute(updateStmt); // should commit too],,testPointInTimeGroupedAggregation,354-354,[        ResultSet rs = statement.executeQuery(query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,77-77,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinIT.java,<init>,78-78,[        this.plans = plans;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1232-1232,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1233-1233,[                assertTrue (rs.next());],,testLeftJoin,1274-1274,[            conn.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1231-1231,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,testLeftJoin,1232-1232,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,1233-1233,[                assertTrue (rs.next());],,testLeftJoin,1274-1274,[            conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,initTable,96-96,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1231-1231,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2553-2553,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithIncomparableJoinKeyTypes,2381-2381,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/HashJoinIT.java,testNonEquiJoin,3276-3276,[                statement.executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2556-2556,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testUpsertWithJoin,2563-2563,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,2569-2569,[            conn.createStatement().execute("UPSERT INTO " + tempTable ],,testUpsertWithJoin,2639-2639,[            conn.createStatement().execute("CREATE TABLE " + sourceTable ],,testUpsertWithJoin,2644-2644,[            conn.createStatement().execute("CREATE TABLE " + joinTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,initTable,99-99,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinPlanWithIndex,2427-2427,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinPlanWithIndex,2446-2446,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithLimit,3190-3190,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithLimit,3222-3222,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSetMaxRows,3300-3300,[                ResultSet rs = statement.executeQuery(query);],,testJoinWithSetMaxRows,3320-3320,[                rs = statement.executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSkipMergeOptimization,2474-2474,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithSubqueryAndAggregation,2951-2951,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testJoinWithSubqueryAndAggregation,2971-2971,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testJoinWithSubqueryAndAggregation,3000-3000,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,testJoinWithSubqueryAndAggregation,3020-3020,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query4);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testJoinWithWildcard,2133-2133,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoinWithAggregation,1601-1601,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testLeftJoinWithAggregation,1621-1621,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,testLeftJoinWithAggregation,1650-1650,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query3);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testNestedSubqueries,3143-3143,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testRightJoinWithAggregation,1692-1692,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testRightJoinWithAggregation,1721-1721,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSelfJoin,2516-2516,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,testSelfJoin,2542-2542,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1564-1564,[                    rs = conn.createStatement().executeQuery("EXPLAIN " + query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinIT.java,testSubJoin,2822-2822,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testUpsertWithJoin,2577-2577,[            PreparedStatement statement = conn.prepareStatement(query);],,testUpsertWithJoin,2651-2651,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testUpsertWithJoin,2675-2675,[            upsertStmt = conn.prepareStatement(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testLeftJoin,1231-1231,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testMultiLeftJoin,1844-1844,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinIT.java,testStarJoin,1524-1524,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,<init>,62-62,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,<init>,63-63,[        this.plans = plans;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,initTable,81-81,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,initTable,84-84,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinLocalIndexIT.java,testJoinWithLocalIndex,145-145,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithLocalIndex,155-155,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithLocalIndex,165-165,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinMoreIT.java,testBug2480,571-571,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinMoreIT.java,testJoinOnDynamicColumns,250-250,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinMoreIT.java,testSubqueryWithoutData,454-454,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/HashJoinMoreIT.java,testSubqueryWithoutData,495-495,[            Statement statement = conn.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinMoreIT.java,testJoinOverSaltedTables,111-111,[            conn.createStatement().execute("CREATE TABLE " + tempTableNoSalting ],,testJoinOverSaltedTables,114-114,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithSalting ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/HashJoinMoreIT.java,testJoinWithKeyRangeOptimization,317-317,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithCompositePK ],,testJoinWithKeyRangeOptimization,363-363,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,384-384,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,414-414,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testJoinWithKeyRangeOptimization,444-444,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinMoreIT.java,testJoinOnDynamicColumns,255-255,[            stmt = conn.prepareStatement(ddlA);],,testJoinOnDynamicColumns,259-259,[            stmt = conn.prepareStatement(ddlB);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinMoreIT.java,testJoinOverSaltedTables,118-118,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,127-127,[            upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,140-140,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,164-164,[            statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,203-203,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/HashJoinMoreIT.java,testJoinWithKeyRangeOptimization,325-325,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinWithKeyRangeOptimization,340-340,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,370-370,[            statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,391-391,[            statement = conn.prepareStatement(query);],,testJoinWithKeyRangeOptimization,421-421,[            statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testLeadingPKWithTrailingRVC,53-53,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testLeadingPKWithTrailingRVC2,75-75,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testWithFixedLengthKV,446-446,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testWithFixedLengthPK,465-465,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,183-183,[            Connection baseConn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,206-206,[                            ResultSet rs = conn.createStatement().executeQuery(sql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,initializeAndGetTable,148-148,[            baseConn.createStatement().execute(tableDDL);],,initializeAndGetTable,154-154,[                conn.createStatement().execute(viewDDL);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InListIT.java,testWithIntegerTypesWithVariedSaltingAndTenancy,196-196,[                            conn.createStatement().execute("UPSERT INTO " + tableName + " " + upsertBody);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/InListIT.java,,231-238,[    List<String> DEFAULT_UPSERT_BODIES = Lists.transform(DEFAULT_UPSERTS, new Function<List<Object>, String>() {,         @Override,         public String apply(List<Object> input) {,             List<Object> pks = input.subList(0, 5);,             Object nonPk = input.get(5);,             ,             return "(pk1, pk2, pk3, pk4, pk5, nonPk) VALUES ( ",                 + Joiner.on(", ").join(pks) + ", '" + nonPk + "')";],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InstrFunctionIT.java,initTable,34-34,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/InstrFunctionIT.java,testInstr,45-45,[        rs = conn.createStatement().executeQuery(queryToExecute);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/InstrFunctionIT.java,testInstrFilter,54-54,[        PreparedStatement stmt = conn.prepareStatement(queryToExecute);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInPk,36-60,[        ensureTableCreated(getUrl(),"IntIntKeyTest");,         Connection conn = DriverManager.getConnection(getUrl());,         String upsert = "UPSERT INTO IntIntKeyTest VALUES(4,2)";,         PreparedStatement upsertStmt = conn.prepareStatement(upsert);,         int rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         upsert = "UPSERT INTO IntIntKeyTest VALUES(6)";,         upsertStmt = conn.prepareStatement(upsert);,         rowsInserted = upsertStmt.executeUpdate();,         assertEquals(1, rowsInserted);,         conn.commit();,         ,         String select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NULL";,         ResultSet rs;,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(0,rs.getInt(1));,         assertTrue(rs.wasNull());,         assertFalse(rs.next());,         select = "SELECT i/j FROM IntIntKeyTest WHERE j IS NOT NULL";,         rs = conn.createStatement().executeQuery(select);,         assertTrue(rs.next());,         assertEquals(2,rs.getInt(1));,         assertFalse(rs.next());,     }],,testIsNullInPK,1732-1760,[        long ts = nextTimestamp();,         ensureTableCreated(getUrl(),PTSDB_NAME,null, ts-2);, ,         // Insert all rows at ts,         String url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + ts;,         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);,         Connection conn = DriverManager.getConnection(url, props);,         conn.setAutoCommit(true);,         PreparedStatement stmt = conn.prepareStatement("upsert into PTSDB VALUES ('', '', ?, 0.5)");,         stmt.setDate(1, D1);,         stmt.execute();,         conn.close();, ,         String query = "SELECT HOST,INST,DATE FROM PTSDB WHERE HOST IS NULL AND INST IS NULL AND DATE=?";,         url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 5); // Run query at timestamp 5,         conn = DriverManager.getConnection(url, props);,         try {,             PreparedStatement statement = conn.prepareStatement(query);,             statement.setDate(1, D1);,             ResultSet rs = statement.executeQuery();,             assertTrue(rs.next());,             assertNull(rs.getString(1));,             assertNull(rs.getString(2));,             assertEquals(D1, rs.getDate(3));,             assertFalse(rs.next());,         } finally {,             conn.close();,         },     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullInCompositeKey,89-89,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/IsNullIT.java,testIsNullWithLastPKColDesc,64-64,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,initTableValues,192-192,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,initTableValues,211-211,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testKeyOnly,67-67,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,88-88,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,93-93,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,105-105,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,testKeyOnly,110-110,[        Connection conn9 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testOr,147-147,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testOr,152-152,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/KeyOnlyIT.java,testQueryWithLimitAndStats,174-174,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/KeyOnlyIT.java,testQueryWithLimitAndStats,181-181,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/LikeExpressionIT.java,doBeforeTestSetup,47-47,[            closeStmtAndConn(stmt, conn);],,doBeforeTestSetup,38-38,[        Connection conn = null;],,doBeforeTestSetup,41-41,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/LikeExpressionIT.java,doBeforeTestSetup,47-47,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/LikeExpressionIT.java,testLikeEverythingExpression,91-91,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/LikeExpressionIT.java,testLikeExpression,69-69,[        ResultSet rs = stmt.executeQuery(cmd);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/LnLogFunctionEnd2EndIT.java,initTable,71-71,[            closeStmtAndConn(stmt, conn);],,initTable,58-58,[        Connection conn = null;],,initTable,61-61,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/LnLogFunctionEnd2EndIT.java,initTable,71-71,[            closeStmtAndConn(stmt, conn);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/LnLogFunctionEnd2EndIT.java,testNumberSpec,93-93,[                conn.createStatement().executeQuery(],,testNumberSpec,107-107,[                conn.createStatement().executeQuery(],,testNumberSpec,121-121,[                conn.createStatement().executeQuery(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/LnLogFunctionEnd2EndIT.java,updateTableSpec,77-77,[                conn.prepareStatement("UPSERT INTO " + tableName + " VALUES (?, ?, ?, ?, ?, ?, ?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/LpadFunctionIT.java,testLpadHelper,69-69,[            PreparedStatement stmt = conn.prepareStatement(sql);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,48-48,[      byte[] first = MessageDigest.getInstance("MD5").digest(testString.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieveCompositeKey,67-67,[      byte[] first = MessageDigest.getInstance("MD5").digest(testString.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,87-87,[      byte[] pk1 = MessageDigest.getInstance("MD5").digest(testString1.getBytes());],,testUpsert,88-88,[      byte[] pk2 = MessageDigest.getInstance("MD5").digest(testString2.getBytes());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testRetrieve,43-43,[      conn.createStatement().execute(dml);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/MD5FunctionIT.java,testUpsert,82-82,[      conn.createStatement().execute(dml);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MinMaxAggregateFunctionIT.java,testMinMaxAggregateFunctions,31-31,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MultiCfQueryExecIT.java,testDefaultCFToDisambiguate,276-276,[        Connection conn = DriverManager.getConnection(url);],,testDefaultCFToDisambiguate,288-288,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/MultiCfQueryExecIT.java,testGuidePostsRetrievedForMultiCF,195-195,[      conn = DriverManager.getConnection(getUrl(), props);],,testGuidePostsRetrievedForMultiCF,202-202,[      conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/OctetLengthFunctionEnd2EndIT.java,initTable,51-51,[            closeStmtAndConn(stmt, conn);],,initTable,42-42,[        Connection conn = null;],,initTable,45-45,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/OctetLengthFunctionEnd2EndIT.java,initTable,51-51,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/OrderByIT.java,testColumnFamily,193-193,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/OrderByIT.java,testOrderByWithExpression,469-469,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/OrderByIT.java,testOrderByWithJoin,292-292,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/OrderByIT.java,testOrderByWithPosition,127-127,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/OrderByIT.java,testOrderByWithUnionAll,389-389,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/ParallelIteratorsIT.java,initTableValues,211-211,[        stmt.setString(1, new String(KMIN));],,initTableValues,214-214,[        stmt.setString(1, new String(KMAX));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/ParallelIteratorsIT.java,upsert,191-191,[        stmt.setString(1, new String(val[0]));],,upsert,194-194,[        stmt.setString(1, new String(val[1]));],,upsert,197-197,[        stmt.setString(1, new String(val[2]));],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,57-57,[    protected static final byte[] K1  = new byte[] {'a'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,63-63,[    protected static final byte[] K11 = new byte[] {'k'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,64-64,[    protected static final byte[] K12 = new byte[] {'l'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,58-58,[    protected static final byte[] K3  = new byte[] {'c'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,59-59,[    protected static final byte[] K4  = new byte[] {'d'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,60-60,[    protected static final byte[] K5  = new byte[] {'e'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,61-61,[    protected static final byte[] K6  = new byte[] {'f'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,62-62,[    protected static final byte[] K9  = new byte[] {'i'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,65-65,[    protected static final byte[] KMAX  = new byte[] {'~'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,55-55,[    protected static final byte[] KMIN  = new byte[] {'!'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,56-56,[    protected static final byte[] KMIN2  = new byte[] {'.'};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,68-68,[    protected static final byte[] KP = new byte[] { 'p' };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,67-67,[    protected static final byte[] KR = new byte[] { 'r' };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/ParallelIteratorsIT.java,,66-66,[    protected static final byte[] KMAX2  = new byte[] {'z'};],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/PhoenixRuntimeIT.java,testGetTenantIdExpression,101-101,[        conn.createStatement().execute("CREATE TABLE " + tableName + " (k1 VARCHAR NOT NULL, k2 VARCHAR, CONSTRAINT PK PRIMARY KEY(K1,K2)) MULTI_TENANT=true" + (isSalted ? ",SALT_BUCKETS=3" : ""));],,testGetTenantIdExpression,103-103,[        conn.createStatement().execute("UPSERT INTO " + tableName + " VALUES('t1','x')");],,testGetTenantIdExpression,104-104,[        conn.createStatement().execute("UPSERT INTO " + tableName + " VALUES('t2','y')");],,testGetTenantIdExpression,114-114,[        tsconn.createStatement().execute("CREATE VIEW A.BAR(V1 VARCHAR) AS SELECT * FROM " + tableName);],,testGetTenantIdExpression,132-132,[        conn.createStatement().execute("CREATE INDEX I2 ON " + tableName + "(k2)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeSequence,156-156,[            rs = conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeScan,64-64,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,81-81,[        Connection conn1 = DriverManager.getConnection(url, props);],,testPointInTimeScan,88-88,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeScan,100-100,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeSequence,132-132,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,139-139,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,146-146,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,154-154,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,165-165,[        conn = DriverManager.getConnection(getUrl(), props);],,testPointInTimeSequence,172-172,[        conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/PointInTimeQueryIT.java,testPointInTimeSequence,125-125,[            conn.createStatement().executeQuery("SELECT next value for s FROM ATABLE LIMIT 1");],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/PowerFunctionEnd2EndIT.java,initTable,70-70,[            closeStmtAndConn(stmt, conn);],,initTable,57-57,[        Connection conn = null;],,initTable,60-60,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/PowerFunctionEnd2EndIT.java,initTable,70-70,[            closeStmtAndConn(stmt, conn);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/PowerFunctionEnd2EndIT.java,testNumberSpec,93-93,[                        .executeQuery(],,testNumberSpec,108-108,[                        .executeQuery(],,testNumberSpec,122-122,[                conn.createStatement().executeQuery(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/PowerFunctionEnd2EndIT.java,updateTableSpec,76-76,[                conn.prepareStatement("UPSERT INTO " + tableName + " VALUES (?, ?, ?, ?, ?, ?, ?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testFilterOnTrailingKeyColumn,1573-1573,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testResetColumnInSameTxn,835-835,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ProductMetricsIT.java,testSaltedOrderBy,1975-1975,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ProductMetricsIT.java,helpTestOrderByNullColumns,1543-1543,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToExistingFamily,873-873,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToExistingFamily,882-882,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddKVColumnToNewFamily,904-904,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddKVColumnToNewFamily,909-909,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testAddPKColumn,931-931,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testAddPKColumn,942-942,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateDropTable,553-553,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testCreateDropTable,571-571,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,649-649,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateViewOnExistingTable,695-695,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,788-788,[        Connection conn75 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,804-804,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,818-818,[        Connection conn91 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,824-824,[        Connection conn92 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,840-840,[        Connection conn92a = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,847-847,[        Connection conn93 = DriverManager.getConnection(getUrl(), props);],,testCreateViewOnExistingTable,858-858,[        Connection conn94 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropAllKVCols,1023-1023,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1030-1030,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1037-1037,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1042-1042,[        Connection conn6 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1049-1049,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropAllKVCols,1054-1054,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropKVColumn,964-964,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,970-970,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,980-980,[        Connection conn3 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,985-985,[        Connection conn7 = DriverManager.getConnection(getUrl(), props);],,testDropKVColumn,990-990,[        Connection conn8 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testDropPKColumn,1004-1004,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testNewerTableDisallowed,1068-1068,[        Connection conn5 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testTableWithScemaMetadataScan,1085-1085,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryDatabaseMetaDataIT.java,testCreateOnExistingTable,651-651,[        ResultSet rs = conn2.createStatement().executeQuery(query);],,testCreateOnExistingTable,656-656,[        rs = conn2.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testIntFilter,81-81,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,91-91,[        upsertConn = DriverManager.getConnection(url, props);],,testIntFilter,97-97,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testNoStringValue,173-173,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testNoStringValue,185-185,[        Connection conn1 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryIT.java,testTimestamp,242-242,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testTimestamp,253-253,[        Connection conn1 = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryIT.java,testValidStringConcatExpression,457-457,[        		PreparedStatement statement = conn.prepareStatement(query);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/QueryMoreIT.java,doQueryMore,289-289,[            Object[] pkParts = PhoenixRuntime.decodeValues(conn, tableName.toUpperCase(), Base64.decode(cursorIds[i]), columns);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/QueryMoreIT.java,getRecordsOutofCursorTable,271-271,[            pkIds.add(Base64.encodeBytes(PhoenixRuntime.encodeValues(conn, tableOrViewName.toUpperCase(), values, columns)));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/QueryMoreIT.java,testNullBigDecimalWithScale,356-356,[            final ResultSet rs = stmt.executeQuery("SELECT * FROM " + table);],,testNullBigDecimalWithScale,357-357,[            assertNotNull(rs);],,testNullBigDecimalWithScale,358-358,[            assertTrue(rs.next());],,testNullBigDecimalWithScale,359-359,[            assertEquals("key", rs.getString(1));],,testNullBigDecimalWithScale,360-360,[            assertNull(rs.getBigDecimal(2));],,testNullBigDecimalWithScale,361-361,[            assertNull(rs.getBigDecimal(2, 10));],,testNullBigDecimalWithScale,362-362,[        }],,testNullBigDecimalWithScale,363-363,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,testQueryMore,99-99,[        Connection conn = DriverManager.getConnection(getUrl());],,testQueryMore,134-134,[        Connection conn2 = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,198-198,[        Connection conn = queryAgainstTenantView ? getTenantSpecificConnection(tenantId) : DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,225-225,[                conn.createStatement().execute("DROP SEQUENCE " + sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,testQueryMore,100-100,[        conn.createStatement().execute(cursorTableDDL);],,testQueryMore,101-101,[        conn.createStatement().execute(baseDataTableDDL);],,testQueryMore,135-135,[        ResultSet rs = conn2.createStatement().executeQuery("SELECT count(*) from " + cursorTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,225-225,[                conn.createStatement().execute("DROP SEQUENCE " + sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,createTenantSpecificViewIfNecessary,239-239,[        tenantConn.createStatement().execute("CREATE VIEW IF NOT EXISTS " + tenantViewName + " AS SELECT * FROM " + dataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,201-201,[        conn.createStatement().execute("CREATE SEQUENCE " + sequenceName + " CACHE " + Long.MAX_VALUE);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,upsertSelectRecordsInCursorTableForTenant,215-215,[            PreparedStatement stmt = conn.prepareStatement(upsertSelectDML);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,createHistoryTableRows,171-171,[            PreparedStatement stmt = conn.prepareStatement(upsertDML);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,doQueryMore,286-286,[        PreparedStatement stmt = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryMoreIT.java,getRecordsOutofCursorTable,256-256,[        PreparedStatement stmt = conn.prepareStatement(selectCursorSql);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/QueryServerBasicsIT.java,smokeTest,118-118,[    final String tableName = getClass().getSimpleName().toUpperCase() + System.currentTimeMillis();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryServerBasicsIT.java,smokeTest,124-124,[        assertFalse(stmt.execute("CREATE TABLE " + tableName + "("],,smokeTest,129-129,[        assertEquals(1, stmt.executeUpdate("UPSERT INTO " + tableName + " VALUES(1, 'foo')"));],,smokeTest,130-130,[        assertEquals(1, stmt.executeUpdate("UPSERT INTO " + tableName + " VALUES(2, 'bar')"));],,smokeTest,131-131,[        assertTrue(stmt.execute("SELECT * FROM " + tableName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryServerBasicsIT.java,smokeTest,123-123,[        assertFalse(stmt.execute("DROP TABLE IF EXISTS " + tableName));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/QueryServerBasicsIT.java,smokeTest,142-142,[      try (final PreparedStatement stmt = connection.prepareStatement(sql)) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/QueryTimeoutIT.java,testQueryTimeout,64-64,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/QueryWithLimitIT.java,testQueryWithLimitAndStats,75-75,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RTrimFunctionIT.java,testWithFixedLengthPK,50-50,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RTrimFunctionIT.java,testWithFixedLengthPK,66-66,[        rs = conn.createStatement().executeQuery("explain " + query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,initTableValues,49-49,[        Connection upsertConn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testConnectionReadIsolationLevel,126-126,[        Connection conn = DriverManager.getConnection(url, PropertiesUtil.deepCopy(TEST_PROPERTIES));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReadIsolationLevelIT.java,testStatementReadIsolationLevel,73-73,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testStatementReadIsolationLevel,76-76,[        Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RegexpReplaceFunctionIT.java,testFilterWithRegexReplace,83-83,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RegexpReplaceFunctionIT.java,testGroupByScanWithRegexpReplace,63-63,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RegexpSubstrFunctionIT.java,testFilterWithRegexSubstr,91-91,[        ResultSet rs = conn.createStatement().executeQuery(cmd);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RegexpSubstrFunctionIT.java,testGroupByScanWithRegexpSubstr,64-64,[        ResultSet rs = stmt.executeQuery(cmd);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ReverseFunctionIT.java,initTable,36-36,[        conn.createStatement().execute(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ReverseScanIT.java,doSetup,65-65,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ReverseScanIT.java,testReverseRangeScan,114-114,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ReverseScanIT.java,testReverseScanIndex,190-190,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,94-94,[            closeStmtAndConn(stmt, conn);],,initTable,68-68,[        PreparedStatement stmt = null;],,initTable,70-70,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/RoundFloorCeilFunctionsEnd2EndIT.java,initTable,94-94,[            closeStmtAndConn(stmt, conn);],,initTable,67-67,[        Connection conn = null;],,initTable,70-70,[            conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithMultiCompKeysForIn,876-876,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testRVCWithMultiCompKeysForIn,881-881,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testForceSkipScan,1237-1237,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithCompositePK],,testForceSkipScan,1279-1279,[            rs = conn.createStatement().executeQuery(explainQuery);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCLastPkIsTable1stPkIndex,1615-1615,[		conn.createStatement().execute(ddl);],,testRVCLastPkIsTable1stPkIndex,1620-1620,[		conn.createStatement().execute(ddl);],,testRVCLastPkIsTable1stPkIndex,1636-1636,[		ResultSet rs = conn.createStatement().executeQuery(query);],,testRVCLastPkIsTable1stPkIndex,1647-1647,[		rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct1,1435-1435,[        conn.createStatement().execute(ddl);],,testCountDistinct1,1448-1448,[        rs = conn.createStatement().executeQuery("SELECT COUNT(DISTINCT (a,b)) from " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct2,1459-1459,[        conn.createStatement().execute(ddl);],,testCountDistinct2,1473-1473,[        rs = conn.createStatement().executeQuery("SELECT COUNT(DISTINCT (a,b)) from  " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct3,1483-1483,[        conn.createStatement().execute(ddl);],,testCountDistinct3,1498-1498,[        rs = conn.createStatement().executeQuery("SELECT COUNT(DISTINCT (a,b)) from  " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct4,1508-1508,[        conn.createStatement().execute(ddl);],,testCountDistinct4,1521-1521,[        rs = conn.createStatement().executeQuery("SELECT COUNT(DISTINCT (a,b)) from  " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCRequiringExtractNodeClear,1531-1531,[        conn.createStatement().execute(ddl);],,testRVCRequiringExtractNodeClear,1544-1544,[        rs = conn.createStatement().executeQuery("SELECT k1 from  " + tableName + " WHERE k1 IN ('a','c') AND (k2,k3) IN (('b','c'),('f','g')) AND k4 > 'c'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCRequiringNoSkipScan,1557-1557,[        conn.createStatement().execute(ddl);],,testRVCRequiringNoSkipScan,1576-1576,[        rs = conn.createStatement().executeQuery("SELECT k1,k3,k4 from  " + tableName + " WHERE (k1,k2,k3) IN (('','','a'),('','','b'),('a','','c')) AND k4 is not null");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCWithInListClauseUsingSubsetOfPKColsInOrder,796-796,[                statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testForceSkipScan,1247-1247,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testForceSkipScan,1261-1261,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCLastPkIsTable1stPkIndex,1624-1624,[		PreparedStatement stmt = conn.prepareStatement(upsert);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct1,1438-1438,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('a', 6,3)");],,testCountDistinct1,1440-1440,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('b', 2,4)");],,testCountDistinct1,1442-1442,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('c', 6,3)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct2,1463-1463,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('a', 'fooo','abc')");],,testCountDistinct2,1465-1465,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('b', 'off','bac')");],,testCountDistinct2,1467-1467,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('c', 'fooo', 'abc')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct3,1486-1486,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('a', true, true)");],,testCountDistinct3,1488-1488,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('b', true, False)");],,testCountDistinct3,1490-1490,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('c', true, true)");],,testCountDistinct3,1492-1492,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('d', true, false)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testCountDistinct4,1511-1511,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('a', 'fooo','abc')");],,testCountDistinct4,1513-1513,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('b', 'off','bac')");],,testCountDistinct4,1515-1515,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (region_name, a, b) VALUES('c', 'foo', 'abc')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testNestedRVCBasic,738-738,[                    statement = conn.prepareStatement(queries[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCRequiringExtractNodeClear,1534-1534,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('a','b','c','d')");],,testRVCRequiringExtractNodeClear,1536-1536,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('b', 'b', 'c', 'e')");],,testRVCRequiringExtractNodeClear,1538-1538,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('c', 'b','c','f')");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/RowValueConstructorIT.java,testRVCRequiringNoSkipScan,1560-1560,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('','','a')");],,testRVCRequiringNoSkipScan,1562-1562,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('', '', 'a', 'a')");],,testRVCRequiringNoSkipScan,1564-1564,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('', '','b')");],,testRVCRequiringNoSkipScan,1566-1566,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('', '','b','a')");],,testRVCRequiringNoSkipScan,1568-1568,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('a', '','c')");],,testRVCRequiringNoSkipScan,1570-1570,[        stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " VALUES('a', '','c', 'a')");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ScanQueryIT.java,testPointInTimeLimitedScan,452-452,[        Connection upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,471-471,[        upsertConn = DriverManager.getConnection(url, props);],,testPointInTimeLimitedScan,483-483,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testExplainPlanValidatesSequences,845-845,[            conn.createStatement().executeQuery("EXPLAIN SELECT NEXT 1000 VALUES FOR bulkalloc.alpha FROM bulkalloc.simpletbl");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testNextValuesForSequenceExceedsMaxValue,416-416,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testNextValuesForSequenceExceedsMinValue,454-454,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testNextValuesForSequenceWithCycles,645-645,[             conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testParseNextValuesSequenceWithZeroAllocated,152-152,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testSequenceParseNextValuesWithNegativeNumber,138-138,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testSequenceParseNextValuesWithNonNumber,123-123,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testSequenceParseNextValuesWithNull,109-109,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testNextValuesForSequenceOverflowAllocation,544-544,[            conn.createStatement().executeQuery(],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testNextValuesForSequenceWithDefaultMax,518-518,[            conn.createStatement().executeQuery(String.format(SELECT_NEXT_VALUE_SQL, "bulkalloc.alpha"));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,assertExpectedCurrentValueForSequence,1148-1148,[        rs = conn.createStatement().executeQuery(String.format(SELECT_CURRENT_VALUE_SQL, sequenceName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,assertExpectedNextValueForSequence,1159-1159,[        rs = conn.createStatement().executeQuery(String.format(SELECT_NEXT_VALUE_SQL, sequenceName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,createSequenceWithMinMax,1112-1112,[        conn.createStatement().execute(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,createSequenceWithMinMaxAndCycle,1118-1118,[        conn.createStatement().execute(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,createSequenceWithNoMinMax,1106-1106,[        conn.createStatement().execute(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceBulkAllocationIT.java,testNextValuesForSequenceWithDefaultMax,518-518,[            conn.createStatement().executeQuery(String.format(SELECT_NEXT_VALUE_SQL, "bulkalloc.alpha"));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1200-1200,[            ResultSet rs = stmt.executeQuery();],,assertSequenceValuesForSingleRow,1201-1201,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1198-1198,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,assertSequenceValuesForSingleRow,1199-1199,[        for (long seqVal : seqVals) {],,assertSequenceValuesForSingleRow,1200-1200,[            ResultSet rs = stmt.executeQuery();],,assertSequenceValuesForSingleRow,1201-1201,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1215-1215,[        ResultSet rs = stmt.executeQuery();],,assertSequenceValuesMultipleSeq,1216-1216,[        for (long seqVal : seqVals) {],,assertSequenceValuesMultipleSeq,1220-1220,[        assertFalse(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1214-1214,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,assertSequenceValuesMultipleSeq,1215-1215,[        ResultSet rs = stmt.executeQuery();],,assertSequenceValuesMultipleSeq,1216-1216,[        for (long seqVal : seqVals) {],,assertSequenceValuesMultipleSeq,1220-1220,[        assertFalse(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesForSingleRow,1198-1198,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,assertSequenceValuesMultipleSeq,1214-1214,[        PreparedStatement stmt = conn.prepareStatement(NEXT_VAL_SQL);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConn,468-468,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SequenceIT.java,testSelectNextValueForMultipleConnWithStmtClose,506-506,[        PreparedStatement stmt1 = conn1.prepareStatement("UPSERT INTO foo VALUES(NEXT VALUE FOR foo.bar)");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testExplainPlanValidatesSequences,670-670,[            conn.createStatement().executeQuery("EXPLAIN SELECT NEXT VALUE FOR zzz FROM foo");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SequenceIT.java,testSequenceNotFound,106-106,[			conn.prepareStatement(query).executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SequenceIT.java,testNextValuesForSequenceClosingConnections,1171-1171,[                ResultSet rs = conn.createStatement().executeQuery(String.format(SELECT_NEXT_VALUE_SQL, "seqtest.closeconn"));],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ServerExceptionIT.java,testServerExceptionBackToClient,40-40,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/SignFunctionEnd2EndIT.java,initTable,55-55,[            closeStmtAndConn(stmt, conn);],,initTable,44-44,[        Connection conn = null;],,initTable,47-47,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/SignFunctionEnd2EndIT.java,initTable,55-55,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanAfterManualSplitIT.java,initTable,79-79,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testInQuery,161-161,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSelectAfterUpsertInQuery,145-145,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSkipScanFilterQuery,121-121,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testSkipScanFilterWhenTableHasMultipleColumnFamilies,339-339,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharParallelListInQuery,182-182,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXInQuery,200-200,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SkipScanQueryIT.java,testVarCharXIntInQuery,227-227,[        Connection conn = DriverManager.getConnection(getUrl());],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SortMergeJoinIT.java,<init>,76-76,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SortMergeJoinIT.java,<init>,77-77,[        this.plans = plans;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,340-340,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,341-341,[                assertTrue (rs.next());],,testLeftJoin,382-382,[            conn.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,339-339,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,testLeftJoin,340-340,[                ResultSet rs = statement.executeQuery();],,testLeftJoin,341-341,[                assertTrue (rs.next());],,testLeftJoin,382-382,[            conn.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,initTable,95-95,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,339-339,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinIT.java,testUpsertWithJoin,1739-1739,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinWithIncomparableJoinKeyTypes,1569-1569,[            statement.executeQuery();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/SortMergeJoinIT.java,testNonEquiJoin,2432-2432,[                statement.executeQuery();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testUpsertWithJoin,1742-1742,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testUpsertWithJoin,1749-1749,[            conn.createStatement().execute("UPSERT /*+ USE_SORT_MERGE_JOIN*/ INTO " + tempTable ],,testUpsertWithJoin,1755-1755,[            conn.createStatement().execute("UPSERT /*+ USE_SORT_MERGE_JOIN*/ INTO " + tempTable ],,testUpsertWithJoin,1825-1825,[            conn.createStatement().execute("CREATE TABLE " + sourceTable ],,testUpsertWithJoin,1830-1830,[            conn.createStatement().execute("CREATE TABLE " + joinTable ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,initTable,98-98,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinWithSetMaxRows,2457-2457,[                ResultSet rs = statement.executeQuery(query);],,testJoinWithSetMaxRows,2477-2477,[                rs = statement.executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testJoinWithSkipMergeOptimization,1663-1663,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinIT.java,testSelfJoin,1705-1705,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testUpsertWithJoin,1763-1763,[            PreparedStatement statement = conn.prepareStatement(query);],,testUpsertWithJoin,1837-1837,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testUpsertWithJoin,1861-1861,[            upsertStmt = conn.prepareStatement(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testLeftJoin,339-339,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testMultiLeftJoin,1035-1035,[                PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinIT.java,testStarJoin,632-632,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinMoreIT.java,testJoinOnDynamicColumns,199-199,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinMoreIT.java,testSubqueryWithoutData,263-263,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortMergeJoinMoreIT.java,testSubqueryWithoutData,304-304,[            Statement statement = conn.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortMergeJoinMoreIT.java,testJoinOverSaltedTables,60-60,[            conn.createStatement().execute("CREATE TABLE " + tempTableNoSalting ],,testJoinOverSaltedTables,63-63,[            conn.createStatement().execute("CREATE TABLE " + tempTableWithSalting ],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinMoreIT.java,testJoinOnDynamicColumns,204-204,[            stmt = conn.prepareStatement(ddlA);],,testJoinOnDynamicColumns,208-208,[            stmt = conn.prepareStatement(ddlB);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortMergeJoinMoreIT.java,testJoinOverSaltedTables,67-67,[            PreparedStatement upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,76-76,[            upsertStmt = conn.prepareStatement(],,testJoinOverSaltedTables,89-89,[            PreparedStatement statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,113-113,[            statement = conn.prepareStatement(query);],,testJoinOverSaltedTables,152-152,[            statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SortOrderIT.java,testCompareCompositeKey,466-466,[        Connection conn = DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES));],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderIT.java,appendColumns,573-573,[                appendedColumns += ",";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderIT.java,appendPlaceholders,584-584,[                placeholderList += ",";],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SortOrderIT.java,testCompareCompositeKey,467-467,[        conn.createStatement().execute(ddl);],,testCompareCompositeKey,471-471,[        conn.createStatement().execute("upsert into "  + tableName + " values (1, 0.99)");],,testCompareCompositeKey,469-469,[            conn.createStatement().execute("upsert into " + tableName + " values (0, null)");],,testCompareCompositeKey,472-472,[        conn.createStatement().execute("upsert into " + tableName + " values (2, 1.01)");],,testCompareCompositeKey,473-473,[        conn.createStatement().execute("upsert into "  + tableName + " values (3, 2.0)");],,testCompareCompositeKey,474-474,[        conn.createStatement().execute("upsert into " + tableName + " values (4, 1.001)");],,testCompareCompositeKey,479-479,[            ResultSet rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderIT.java,runQuery,591-591,[        PreparedStatement stmt = connection.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SortOrderIT.java,runQueryTest,535-535,[            PreparedStatement stmt = conn.prepareStatement(dml);],,runQueryTest,552-552,[                runQuery(conn, query, expectedRows);],,runQueryTest,560-560,[                runQuery(conn, query, reverse(expectedRows));],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/end2end/SortOrderIT.java,appendOrderBy,760-760,[                query += orderBy.columnNames.get(i) + " " + orderBy.directions.get(i).toString() + " ";],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/phoenix/end2end/SpillableGroupByIT.java,testScanUri,129-129,[                int a = Integer.valueOf(rs.getString(6)).intValue();],,testScanUri,130-130,[                int b = Integer.valueOf(rs.getString(7)).intValue();],,testScanUri,131-131,[                assertEquals(Integer.valueOf(uri).intValue(), Math.min(a, b));],,testScanUri,132-132,[                assertEquals(NUM_ROWS_INSERTED / 2 + Integer.valueOf(uri), Math.max(a, b));],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,82-82,[		for (File file : files) {],,testDeleteAllSpooledTmpFiles,81-81,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,91-91,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,90-90,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,103-103,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,102-102,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,114-114,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,113-113,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,122-122,[		assertTrue(files.length > 0);],,testDeleteAllSpooledTmpFiles,121-121,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,128-128,[		for (File file : files) {],,testDeleteAllSpooledTmpFiles,126-126,[		files = dir.listFiles(fnameFilter);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,133-133,[		assertTrue(files.length == 0);],,testDeleteAllSpooledTmpFiles,132-132,[		files = dir.listFiles(fnameFilter);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,setup,49-49,[		Statement stmt = conn.createStatement();],,setup,50-50,[		stmt.execute("CREATE TABLE test (ID varchar NOT NULL PRIMARY KEY) SPLIT ON ('EA','EZ')");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,setup,49-49,[		Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,108-108,[		Connection conn2 = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,tearDown,61-61,[	        spoolDir.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,83-83,[			file.delete();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,testDeleteAllSpooledTmpFiles,67-67,[		File dir = new File(spoolDir.getPath());],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,accept,73-73,[				return dir.getName().toLowerCase().endsWith(".bin") && ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/SpooledTmpFileDeleteIT.java,,70-74,[		class FilenameFilter implements FileFilter {, 			@Override, 			public boolean accept(File dir) {, 				return dir.getName().toLowerCase().endsWith(".bin") && , 						dir.getName().startsWith("ResultSpooler");],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/SqrtFunctionEnd2EndIT.java,initTable,54-54,[            closeStmtAndConn(stmt, conn);],,initTable,43-43,[        Connection conn = null;],,initTable,46-46,[            conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/phoenix/end2end/SqrtFunctionEnd2EndIT.java,initTable,54-54,[            closeStmtAndConn(stmt, conn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatementHintsIT.java,initTableValues,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/StatsCollectorAbstractIT.java,,41-41,[    protected static final byte[] STATS_TEST_TABLE_BYTES = Bytes.toBytes(STATS_TEST_TABLE_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/StatsCollectorAbstractIT.java,,42-42,[    protected static final byte[] STATS_TEST_TABLE_BYTES_NEW = Bytes.toBytes(STATS_TEST_TABLE_NAME_NEW);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,130-130,[        conn = upsertValues(props, "x");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsCollectorIT.java,helpTestUpdateStats,105-105,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StatsCollectorIT.java,testUpdateStatsWithMultipleTables,156-156,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/StatsCollectorIT.java,helpTestUpdateStats,85-85,[        conn.createStatement().execute(],,helpTestUpdateStats,109-109,[        rs = conn.createStatement().executeQuery("SELECT k FROM " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/StatsCollectorIT.java,testCompactUpdatesStats,271-271,[        conn.createStatement().execute("CREATE TABLE " + tableName + "(k CHAR(1) PRIMARY KEY, v INTEGER) " + HColumnDescriptor.KEEP_DELETED_CELLS + "=" + Boolean.FALSE);],,testCompactUpdatesStats,291-291,[            int rowCount = conn.createStatement().executeUpdate("UPDATE STATISTICS " + tableName);],,testCompactUpdatesStats,297-297,[        int nDeletedRows = conn.createStatement().executeUpdate("DELETE FROM " + tableName + " WHERE V < 5");],,testCompactUpdatesStats,311-311,[            int rowCount = conn.createStatement().executeUpdate("UPDATE STATISTICS " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/StatsCollectorIT.java,helpTestUpdateStats,93-93,[        stmt = conn.prepareStatement("UPDATE STATISTICS " + tableName);],,helpTestUpdateStats,107-107,[        stmt = conn.prepareStatement("UPDATE STATISTICS " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/StatsCollectorIT.java,testCompactUpdatesStats,272-272,[        stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/StatsCollectorIT.java,upsertStmt,236-236,[        stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?,?)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/StatsCollectorWithSplitsAndMultiCFIT.java,testWithMultiCF,145-145,[        conn.createStatement().execute(query);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/StoreNullsIT.java,testQueryingHistory,111-111,[        ResultSet rs = historicalStmt.executeQuery("SELECT name FROM with_nulls WHERE id = 1");],,testQueryingHistory,112-112,[        assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/StoreNullsIT.java,testQueryingHistory,109-109,[        Statement historicalStmt = historicalConn.createStatement();],,testQueryingHistory,111-111,[        ResultSet rs = historicalStmt.executeQuery("SELECT name FROM with_nulls WHERE id = 1");],,testQueryingHistory,112-112,[        assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StoreNullsIT.java,testQueryingHistory,108-108,[        Connection historicalConn = DriverManager.getConnection(getUrl(), historicalProps);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/StoreNullsIT.java,testQueryingHistory,109-109,[        Statement historicalStmt = historicalConn.createStatement();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/SubqueryIT.java,testNonCorrelatedSubquery,468-468,[                rs = statement.executeQuery();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryIT.java,<init>,71-71,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryIT.java,<init>,72-72,[        this.plans = plans;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryIT.java,initTable,91-91,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithDelete,812-812,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithUpsert,782-782,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithDelete,815-815,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testSubqueryWithDelete,818-818,[            conn.createStatement().execute("UPSERT INTO " + tempTable + "(item_id, name)"],,testSubqueryWithDelete,828-828,[            conn.createStatement().execute("DELETE FROM " + tempTable + " WHERE item_id IN ("],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithUpsert,785-785,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testSubqueryWithUpsert,788-788,[            conn.createStatement().execute("UPSERT INTO " + tempTable + "(item_id, name)"],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,initTable,94-94,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testComparisonSubquery,679-679,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testExistsSubquery,600-600,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testExistsSubquery,620-620,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryIT.java,testInSubquery,530-530,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testInSubquery,552-552,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testInSubquery,572-572,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithDelete,832-832,[            statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SubqueryIT.java,testSubqueryWithUpsert,793-793,[            PreparedStatement statement = conn.prepareStatement(query);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,<init>,75-75,[        this.indexDDL = indexDDL;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,<init>,76-76,[        this.plans = plans;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,initTable,94-94,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testSubqueryWithUpsert,864-864,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testSubqueryWithUpsert,867-867,[            conn.createStatement().execute("CREATE TABLE " + tempTable ],,testSubqueryWithUpsert,870-870,[            conn.createStatement().execute("UPSERT /*+ USE_SORT_MERGE_JOIN*/ INTO " + tempTable + "(item_id, name)"],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,initTable,97-97,[                    conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testComparisonSubquery,761-761,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testExistsSubquery,720-720,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testInSubquery,637-637,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testInSubquery,675-675,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/SubqueryUsingSortMergeJoinIT.java,testSubqueryWithUpsert,875-875,[            PreparedStatement statement = conn.prepareStatement(query);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/TenantIdTypeIT.java,testMultiTenantTables,186-186,[                ResultSet rs = conn.createStatement().executeQuery("select * from " + view);],,testMultiTenantTables,217-217,[                    ResultSet rs = conn.createStatement().executeQuery("select * from " + view);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/TenantIdTypeIT.java,testMultiTenantTables,148-148,[                        .executeQuery("select * from " + table + " where tenantId = 2");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/TenantIdTypeIT.java,testMultiTenantTables,132-132,[            conn.createStatement().execute("upsert into " + table +],,testMultiTenantTables,134-134,[            conn.createStatement().execute("upsert into " + table +],,testMultiTenantTables,141-141,[            ResultSet rs = conn.createStatement().executeQuery("select * from " + table);],,testMultiTenantTables,148-148,[                        .executeQuery("select * from " + table + " where tenantId = 2");],,testMultiTenantTables,154-154,[            conn.createStatement().execute("create view " + view +],,testMultiTenantTables,157-157,[            conn.createStatement().execute("create sequence " + sequence + " start with 100");],,testMultiTenantTables,163-163,[            conn.createStatement().execute("upsert into " + view +],,testMultiTenantTables,169-169,[            ResultSet rs = conn.createStatement().executeQuery("select * from " + view);],,testMultiTenantTables,186-186,[                ResultSet rs = conn.createStatement().executeQuery("select * from " + view);],,testMultiTenantTables,180-180,[                conn.createStatement().execute("upsert into " + table +],,testMultiTenantTables,198-198,[                conn.createStatement().execute("create view " + view +],,testMultiTenantTables,206-206,[                    conn.createStatement().execute("upsert into " + view +],,testMultiTenantTables,217-217,[                    ResultSet rs = conn.createStatement().executeQuery("select * from " + view);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/TenantIdTypeIT.java,testMultiTenantTables,116-116,[            conn.createStatement().execute(ddl);],,testMultiTenantTables,119-119,[                conn.createStatement().execute(ddl);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testCreateTenantTableTwice,75-75,[        catch (TableAlreadyExistsException expected) {}],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,266-266,[                rs = conn.createStatement().executeQuery("select tenant_col from TENANT_TABLE");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAddDropColumn,223-223,[        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAllowDropParentTableWithCascadeAndSingleTenantTable,355-355,[			connTenant = DriverManager.getConnection(PHOENIX_JDBC_TENANT_SPECIFIC_URL, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testDeletionOfParentTableFailsOnTenantSpecificConnection,149-149,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAllowDropParentTableWithCascadeAndSingleTenantTable,359-359,[	    	if (conn != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/TenantSpecificTablesDDLIT.java,testAlteringMultiTenancyForTableWithViewsNotAllowed,99-99,[            conn.createStatement().execute(ddl);],,testAlteringMultiTenancyForTableWithViewsNotAllowed,101-101,[            conn.createStatement().execute(ddl);],,testAlteringMultiTenancyForTableWithViewsNotAllowed,109-109,[            tenantConn.createStatement().execute(viewDDL);],,testAlteringMultiTenancyForTableWithViewsNotAllowed,116-116,[            conn.createStatement().execute("CREATE VIEW " + viewName + " AS SELECT * FROM " + globalTable);],,testAlteringMultiTenancyForTableWithViewsNotAllowed,122-122,[                conn.createStatement().execute("ALTER TABLE " + globalTable + " SET MULTI_TENANT = " + true);],,testAlteringMultiTenancyForTableWithViewsNotAllowed,129-129,[                conn.createStatement().execute("ALTER TABLE " + multiTenantTable + " SET MULTI_TENANT = " + false);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,75-75,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testNonPaddedTenantId,165-165,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/TenantSpecificViewIndexIT.java,testMultiCFViewIndex,138-138,[            conn.createStatement().executeQuery("select * from mt_base where (pk1,pk2) IN (('a','b'),('b','b'))");],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,189-193,[        String pattern = "yy.MM.dd G HH:mm:ss z";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         String query = "select pk from " + TO_CHAR_TABLE_NAME + " WHERE to_char(col_timestamp, '" + pattern + "') = '" + expectedString + "'";,         runOneRowFilterQuery(query, 2);,     }],,testTimeStampFilter,250-254,[    	String pattern = "yyMMddHHmmssZ";,         String query = "SELECT a_id FROM " + TO_NUMBER_TABLE_NAME + " WHERE to_number(a_timestamp, '" + pattern + "') = " + row1Timestamp.getTime() ;,         int expectedId = 1;,         runOneRowQueryTest(query, expectedId);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,149-153,[        String pattern = "yyMMddHHmmssZ";,         String query = "select to_char(col_timestamp, '" + pattern + "') from " + TO_CHAR_TABLE_NAME + " WHERE pk = 2";,         String expectedString = getGMTDateFormat(pattern).format(row2Timestamp);,         runOneRowProjectionQuery(query, expectedString);,     }],,testTimeStampProjection,272-275,[        String query = "select to_number(a_timestamp) from " + TO_NUMBER_TABLE_NAME + " where a_id = 3";,         BigDecimal expectedDecimalValue = new BigDecimal(row3Timestamp.getTime());,         runOneRowQueryTest(query, expectedDecimalValue);,     }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToCharFunctionIT.java,initTable,86-86,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateFilter,176-176,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDateProjection,136-136,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalFilter,208-208,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testDecimalProjection,168-168,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerFilter,200-200,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testIntegerProjection,160-160,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeFilter,184-184,[        runOneRowFilterQuery(query, 1);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimeProjection,144-144,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampFilter,192-192,[        runOneRowFilterQuery(query, 2);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,testTimestampProjection,152-152,[        runOneRowProjectionQuery(query, expectedString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowFilterQuery,216-216,[    	runOneRowQueryTest(oneRowQuery, pkValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowProjectionQuery,212-212,[    	runOneRowQueryTest(oneRowQuery, null, projectedValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToCharFunctionIT.java,runOneRowQueryTest,224-224,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/ToDateFunctionIT.java,testUnsignedLongToTimestampCast,217-217,[                rs = conn.prepareStatement("select a, b, ts, CAST(b AS TIMESTAMP) from TT").executeQuery();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ToDateFunctionIT.java,callToDateFunction,51-51,[        ResultSet rs = stmt.executeQuery(String.format("SELECT %s FROM SYSTEM.CATALOG LIMIT 1", invocation));],,callToDateFunction,52-52,[        assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/ToDateFunctionIT.java,callToDateFunction,50-50,[        Statement stmt = conn.createStatement();],,callToDateFunction,51-51,[        ResultSet rs = stmt.executeQuery(String.format("SELECT %s FROM SYSTEM.CATALOG LIMIT 1", invocation));],,callToDateFunction,52-52,[        assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToDateFunctionIT.java,testUnsignedLongToTimestampCast,197-197,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ToDateFunctionIT.java,callToDateFunction,51-51,[        ResultSet rs = stmt.executeQuery(String.format("SELECT %s FROM SYSTEM.CATALOG LIMIT 1", invocation));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToDateFunctionIT.java,testVarcharToDateComparision,240-240,[        PreparedStatement stmt = conn.prepareStatement(upsertSql);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/ToDateFunctionIT.java,tearDown,46-46,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/end2end/ToDateFunctionIT.java,testVarcharToDateComparision,233-233,[        conn.prepareStatement(],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ToNumberFunctionIT.java,initTable,96-96,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testDateFilter,221-221,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeFilter,230-230,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,testTimeStampFilter,253-253,[        runOneRowQueryTest(query, expectedId);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,282-282,[    	runOneRowQueryTest(oneRowQuery, true, expectedIntValue, null);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,278-278,[    	runOneRowQueryTest(oneRowQuery, false, null, expectedDecimalValue);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/ToNumberFunctionIT.java,runOneRowQueryTest,290-290,[            PreparedStatement statement = conn.prepareStatement(oneRowQuery);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/TopNIT.java,testTopNDelete,124-124,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testAggregate,108-108,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testBug2295,652-652,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testBug2295,676-676,[            conn.createStatement().execute(ddl);],,testBug2295,678-678,[            conn.createStatement().execute(ddl);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testDerivedTable,382-382,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testExplainUnionAll,595-595,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testGroupBy,161-161,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testJoinInUnionAll,309-309,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testOrderByLimit,208-208,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testSelectDiff,282-282,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testUnionAllInDerivedTable,428-428,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testUnionAllInSubquery,495-495,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testUnionAllSelects,55-55,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnionAllIT.java,testUnionAllWithBindParam,549-549,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/UnionAllIT.java,testSelectDiff,297-297,[            conn.createStatement().executeQuery(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UnionAllIT.java,testExplainUnionAll,631-631,[            rs = conn.createStatement().executeQuery(ddl + " limit 2");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UnionAllIT.java,testUnionAllInSubquery,535-535,[                ResultSet rs = conn.createStatement().executeQuery(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestInWhere,336-336,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestInWhere,342-342,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestWithBooleanArray1,173-173,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestWithBooleanArray1,179-179,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestWithDoubleArray1,143-143,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestWithDoubleArray1,149-149,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestWithIntArray1,51-51,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestWithIntArray1,57-57,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestWithIntArray2,79-79,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestWithIntArray2,85-85,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestWithJoins3,260-260,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestWithJoins3,266-266,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UnnestArrayIT.java,testUnnestWithVarcharArray1,113-113,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUnnestWithVarcharArray1,119-119,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpgradeIT.java,testViewUpgrade,220-220,[            conn.createStatement().execute(],,testViewUpgrade,230-230,[                conn2.createStatement().execute(],,testViewUpgrade,237-237,[                        conn3.createStatement().execute(],,testViewUpgrade,243-243,[                    conn3.createStatement().execute(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpgradeIT.java,testSettingBaseColumnCountForMultipleViewsOnTable,122-122,[            conn.createStatement().execute(baseTableDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,161-161,[                globalConn.createStatement().execute(viewDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,132-132,[                    tenantConn.createStatement().execute(viewDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,163-163,[                globalConn.createStatement().execute(addCols);],,testSettingBaseColumnCountForMultipleViewsOnTable,134-134,[                    tenantConn.createStatement().execute(addCols);],,testSettingBaseColumnCountForMultipleViewsOnTable,169-169,[                globalConn.createStatement().execute(viewDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,140-140,[                    tenantConn.createStatement().execute(viewDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,171-171,[                globalConn.createStatement().execute(droplastBaseCol);],,testSettingBaseColumnCountForMultipleViewsOnTable,142-142,[                    tenantConn.createStatement().execute(droplastBaseCol);],,testSettingBaseColumnCountForMultipleViewsOnTable,177-177,[                globalConn.createStatement().execute(viewDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,148-148,[                    tenantConn.createStatement().execute(viewDDL);],,testSettingBaseColumnCountForMultipleViewsOnTable,179-179,[                globalConn.createStatement().execute(dropMiddileBaseCol);],,testSettingBaseColumnCountForMultipleViewsOnTable,150-150,[                    tenantConn.createStatement().execute(dropMiddileBaseCol);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpgradeIT.java,checkBaseColumnCount,282-282,[        PreparedStatement stmt = conn.prepareStatement(sql);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntKV,296-296,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testBigIntPK,130-130,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerKV,213-213,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertBigValuesIT.java,testIntegerPK,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectAutoCommitIT.java,testUpsertSelectDoesntSeeUpsertedData,146-146,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertSelectIT.java,testAutomaticallySettingRowtimestamp,928-928,[        String table1 = "testAutomaticallySettingRowtimestamp1".toUpperCase();],,testAutomaticallySettingRowtimestamp,929-929,[        String table2 = "testAutomaticallySettingRowtimestamp2".toUpperCase();],,testAutomaticallySettingRowtimestamp,930-930,[        String table3 = "testAutomaticallySettingRowtimestamp3".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertSelectIT.java,testDisallowNegativeValuesForRowTsColumn,1295-1295,[        String tableName = "testDisallowNegativeValuesForRowTsColumn".toUpperCase();],,testDisallowNegativeValuesForRowTsColumn,1296-1296,[        String tableName2 = "testDisallowNegativeValuesForRowTsColumn2".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertSelectIT.java,testRowTimestampColWithViewsIndexesAndSaltedTables,1083-1083,[        String baseTable = "testRowTimestampColWithViewsIndexesAndSaltedTables".toUpperCase();],,testRowTimestampColWithViewsIndexesAndSaltedTables,1084-1084,[        String tenantView = "tenatView".toUpperCase();],,testRowTimestampColWithViewsIndexesAndSaltedTables,1085-1085,[        String globalView = "globalView".toUpperCase();],,testRowTimestampColWithViewsIndexesAndSaltedTables,1086-1086,[        String baseTableIdx = "table_idx".toUpperCase();],,testRowTimestampColWithViewsIndexesAndSaltedTables,1087-1087,[        String tenantViewIdx = "tenantView_idx".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectAutoCommitWithRowTimestampColumn,1012-1012,[        String tableName1 = "testUpsertSelectServerSideWithRowTimestampColumn".toUpperCase();],,testUpsertSelectAutoCommitWithRowTimestampColumn,1013-1013,[        String tableName2 = "testUpsertSelectServerSideWithRowTimestampColumn2".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectSameTableWithRowTimestampColumn,887-887,[        String tableName = "testUpsertSelectSameTableWithRowTimestampColumn".toUpperCase();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,97-97,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,105-105,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,127-127,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelect,169-169,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectEmptyPKColumn,215-215,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,228-228,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,261-261,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,274-274,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,307-307,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectEmptyPKColumn,318-318,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectForAgg,391-391,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectForAgg,430-430,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectLongToInt,466-466,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,475-475,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectLongToInt,484-484,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectOnDescToAsc,566-566,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,575-575,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectOnDescToAsc,585-585,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRowKeyMutationOnSplitedTable,606-606,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,617-617,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRowKeyMutationOnSplitedTable,629-629,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectRunOnServer,503-503,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,512-512,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,522-522,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,531-531,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,540-540,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectRunOnServer,549-549,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithFixedWidthNullByteSizeArray,1326-1326,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithFixedWidthNullByteSizeArray,1351-1351,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithLimit,647-647,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,659-659,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,681-681,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithLimit,687-687,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequence,715-715,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequence,734-734,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectWithSequenceAndOrderByWithSalting,760-760,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequenceAndOrderByWithSalting,773-773,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertSelectWithSequenceAndOrderByWithSalting,788-788,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,98-98,[            conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + indexName + " ON " + TestUtil.ATABLE_NAME + "(a_string)" );],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelectAutoCommitWithRowTimestampColumn,1057-1057,[                rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + tableName);],,testUpsertSelectAutoCommitWithRowTimestampColumn,1067-1067,[                conn.createStatement().executeUpdate("UPSERT INTO  " + tableName + " (PK1, PK2, PK3, KV1) SELECT PK1, PK2, PK3, KV1 FROM  " + tableName);],,testUpsertSelectAutoCommitWithRowTimestampColumn,1072-1072,[                ResultSet rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertSelectIT.java,testAutomaticallySettingRowtimestamp,966-966,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + table2 + " (T2PK1, T2KV1, T2KV2) SELECT T1PK1, T1KV1, T1KV2 FROM " + table1);],,testAutomaticallySettingRowtimestamp,976-976,[            PreparedStatement stmt = conn.prepareStatement("SELECT T2KV1, T2KV2 FROM " + table2 + " WHERE T2PK1 = ? AND T2PK2 = ?");],,testAutomaticallySettingRowtimestamp,989-989,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + table3 + " (T3PK1, T3KV1, T3KV2) SELECT T2PK1, T2KV1, T2KV2 FROM " + table2);],,testAutomaticallySettingRowtimestamp,999-999,[            PreparedStatement stmt = conn.prepareStatement("SELECT T3KV1, T3KV2 FROM " + table3 + " WHERE T3PK1 = ? AND T3PK2 = ?");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertSelectIT.java,testRowTimestampColWithViewsIndexesAndSaltedTables,1144-1144,[            stmt = conn.prepareStatement("SELECT * FROM  " + globalView + " WHERE TENANT_ID = ? AND PK2 = ? AND PK3 = ?");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1158-1158,[            stmt = conn.prepareStatement("SELECT KV1 FROM  " + baseTable + " WHERE PK2 = ? AND KV3 = ?");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1172-1172,[            PreparedStatement stmt = tenantConn.prepareStatement("SELECT * FROM  " + tenantView + " WHERE PK2 = ? AND PK3 = ?");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1199-1199,[            PreparedStatement stmt = tenantConn.prepareStatement("UPSERT INTO  " + tenantView + " (PK3, KV1, KV2, KV3) VALUES (?, ?, ?, ?)");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1207-1207,[            stmt = tenantConn.prepareStatement("UPSERT INTO  " + tenantView + " (PK2, PK3, KV1, KV2, KV3) VALUES (?, ?, ?, ?, ?)");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1220-1220,[            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM  " + baseTable + " WHERE TENANT_ID = ? AND PK2 = ? AND PK3 = ? ");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1232-1232,[            stmt = conn.prepareStatement("SELECT * FROM  " + baseTable + " WHERE TENANT_ID = ? AND PK2 = ? AND PK3 = ? ");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1245-1245,[            stmt = conn.prepareStatement("SELECT KV1 FROM  " + baseTable + " WHERE (PK2, KV3) IN ((?, ?), (?, ?)) ORDER BY KV1");],,testRowTimestampColWithViewsIndexesAndSaltedTables,1263-1263,[            PreparedStatement stmt = tenantConn.prepareStatement("SELECT * FROM  " + tenantView + " WHERE (PK2, PK3) IN ((?, ?), (?, ?)) ORDER BY KV1");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertSelectIT.java,testUpsertSelect,110-110,[            upsertStmt = conn.prepareStatement("EXPLAIN " + upsert);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertValuesIT.java,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,796-796,[        String tableName = "testSettingRowTimestampForImmutableTableAndIndexes".toUpperCase();],,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,797-797,[        String indexName = "testSettingRowTimestampForImmutableTableAndIndexes_index".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertValuesIT.java,testAutomaticallySettingRowtimestamp,737-737,[        String tableName = "testAutomaticallySettingRowtimestamp".toUpperCase();],,testAutomaticallySettingRowtimestamp,738-738,[        String indexName = "testAutomaticallySettingRowtimestamp_index".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertValuesIT.java,testComparisonOperatorsOnRowTimestampCol,855-855,[        String tableName = ("testComparisonOperatorsOnRowTimestampCol_" + sortOrder).toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertValuesIT.java,testDisallowNegativeValuesForRowTsColumn,907-907,[        String tableName = "testDisallowNegativeValuesForRowTsColumn".toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/end2end/UpsertValuesIT.java,testWithUpsertingRowTimestampColSpecified,661-661,[        String tableName = "testUpsertingRowTimestampCol".toUpperCase();],,testWithUpsertingRowTimestampColSpecified,662-662,[        String indexName = "testUpsertingRowTimestampCol_idx".toUpperCase();],,
STYLE,FE_FLOATING_POINT_EQUALITY,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertRandomValues,188-188,[        assertTrue(rs.getDouble(1) != rs.getDouble(2));],,testUpsertRandomValues,189-189,[        assertTrue(rs.getDouble(2) != rs.getDouble(3));],,testUpsertRandomValues,190-190,[        assertTrue(rand1 == rs.getDouble(5));],,testUpsertRandomValues,191-191,[        assertTrue(rs.getDouble(4) != rs.getDouble(5));],,testUpsertRandomValues,193-193,[        assertTrue(rand0 != rs.getDouble(1));],,testUpsertRandomValues,194-194,[        assertTrue(rand1 == rs.getDouble(3) && rand1 == rs.getDouble(5));],,testUpsertRandomValues,195-195,[        assertTrue(rand2 == rs.getDouble(4));],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,478-478,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,472-472,[        PreparedStatement pstmt = null;],,testBatchedUpsert,474-474,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testBatchedUpsert,478-478,[            closeStmtAndConn(pstmt, conn);],,testBatchedUpsert,471-471,[        Connection conn = null;],,testBatchedUpsert,474-474,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,340-340,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,334-334,[        PreparedStatement stmt = null;],,testTimestampAddSubtractArithmetic,336-336,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampAddSubtractArithmetic,340-340,[            closeStmtAndConn(stmt, conn);],,testTimestampAddSubtractArithmetic,333-333,[        Connection conn = null;],,testTimestampAddSubtractArithmetic,336-336,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,299-299,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,293-293,[        PreparedStatement stmt = null;],,testTimestampSerializedAndDeserializedCorrectly,295-295,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testTimestampSerializedAndDeserializedCorrectly,299-299,[            closeStmtAndConn(stmt, conn);],,testTimestampSerializedAndDeserializedCorrectly,292-292,[        Connection conn = null;],,testTimestampSerializedAndDeserializedCorrectly,295-295,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,569-569,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,563-563,[        PreparedStatement stmt = null;],,testUpsertDateIntoDescUnsignedDate,565-565,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateIntoDescUnsignedDate,569-569,[            closeStmtAndConn(stmt, conn);],,testUpsertDateIntoDescUnsignedDate,562-562,[        Connection conn = null;],,testUpsertDateIntoDescUnsignedDate,565-565,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateString,612-612,[            closeStmtAndConn(stmt, conn);],,testUpsertDateString,605-605,[        PreparedStatement stmt = null;],,testUpsertDateString,607-607,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateString,612-612,[            closeStmtAndConn(stmt, conn);],,testUpsertDateString,604-604,[        Connection conn = null;],,testUpsertDateString,607-607,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,438-438,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,432-432,[        PreparedStatement stmt = null;],,testUpsertIntoFloat,434-434,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertIntoFloat,438-438,[            closeStmtAndConn(stmt, conn);],,testUpsertIntoFloat,431-431,[        Connection conn = null;],,testUpsertIntoFloat,434-434,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,271-271,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,265-265,[        Statement stmt = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,267-267,[            conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithMoreValuesThanNumColsInTable,271-271,[            closeStmtAndConn(stmt, conn);],,testUpsertValuesWithMoreValuesThanNumColsInTable,264-264,[        Connection conn = null;],,testUpsertValuesWithMoreValuesThanNumColsInTable,267-267,[            conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testGroupByWithLimitOverRowKey,57-57,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testGroupByWithLimitOverRowKey,70-70,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertRandomValues,170-170,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertRandomValues,175-175,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertRandomValues,182-182,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDate,147-147,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDate,152-152,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithDescExpression,241-241,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertValuesWithDescExpression,246-246,[        conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertValuesWithExpression,119-119,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertVarCharWithMaxLength,204-204,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,209-209,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,216-216,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,223-223,[        conn = DriverManager.getConnection(getUrl(), props);],,testUpsertVarCharWithMaxLength,229-229,[        conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertValuesIT.java,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,800-800,[            conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + tableName + " (PK1 VARCHAR NOT NULL, PK2 DATE NOT NULL, KV1 VARCHAR, KV2 VARCHAR CONSTRAINT PK PRIMARY KEY(PK1, PK2 "+ sortOrder + " ROW_TIMESTAMP)) " + "  IMMUTABLE_ROWS=true");],,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,804-804,[            conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + indexName + " ON  " + tableName + "  (PK2, KV1) INCLUDE (KV2)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertValuesIT.java,testAutomaticallySettingRowtimestamp,741-741,[            conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + tableName + " (PK1 VARCHAR NOT NULL, PK2 DATE NOT NULL, KV1 VARCHAR, KV2 VARCHAR CONSTRAINT PK PRIMARY KEY(PK1, PK2 "+ sortOrder + " ROW_TIMESTAMP " + ")) ");],,testAutomaticallySettingRowtimestamp,745-745,[            conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + indexName + " ON  " + tableName + "  (PK2, KV1) INCLUDE (KV2)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UpsertValuesIT.java,testComparisonOperatorsOnRowTimestampCol,858-858,[            conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + tableName + " (PK1 VARCHAR NOT NULL, PK2 DATE NOT NULL, KV1 VARCHAR CONSTRAINT PK PRIMARY KEY(PK1, PK2 "+ sortOrder + " ROW_TIMESTAMP)) " + "  IMMUTABLE_ROWS=true");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testUpsertDateValues,92-92,[        PreparedStatement upsertStmt = conn.prepareStatement("upsert into ptsdb(inst,host,date) values('aaa','bbb',to_date('" + dateString + "'))");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,assertNumRecords,895-895,[        PreparedStatement stmt = conn.prepareStatement(sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,810-810,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (PK1, KV1, KV2) VALUES (?, ?, ?)");],,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,822-822,[            PreparedStatement stmt = conn.prepareStatement("SELECT KV1, KV2 FROM " + tableName + " WHERE PK1 = ? AND PK2 = ?");],,testAutomaticallySettingRowTimestampForImmutableTableAndIndexes,832-832,[            stmt = conn.prepareStatement("SELECT KV2 FROM " + tableName + " WHERE PK2 = ? AND KV1 = ?");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testAutomaticallySettingRowtimestamp,751-751,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO  " + tableName + " (PK1, KV1, KV2) VALUES (?, ?, ?)");],,testAutomaticallySettingRowtimestamp,763-763,[            PreparedStatement stmt = conn.prepareStatement("SELECT KV1, KV2 FROM " + tableName + " WHERE PK1 = ? AND PK2 = ?");],,testAutomaticallySettingRowtimestamp,773-773,[            stmt = conn.prepareStatement("SELECT KV2 FROM " + tableName + " WHERE PK2 = ? AND KV1 = ?");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testComparisonOperatorsOnRowTimestampCol,863-863,[            PreparedStatement stmt = conn.prepareStatement(upsert);],,testComparisonOperatorsOnRowTimestampCol,884-884,[            assertNumRecords(3, "SELECT count(*) from " + tableName + " WHERE PK2 > ?", conn, new Date(10));],,testComparisonOperatorsOnRowTimestampCol,885-885,[            assertNumRecords(1, "SELECT count(*) from " + tableName + " WHERE PK2 < ? AND PK2 > ?", conn, new Date(30), new Date(10));],,testComparisonOperatorsOnRowTimestampCol,886-886,[            assertNumRecords(3, "SELECT count(*) from " + tableName + " WHERE PK2 <= ? AND PK2 >= ?", conn, new Date(30), new Date(10));],,testComparisonOperatorsOnRowTimestampCol,887-887,[            assertNumRecords(2, "SELECT count(*) from " + tableName + " WHERE PK2 <= ? AND PK2 > ?", conn,  new Date(30), new Date(10));],,testComparisonOperatorsOnRowTimestampCol,888-888,[            assertNumRecords(2, "SELECT count(*) from " + tableName + " WHERE PK2 < ? AND PK2 >= ?", conn, new Date(30), new Date(10));],,testComparisonOperatorsOnRowTimestampCol,889-889,[            assertNumRecords(0, "SELECT count(*) from " + tableName + " WHERE PK2 < ?", conn, new Date(10));],,testComparisonOperatorsOnRowTimestampCol,890-890,[            assertNumRecords(4, "SELECT count(*) from " + tableName, conn);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/UpsertValuesIT.java,testWithUpsertingRowTimestampColSpecified,715-715,[            stmt = conn.prepareStatement("SELECT KV2 FROM  " + tableName + "  WHERE PK2 = ? AND KV1 = ?");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testUDFsWithMultipleConnections,513-513,[            rs = conn1.createStatement().executeQuery("select MYFUNCTION(name) from t8");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testCreateFunction,386-386,[            rs = conn2.createStatement().executeQuery("select myreverse2(firstname) from t3");],,testCreateFunction,392-392,[            rs = conn2.createStatement().executeQuery("select unknownFunction(firstname) from t3");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testDropFunction,639-639,[            rs = stmt.executeQuery("select mysum6(k1) from t6");],,testDropFunction,658-658,[            rs = stmt.executeQuery("select mysum6(k1) from t6");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testTemporaryFunctions,597-597,[            rs = stmt.executeQuery("select k from t9 where mysum9(k,10,'x')=11");],,testTemporaryFunctions,604-604,[            rs = stmt.executeQuery("select mysum9() from t9");],,testTemporaryFunctions,612-612,[            rs = stmt.executeQuery("select k from t9 where mysum9(k)=11");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testUDFsWhenTimestampManagedAtClient,693-693,[            rs = stmt.executeQuery("select mysum61(k1) from t62");],,testUDFsWhenTimestampManagedAtClient,715-715,[            rs = stmt.executeQuery("select mysum61(k1) from t62");],,testUDFsWhenTimestampManagedAtClient,754-754,[            rs = stmt.executeQuery("select k from t61 where reverse(lastname,11)='kcoj'");],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,872-872,[            fos.write(program.getBytes());],,
PERFORMANCE,DM_STRING_CTOR,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,884-884,[            String jarPathStr = new String(pathToAdd);],,
BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,901-901,[            FileInputStream fis = new FileInputStream(classFile);],,
BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,871-871,[            FileOutputStream fos = new FileOutputStream(javaFileName);],,compileTestClass,882-882,[            JarOutputStream jarOutputStream = new JarOutputStream(jarFos, manifest);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,915-915,[            if (classFile != null) classFile.delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,916-916,[            if (jarFile != null) jarFile.delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,914-914,[            if (javaFile != null) javaFile.delete();],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,902-902,[            fis.read(allBytes);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testVerifyCreateFunctionArguments,571-571,[            stmt.executeQuery("select mysum(k,20) from t4");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,914-914,[            if (javaFile != null) javaFile.delete();],,compileTestClass,915-915,[            if (classFile != null) classFile.delete();],,compileTestClass,916-916,[            if (jarFile != null) jarFile.delete();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,compileTestClass,912-912,[            stmt.execute("add jars '"+jarFile.getAbsolutePath()+"'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testCreateFunction,329-329,[        stmt.execute("create function myreverse(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testCreateFunction,349-349,[        stmt.execute("create function myreverse2(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"'");],,testCreateFunction,343-343,[            stmt.execute("create function myreverse(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testCreateFunction,366-366,[            conn2.createStatement().execute("create function myreverse(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testCreateFunction,398-398,[        conn.createStatement().execute("create function UDF_ARRAY_ELEM(VARCHAR ARRAY, INTEGER) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_ARRAY_INDEX_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testDropFunction,627-627,[        stmt.execute("create function mysum6(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,testDropFunction,655-655,[        stmt.execute("create function mysum6(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testReplaceFunction,800-800,[        stmt.execute("create function myfunction63(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testReplaceFunction,802-802,[        stmt.execute("create or replace function myfunction63(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testSameUDFWithDifferentImplementationsInDifferentTenantConnections,424-424,[        nonTenantConn.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testSameUDFWithDifferentImplementationsInDifferentTenantConnections,427-427,[            nonTenantConn.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end.UnknownClass' using jar "],,testSameUDFWithDifferentImplementationsInDifferentTenantConnections,442-442,[        tenant1Conn.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testSameUDFWithDifferentImplementationsInDifferentTenantConnections,445-445,[            tenant1Conn.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end.UnknownClass' using jar "],,testSameUDFWithDifferentImplementationsInDifferentTenantConnections,452-452,[        tenant2Conn.createStatement().execute("create function myfunction(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,testSameUDFWithDifferentImplementationsInDifferentTenantConnections,455-455,[            tenant2Conn.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end.UnknownClass' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testTemporaryFunctions,585-585,[        stmt.execute("create temporary function mysum9(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testUDFsWhenTimestampManagedAtClient,675-675,[        stmt.execute("create function mysum61(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,testUDFsWhenTimestampManagedAtClient,709-709,[        stmt.execute("create function mysum61(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,testUDFsWhenTimestampManagedAtClient,725-725,[        stmt.execute("create function myfunction6(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testUDFsWhenTimestampManagedAtClient,727-727,[        stmt.execute("create or replace function myfunction6(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,testUDFsWhenTimestampManagedAtClient,741-741,[        stmt.execute("create or replace function myfunction6(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testUDFsWithMultipleConnections,488-488,[        conn1.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testUDFsWithMultipleConnections,492-492,[            conn2.createStatement().execute("create function myfunction(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testUDFsWithSameChildrenInAQuery,840-840,[        stmt.execute("create function udf1(VARBINARY) returns UNSIGNED_LONG as 'org.apache.phoenix.end2end."+GETX_CLASSNAME+"' using jar "],,testUDFsWithSameChildrenInAQuery,842-842,[        stmt.execute("create function udf2(VARBINARY) returns INTEGER as 'org.apache.phoenix.end2end."+GETY_CLASSNAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testUsingUDFFunctionInDifferentQueries,528-528,[        stmt.execute("create function mysum3(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,testUsingUDFFunctionInDifferentQueries,530-530,[        stmt.execute("create function myreverse3(VARCHAR) returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"' using jar "],,testUsingUDFFunctionInDifferentQueries,544-544,[        stmt.execute("create function myreverse4(VARCHAR CONSTANT defaultValue='null') returns VARCHAR as 'org.apache.phoenix.end2end."+MY_REVERSE_CLASS_NAME+"'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testVerifyCreateFunctionArguments,562-562,[        stmt.execute("create function mysum(INTEGER, INTEGER CONSTANT defaultValue=10 minvalue=1 maxvalue=15 ) returns INTEGER as 'org.apache.phoenix.end2end."+MY_SUM_CLASS_NAME+"' using jar "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testDeleteJar,307-307,[        stmt.execute("delete jar '"+ util.getConfiguration().get(QueryServices.DYNAMIC_JARS_DIR_KEY)+"/"+"myjar4.jar'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/UserDefinedFunctionsIT.java,testFunctionalIndexesWithUDFFunction,781-781,[        rs = stmt.executeQuery("explain " + query);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,714-714,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,715-715,[            assertTrue(rs.next());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,713-713,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,714-714,[            ResultSet rs = statement.executeQuery();],,testBatchUpsert,715-715,[            assertTrue(rs.next());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initGroupByRowKeyColumns,66-66,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues,534-534,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initPtsdbTableValues2,567-567,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,initTableValues,93-93,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,707-707,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testBatchUpsert,713-713,[            PreparedStatement statement = conn.prepareStatement(query);],,testBatchUpsert,724-724,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,732-732,[            PreparedStatement s = conn.prepareStatement(sql2);],,testBatchUpsert,740-740,[            PreparedStatement s = conn.prepareStatement(sql3);],,testBatchUpsert,748-748,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,756-756,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,764-764,[            PreparedStatement s = conn.prepareStatement(sql1);],,testBatchUpsert,778-778,[            PreparedStatement statement = conn.prepareStatement(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testEscapedQuoteScan,496-496,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testILikeOnColumn,1606-1606,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testIsNullInPK,1738-1738,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeFunctionOnRowKeyInWhere,2023-2023,[        Connection conn = DriverManager.getConnection(url);],,testLikeFunctionOnRowKeyInWhere,2028-2028,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeOnColumn,1489-1489,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingKVColumn,921-921,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testMissingPKColumn,881-881,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testNullValueEqualityScan,439-439,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunctionOnRowKeyInWhere,1992-1992,[        Connection conn = DriverManager.getConnection(url);],,testRTrimFunctionOnRowKeyInWhere,1997-1997,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction2,1371-1371,[        Connection conn = DriverManager.getConnection(url, props);],,testRegexpSubstrFunction2,1378-1378,[        conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunctionOnRowKeyInWhere,1965-1965,[        Connection conn = DriverManager.getConnection(url);],,testSubstrFunctionOnRowKeyInWhere,1970-1970,[        conn = DriverManager.getConnection(url);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongKVColumn,1058-1058,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooLongPKColumn,1021-1021,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortKVColumn,949-949,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTooShortPKColumn,985-985,[        Connection conn = DriverManager.getConnection(url, props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/VariableLengthPKIT.java,testVarLengthPKColScan,466-466,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToCharWithFormatOnDate,843-843,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testToDateWithFormatOnDate,864-864,[            PreparedStatement statement = conn.prepareStatement(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testInListConstant,1470-1470,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLTrimFunction,1950-1950,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLengthFunction,1792-1792,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLikeConstant,1427-1427,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testLowerFunction,1864-1864,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRTrimFunction,1907-1907,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexReplaceFunction,1292-1292,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testRegexpSubstrFunction,1354-1354,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testSubstrFunction,1233-1233,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testTrimFunction,2083-2083,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/VariableLengthPKIT.java,testUpperFunction,1827-1827,[                PreparedStatement statement = conn.prepareStatement(query[i]);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/ViewIT.java,testReadOnlyOnReadOnlyView,105-105,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewUsesTableIndex,466-466,[            conn.createStatement().execute("UPSERT INTO " + fullTableName + " VALUES(" + (i % 4) + "," + (i+100) + "," + (i > 5 ? 2 : 1) + ",'" + s1Values[i%2] + "','bas')");],,testViewUsesTableIndex,482-482,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testReadOnlyViewWithCaseSensitiveColumnNames,288-288,[            conn.createStatement().execute("UPSERT INTO " + fullTableName + " VALUES(" + i + ", " + (i+10) + ",'A')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAndTableAndDropCascadeWithIndexes,408-408,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascadeWithIndexes,410-410,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascadeWithIndexes,412-412,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascadeWithIndexes,416-416,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascadeWithIndexes,423-423,[        conn.createStatement().execute("DROP TABLE " + fullTableName + " CASCADE");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewWithCurrentDate,315-315,[            conn.createStatement().execute("UPSERT INTO " + fullTableName + " VALUES(" + i + ", " + (i+10) + ",CURRENT_DATE()-" + i + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testCreateViewDefinesPKColumn,493-493,[        conn.createStatement().execute(ddl);],,testCreateViewDefinesPKColumn,495-495,[        conn.createStatement().execute(ddl);],,testCreateViewDefinesPKColumn,502-502,[        conn.createStatement().executeUpdate("upsert into " + fullTableName + " (k1, k2, v1) values (1, 1, 1)");],,testCreateViewDefinesPKColumn,507-507,[        rs = conn.createStatement().executeQuery("select count(*) from " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testCreateViewDefinesPKConstraint,521-521,[        conn.createStatement().execute(ddl);],,testCreateViewDefinesPKConstraint,523-523,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testDisallowDropOfColumnOnParentTable,365-365,[        conn.createStatement().execute(ddl);],,testDisallowDropOfColumnOnParentTable,367-367,[        conn.createStatement().execute(ddl);],,testDisallowDropOfColumnOnParentTable,370-370,[            conn.createStatement().execute("ALTER TABLE " + fullTableName + " DROP COLUMN v1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testDisallowDropOfReferencedColumn,208-208,[        conn.createStatement().execute(ddl);],,testDisallowDropOfReferencedColumn,210-210,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testQueryViewStatementOptimization,599-599,[        conn.createStatement().execute(sql);],,testQueryViewStatementOptimization,601-601,[        conn.createStatement().execute(sql);],,testQueryViewStatementOptimization,603-603,[        conn.createStatement().execute(sql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testReadOnlyOnUpdatableView,194-194,[        conn.createStatement().execute("UPSERT INTO " + fullTableName + "(k1, k2,k3) VALUES(1, 122, 5)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testReadOnlyView,60-60,[        conn.createStatement().execute(ddl);],,testReadOnlyView,62-62,[        conn.createStatement().execute(ddl);],,testReadOnlyView,70-70,[            conn.createStatement().execute("UPSERT INTO " + fullTableName + " VALUES(" + i + ")");],,testReadOnlyView,80-80,[        ResultSet rs = conn.createStatement().executeQuery("SELECT k FROM " + tableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testReadOnlyViewWithCaseSensitiveColumnNames,278-278,[        conn.createStatement().execute(ddl);],,testReadOnlyViewWithCaseSensitiveColumnNames,280-280,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testReadOnlyViewWithCaseSensitiveTableNames,244-244,[        conn.createStatement().execute(ddl);],,testReadOnlyViewWithCaseSensitiveTableNames,246-246,[        conn.createStatement().execute(ddl);],,testReadOnlyViewWithCaseSensitiveTableNames,254-254,[            conn.createStatement().execute("UPSERT INTO " + caseSensitiveTableName + " VALUES(" + i + ")");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAddsClashingPKColumn,572-572,[        conn.createStatement().execute(ddl);],,testViewAddsClashingPKColumn,574-574,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAddsNotNullPKColumn,583-583,[        conn.createStatement().execute(ddl);],,testViewAddsNotNullPKColumn,585-585,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAddsPKColumn,535-535,[        conn.createStatement().execute(ddl);],,testViewAddsPKColumn,537-537,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAddsPKColumnWhoseParentsLastPKIsVarLength,550-550,[        conn.createStatement().execute(ddl);],,testViewAddsPKColumnWhoseParentsLastPKIsVarLength,552-552,[        conn.createStatement().execute(ddl);],,testViewAddsPKColumnWhoseParentsLastPKIsVarLength,562-562,[        	conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAndTableAndDropCascade,383-383,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascade,385-385,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascade,387-387,[        conn.createStatement().execute(ddl);],,testViewAndTableAndDropCascade,392-392,[        conn.createStatement().execute("DROP TABLE " + fullTableName + " CASCADE");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewAndTableInDifferentSchemas,333-333,[        conn.createStatement().execute(ddl);],,testViewAndTableInDifferentSchemas,335-335,[        conn.createStatement().execute(ddl);],,testViewAndTableInDifferentSchemas,337-337,[        conn.createStatement().execute(ddl);],,testViewAndTableInDifferentSchemas,357-357,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewUsesTableIndex,458-458,[        conn.createStatement().execute(ddl);],,testViewUsesTableIndex,459-459,[        conn.createStatement().execute("CREATE INDEX i1 ON " + fullTableName + "(k3, k2) INCLUDE(s1, s2)");],,testViewUsesTableIndex,460-460,[        conn.createStatement().execute("CREATE INDEX i2 ON " + fullTableName + "(k3, k2, s2)");],,testViewUsesTableIndex,463-463,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,testViewWithCurrentDate,305-305,[        conn.createStatement().execute(ddl);],,testViewWithCurrentDate,307-307,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,validateCannotDropTableWithChildViewsWithoutCascade,435-435,[	        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/ViewIT.java,validateViewDoesNotExist,446-446,[            conn.createStatement().execute(ddl1);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,testWriteFailureDropIndex,146-146,[            conn.createStatement().executeQuery(query);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,doSetup,94-94,[        driver = initAndRegisterDriver(url, new ReadOnlyProps(props.entrySet().iterator()));],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,doSetup,88-88,[        url = JDBC_PROTOCOL + JDBC_PROTOCOL_SEPARATOR + LOCALHOST + JDBC_PROTOCOL_SEPARATOR + clientPort],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,doSetup,85-85,[        util = new HBaseTestingUtility(conf);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java,call,166-166,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + DATA_TABLE_FULL_NAME + " VALUES(?,?,?)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/DropViewIT.java,testDropViewKeepsHTable,82-82,[        conn.createStatement().execute("create view " + HBASE_NATIVE +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,createBaseTable,56-56,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,createIndex,71-71,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,createBaseTable,66-66,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,createIndex,73-73,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,testGlobalIndexOptimizationOnSharedIndex,316-316,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,testNoGlobalIndexOptimization,355-355,[            ResultSet rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testNoGlobalIndexOptimization,375-375,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testNoGlobalIndexOptimization,397-397,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testNoGlobalIndexOptimization,405-405,[            rs = conn1.createStatement().executeQuery(query);],,testNoGlobalIndexOptimization,434-434,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testNoGlobalIndexOptimization,443-443,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,testOptimization,109-109,[            ResultSet rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testOptimization,134-134,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testOptimization,161-161,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testOptimization,175-175,[            rs = conn1.createStatement().executeQuery(query);],,testOptimization,197-197,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testOptimization,210-210,[            rs = conn1.createStatement().executeQuery(query);],,testOptimization,231-231,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testOptimization,243-243,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/GlobalIndexOptimizationIT.java,testOptimizationTenantSpecific,270-270,[            ResultSet rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ImmutableIndexIT.java,testDropIfImmutableKeyValueColumn,98-98,[	        stmt.execute(ddl);],,testDropIfImmutableKeyValueColumn,101-101,[	        stmt.execute(ddl);],,testDropIfImmutableKeyValueColumn,105-105,[	        rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullTableName);],,testDropIfImmutableKeyValueColumn,108-108,[	        rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexName);],,testDropIfImmutableKeyValueColumn,115-115,[	            conn.createStatement().execute(dml);],,testDropIfImmutableKeyValueColumn,121-121,[	        conn.createStatement().execute("DROP TABLE " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ImmutableIndexWithStatsIT.java,testIndexCreationDeadlockWithStats,64-64,[        conn.createStatement().execute("CREATE TABLE " + tableName + " (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR) IMMUTABLE_ROWS=TRUE");],,testIndexCreationDeadlockWithStats,66-66,[        rs = conn.createStatement().executeQuery(query);],,testIndexCreationDeadlockWithStats,77-77,[        conn.createStatement().execute("UPDATE STATISTICS " + tableName);],,testIndexCreationDeadlockWithStats,79-79,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexCreationDeadlockWithStats,83-83,[        conn.createStatement().execute("CREATE INDEX " + indexName + " ON " + tableName + " (v)");],,testIndexCreationDeadlockWithStats,86-86,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/ImmutableIndexWithStatsIT.java,testIndexCreationDeadlockWithStats,69-69,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?)");],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/end2end/index/IndexExpressionIT.java,insertRow,79-79,[        Date date = new Date(DateUtil.parseDate("2015-01-01 00:00:00").getTime() + (i - 1) * TestUtil.NUM_MILLIS_IN_DAY);],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/end2end/index/IndexExpressionIT.java,verifyResult,102-102,[        Date date = new Date(DateUtil.parseDate("2015-01-01 00:00:00").getTime() + (i) * TestUtil.NUM_MILLIS_IN_DAY);],,verifyResult,101-101,[        assertEquals(i * 3, rs.getInt(2));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestCreateAndUpdate,175-175,[            rs = conn.createStatement().executeQuery("EXPLAIN " + indexSelectSql);],,helpTestCreateAndUpdate,179-179,[            rs = conn.createStatement().executeQuery(indexSelectSql);],,helpTestCreateAndUpdate,191-191,[            rs = conn.createStatement().executeQuery(indexSelectSql);],,helpTestCreateAndUpdate,199-199,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestTableOnlyHasPrimaryKeyIndex,1374-1374,[			conn.createStatement().execute(],,helpTestTableOnlyHasPrimaryKeyIndex,1381-1381,[			ResultSet rs = conn.createStatement().executeQuery(query);],,helpTestTableOnlyHasPrimaryKeyIndex,1383-1383,[			conn.createStatement().execute(],,helpTestTableOnlyHasPrimaryKeyIndex,1387-1387,[			rs = conn.createStatement().executeQuery(query);],,helpTestTableOnlyHasPrimaryKeyIndex,1397-1397,[            rs = conn.createStatement().executeQuery(query);],,helpTestTableOnlyHasPrimaryKeyIndex,1404-1404,[			rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestUpdate,255-255,[            ResultSet rs = conn.createStatement().executeQuery("SELECT /*+ NO_INDEX */ " + selectSql);],,helpTestUpdate,265-265,[            rs = conn.createStatement().executeQuery("SELECT " + selectSql);],,helpTestUpdate,273-273,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestAddPKColumnToTable,1041-1041,[	        conn.createStatement().execute("CREATE " + ( local ? "LOCAL" : "") + " INDEX " + indexName + " ON t (v1 || '_' || v2)");],,helpTestAddPKColumnToTable,1043-1043,[	        rs = conn.createStatement().executeQuery(indexTableQuery);],,helpTestAddPKColumnToTable,1086-1086,[	        rs = conn.createStatement().executeQuery(indexTableQuery);],,helpTestAddPKColumnToTable,1119-1119,[	        rs = conn.createStatement().executeQuery(indexTableQuery);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestCaseSensitiveFunctionIndex,1324-1324,[			rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestDeleteCoveredCol,399-399,[            rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullDataTableName);],,helpTestDeleteCoveredCol,402-402,[            rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexTableName);],,helpTestDeleteCoveredCol,407-407,[            assertEquals(1, conn.createStatement().executeUpdate(dml));],,helpTestDeleteCoveredCol,412-412,[            rs = conn.createStatement().executeQuery(query);],,helpTestDeleteCoveredCol,421-421,[            rs = conn.createStatement().executeQuery(query);],,helpTestDeleteCoveredCol,430-430,[            rs = conn.createStatement().executeQuery(query);],,helpTestDeleteCoveredCol,438-438,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestDeleteIndexedExpression,326-326,[            rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullDataTableName);],,helpTestDeleteIndexedExpression,329-329,[            rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexTableName);],,helpTestDeleteIndexedExpression,336-336,[                conn.createStatement().execute(dml);],,helpTestDeleteIndexedExpression,351-351,[            rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullDataTableName);],,helpTestDeleteIndexedExpression,348-348,[                conn.createStatement().execute(dml);],,helpTestDeleteIndexedExpression,354-354,[            rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexTableName);],,helpTestDeleteIndexedExpression,357-357,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestDropCoveredColumn,932-932,[	        conn.createStatement().execute("CREATE " + ( local ? "LOCAL" : "") + " INDEX " + indexName + " ON t (k || '_' || v1) include (v2, v3)");],,helpTestDropCoveredColumn,934-934,[	        rs = conn.createStatement().executeQuery(indexTableQuery);],,helpTestDropCoveredColumn,959-959,[	        rs = conn.createStatement().executeQuery(indexTableQuery);],,helpTestDropCoveredColumn,987-987,[	        rs = conn.createStatement().executeQuery(indexTableQuery);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestDropIndexedColumn,845-845,[	        conn.createStatement().execute("CREATE " + ( local ? "LOCAL" : "") + " INDEX " + indexName + " ON t (v1 || '_' || v2)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestGroupByCount,479-479,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + groupBySql);],,helpTestGroupByCount,485-485,[            rs = conn.createStatement().executeQuery(groupBySql);],,helpTestGroupByCount,491-491,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestInClauseWithIndex,582-582,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + sql);],,helpTestInClauseWithIndex,586-586,[            rs = conn.createStatement().executeQuery(sql);],,helpTestInClauseWithIndex,590-590,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestIndexWithCaseSensitiveCols,695-695,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,helpTestIndexWithCaseSensitiveCols,717-717,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestSelectAliasAndOrderByWithIndex,630-630,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + sql);],,helpTestSelectAliasAndOrderByWithIndex,636-636,[            rs = conn.createStatement().executeQuery(sql);],,helpTestSelectAliasAndOrderByWithIndex,642-642,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestSelectColOnlyInDataTable,791-791,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + sql);],,helpTestSelectColOnlyInDataTable,797-797,[            rs = conn.createStatement().executeQuery(sql);],,helpTestSelectColOnlyInDataTable,802-802,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestSelectDistinct,530-530,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + sql);],,helpTestSelectDistinct,536-536,[            rs = conn.createStatement().executeQuery(sql);],,helpTestSelectDistinct,542-542,[            conn.createStatement().execute("DROP INDEX IDX ON " + fullDataTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestUpdatableViewIndex,1162-1162,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,helpTestUpdatableViewIndex,1179-1179,[	        conn.createStatement().execute("CREATE " + (local ? "LOCAL" : "") + " INDEX i2 on v(s1||'_'||s2)");],,helpTestUpdatableViewIndex,1182-1182,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexExpressionIT.java,testViewUsesTableIndex,1227-1227,[	        rs = conn.createStatement(  ).executeQuery("EXPLAIN " + query);],,testViewUsesTableIndex,1239-1239,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestCreateAndUpdate,132-132,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,helpTestCreateAndUpdate,143-143,[            stmt = conn.prepareStatement(whereSql);],,helpTestCreateAndUpdate,186-186,[            stmt = conn.prepareStatement(upsert);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestTableOnlyHasPrimaryKeyIndex,1390-1390,[			PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestUpdate,232-232,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,helpTestUpdate,240-240,[            stmt = conn.prepareStatement(upsert);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestDeleteCoveredCol,395-395,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestDeleteIndexedExpression,322-322,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestGroupByCount,474-474,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestInClauseWithIndex,579-579,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestSelectAliasAndOrderByWithIndex,627-627,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestSelectColOnlyInDataTable,788-788,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,helpTestSelectDistinct,527-527,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexExpressionIT.java,populateDataTable,283-283,[        PreparedStatement stmt1 = conn.prepareStatement(upsert);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/end2end/index/IndexHandlerIT.java,cleanup,137-140,[        HBaseAdmin admin = UTIL.getHBaseAdmin();,         admin.disableTable(TestTable.getTableName());,         admin.deleteTable(TestTable.getTableName());,     }],,cleanUp,117-123,[          r1.close();,           r2.close();,           wal.close();,       } catch (Exception ignored) {},       FileSystem newFS = FileSystem.get(TEST_UTIL.getConfiguration());,       newFS.delete(TEST_UTIL.getDataTestDir(), true);,   }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/end2end/index/IndexHandlerIT.java,setPriority,95-95,[                count = new Integer(0);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithNullableFixedWithCols,142-142,[	            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,createIndexOnTableWithSpecifiedDefaultCF,410-410,[	        stmt.execute(ddl);],,createIndexOnTableWithSpecifiedDefaultCF,413-413,[	        rs = conn.createStatement().executeQuery(query);],,createIndexOnTableWithSpecifiedDefaultCF,417-417,[	        conn.createStatement().execute(],,createIndexOnTableWithSpecifiedDefaultCF,420-420,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testMultipleUpdatesAcrossRegions,695-695,[	        conn.createStatement().execute(],,testMultipleUpdatesAcrossRegions,700-700,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesAcrossRegions,703-703,[	        conn.createStatement().execute(],,testMultipleUpdatesAcrossRegions,706-706,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesAcrossRegions,728-728,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesAcrossRegions,744-744,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesAcrossRegions,757-757,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testCreateIndexAfterUpsertStarted,215-215,[            stmt.execute(ddl);],,testCreateIndexAfterUpsertStarted,220-220,[            rs = conn1.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullTableName);],,testCreateIndexAfterUpsertStarted,253-253,[                stmt.execute(ddl);],,testCreateIndexAfterUpsertStarted,268-268,[                rs = conn1.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexName);],,testCreateIndexAfterUpsertStarted,273-273,[                rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testDeleteFromAllPKColumnIndex,157-157,[	        stmt.execute(ddl);],,testDeleteFromAllPKColumnIndex,162-162,[	        stmt.execute(ddl);],,testDeleteFromAllPKColumnIndex,166-166,[	        rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullTableName);],,testDeleteFromAllPKColumnIndex,169-169,[	        rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexName);],,testDeleteFromAllPKColumnIndex,174-174,[	        assertEquals(1,conn.createStatement().executeUpdate(dml));],,testDeleteFromAllPKColumnIndex,178-178,[	        rs = conn.createStatement().executeQuery(query);],,testDeleteFromAllPKColumnIndex,186-186,[	        rs = conn.createStatement().executeQuery(query);],,testDeleteFromAllPKColumnIndex,194-194,[	        rs = conn.createStatement().executeQuery(query);],,testDeleteFromAllPKColumnIndex,201-201,[	        conn.createStatement().execute("DROP INDEX " + indexName + " ON " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testDeleteFromNonPKColumnIndex,294-294,[	        stmt.execute(ddl);],,testDeleteFromNonPKColumnIndex,299-299,[	        stmt.execute(ddl);],,testDeleteFromNonPKColumnIndex,304-304,[	        rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullTableName);],,testDeleteFromNonPKColumnIndex,307-307,[	        rs = conn.createStatement().executeQuery("SELECT COUNT(*) FROM " + fullIndexName);],,testDeleteFromNonPKColumnIndex,312-312,[	        assertEquals(1,conn.createStatement().executeUpdate(dml));],,testDeleteFromNonPKColumnIndex,317-317,[	        rs = conn.createStatement().executeQuery(query);],,testDeleteFromNonPKColumnIndex,326-326,[	        rs = conn.createStatement().executeQuery(query);],,testDeleteFromNonPKColumnIndex,333-333,[	        conn.createStatement().execute("DROP INDEX " + indexName + " ON " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testGroupByCount,344-344,[	        stmt.execute(ddl);],,testGroupByCount,347-347,[	        stmt.execute(ddl);],,testGroupByCount,349-349,[	        rs = conn.createStatement().executeQuery("SELECT int_col2, COUNT(*) FROM " + fullTableName + " GROUP BY int_col2");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testInClauseWithIndexOnColumnOfUsignedIntType,385-385,[	        stmt.execute(ddl);],,testInClauseWithIndexOnColumnOfUsignedIntType,388-388,[            stmt.execute(ddl);],,testInClauseWithIndexOnColumnOfUsignedIntType,389-389,[            ResultSet rs = conn.createStatement().executeQuery("SELECT int_col1 FROM " + fullTableName + " where int_col1 IN (1, 2, 3, 4)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testInFilterOnIndexedTable,865-865,[	        conn.createStatement().execute(ddl);],,testInFilterOnIndexedTable,867-867,[	        conn.createStatement().execute(ddl);],,testInFilterOnIndexedTable,870-870,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithCaseSensitiveCols,781-781,[            conn.createStatement().execute("CREATE TABLE " + fullTableName + " (k VARCHAR NOT NULL PRIMARY KEY, \"V1\" VARCHAR, \"v2\" VARCHAR)"+tableDDLOptions);],,testIndexWithCaseSensitiveCols,783-783,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithCaseSensitiveCols,785-785,[            conn.createStatement().execute(],,testIndexWithCaseSensitiveCols,788-788,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithCaseSensitiveCols,803-803,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithCaseSensitiveCols,811-811,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithCaseSensitiveCols,822-822,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithCaseSensitiveCols,830-830,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithDecimalCol,892-892,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithDecimalCol,899-899,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithNullableDateCol,453-453,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,463-463,[            rs = conn.createStatement().executeQuery(query);],,testIndexWithNullableDateCol,473-473,[            rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableDateCol,483-483,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithNullableFixedWithCols,101-101,[	        stmt.execute(ddl);],,testIndexWithNullableFixedWithCols,106-106,[	        stmt.execute(ddl);],,testIndexWithNullableFixedWithCols,109-109,[	        ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testIndexWithNullableFixedWithCols,121-121,[	        rs = conn.createStatement().executeQuery(query);],,testIndexWithNullableFixedWithCols,134-134,[	        conn.createStatement().execute("DROP INDEX " + indexName + " ON " + fullTableName);],,testIndexWithNullableFixedWithCols,137-137,[	        rs = conn.createStatement().executeQuery(query);],,testIndexWithNullableFixedWithCols,142-142,[	            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testSelectAllAndAliasWithIndex,502-502,[			conn.createStatement().execute(ddl);],,testSelectAllAndAliasWithIndex,504-504,[	        rs = conn.createStatement().executeQuery(query);],,testSelectAllAndAliasWithIndex,508-508,[	        conn.createStatement().execute(ddl);],,testSelectAllAndAliasWithIndex,510-510,[	        rs = conn.createStatement().executeQuery(query);],,testSelectAllAndAliasWithIndex,525-525,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,532-532,[	        rs = conn.createStatement().executeQuery(query);],,testSelectAllAndAliasWithIndex,550-550,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectAllAndAliasWithIndex,561-561,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testSelectCF,577-577,[			conn.createStatement().execute(ddl);],,testSelectCF,579-579,[	        rs = conn.createStatement().executeQuery(query);],,testSelectCF,582-582,[	        conn.createStatement().execute(ddl);],,testSelectCF,584-584,[	        rs = conn.createStatement().executeQuery(query);],,testSelectCF,601-601,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,605-605,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testSelectCF,611-611,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testSelectDistinctOnTableWithSecondaryImmutableIndex,362-362,[	        stmt.execute(ddl);],,testSelectDistinctOnTableWithSecondaryImmutableIndex,367-367,[            ResultSet rs = conn.createStatement().executeQuery("SELECT distinct int_col2 FROM " + fullTableName + " where int_col2 > 0");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexIT.java,testUpsertAfterIndexDrop,634-634,[	        conn.createStatement().execute(],,testUpsertAfterIndexDrop,638-638,[	        rs = conn.createStatement().executeQuery(query);],,testUpsertAfterIndexDrop,641-641,[	        conn.createStatement().execute(],,testUpsertAfterIndexDrop,644-644,[	        rs = conn.createStatement().executeQuery(query);],,testUpsertAfterIndexDrop,658-658,[	        rs = conn.createStatement().executeQuery(query);],,testUpsertAfterIndexDrop,678-678,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testMultipleUpdatesAcrossRegions,711-711,[	            conn.prepareStatement("UPSERT INTO " + testTable + " VALUES(?,?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testCreateIndexAfterUpsertStarted,228-228,[                PreparedStatement pstmt = conn2.prepareStatement(upsert);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithCaseSensitiveCols,791-791,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithDecimalCol,888-888,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testIndexWithNullableDateCol,449-449,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testSelectAllAndAliasWithIndex,513-513,[	        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testSelectCF,587-587,[	        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testSelectDistinctOnTableWithSecondaryImmutableIndex,365-365,[            PreparedStatement pstmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexIT.java,testUpsertAfterIndexDrop,649-649,[	            conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,testUpsertAfterIndexDrop,666-666,[	        stmt = conn.prepareStatement(ddl);],,testUpsertAfterIndexDrop,669-669,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + "(k, v1) VALUES(?,?)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAlterIndexWithLowerCaseName,354-354,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreateDrop,122-122,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithNullableFixedWidthColInPK,296-296,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithRepeatedColumns,388-388,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexDefinitionWithSameColumnNamesInTwoFamily,408-408,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testBinaryNonnullableIndex,468-468,[            conn.createStatement().executeQuery(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertActiveIndex,104-104,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,assertNoActiveIndex,113-113,[        conn.createStatement().executeQuery("SELECT count(*) FROM " + fullTableName).next(); // client side cache will update],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAlterIndexWithLowerCaseName,366-366,[            conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAsyncCreatedDate,497-497,[        ResultSet rs = conn.createStatement().executeQuery(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testIndexCreateDrop,269-269,[            conn.createStatement().execute("CREATE TABLE " + diffTableNameInSameSchema + "(k INTEGER PRIMARY KEY)");],,testIndexCreateDrop,271-271,[                conn.createStatement().execute("DROP INDEX IDX1 ON " + diffTableNameInSameSchema);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/IndexMetadataIT.java,testAlterIndexWithLowerCaseName,362-362,[            PreparedStatement stmt = conn.prepareStatement(ddl);],,testAlterIndexWithLowerCaseName,373-373,[            stmt = conn.prepareStatement(ddl);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/end2end/index/IndexTestUtil.java,readDataTableIndexRow,68-68,[        PreparedStatement stmt = conn.prepareStatement(SELECT_DATA_INDEX_ROW);],,readDataTableIndexRow,69-69,[        stmt.setString(1, schemaName);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testBuildIndexWhenUserTableAlreadyHasData,246-246,[            for(Result r:scanner){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testDropLocalIndexShouldDeleteDataFromLocalIndexTable,565-565,[                for(Result r:scanner){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testPutsToLocalIndexTable,213-213,[            for(Result r:scanner){],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/LocalIndexIT.java,createBaseTable,97-97,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/LocalIndexIT.java,testIndexPlanSelectionIfBothGlobalAndLocalIndexesHasSameColumnsAndOrder,526-526,[        Connection conn1 = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanAfterRegionSplit,716-716,[                conn1.createStatement().execute(],,testLocalIndexScanAfterRegionSplit,761-761,[                rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanAfterRegionSplit,769-769,[                rs = conn1.createStatement().executeQuery("EXPLAIN "+query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanAfterRegionsMerge,840-840,[                conn1.createStatement().execute(],,testLocalIndexScanAfterRegionsMerge,889-889,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanAfterRegionsMerge,897-897,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanWithSmallChunks,800-800,[               conn1.createStatement().execute(],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexStateWhenSplittingInProgress,924-924,[                conn1.createStatement().execute(],,testLocalIndexStateWhenSplittingInProgress,986-986,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,createBaseTable,106-106,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testIndexPlanSelectionIfBothGlobalAndLocalIndexesHasSameColumnsAndOrder,535-535,[        ResultSet rs1 = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScan,276-276,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,300-300,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,320-320,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScan,344-344,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScan,353-353,[            rs = conn1.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/LocalIndexIT.java,testLocalIndexScanJoinColumnsFromDataTable,408-408,[            rs = conn1.createStatement().executeQuery("EXPLAIN "+ query);],,testLocalIndexScanJoinColumnsFromDataTable,431-431,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,440-440,[            rs = conn1.createStatement().executeQuery(query);],,testLocalIndexScanJoinColumnsFromDataTable,467-467,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,testLocalIndexScanJoinColumnsFromDataTable,476-476,[            rs = conn1.createStatement().executeQuery(query);],,testLocalIndexScanJoinColumnsFromDataTable,496-496,[            rs = conn1.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,helpTestWriteFailureDisablesIndex,137-137,[            conn.createStatement().execute(],,helpTestWriteFailureDisablesIndex,140-140,[            rs = conn.createStatement().executeQuery(query);],,helpTestWriteFailureDisablesIndex,149-149,[                conn.createStatement().execute(],,helpTestWriteFailureDisablesIndex,144-144,[                conn.createStatement().execute(],,helpTestWriteFailureDisablesIndex,154-154,[            rs = conn.createStatement().executeQuery(query);],,helpTestWriteFailureDisablesIndex,146-146,[                conn.createStatement().execute(],,helpTestWriteFailureDisablesIndex,245-245,[                rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,helpTestWriteFailureDisablesIndex,233-233,[                rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,helpTestWriteFailureDisablesIndex,249-249,[                rs = conn.createStatement().executeQuery(query);],,helpTestWriteFailureDisablesIndex,237-237,[                rs = conn.createStatement().executeQuery(query);],,helpTestWriteFailureDisablesIndex,289-289,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,testWriteFailureWithRegionServerDown,310-310,[            conn.createStatement().execute(],,testWriteFailureWithRegionServerDown,313-313,[            rs = conn.createStatement().executeQuery(query);],,testWriteFailureWithRegionServerDown,316-316,[            conn.createStatement().execute(],,testWriteFailureWithRegionServerDown,319-319,[            rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,helpTestWriteFailureDisablesIndex,165-165,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,helpTestWriteFailureDisablesIndex,182-182,[            stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,helpTestWriteFailureDisablesIndex,221-221,[                stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,helpTestWriteFailureDisablesIndex,280-280,[            stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,testWriteFailureWithRegionServerDown,330-330,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,,362-367,[            this.getUtility().waitFor(30000, 200, new Waiter.Predicate<Exception>() {,                 @Override,                 public boolean evaluate() throws Exception {,                     ServerName sn = cluster.getServerHoldingRegion(indexRegion.getTable(),,                             indexRegion.getRegionName());,                     return (sn != null && sn.equals(dstRS));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexFailureIT.java,run,420-420,[                PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testAlterTableWithImmutability,580-580,[	        conn.createStatement().execute(],,testAlterTableWithImmutability,584-584,[	        rs = conn.createStatement().executeQuery(query);],,testAlterTableWithImmutability,588-588,[	        conn.createStatement().execute("ALTER TABLE " + fullTableName +" SET IMMUTABLE_ROWS=true");],,testAlterTableWithImmutability,592-592,[	        conn.createStatement().execute("ALTER TABLE " + fullTableName +" SET immutable_rows=false");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCompoundIndexKey,302-302,[	        conn.createStatement().execute("CREATE TABLE " + fullTableName + " (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)" + tableDDLOptions);],,testCompoundIndexKey,304-304,[	        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,306-306,[	        conn.createStatement().execute("CREATE " + (localIndex ? " LOCAL " : "") + " INDEX " + indexName + " ON " + fullTableName + " (v1, v2)");],,testCompoundIndexKey,308-308,[	        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,320-320,[	        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,335-335,[	        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,343-343,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCompoundIndexKey,353-353,[	        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,368-368,[	        rs = conn.createStatement().executeQuery(query);],,testCompoundIndexKey,387-387,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,106-106,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumnUpdates,113-113,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,135-135,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,157-157,[            rs = conn.createStatement().executeQuery(query);],,testCoveredColumnUpdates,174-174,[                rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumnUpdates,177-177,[                rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumns,196-196,[	        conn.createStatement().execute("CREATE TABLE " + fullTableName + " (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)" + tableDDLOptions);],,testCoveredColumns,198-198,[	        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,201-201,[	        conn.createStatement().execute("CREATE " + (localIndex ? " LOCAL " : "") + " INDEX " + indexName + " ON " + fullTableName + " (v1) INCLUDE (v2)");],,testCoveredColumns,203-203,[	        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,214-214,[	        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,228-228,[	        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,236-236,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,243-243,[	        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,257-257,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,264-264,[	        rs = conn.createStatement().executeQuery(query);],,testCoveredColumns,278-278,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testCoveredColumns,285-285,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testMultipleUpdatesToSingleRow,417-417,[	        conn.createStatement().execute(],,testMultipleUpdatesToSingleRow,421-421,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesToSingleRow,424-424,[	        conn.createStatement().execute("CREATE " + (localIndex ? " LOCAL " : "") + " INDEX " + indexName + " ON " + fullTableName + " (v1, v2)");],,testMultipleUpdatesToSingleRow,426-426,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesToSingleRow,440-440,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesToSingleRow,459-459,[	        rs = conn.createStatement().executeQuery(query);],,testMultipleUpdatesToSingleRow,467-467,[	        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMultipleUpdatesToSingleRow,480-480,[	        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/MutableIndexIT.java,testUpsertingNullForIndexedColumns,497-497,[    		stmt.execute("CREATE TABLE " + testTableName + "(v1 VARCHAR PRIMARY KEY, v2 DOUBLE, v3 VARCHAR) "+tableDDLOptions);],,testUpsertingNullForIndexedColumns,498-498,[    		stmt.execute("CREATE " + (localIndex ? "LOCAL" : "") + " INDEX " + indexName + " ON " + testTableName + "  (v2) INCLUDE(v3)");],,testUpsertingNullForIndexedColumns,501-501,[    		stmt.executeUpdate("upsert into " + testTableName + " values('cc1', null, 'abc')");],,testUpsertingNullForIndexedColumns,505-505,[    		rs = stmt.executeQuery("select * from " + fullIndexName);],,testUpsertingNullForIndexedColumns,514-514,[    		rs = stmt.executeQuery("select v1, v2, v3 from " + testTableName);],,testUpsertingNullForIndexedColumns,523-523,[    		stmt.executeUpdate("upsert into " + testTableName + " values('cc1', 1.23, 'abc')");],,testUpsertingNullForIndexedColumns,527-527,[    		rs = stmt.executeQuery("select /*+ NO_INDEX */ v1, v2, v3 from " + testTableName);],,testUpsertingNullForIndexedColumns,535-535,[    		rs = stmt.executeQuery("select * from " + indexName);],,testUpsertingNullForIndexedColumns,543-543,[    		stmt.executeUpdate("upsert into " + testTableName + " values('cc1', null, 'abc')");],,testUpsertingNullForIndexedColumns,547-547,[    		rs = stmt.executeQuery("select * from " + indexName);],,testUpsertingNullForIndexedColumns,556-556,[    		rs = stmt.executeQuery("select v1, v2, v3 from " + testTableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCompoundIndexKey,312-312,[	        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,testCompoundIndexKey,327-327,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,testCompoundIndexKey,380-380,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumnUpdates,101-101,[            PreparedStatement stmt = conn.prepareStatement("CREATE " + (localIndex ? " LOCAL " : "") + " INDEX " + indexName + " ON " + fullTableName ],,testCoveredColumnUpdates,128-128,[            stmt = conn.prepareStatement("UPSERT INTO " + fullTableName],,testCoveredColumnUpdates,150-150,[            stmt = conn.prepareStatement("UPSERT INTO " + fullTableName],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testCoveredColumns,206-206,[	        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,testCoveredColumns,221-221,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + "(k,v2) VALUES(?,?)");],,testCoveredColumns,250-250,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + "(k,v2) VALUES(?,?)");],,testCoveredColumns,271-271,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + "(k,v2) VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/MutableIndexIT.java,testMultipleUpdatesToSingleRow,431-431,[	            conn.prepareStatement("UPSERT INTO " + fullTableName + " VALUES(?,?,?)");],,testMultipleUpdatesToSingleRow,448-448,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + "(k, v1) VALUES(?,?)");],,testMultipleUpdatesToSingleRow,452-452,[	        stmt = conn.prepareStatement("UPSERT INTO " + fullTableName + "(k,v2) VALUES(?,?)");],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/index/MutableIndexReplicationIT.java,,91-91,[    protected static Configuration conf1 = HBaseConfiguration.create();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/index/MutableIndexReplicationIT.java,,104-104,[    protected static final byte[] row = Bytes.toBytes("row");],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/end2end/index/MutableIndexReplicationIT.java,,103-103,[    protected static final byte[] tableName = Bytes.toBytes("test");],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,180-180,[        expectedPlan = tableSaltBuckets == null ? ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,105-105,[        conn.createStatement().execute("CREATE TABLE IF NOT EXISTS " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR)  " +  (tableSaltBuckets == null ? "" : " SALT_BUCKETS=" + tableSaltBuckets));],,testMutableTableIndexMaintanence,107-107,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,110-110,[        conn.createStatement().execute("CREATE INDEX IF NOT EXISTS " + TestUtil.DEFAULT_INDEX_TABLE_NAME + " ON " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " (v DESC)" + (indexSaltBuckets == null ? "" : " SALT_BUCKETS=" + indexSaltBuckets));],,testMutableTableIndexMaintanence,112-112,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,125-125,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,135-135,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,142-142,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,155-155,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,163-163,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,174-174,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,179-179,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,testMutableTableIndexMaintanence,194-194,[        rs = conn.createStatement().executeQuery(query);],,testMutableTableIndexMaintanence,202-202,[        rs = conn.createStatement().executeQuery("EXPLAIN " + query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/end2end/index/SaltedIndexIT.java,testMutableTableIndexMaintanence,115-115,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME + " VALUES(?,?)");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/end2end/index/ViewIndexIT.java,testDeleteViewIndexSequences,78-78,[        HBaseAdmin admin = driver.getConnectionQueryServices(getUrl(), TestUtil.TEST_PROPERTIES).getAdmin();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,58-58,[        Connection conn = DriverManager.getConnection(getUrl());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,59-59,[        String ddl = "CREATE TABLE " + tableName + " (t_id VARCHAR NOT NULL,\n" +],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ViewIndexIT.java,createBaseTable,66-66,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/ViewIndexIT.java,testDeleteViewIndexSequences,75-75,[        conn1.createStatement().execute("CREATE VIEW " + VIEW_NAME + " AS SELECT * FROM " + TestUtil.DEFAULT_DATA_TABLE_NAME);],,testDeleteViewIndexSequences,76-76,[        conn1.createStatement().execute("CREATE INDEX " + TestUtil.DEFAULT_INDEX_TABLE_NAME + " ON " + VIEW_NAME + " (v1)");],,testDeleteViewIndexSequences,77-77,[        conn2.createStatement().executeQuery("SELECT * FROM " + TestUtil.DEFAULT_DATA_TABLE_FULL_NAME).next();],,testDeleteViewIndexSequences,79-79,[        conn1.createStatement().execute("DROP VIEW " + VIEW_NAME);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testCheckpointAndRollback,452-452,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,351-351,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testRollbackOfUncommittedExistingKeyValueIndexUpdate,90-90,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testRollbackOfUncommittedExistingRowKeyIndexUpdate,218-218,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,assertDataAndIndexRows,317-317,[        rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName1);],,assertDataAndIndexRows,325-325,[        rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1, v2 from " + fullTableName1);],,assertDataAndIndexRows,333-333,[        rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName2);],,assertDataAndIndexRows,341-341,[        rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testCheckpointAndRollback,456-456,[            stmt.execute("CREATE TABLE " + fullTableName1 + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)");],,testCheckpointAndRollback,457-457,[            stmt.execute("CREATE "+(localIndex? " LOCAL " : "")+"INDEX " + indexName1 + " ON " + fullTableName1 + " (v1)");],,testCheckpointAndRollback,458-458,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'a', 'a')");],,testCheckpointAndRollback,461-461,[            stmt.executeUpdate("upsert into " + fullTableName1 + "(k,v1) SELECT k,v1||'a' FROM " + fullTableName1);],,testCheckpointAndRollback,462-462,[            ResultSet rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testCheckpointAndRollback,469-469,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testCheckpointAndRollback,475-475,[            stmt.executeUpdate("upsert into " + fullTableName1 + "(k,v1) SELECT k,v1||'a' FROM " + fullTableName1);],,testCheckpointAndRollback,477-477,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testCheckpointAndRollback,484-484,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testCheckpointAndRollback,493-493,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testCheckpointAndRollback,501-501,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,355-355,[            stmt.execute("CREATE TABLE " + fullTableName1 + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,356-356,[            stmt.execute("CREATE "+(localIndex? " LOCAL " : "")+"INDEX " + indexName1 + " ON " + fullTableName1 + " (v1, k)");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,358-358,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'yyyy', 'a')");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,362-362,[            ResultSet rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,370-370,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,376-376,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'zzz', 'a')");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,379-379,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,387-387,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,396-396,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,404-404,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,410-410,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'zz', 'a')");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,413-413,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,421-421,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,430-430,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testMultiRollbackOfUncommittedExistingRowKeyIndexUpdate,438-438,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testRollbackOfUncommittedExistingKeyValueIndexUpdate,94-94,[            stmt.execute("CREATE TABLE " + fullTableName1 + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,95-95,[            stmt.execute("CREATE TABLE " + fullTableName2 + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR) IMMUTABLE_ROWS=true");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,96-96,[            stmt.execute("CREATE "+(localIndex? " LOCAL " : "")+"INDEX " + indexName1 + " ON " + fullTableName1 + " (v1) INCLUDE(v2)");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,97-97,[            stmt.execute("CREATE "+(localIndex? " LOCAL " : "")+"INDEX " + indexName2 + " ON " + fullTableName2 + " (v1) INCLUDE(v2)");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,99-99,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'y', 'a')");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,103-103,[            ResultSet rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,111-111,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,119-119,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,123-123,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName2 + ")*/ k, v1 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,126-126,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'y', 'b')");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,127-127,[            stmt.executeUpdate("upsert into " + fullTableName2 + " values('a', 'b', 'c')");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,130-130,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,138-138,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,146-146,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,154-154,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName2 + ")*/ k, v1 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,163-163,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,171-171,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,179-179,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,183-183,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName2 + ")*/ k, v1 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,186-186,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'z', 'a')");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,187-187,[            stmt.executeUpdate("upsert into " + fullTableName2 + " values('a', 'b', 'c')");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,191-191,[            stmt.executeUpdate("delete from " + fullTableName1 + " where  k='x'");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,192-192,[            stmt.executeUpdate("delete from " + fullTableName2 + " where  v1='b'");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,195-195,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,198-198,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1 + " ORDER BY v1");],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,202-202,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingKeyValueIndexUpdate,205-205,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName2 + ")*/ k, v1 from " + fullTableName2);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/MutableRollbackIT.java,testRollbackOfUncommittedExistingRowKeyIndexUpdate,222-222,[            stmt.execute("CREATE TABLE " + fullTableName1 + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,223-223,[            stmt.execute("CREATE TABLE " + fullTableName2 + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR) IMMUTABLE_ROWS=true");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,224-224,[            stmt.execute("CREATE "+(localIndex? " LOCAL " : "")+"INDEX " + indexName1 + " ON " + fullTableName1 + " (v1, k)");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,225-225,[            stmt.execute("CREATE "+(localIndex? " LOCAL " : "")+"INDEX " + indexName2 + " ON " + fullTableName2 + " (v1, k)");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,227-227,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'y', 'a')");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,231-231,[            ResultSet rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,239-239,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,246-246,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,250-250,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName2 + ")*/ k, v1 from " + fullTableName2);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,253-253,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'z', 'a')");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,254-254,[            stmt.executeUpdate("upsert into " + fullTableName2 + " values('a', 'b', 'c')");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,261-261,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,269-269,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,277-277,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,281-281,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName2);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,284-284,[            stmt.executeUpdate("upsert into " + fullTableName1 + " values('x', 'z', 'a')");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,285-285,[            stmt.executeUpdate("upsert into " + fullTableName2 + " values('a', 'b', 'c')");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,289-289,[            stmt.executeUpdate("delete from " + fullTableName1 + " where  k='x'");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,290-290,[            stmt.executeUpdate("delete from " + fullTableName2 + " where  v1='b'");],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,293-293,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName1);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,296-296,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName1 + ")*/ k, v1 from " + fullTableName1);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,300-300,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName2);],,testRollbackOfUncommittedExistingRowKeyIndexUpdate,303-303,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName2 + ")*/ k, v1 from " + fullTableName2);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/txn/RollbackIT.java,testRollbackOfUncommittedKeyValueIndexInsert,86-86,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/index/txn/RollbackIT.java,testRollbackOfUncommittedRowKeyIndexInsert,128-128,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/RollbackIT.java,testRollbackOfUncommittedKeyValueIndexInsert,90-90,[            stmt.execute("CREATE TABLE " + fullTableName + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"+(!mutable? " IMMUTABLE_ROWS=true" : ""));],,testRollbackOfUncommittedKeyValueIndexInsert,91-91,[            stmt.execute("CREATE "+(localIndex? "LOCAL " : "")+"INDEX " + indexName + " ON " + fullTableName + " (v1) INCLUDE(v2)");],,testRollbackOfUncommittedKeyValueIndexInsert,93-93,[            stmt.executeUpdate("upsert into " + fullTableName + " values('x', 'y', 'a')");],,testRollbackOfUncommittedKeyValueIndexInsert,96-96,[            ResultSet rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName);],,testRollbackOfUncommittedKeyValueIndexInsert,104-104,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName + ")*/ k, v1, v2  from " + fullTableName);],,testRollbackOfUncommittedKeyValueIndexInsert,114-114,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName);],,testRollbackOfUncommittedKeyValueIndexInsert,118-118,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName + ")*/ k, v1, v2 from " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/RollbackIT.java,testRollbackOfUncommittedRowKeyIndexInsert,132-132,[            stmt.execute("CREATE TABLE " + fullTableName + "(k VARCHAR, v1 VARCHAR, v2 VARCHAR, CONSTRAINT pk PRIMARY KEY (v1, v2))"+(!mutable? " IMMUTABLE_ROWS=true" : ""));],,testRollbackOfUncommittedRowKeyIndexInsert,133-133,[            stmt.execute("CREATE "+(localIndex? "LOCAL " : "")+"INDEX " + indexName + " ON " + fullTableName + "(v1, k)");],,testRollbackOfUncommittedRowKeyIndexInsert,135-135,[            stmt.executeUpdate("upsert into " + fullTableName + " values('x', 'y', 'a')");],,testRollbackOfUncommittedRowKeyIndexInsert,137-137,[            ResultSet rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName);],,testRollbackOfUncommittedRowKeyIndexInsert,147-147,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName + ")*/ k, v1 from " + fullTableName);],,testRollbackOfUncommittedRowKeyIndexInsert,156-156,[            rs = stmt.executeQuery("select /*+ NO_INDEX */ k, v1, v2 from " + fullTableName);],,testRollbackOfUncommittedRowKeyIndexInsert,160-160,[            rs = stmt.executeQuery("select /*+ INDEX(" + indexName + ")*/ k, v1 from " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/index/txn/TxWriteFailureIT.java,helpTestWriteFailure,144-144,[        rs = conn.createStatement().executeQuery(dataSql);],,helpTestWriteFailure,152-152,[        rs = conn.createStatement().executeQuery("EXPLAIN "+indexSql);],,helpTestWriteFailure,163-163,[        rs = conn.createStatement().executeQuery(indexSql);],,helpTestWriteFailure,169-169,[        conn.createStatement().execute("DROP TABLE " + DATA_TABLE_FULL_NAME);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoNormalTableFromSaltedTable,81-81,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertIntoSaltedTableFromNormalTable,44-44,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSaltedTableIntoSaltedTable,123-123,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTable,160-160,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,testUpsertSelectOnSameSaltedTableWithEmptyPKColumn,193-193,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/end2end/salted/SaltedTableUpsertSelectIT.java,analyzeTable,117-117,[        conn.createStatement().execute(query);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,initTableValues,41-41,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/end2end/salted/SaltedTableVarLengthRowKeyIT.java,testSelectValueWithPointKeyQuery,69-69,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/execute/BaseQueryPlan.java,iterator,267-267,[        ScanUtil.setCustomAnnotations(scan, customAnnotations == null ? null : customAnnotations.getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/BaseQueryPlan.java,,306-314,[                iterator : new DelegateResultIterator(iterator) {,             @Override,             public void close() throws SQLException {,                 try {,                     super.close();,                 } finally {,                     SQLCloseables.closeAll(dependencies);,                 },             }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/execute/CommitException.java,getUncommittedStatementIndexes,48-48,[    	return uncommittedStatementIndexes;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/CommitException.java,<init>,30-30,[        this.uncommittedStatementIndexes = uncommittedStatementIndexes;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/execute/CorrelatePlan.java,getExplainPlan,89-89,[        steps.add("NESTED-LOOP-JOIN (" + joinType.toString().toUpperCase() + ") TABLES");],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/execute/HashJoinPlan.java,getPreSteps,413-413,[                steps.add("    PARALLEL " + parent.joinInfo.getJoinTypes()[index].toString().toUpperCase()],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/execute/MutationState.java,join,420-420,[        } else if (readMetricQueue != null && newMutationState.readMetricQueue != null) {],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/phoenix/execute/MutationState.java,send,769-769,[	            Map<ImmutableBytesPtr, RowMutationState> valuesMap = mutations.get(tableRef);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/MutationState.java,,1086-1089,[        Iterator<TableRef> filteredTableRefs = Iterators.filter(tableRefs, new Predicate<TableRef>(){,             @Override,             public boolean apply(TableRef tableRef) {,                 return tableRef.getTable().isTransactional();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/execute/PartialCommitIT.java,testPartialCommit,246-246,[                int[] uncommittedStatementIndexes = ((CommitException)sqle).getUncommittedStatementIndexes();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/execute/PartialCommitIT.java,testDeleteFailure,190-190,[                                       newArrayList("select count(*) from " + A_SUCESS_TABLE + " where k like 'testDeleteFailure_'",],,testDeleteFailure,192-192,[                                       transactional ? newArrayList(new Integer(0), new Integer(1) /* original row */) : newArrayList(new Integer(2), new Integer(1)));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/execute/PartialCommitIT.java,testNoFailure,154-154,[        testPartialCommit(singletonList("upsert into " + A_SUCESS_TABLE + " values ('testNoFailure', 'a')"), new int[0], false, singletonList("select count(*) from " + A_SUCESS_TABLE + " where k='testNoFailure'"),],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/execute/PartialCommitIT.java,testOrderOfMutationsIsPredicatable,204-204,[                                       newArrayList("select count(*) from " + C_SUCESS_TABLE + " where k='testOrderOfMutationsIsPredicatable'",],,testOrderOfMutationsIsPredicatable,207-207,[                                       transactional ? newArrayList(new Integer(0), new Integer(0), new Integer(0)) : newArrayList(new Integer(0), new Integer(1), new Integer(0)));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/execute/PartialCommitIT.java,testStatementOrderMaintainedInConnection,218-218,[                                       newArrayList("select count(*) from " + A_SUCESS_TABLE + " where k='testStatementOrderMaintainedInConnection' or k like 'z%'", // rows left: zz, zzz, checkThatAllStatementTypesMaintainOrderInConnection],,testStatementOrderMaintainedInConnection,221-221,[                                       transactional ? newArrayList(new Integer(3) /* original rows */, new Integer(0), new Integer(1) /* original row */) : newArrayList(new Integer(4), new Integer(0), new Integer(1)));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/execute/PartialCommitIT.java,testUpsertFailure,164-164,[                                       newArrayList("select count(*) from " + A_SUCESS_TABLE + " where k like 'testUpsertFailure_'",],,testUpsertFailure,166-166,[                                       transactional ? newArrayList(new Integer(0), new Integer(0)) : newArrayList(new Integer(2), new Integer(0)));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/execute/PartialCommitIT.java,testUpsertSelectFailure,179-179,[                                       newArrayList("select count(*) from " + A_SUCESS_TABLE + " where k in ('testUpsertSelectFailure', '" + Bytes.toString(ROW_TO_FAIL_UPSERT_BYTES) + "')",],,testUpsertSelectFailure,181-181,[                                       transactional ? newArrayList(new Integer(1) /* from commit above */, new Integer(0)) : newArrayList(new Integer(2), new Integer(0)));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/execute/PartialCommitIT.java,testUpsertSelectFailure,172-172,[            con.createStatement().execute("upsert into " + A_SUCESS_TABLE + " values ('" + Bytes.toString(ROW_TO_FAIL_UPSERT_BYTES) + "', 'boom!')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/execute/PartialCommitIT.java,testPartialCommit,232-232,[                sta.execute(statement);],,testPartialCommit,253-253,[                ResultSet rs = sta.executeQuery(countStatement);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/PartialCommitIT.java,,269-272,[        return new PhoenixConnection(phxCon, null) {,             @Override,             protected MutationState newMutationState(int maxSize) {,                 return new MutationState(maxSize, this, mutations, null, null);],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/phoenix/execute/PartialCommitIT.java,,314-317,[    private static class TableRefComparator implements Comparator<TableRef> {,         @Override,         public int compare(TableRef tr1, TableRef tr2) {,             return tr1.getTable().getPhysicalName().getString().compareTo(tr2.getTable().getPhysicalName().getString());],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/execute/SortMergeJoinPlan.java,getExplainPlan,148-148,[        steps.add("SORT-MERGE-JOIN (" + type.toString().toUpperCase() + ") TABLES");],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/phoenix/execute/SortMergeJoinPlan.java,equals,535-537,[            if (!(other instanceof JoinKey)) ,                 return false;,             return this.compareTo((JoinKey) other) == 0;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/execute/SortMergeJoinPlan.java,,566-570,[            return new Comparator<MappedByteBufferSegmentQueue<Tuple>>() {,                 @Override,                 public int compare(MappedByteBufferSegmentQueue<Tuple> q1, ,                         MappedByteBufferSegmentQueue<Tuple> q2) {,                     return q1.index() - q2.index();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/execute/TupleProjector.java,getExpressions,291-291,[        return expressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/TupleProjector.java,<init>,105-105,[    	this.expressions = expressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/execute/TupleProjector.java,<init>,78-78,[        this.expressions = expressions;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/execute/TupleProjector.java,,53-53,[    public static final byte[] VALUE_COLUMN_FAMILY = Bytes.toBytes("_v");],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/expression/AndExpression.java,create,53-53,[			determinism.combine(child.getDeterminism());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayAppendFunctionTest.java,testArrayAppendFunction22,344-344,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayConcatFunctionTest.java,testVarchar6,352-352,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.ASC, SortOrder.ASC);],,testVarchar6,353-353,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.ASC, SortOrder.DESC);],,testVarchar6,354-354,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.DESC, SortOrder.DESC);],,testVarchar6,355-355,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.DESC, SortOrder.ASC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayConcatFunctionTest.java,testVarchar7,367-367,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.ASC, SortOrder.ASC);],,testVarchar7,368-368,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.ASC, SortOrder.DESC);],,testVarchar7,369-369,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.DESC, SortOrder.DESC);],,testVarchar7,370-370,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.DESC, SortOrder.ASC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayConcatFunctionTest.java,testVarchar7,367-367,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.ASC, SortOrder.ASC);],,testVarchar7,368-368,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.ASC, SortOrder.DESC);],,testVarchar7,369-369,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.DESC, SortOrder.DESC);],,testVarchar7,370-370,[        test(arr1, arr2, type, null, null, type, null, null, expected, SortOrder.DESC, SortOrder.ASC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayFillFunctionTest.java,testForNulls1,204-204,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.ASC, SortOrder.ASC);],,testForNulls1,205-205,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.ASC, SortOrder.DESC);],,testForNulls1,206-206,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.DESC, SortOrder.DESC);],,testForNulls1,207-207,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.DESC, SortOrder.ASC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayFillFunctionTest.java,testForNulls2,216-216,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.ASC, SortOrder.ASC);],,testForNulls2,217-217,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.ASC, SortOrder.DESC);],,testForNulls2,218-218,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.DESC, SortOrder.DESC);],,testForNulls2,219-219,[        test(element, length, baseType, null, null, PInteger.INSTANCE, null, null, e, SortOrder.DESC, SortOrder.ASC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsAllNulls,390-390,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsAllNulls,390-390,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsAllNulls,390-390,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith1NullAtBeginning,527-527,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith241NullsAtBeginning,440-440,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), null, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith254NullsAtBeginning,465-465,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), null, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith268NullsAtBeginning,415-415,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), null, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith2NullsAtBeginning,539-539,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith509NullsAtBeginning,515-515,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), null, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWith510NullsAtBeginning,490-490,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), null, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWithNoNullsAtBeginning,380-380,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), 4, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayPrependFunctionTest.java,testForNullsWithNullsInMiddle,551-551,[        test(arr, element, PDataType.fromTypeId(baseType.getSqlType() + PDataType.ARRAY_TYPE_BASE), null, null, baseType, 1, null, expected, SortOrder.ASC, SortOrder.DESC);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/expression/ArrayToStringFunctionTest.java,testSmallint,305-314,[        PDataType type = PSmallintArray.INSTANCE;,         PDataType base = PSmallint.INSTANCE;,         Object[] o1 = new Object[]{(short) 6, (short) 7, (short) 8};,         PhoenixArray arr = new PhoenixArray.PrimitiveShortPhoenixArray(base, o1);,         String delimiter = ",";,         String nullString = "*";,         String expected = "6,7,8";,         test(arr, type, null, null, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC);,         test(arr, type, null, null, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC);,     }],,testSmallInt,363-417,[        Short na = 4;,         byte[] b = PSmallint.INSTANCE.toBytes(na);,         Short nb = (Short) PSmallint.INSTANCE.toObject(b);,         assertEquals(na,nb);,         ,         na = 4;,         b = PSmallint.INSTANCE.toBytes(na, SortOrder.DESC);,         ImmutableBytesWritable ptr = new ImmutableBytesWritable();,         ptr.set(b);,         nb = PSmallint.INSTANCE.getCodec().decodeShort(ptr, SortOrder.DESC);,         assertEquals(na,nb);, ,         na = 1;,         nb = -1;,         byte[] ba = PSmallint.INSTANCE.toBytes(na);,         byte[] bb = PSmallint.INSTANCE.toBytes(nb);,         assertTrue(Bytes.compareTo(ba, bb) > 0);, ,         na = -1;,         nb = -3;,         ba = PSmallint.INSTANCE.toBytes(na);,         bb = PSmallint.INSTANCE.toBytes(nb);,         assertTrue(Bytes.compareTo(ba, bb) > 0);, ,         na = -3;,         nb = -10000;,         ba = PSmallint.INSTANCE.toBytes(na);,         bb = PSmallint.INSTANCE.toBytes(nb);,         assertTrue(Bytes.compareTo(ba, bb) > 0);,         ,         Integer value = 100;,         Object obj = PSmallint.INSTANCE.toObject(value, PInteger.INSTANCE);,         assertTrue(obj instanceof Short);,         assertEquals(100, ((Short)obj).shortValue());,         ,         Float unsignedFloatValue = 100f;,         Object unsignedFloatObj = PSmallint.INSTANCE.toObject(unsignedFloatValue, PUnsignedFloat.INSTANCE);,         assertTrue(unsignedFloatObj instanceof Short);,         assertEquals(100, ((Short)unsignedFloatObj).shortValue());,         ,         Double unsignedDoubleValue = 100d;,         Object unsignedDoubleObj = PSmallint.INSTANCE.toObject(unsignedDoubleValue, PUnsignedDouble.INSTANCE);,         assertTrue(unsignedDoubleObj instanceof Short);,         assertEquals(100, ((Short)unsignedDoubleObj).shortValue());,         ,         Float floatValue = 100f;,         Object floatObj = PSmallint.INSTANCE.toObject(floatValue, PFloat.INSTANCE);,         assertTrue(floatObj instanceof Short);,         assertEquals(100, ((Short)floatObj).shortValue());,         ,         Double doubleValue = 100d;,         Object doubleObj = PSmallint.INSTANCE.toObject(doubleValue, PDouble.INSTANCE);,         assertTrue(doubleObj instanceof Short);,         assertEquals(100, ((Short)doubleObj).shortValue());,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/expression/ArrayToStringFunctionTest.java,testTinyint,292-301,[        PDataType type = PTinyintArray.INSTANCE;,         PDataType base = PTinyint.INSTANCE;,         Object[] o1 = new Object[]{(byte) 2, (byte) 4, (byte) 5};,         PhoenixArray arr = new PhoenixArray.PrimitiveBytePhoenixArray(base, o1);,         String delimiter = ",";,         String nullString = "*";,         String expected = "2,4,5";,         test(arr, type, null, null, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC);,         test(arr, type, null, null, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC);,     }],,testTinyInt,421-470,[        Byte na = 4;,         byte[] b = PTinyint.INSTANCE.toBytes(na);,         Byte nb = (Byte) PTinyint.INSTANCE.toObject(b);,         assertEquals(na,nb);, ,         na = 1;,         nb = -1;,         byte[] ba = PTinyint.INSTANCE.toBytes(na);,         byte[] bb = PTinyint.INSTANCE.toBytes(nb);,         assertTrue(Bytes.compareTo(ba, bb) > 0);, ,         na = -1;,         nb = -3;,         ba = PTinyint.INSTANCE.toBytes(na);,         bb = PTinyint.INSTANCE.toBytes(nb);,         assertTrue(Bytes.compareTo(ba, bb) > 0);, ,         na = -3;,         nb = -100;,         ba = PTinyint.INSTANCE.toBytes(na);,         bb = PTinyint.INSTANCE.toBytes(nb);,         assertTrue(Bytes.compareTo(ba, bb) > 0);,         ,         Integer value = 100;,         Object obj = PTinyint.INSTANCE.toObject(value, PInteger.INSTANCE);,         assertTrue(obj instanceof Byte);,         assertEquals(100, ((Byte)obj).byteValue());,         ,         Float floatValue = 100f;,         Object floatObj = PTinyint.INSTANCE.toObject(floatValue, PFloat.INSTANCE);,         assertTrue(floatObj instanceof Byte);,         assertEquals(100, ((Byte)floatObj).byteValue());,         ,         Float unsignedFloatValue = 100f;,         Object unsignedFloatObj = PTinyint.INSTANCE.toObject(unsignedFloatValue, PUnsignedFloat.INSTANCE);,         assertTrue(unsignedFloatObj instanceof Byte);,         assertEquals(100, ((Byte)unsignedFloatObj).byteValue());,         ,         Double unsignedDoubleValue = 100d;,         Object unsignedDoubleObj = PTinyint.INSTANCE.toObject(unsignedDoubleValue, PUnsignedDouble.INSTANCE);,         assertTrue(unsignedDoubleObj instanceof Byte);,         assertEquals(100, ((Byte)unsignedDoubleObj).byteValue());,         ,         Double doubleValue = 100d;,         Object doubleObj = PTinyint.INSTANCE.toObject(doubleValue, PDouble.INSTANCE);,         assertTrue(doubleObj instanceof Byte);,         assertEquals(100, ((Byte)doubleObj).byteValue());, ,         assertTrue(PTinyint.INSTANCE.isCoercibleTo(PTinyint.INSTANCE, (byte) -1));,     }],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/ArrayToStringFunctionTest.java,testInt3,96-96,[        test(arr, type, null, null, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC);],,testInt3,97-97,[        test(arr, type, null, null, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/expression/ArrayToStringFunctionTest.java,testDate,147-147,[            expected += o1[i].toString() + ", ";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/expression/ArrayToStringFunctionTest.java,testTime,164-164,[            expected += o1[i].toString() + ", ";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/expression/ArrayToStringFunctionTest.java,testTimestamp,181-181,[            expected += o1[i].toString() + ", ";],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/expression/ComparisonExpression.java,create,187-190,[                    switch (op) {,                     case GREATER_OR_EQUAL:,                     case LESS: // get next whole number,                       increment = 1;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/expression/InListExpression.java,readFields,221-221,[                offset = readValue(input, valuesBytes, offset, maxValue = new ImmutableBytesPtr());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnFamily,67-67,[        return cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/KeyValueColumnExpression.java,getColumnName,71-71,[        return cq;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/KeyValueColumnExpression.java,<init>,55-55,[        this.cf = cf;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/KeyValueColumnExpression.java,<init>,56-56,[        this.cq = cq;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/expression/LiteralExpression.java,newConstant,195-195,[        byte[] b = type.isArrayType() ? ((PArrayDataType)type).toBytes(value, PArrayDataType.arrayBaseType(type), sortOrder, rowKeyOrderOptimizable) :],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/LiteralExpression.java,getBytes,358-358,[        return byteValue;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/expression/LiteralExpression.java,newConstant,194-194,[        value = type.toObject(value, actualType);],,newConstant,214-214,[            maxLength = type == null || !type.isFixedWidth() ? null : type.getMaxLength(value);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/phoenix/expression/LiteralExpression.java,getBooleanLiteralExpression,88-88,[    	return BOOLEAN_EXPRESSIONS[ (bool==Boolean.FALSE ?  0 : Determinism.values().length) + determinism.ordinal()];],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/expression/NullValueTest.java,testAndExpressionWithNullOperands,73-73,[                ResultSet rs = conn.createStatement().executeQuery(query[i]);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/expression/NullValueTest.java,testComparisonExpressionWithNullOperands,46-46,[                ResultSet rs = conn.createStatement().executeQuery(q);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/expression/NullValueTest.java,testOrExpressionWithNullOperands,100-100,[                ResultSet rs = conn.createStatement().executeQuery(query[i]);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/StringToArrayFunctionTest.java,testStringToArrayFunction20,261-261,[        test(string, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC, PChar.INSTANCE, PChar.INSTANCE, PChar.INSTANCE);],,testStringToArrayFunction20,262-262,[        test(string, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC, PChar.INSTANCE, PChar.INSTANCE, PChar.INSTANCE);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/StringToArrayFunctionTest.java,testStringToArrayFunction21,272-272,[        test(string, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC, PVarchar.INSTANCE, PVarchar.INSTANCE, PVarchar.INSTANCE);],,testStringToArrayFunction21,273-273,[        test(string, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC, PVarchar.INSTANCE, PVarchar.INSTANCE, PVarchar.INSTANCE);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/StringToArrayFunctionTest.java,testStringToArrayFunction21,272-272,[        test(string, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC, PVarchar.INSTANCE, PVarchar.INSTANCE, PVarchar.INSTANCE);],,testStringToArrayFunction21,273-273,[        test(string, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC, PVarchar.INSTANCE, PVarchar.INSTANCE, PVarchar.INSTANCE);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/expression/StringToArrayFunctionTest.java,testStringToArrayFunction3,85-85,[        test(string, delimiter, nullString, expected, SortOrder.ASC, SortOrder.ASC, SortOrder.ASC, PVarchar.INSTANCE, PVarchar.INSTANCE, PVarchar.INSTANCE);],,testStringToArrayFunction3,86-86,[        test(string, delimiter, nullString, expected, SortOrder.DESC, SortOrder.ASC, SortOrder.ASC, PVarchar.INSTANCE, PVarchar.INSTANCE, PVarchar.INSTANCE);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getAggregators,117-117,[        return aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/expression/aggregator/Aggregators.java,getFunctions,75-75,[        return functions;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,51-51,[        this.aggregators = aggregators;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/expression/aggregator/Aggregators.java,<init>,50-50,[        this.functions = functions;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/expression/aggregator/BaseDecimalStddevAggregator.java,evaluate,74-74,[            result.setScale(this.colScale, RoundingMode.HALF_UP);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,aggregate,84-84,[                    in.read(keyBytes, 0, keyLen);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/aggregator/DistinctValueWithCountClientAggregator.java,,129-135,[        Comparator<Object> comparator = new Comparator<Object>() {,             @Override,             public int compare(Object o1, Object o2) {,                 if (ascending) { ,                     return type.compareTo(o1, o2); ,                 },                 return type.compareTo(o2, o1);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,,46-46,[    public static final byte[] COMPRESS_MARKER = new byte[] { (byte)1 };],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/expression/aggregator/DistinctValueWithCountServerAggregator.java,countMapHeapSize,134-134,[            SizedUtil.sizeOfMap(DEFAULT_ESTIMATED_DISTINCT_VALUES,],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/expression/aggregator/FirstLastValueServerAggregator.java,toString,149-149,[            out.append(topValue);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/phoenix/expression/aggregator/FirstLastValueServerAggregator.java,toString,145-145,[                out.append(topValues.get(key));],,
CORRECTNESS,RC_REF_COMPARISON,org/apache/phoenix/expression/function/ArrayFillFunction.java,getMaxLength,62-62,[        if (getElementExpr().getDataType().isFixedWidth() && getMaxLength() != null && getMaxLength() != array.getMaxLength()) {],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/expression/function/ArrayModifierFunction.java,<init>,61-61,[        if (getDataType() != null && otherExpressionType.getByteSize() == null],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/phoenix/expression/function/CountAggregateFunction.java,,49-49,[    public static final List<Expression> STAR = Arrays.<Expression>asList(LiteralExpression.newConstant(1, Determinism.ALWAYS));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/CountAggregateFunction.java,,91-94,[        return new LongSumAggregator() {,             @Override,             public boolean isNullable() {,                 return false;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/DecodeFunction.java,evaluate,75-75,[		String encoding = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,49-49,[    public final static byte[] ONE = PLong.INSTANCE.toBytes(1L);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/expression/function/DistinctCountAggregateFunction.java,,48-48,[    public final static byte[] ZERO = PLong.INSTANCE.toBytes(0L);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/EncodeFunction.java,evaluate,67-67,[        String encodingFormat = ((String) type.toObject(ptr)).toUpperCase();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/expression/function/FirstLastValueBaseFunction.java,,32-32,[    public static String NAME = null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/InvertFunction.java,,94-114,[        return new KeyPart() {, ,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 KeyRange range = childPart.getKeyRange(op, rhs);,                 return range.invert();,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 return childPart.getExtractNodes();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();,             }, ,             @Override,             public PTable getTable() {,                 return childPart.getTable();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/LowerFunction.java,evaluate,56-56,[        ptr.set(PVarchar.INSTANCE.toBytes(sourceStr.toLowerCase()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MaxAggregateFunction.java,,56-64,[        return new MaxAggregator(child.getSortOrder()) {,             @Override,             public PDataType getDataType() {,                 return type;,             }, ,             @Override,             public Integer getMaxLength() {,                 return maxLength;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/MinAggregateFunction.java,,70-77,[        return new MinAggregator(child.getSortOrder()) {,             @Override,             public PDataType getDataType() {,                 return type;,             },             @Override,             public Integer getMaxLength() {,             	return maxLength;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/phoenix/expression/function/RTrimFunction.java,getKeyRange,120-122,[                    lowerInclusive = false;,                 case EQUAL:,                     upperRange = evaluateExpression(rhs);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/RTrimFunction.java,,108-188,[        return new KeyPart() {,             @Override,             public KeyRange getKeyRange(CompareOp op, Expression rhs) {,                 byte[] lowerRange = KeyRange.UNBOUND;,                 byte[] upperRange = KeyRange.UNBOUND;,                 boolean lowerInclusive = true;,                 boolean upperInclusive = false;,                 ,                 PDataType type = getColumn().getDataType();,                 SortOrder sortOrder = getColumn().getSortOrder();,                 switch (op) {,                 case LESS_OR_EQUAL:,                     lowerInclusive = false;,                 case EQUAL:,                     upperRange = evaluateExpression(rhs);,                     if (op == CompareOp.EQUAL) {,                         lowerRange = upperRange;,                     },                     if (sortOrder == SortOrder.ASC || !getTable().rowKeyOrderOptimizable()) {,                         upperRange = Arrays.copyOf(upperRange, upperRange.length + 1);,                         upperRange[upperRange.length-1] = StringUtil.SPACE_UTF8;,                         ByteUtil.nextKey(upperRange, upperRange.length);,                     } else {,                         upperInclusive = true;,                         if (op == CompareOp.LESS_OR_EQUAL) {,                             // Nothing more to do here, as the biggest value for DESC,                             // will be the RHS value.,                             break;,                         },                         /*,                          * Somewhat tricky to get the range correct for the DESC equality case.,                          * The lower range is the RHS value followed by any number of inverted spaces.,                          * We need to add a zero byte as the lower range will have an \xFF byte,                          * appended to it and otherwise we'd skip past any rows where there is more,                          * than one space following the RHS.,                          * The upper range should span up to and including the RHS value. We need,                          * to add our own \xFF as otherwise this will look like a degenerate query,                          * since the lower would be bigger than the upper range.,                          */,                         lowerRange = Arrays.copyOf(lowerRange, lowerRange.length + 2);,                         lowerRange[lowerRange.length-2] = StringUtil.INVERTED_SPACE_UTF8;,                         lowerRange[lowerRange.length-1] = QueryConstants.SEPARATOR_BYTE;,                         upperRange = Arrays.copyOf(upperRange, upperRange.length + 1);,                         upperRange[upperRange.length-1] = QueryConstants.DESC_SEPARATOR_BYTE;,                     },                     break;,                 default:,                     // TOOD: Is this ok for DESC?,                     return childPart.getKeyRange(op, rhs);,                 },                 Integer length = getColumn().getMaxLength();,                 if (type.isFixedWidth() && length != null) {,                     // Don't pad based on current sort order, but instead use our,                     // minimum byte as otherwise we'll end up skipping rows in,                     // the case of descending, since rows with more padding appear,                     // *after* rows with no padding.,                     if (lowerRange != KeyRange.UNBOUND) {,                         lowerRange = type.pad(lowerRange, length, SortOrder.ASC);,                     },                     if (upperRange != KeyRange.UNBOUND) {,                         upperRange = type.pad(upperRange, length, SortOrder.ASC);,                     },                 },                 return KeyRange.getKeyRange(lowerRange, lowerInclusive, upperRange, upperInclusive);,             }, ,             @Override,             public List<Expression> getExtractNodes() {,                 // We cannot extract the node, as we may have false positives with trailing,                 // non blank characters such as 'foo  bar' where the RHS constant is 'foo'.,                 return Collections.<Expression>emptyList();,             }, ,             @Override,             public PColumn getColumn() {,                 return childPart.getColumn();,             }, ,             @Override,             public PTable getTable() {,                 return childPart.getTable();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/expression/function/RoundDecimalExpression.java,roundAndPreserveOperator,247-248,[                            if(decimal.compareTo(rounded) > 0) {,                                 return stepNextInScale(rounded);],,roundAndPreserveOperator,268-269,[                            if(decimal.compareTo(rounded) > 0) {,                                 return stepNextInScale(rounded);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/expression/function/RoundDecimalExpression.java,roundAndPreserveOperator,254-255,[                            if(decimal.compareTo(rounded) < 0) {,                                 return stepPrevInScale(rounded);],,roundAndPreserveOperator,261-262,[                            if(decimal.compareTo(rounded) < 0) {,                                 return stepPrevInScale(rounded);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/expression/function/ScalarFunction.java,clone,43-43,[        } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,73-76,[          return new DoubleSumAggregator(sortOrder, ptr) {,             @Override,             protected PDataType getInputDataType() {,               return type;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/function/SumAggregateFunction.java,,80-83,[          return new NumberSumAggregator(sortOrder, ptr) {,             @Override,             protected PDataType getInputDataType() {,               return type;],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/expression/function/ToDateFunction.java,equals,87-98,[        if (this == obj) return true;,         if (getClass() != obj.getClass()) return false;,         ToDateFunction other = (ToDateFunction)obj;,         // Only compare first child, as the other two are potentially resolved on the fly.,         if (!this.getChildren().get(0).equals(other.getChildren().get(0))) return false;,         if (dateFormat == null) {,             if (other.dateFormat != null) return false;,         } else if (!dateFormat.equals(other.dateFormat)) return false;,         if (timeZoneId == null) {,             if (other.timeZoneId != null) return false;,         } else if (!timeZoneId.equals(other.timeZoneId)) return false;,         return true;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/phoenix/expression/function/UDFExpression.java,equals,223-242,[		if (this == obj), 			return true;, 		if (!(obj instanceof UDFExpression)) {, 			return false;, 		}, 		UDFExpression that = (UDFExpression) obj;, 		if (!this.udfFunction.getName().equals(that.udfFunction.getName())) {, 			return false;, 		}, 		if (!this.udfFunction.getChildren().equals(, 				that.udfFunction.getChildren())) {, 			return false;, 		}, 		if (!functionClassName.equals(that.functionClassName)) {, 			return false;, 		}, 		if (!jarPath.equals(that.jarPath)) {, 			return false;, 		}, 		return true;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/expression/function/UpperFunction.java,evaluate,55-55,[        ptr.set(PVarchar.INSTANCE.toBytes(sourceStr.toUpperCase()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/expression/util/regex/JONIPattern.java,<init>,55-55,[            byte[] bytes = patternString.getBytes();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/expression/util/regex/JONIPattern.java,,97-100,[            public PairInt(int begin, int end) {,                 this.begin = begin;,                 this.end = end;,             }],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/phoenix/expression/util/regex/PatternPerformanceTest.java,,56-56,[    private final boolean ENABLE_ASSERT = false;],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/phoenix/expression/visitor/CloneExpressionVisitor.java,visitLeave,128-128,[        return isCloneNode(node, l) ? node :  node;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/ColumnProjectionFilter.java,<init>,64-64,[        this.emptyCFName = emptyCFName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/RowKeyComparisonFilter.java,<init>,54-54,[        this.essentialCF = essentialCF;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/filter/RowKeyComparisonFilter.java,,82-126,[    private final class RowKeyTuple extends BaseTuple {,         private byte[] buf;,         private int offset;,         private int length;, ,         public void setKey(byte[] buf, int offset, int length) {,             this.buf = buf;,             this.offset = offset;,             this.length = length;,         }, ,         @Override,         public void getKey(ImmutableBytesWritable ptr) {,             ptr.set(buf, offset, length);,         }, ,         @Override,         public Cell getValue(byte[] cf, byte[] cq) {,             return null;,         }, ,         @Override,         public boolean isImmutable() {,             return true;,         }, ,         @Override,         public String toString() {,             return Bytes.toStringBinary(buf, offset, length);,         }, ,         @Override,         public int size() {,             return 0;,         }, ,         @Override,         public Cell getValue(int index) {,             throw new IndexOutOfBoundsException(Integer.toString(index));,         }, ,         @Override,         public boolean getValue(byte[] family, byte[] qualifier,,                 ImmutableBytesWritable ptr) {,             return false;],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/filter/SkipScanBigFilterTest.java,testIntersect,643-643,[        PreparedStatement stmt = conn.prepareStatement(ddlBuf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/filter/SkipScanBigFilterTest.java,,657-671,[        PTable tableWithStats = PTableImpl.makePTable(table, new PTableStats() {, ,             @Override,             public SortedMap<byte[], GuidePostsInfo> getGuidePosts() {,                 return gpMap;,             }, ,             @Override,             public int getEstimatedSize() {,                 return 10000;,             }, ,             @Override,             public long getTimestamp() {,                 return table.getTimeStamp()+1;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,59-59,[        this.lowerInclusiveKey = lowerInclusiveKey;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,<init>,60-60,[        this.upperExclusiveKey = upperExclusiveKey;],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/phoenix/filter/SkipScanFilterTest.java,,62-62,[        this.cnf = cnf;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/filter/SkipScanFilterTest.java,,66-90,[                new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return width <= 0;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return width <= 0 ? PVarchar.INSTANCE : PChar.INSTANCE;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return width <= 0 ? null : width;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, , 				@Override, 				public SortOrder getSortOrder() {, 					return SortOrder.getDefault();],,
BAD_PRACTICE,DMI_RANDOM_USED_ONLY_ONCE,org/apache/phoenix/flume/DefaultKeyGenerator.java,generate,57-57,[            return String.valueOf(new Random().nextLong());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,395-395,[        final Connection conn = DriverManager.getConnection(getUrl(), props);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,409-409,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testApacheLogRegex,269-269,[            if(conn != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/flume/RegexEventSerializerIT.java,testEventsWithHeaders,347-347,[            if(conn != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/RegexEventSerializerIT.java,countRows,398-398,[            rs  = conn.createStatement().executeQuery("select count(*) from "+fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/SchemaHandler.java,createTable,38-38,[            status = connection.createStatement().execute(createTableDdl);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,191-191,[                position++;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,configure,110-110,[                keyGenerator =  DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/flume/serializer/BaseEventSerializer.java,initialize,143-143,[                 SchemaHandler.createTable(connection,createTableDdl);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,84-84,[               String payload = new String(payloadBytes);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,136-136,[       } catch(Exception ex){],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/flume/serializer/RegexEventSerializer.java,upsertEvents,72-72,[       PreparedStatement colUpsert = connection.prepareStatement(upsertStatement);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,77-77,[            eventSerializer = EventSerializers.valueOf(eventSerializerType.toUpperCase());],,
CORRECTNESS,NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH,org/apache/phoenix/flume/sink/PhoenixSink.java,process,197-197,[            transaction.rollback();],,process,186-186,[            transaction.rollback();],,process,192-192,[            transaction.rollback();],,process,146-146,[        Transaction transaction = null;],,process,150-150,[            transaction = channel.getTransaction();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/flume/sink/PhoenixSink.java,initializeSerializer,99-99,[       } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/hbase/index/Indexer.java,start,168-168,[        } catch (Exception ex) {],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancer.java,,72-72,[    public static final byte[] PARENT_TABLE_KEY = Bytes.toBytes("PARENT_TABLE");],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,403-403,[        HMaster master = cluster.getMaster();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,insertData,230-230,[        Put p = new Put("a".getBytes());],,insertData,232-232,[        p.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,235-235,[        Put p1 = new Put("b".getBytes());],,insertData,237-237,[        p1.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,240-240,[        Put p2 = new Put("c".getBytes());],,insertData,242-242,[        p2.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,245-245,[        Put p3 = new Put("c1".getBytes());],,insertData,247-247,[        p3.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,insertData,250-250,[        Put p4 = new Put("d".getBytes());],,insertData,252-252,[        p4.add("cf".getBytes(), "q2".getBytes(), Bytes.toBytes("ValForCF2"));],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRetainAssignmentDuringMasterStartUp,385-387,[        if (admin != null) {,             admin.close();,             admin = new HBaseAdmin(master.getConfiguration());],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,414-416,[        if (admin != null) {,             admin.close();,             admin = new HBaseAdmin(cluster.getMaster().getConfiguration());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRetainAssignmentDuringMasterStartUp,387-387,[            admin = new HBaseAdmin(master.getConfiguration());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testRoundRobinAssignmentDuringMasterStartUp,416-416,[            admin = new HBaseAdmin(cluster.getMaster().getConfiguration());],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/balancer/IndexLoadBalancerIT.java,testBalanceByTable,321-321,[        byte[][] split1 = new byte[12][];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,325-329,[    EnvironmentEdge edge = new EnvironmentEdge() {, ,       @Override,       public long currentTime() {,         return ts;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,verify,150-150,[        Scanner kvs =],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,141-167,[    public ListMatchingVerifier(String msg, List<Cell> kvs, ColumnReference... columns) {,       this.expectedKvs = kvs;,       this.columns = columns;,       this.msg = msg;,     }, ,     @Override,     public void verify(TableState state) {,       try {,         Scanner kvs =,             ((LocalTableState) state).getIndexedColumnsTableState(Arrays.asList(columns)).getFirst();, ,         int count = 0;,         Cell kv;,         while ((kv = kvs.next()) != null) {,           Cell next = expectedKvs.get(count++);,           assertEquals(,             msg + ": Unexpected kv in table state!\nexpected v1: ",                 + Bytes.toString(next.getValue()) + "\nactual v1:" + Bytes.toString(kv.getValue()),,             next, kv);,         }, ,         assertEquals(msg + ": Didn't find enough kvs in table state!", expectedKvs.size(), count);,       } catch (IOException e) {,         fail(msg + ": Got an exception while reading local table state! " + e.getMessage());,       },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,68-83,[  public class TestState {, ,     private HTable table;,     private long ts;,     private VerifyingIndexCodec codec;, ,     /**,      * @param primary,      * @param codec,      * @param ts,      */,     public TestState(HTable primary, VerifyingIndexCodec codec, long ts) {,       this.table = primary;,       this.ts = ts;,       this.codec = codec;,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/EndToEndCoveredColumnsIndexBuilderIT.java,,170-190,[  private class VerifyingIndexCodec extends CoveredIndexCodecForTesting {, ,     private Queue<TableStateVerifier> verifiers = new ArrayDeque<TableStateVerifier>();, ,     @Override,     public Iterable<IndexUpdate> getIndexDeletes(TableState state, IndexMetaData context) {,       verify(state);,       return super.getIndexDeletes(state, context);,     }, ,     @Override,     public Iterable<IndexUpdate> getIndexUpserts(TableState state, IndexMetaData context) {,       verify(state);,       return super.getIndexUpserts(state, context);,     }, ,     private void verify(TableState state) {,       TableStateVerifier verifier = verifiers.poll();,       if (verifier == null) return;,       verifier.verify(state);,     }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,getTableName,51-51,[    return tableName;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/IndexUpdate.java,setTable,43-43,[    this.tableName = tableName;],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/covered/NonTxIndexBuilder.java,addCurrentStateMutationsForBatch,300-300,[        List<IndexedColumnGroup> columnHints = new ArrayList<IndexedColumnGroup>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/NonTxIndexBuilder.java,,131-134,[        Collections.sort(sorted, new Comparator<Batch>() {,             @Override,             public int compare(Batch o1, Batch o2) {,                 return Longs.compare(o1.getTimestamp(), o2.getTimestamp());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,73-80,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];,         KeyValue kv = new KeyValue(row, fam, qual, ts, Type.Put, stored);,         kv.setSequenceId(0);,         list.add(kv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,118-124,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/covered/TestLocalTableState.java,,164-170,[    Mockito.when(scanner.next(Mockito.any(List.class))).thenAnswer(new Answer<Boolean>() {,       @Override,       public Boolean answer(InvocationOnMock invocation) throws Throwable {,         List<KeyValue> list = (List<KeyValue>) invocation.getArguments()[0];, ,         list.add(storedKv);,         return false;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/hbase/index/covered/data/IndexMemStore.java,getSequenceID,310-310,[      return Long.MAX_VALUE;],,getSequenceId,600-600,[                    return cell.getSequenceId();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/data/LazyValueGetter.java,getRowKey,92-92,[	return this.row; ],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/hbase/index/covered/data/LazyValueGetter.java,<init>,51-51,[    this.row = currentRow;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/covered/example/CoveredColumnIndexCodec.java,,42-42,[    public static final byte[] INDEX_ROW_COLUMN_FAMILY = Bytes.toBytes("INDEXED_COLUMNS");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,getNextCellHint,101-101,[    return currentHint.getHint(KeyValueUtil.ensureKeyValue(peeked));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/filter/ApplyAndFilterDeletesFilter.java,,202-208,[  class DeleteColumnHinter implements Hinter {, ,     @Override,     public KeyValue getHint(KeyValue kv) {,       return KeyValueUtil.createLastOnRow(kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(),,         kv.getFamilyArray(), kv.getFamilyOffset(), kv.getFamilyLength(), kv.getQualifierArray(),,         kv.getQualifierOffset(), kv.getQualifierLength());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getFamily,69-69,[        return this.family;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/covered/update/ColumnReference.java,getQualifier,80-80,[        return this.qualifier;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/covered/update/IndexUpdateManager.java,,44-91,[  class MutationComparator implements Comparator<Mutation> {, ,     @Override,     public int compare(Mutation o1, Mutation o2) {,       // always sort rows first,       int compare = o1.compareTo(o2);,       if (compare != 0) {,         return compare;,       }, ,       // if same row, sort by reverse timestamp (larger first),       compare = Longs.compare(o2.getTimeStamp(), o1.getTimeStamp());,       if (compare != 0) {,         return compare;,       },       // deletes always sort before puts for the same row,       if (o1 instanceof Delete) {,         // same row, same ts == same delete since we only delete rows,         if (o2 instanceof Delete) {,           return 0;,         } else {,           // o2 has to be a put,           return -1;,         },       },       // o1 must be a put,       if (o2 instanceof Delete) {,         return 1;,       } else if (o2 instanceof Put) {,         return comparePuts((Put) o1, (Put) o2);,       }, ,       throw new RuntimeException(,           "Got unexpected mutation types! Can only be Put or Delete, but got: " + o1 + ", and ",               + o2);,     }, ,     private int comparePuts(Put p1, Put p2) {,       int p1Size = p1.size();,       int p2Size = p2.size();,       int compare = p1Size - p2Size;,       if (compare == 0) {,         // TODO: make this a real comparison,         // this is a little cheating, but we don't really need to worry too much about this being,         // the same - chances are that exact matches here are really the same update.,         return Longs.compare(p1.heapSize(), p2.heapSize());,       },       return compare;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/hbase/index/exception/SingleIndexWriteFailureException.java,<init>,49-49,[    super("Failed to make index update:\n\t table: " + targetTableName + "\n\t edits: " + mutations],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/parallel/Task.java,isBatchFailed,38-38,[    return this.batch.isAborted();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/parallel/ThreadPoolManager.java,getExecutor,68-68,[    ((ShutdownOnUnusedThreadPoolExecutor) pool).addReference();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/hbase/index/scanner/FilteredKeyValueScanner.java,seekToNextUnfilteredKeyValue,87-100,[            switch (code) {,             // included, so we are done,             case INCLUDE:,             case INCLUDE_AND_NEXT_COL:,                 return true;,                 // not included, so we need to go to the next row,             case SKIP:,             case NEXT_COL:,             case NEXT_ROW:,                 delegate.next();,                 break;,             // use a seek hint to find out where we should go,             case SEEK_NEXT_USING_HINT:,                 delegate.seek(KeyValueUtil.ensureKeyValue(filter.getNextCellHint(peeked)));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/scanner/ScannerBuilder.java,,128-165,[    return new Scanner() {, ,       @Override,       public Cell next() {,         try {,           return kvScanner.next();,         } catch (IOException e) {,           throw new RuntimeException("Error reading kvs from local memstore!");,         },       }, ,       @Override,       public boolean seek(Cell next) throws IOException {,         // check to see if the next kv is after the current key, in which case we can use reseek,,         // which will be more efficient,         Cell peek = kvScanner.peek();,         // there is another value and its before the requested one - we can do a reseek!,         if (peek != null) {,           int compare = KeyValue.COMPARATOR.compare(peek, next);,           if (compare < 0) {,             return kvScanner.reseek(KeyValueUtil.ensureKeyValue(next));,           } else if (compare == 0) {,             // we are already at the given key!,             return true;,           },         },         return kvScanner.seek(KeyValueUtil.ensureKeyValue(next));,       }, ,       @Override,       public Cell peek() throws IOException {,         return kvScanner.peek();,       }, ,       @Override,       public void close() {,         kvScanner.close();,       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/hbase/index/table/CachingHTableFactory.java,,49-66,[    public HTableInterfaceLRUMap(int cacheSize) {,       super(cacheSize);,     }, ,     @Override,     protected boolean removeLRU(LinkEntry entry) {,       HTableInterface table = (HTableInterface) entry.getValue();,       if (LOG.isDebugEnabled()) {,         LOG.debug("Closing connection to table: " + Bytes.toString(table.getTableName()),             + " because it was evicted from the cache.");,       },       try {,         table.close();,       } catch (IOException e) {,         LOG.info("Failed to correctly close HTable: " + Bytes.toString(table.getTableName()),             + " ignoring since being removed from queue.");,       },       return true;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,getQualifierArray,100-100,[        return COLUMN_QUALIFIER;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/hbase/index/wal/IndexedKeyValue.java,,37-37,[    public static final byte [] COLUMN_QUALIFIER = Bytes.toBytes("INDEXEDKEYVALUE_FAKED_COLUMN");],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/hbase/index/write/KillServerOnFailurePolicy.java,handleFailure,76-76,[      System.exit(1);],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/ParallelWriterIndexCommitter.java,write,117-117,[            final List<Mutation> mutations = kvBuilder.cloneIfNecessary((List<Mutation>)entry.getValue());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,105-111,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,179-183,[    }).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         failed[0] = true;,         throw new RuntimeException(],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,173-177,[    Mockito.when(table2.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         waitOnAbortedLatch.await();,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,234-246,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         LOG.info("Write started");,         writeStartedLatch.countDown();,         // when we interrupt the thread for shutdown, we should see this throw an interrupt too,         try {,         waitOnAbortedLatch.await();,         } catch (InterruptedException e) {,           LOG.info("Correctly interrupted while writing!");,           throw e;,         },         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestIndexWriter.java,,266-275,[    Thread primaryWriter = new Thread() {, ,       @Override,       public void run() {,         try {,           writer.write(indexUpdates);,         } catch (IndexWriteException e) {,           failedWrite[0] = true;,         },       }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleIndexWriter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/TestParalleWriterIndexCommitter.java,,95-101,[    Mockito.when(table.batch(Mockito.anyList())).thenAnswer(new Answer<Void>() {, ,       @Override,       public Void answer(InvocationOnMock invocation) throws Throwable {,         // just keep track that it was called,         completed[0] = true;,         return null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,200-200,[    allowIndexTableToRecover = new CountDownLatch(1);],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/hbase/index/write/TestWALRecoveryCaching.java,testWaitsOnIndexRegionToReload,204-204,[    List<Region> online = new ArrayList<Region>();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testAddRemoveSingleRegion,138-138,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleAddsForSingleRegion,166-166,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,testMultipleRegions,191-191,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,testMultipleRegions,204-204,[      final List<Mutation> stored = (List<Mutation>) entry.getValue();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,cleanUp,120-120,[      } catch (Exception ignored) {}],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,setUp,82-82,[      tableName = TableName.valueOf("TestPerRegion" + rn.nextInt());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,cleanUp,117-117,[          r1.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,cleanUp,118-118,[          r2.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,cleanUp,119-119,[          wal.close();],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,92-92,[            return 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,89-97,[      r1 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 1;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,hashCode,104-104,[            return 2;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,,101-109,[      r2 = new HRegion(basedir, wal, newFS, TEST_UTIL.getConfiguration(), hri, htd, null) {,           @Override,           public int hashCode() {,             return 2;,           }, ,           @Override,           public String toString() {,             return "testRegion1";],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/hbase/index/write/recovery/TrackingParallelWriterIndexCommitter.java,write,120-120,[            final List<Mutation> mutations = (List<Mutation>)entry.getValue();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,buildDataRowKey,587-587,[                indexPosOffset++;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,deserialize,251-251,[        List<IndexMaintainer> maintainers = Collections.emptyList();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/index/IndexMaintainer.java,generateIndexRowKeySchema,752-752,[                Field dataField = dataRowKeySchema.getField(i);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getDataEmptyKeyValueCF,1455-1455,[        return dataEmptyKeyValueCF;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/index/IndexMaintainer.java,getIndexTableName,986-986,[        return indexTableName;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/index/IndexMaintainer.java,hasIndexedColumnChanged,923-923,[        		if (Bytes.compareTo(oldValue.get(), oldValue.getOffset(), oldValue.getLength(), ],,hasIndexedColumnChanged,919-919,[        		if ((oldValue == null && !newValueSetAsNull) || (oldValue != null && newValueSetAsNull)) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,713-737,[            builder.addField(new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return false;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return MetaDataUtil.getViewIndexIdDataType();,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return null;,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, ,                 @Override,                 public SortOrder getSortOrder() {,                     return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,785-809,[            builder.addField(new PDatum() {, ,                 @Override,                 public boolean isNullable() {,                     return isNullable;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return dataType;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return maxLength;,                 }, ,                 @Override,                 public Integer getScale() {,                     return scale;,                 }, ,                 @Override,                 public SortOrder getSortOrder() {,                     return sortOrder;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMaintainer.java,,1075-1099,[                indexedExpressions.add(new KeyValueColumnExpression(new PDatum() {,                     ,                     @Override,                     public boolean isNullable() {,                         return true;,                     },                     ,                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();,                     },                     ,                     @Override,                     public Integer getScale() {,                         return null;,                     },                     ,                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     ,                     @Override,                     public PDataType getDataType() {,                         return dataType;],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,100-100,[        Connection conn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,154-154,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,148-148,[                valueMap.get(ref);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,154-154,[                conn.createStatement().execute("DROP TABLE " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,100-159,[        Connection conn = DriverManager.getConnection(getUrl());,         String fullTableName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier(tableName));,         String fullIndexName = SchemaUtil.getTableName(SchemaUtil.normalizeIdentifier(schemaName),SchemaUtil.normalizeIdentifier("idx"));,         conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );,         try {,             conn.createStatement().execute("CREATE INDEX idx ON " + fullTableName + "(" + indexColumns + ") " + (includeColumns.isEmpty() ? "" : "INCLUDE (" + includeColumns + ") ") + (indexProps.isEmpty() ? "" : indexProps));,             PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class);,             PTable table = pconn.getTable(new PTableKey(pconn.getTenantId(), fullTableName));,             PTable index = pconn.getTable(new PTableKey(pconn.getTenantId(),fullIndexName));,             ImmutableBytesWritable ptr = new ImmutableBytesWritable();,             table.getIndexMaintainers(ptr, pconn);,             List<IndexMaintainer> c1 = IndexMaintainer.deserialize(ptr, builder);,             assertEquals(1,c1.size());,             IndexMaintainer im1 = c1.get(0);,             ,             StringBuilder buf = new StringBuilder("UPSERT INTO " + fullTableName  + " VALUES(");,             for (int i = 0; i < values.length; i++) {,                 buf.append("?,");,             },             buf.setCharAt(buf.length()-1, ')');,             PreparedStatement stmt = conn.prepareStatement(buf.toString());,             for (int i = 0; i < values.length; i++) {,                 stmt.setObject(i+1, values[i]);,             },             stmt.execute();,             	Iterator<Pair<byte[],List<KeyValue>>> iterator = PhoenixRuntime.getUncommittedDataIterator(conn);,             List<KeyValue> dataKeyValues = iterator.next().getSecond();,             Map<ColumnReference,byte[]> valueMap = Maps.newHashMapWithExpectedSize(dataKeyValues.size());,             byte[] row = dataKeyValues.get(0).getRow();, 			ImmutableBytesWritable rowKeyPtr = new ImmutableBytesWritable(row);,             Put dataMutation = new Put(rowKeyPtr.copyBytes());,             for (KeyValue kv : dataKeyValues) {,                 valueMap.put(new ColumnReference(kv.getFamily(),kv.getQualifier()), kv.getValue());,                 dataMutation.add(kv);,             },             ValueGetter valueGetter = newValueGetter(row, valueMap);,             ,             List<Mutation> indexMutations =,                     IndexTestUtil.generateIndexData(index, table, dataMutation, ptr, builder);,             assertEquals(1,indexMutations.size());,             assertTrue(indexMutations.get(0) instanceof Put);,             Mutation indexMutation = indexMutations.get(0);,             ImmutableBytesWritable indexKeyPtr = new ImmutableBytesWritable(indexMutation.getRow());,             ptr.set(rowKeyPtr.get(), rowKeyPtr.getOffset(), rowKeyPtr.getLength());,             byte[] mutablelndexRowKey = im1.buildRowKey(valueGetter, ptr, null, null);,             byte[] immutableIndexRowKey = indexKeyPtr.copyBytes();,             assertArrayEquals(immutableIndexRowKey, mutablelndexRowKey);,             for (ColumnReference ref : im1.getCoverededColumns()) {,                 valueMap.get(ref);,             },             byte[] dataRowKey = im1.buildDataRowKey(indexKeyPtr, null);,             assertArrayEquals(dataRowKey, dataKeyValues.get(0).getRow());,         } finally {,             try {,                 conn.createStatement().execute("DROP TABLE " + fullTableName);,             } finally {,                 conn.close();,             },         },     }],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,103-103,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/index/IndexMaintainerTest.java,testIndexRowKeyBuilding,120-120,[            PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/IndexMetaDataCacheFactory.java,,60-74,[        return new IndexMetaDataCache() {, ,             @Override,             public void close() throws IOException {,                 chunk.close();,             }, ,             @Override,             public List<IndexMaintainer> getIndexMaintainers() {,                 return maintainers;,             }, ,             @Override,             public Transaction getTransaction() {,                 return txn;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/index/PhoenixIndexBuilder.java,batchStarted,74-74,[        List<IndexMaintainer> indexMaintainers = ((PhoenixIndexMetaData)context).getIndexMaintainers();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/index/PhoenixIndexCodec.java,getIndexDeletes,84-84,[        List<IndexMaintainer> indexMaintainers = ((PhoenixIndexMetaData)context).getIndexMaintainers();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/index/PhoenixIndexCodec.java,getIndexUpserts,62-62,[        List<IndexMaintainer> indexMaintainers = ((PhoenixIndexMetaData)context).getIndexMaintainers();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/PhoenixIndexFailurePolicy.java,,163-178,[                            new Batch.Call<MetaDataService, MetaDataResponse>() {,                                 @Override,                                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                                     ServerRpcController controller = new ServerRpcController();,                                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                             new BlockingRpcCallback<MetaDataResponse>();,                                     UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                                     for (Mutation m : tableMetadata) {,                                         MutationProto mp = ProtobufUtil.toProto(m);,                                         builder.addTableMetadataMutations(mp.toByteString());,                                     },                                     instance.updateIndexState(controller, builder.build(), rpcCallback);,                                     if (controller.getFailedOn() != null) {,                                         throw controller.getFailedOn();,                                     },                                     return rpcCallback.get();],,
BAD_PRACTICE,IT_NO_SUCH_ELEMENT,org/apache/phoenix/index/PhoenixTransactionalIndexer.java,next,128-128,[                return miniBatchOp.getOperation(i++);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/index/PhoenixTransactionalIndexer.java,,296-306,[                Collections.sort(cells, new Comparator<Cell>() {, ,                     @Override,                     public int compare(Cell o1, Cell o2) {,                         int c = Longs.compare(o1.getTimestamp(), o2.getTimestamp());,                         if (c != 0) return c;,                         c = o1.getTypeByte() - o2.getTypeByte();,                         if (c != 0) return c;,                         c = Bytes.compareTo(o1.getFamilyArray(), o1.getFamilyOffset(), o1.getFamilyLength(), o1.getFamilyArray(), o1.getFamilyOffset(), o1.getFamilyLength());,                         if (c != 0) return c;,                         return Bytes.compareTo(o1.getQualifierArray(), o1.getQualifierOffset(), o1.getQualifierLength(), o1.getQualifierArray(), o1.getQualifierOffset(), o1.getQualifierLength());],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/iterate/AggregateResultScannerTest.java,getViewConstant,120-120,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,94-134,[        SumAggregateFunction func = new SumAggregateFunction(Arrays.<Expression>asList(new KeyValueColumnExpression(new PLongColumn() {,             @Override,             public PName getName() {,                 return SINGLE_COLUMN_NAME;,             },             @Override,             public PName getFamilyName() {,                 return SINGLE_COLUMN_FAMILY_NAME;,             },             @Override,             public int getPosition() {,                 return 0;,             },             ,             @Override,             public SortOrder getSortOrder() {,             	return SortOrder.getDefault();,             },             ,             @Override,             public Integer getArraySize() {,                 return 0;,             },             ,             @Override,             public byte[] getViewConstant() {,                 return null;,             },             ,             @Override,             public boolean isViewReferenced() {,                 return false;,             },             ,             @Override,             public String getExpressionStr() {,                 return null;,             },             @Override,             public boolean isRowTimestamp() {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/AggregateResultScannerTest.java,,138-166,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }, , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/iterate/BaseResultIterators.java,getIterators,624-624,[                        previousScan.setScan(scanPair.getFirst());],,getIterators,609-609,[                        if (isLocalIndex && previousScan != null && previousScan.getScan() != null],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/iterate/BaseResultIterators.java,,577-586,[            return scan;,         }, ,         public void setScan(Scan scan) {,             this.scan = scan;,         }, ,         public ScanWrapper(Scan scan) {,             this.scan = scan;,         }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/iterate/ConcatResultIterator.java,toString,126-126,[		return "ConcatResultIterator [" + resultIterators == null ? ("iterators=" + iterators) : ("resultIterators=" + resultIterators) ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,59-87,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             },             , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/ConcatResultIteratorTest.java,,122-150,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             },             , 			@Override, 			public List<KeyRange> getSplits() {, 				return Collections.emptyList();, 			}, , 			@Override, 			public List<List<Scan>> getScans() {, 				return Collections.emptyList();, 			}, ,             @Override,             public void close() throws SQLException {,             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/MappedByteBufferQueue.java,clear,268-268,[                file.delete();],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/phoenix/iterate/MaterializedComparableResultIterator.java,compareTo,64-64,[        return comparator.compare(this.getCurrent(), o.getCurrent());],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,testMergeSort,104-104,[        ResultIterators reverseIterators = new ResultIterators() {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,,74-102,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }, ,             @Override,             public List<KeyRange> getSplits() {,                 return Collections.emptyList();,             }, ,             @Override,             public List<List<Scan>> getScans() {,                 return Collections.emptyList();,             }, ,             @Override,             public void close() throws SQLException {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,,104-132,[        ResultIterators reverseIterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }, ,             @Override,             public List<KeyRange> getSplits() {,                 return Collections.emptyList();,             }, ,             @Override,             public List<List<Scan>> getScans() {,                 return Collections.emptyList();,             }, ,             @Override,             public void close() throws SQLException {,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/MergeSortResultIteratorTest.java,,167-195,[        ResultIterators iterators = new ResultIterators() {, ,             @Override,             public List<PeekingResultIterator> getIterators() throws SQLException {,                 return results;,             }, ,             @Override,             public int size() {,                 return results.size();,             }, ,             @Override,             public void explain(List<String> planSteps) {,             }, ,             @Override,             public List<KeyRange> getSplits() {,                 return Collections.emptyList();,             }, ,             @Override,             public List<List<Scan>> getScans() {,                 return Collections.emptyList();,             }, ,             @Override,             public void close() throws SQLException {,             }],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/iterate/MergeSortTopNResultIterator.java,compare,67-67,[            return order.isAscending() ? cmp : -cmp;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/iterate/PhoenixQueryTimeoutIT.java,loadDataAndPrepareQuery,90-90,[        PreparedStatement ps = conn.prepareStatement("SELECT * FROM QUERY_TIMEOUT_TEST");],,loadDataAndPrepareQuery,91-91,[        PhoenixStatement phoenixStmt = ps.unwrap(PhoenixStatement.class);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/iterate/PhoenixQueryTimeoutIT.java,testCustomQueryTimeoutWithNormalTimeout,75-75,[        } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/RoundRobinResultIterator.java,,230-234,[                Future<Tuple> future = executor.submit(new Callable<Tuple>() {,                     @Override,                     public Tuple call() throws Exception {,                         // Read the next record to refill the scanner's cache.,                         return itr.next();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/iterate/RoundRobinResultIterator.java,,284-324,[    private class RoundRobinIterator implements PeekingResultIterator {, ,         private PeekingResultIterator delegate;,         private Tuple tuple;,         private int numRecordsRead;, ,         private RoundRobinIterator(PeekingResultIterator itr, Tuple tuple) {,             this.delegate = itr;,             this.tuple = tuple;,             this.numRecordsRead = 0;,         }, ,         @Override,         public void close() throws SQLException {,             delegate.close();,         }, ,         @Override,         public Tuple next() throws SQLException {,             if (tuple != null) {,                 Tuple t = tuple;,                 tuple = null;,                 return t;,             },             numRecordsRead++;,             return delegate.next();,         }, ,         @Override,         public void explain(List<String> planSteps) {,             delegate.explain(planSteps);,         }, ,         @Override,         public Tuple peek() throws SQLException {,             if (tuple != null) { return tuple; },             return delegate.peek();,         }, ,         public int getNumRecordsRead() {,             return numRecordsRead;],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testSelectRowsWithFilterAndDifferentFetchSizes,163-163,[        tryWithFetchSize(Sets.newHashSet("key1"), 2, stmt, salted ? 1 : 1);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testIteratorsPickedInRoundRobinFashionForSaltedTable,407-407,[            String testTable = "testIteratorsPickedInRoundRobinFashionForSaltedTable".toUpperCase();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testFetchSizesAndRVCExpression,211-211,[        PreparedStatement stmt = conn.prepareStatement("SELECT K FROM " + tableName + " WHERE (K, V)  > (?, ?)");],,testFetchSizesAndRVCExpression,212-212,[        stmt.setString(1, "key0");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testSelectRowsWithFilterAndDifferentFetchSizes,159-159,[        PreparedStatement stmt = conn.prepareStatement("SELECT K, V FROM " + tableName + " WHERE K = ?");],,testSelectRowsWithFilterAndDifferentFetchSizes,160-160,[        stmt.setString(1, "key1"); // will return only 1 row],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,tryWithFetchSize,222-222,[        ResultSet rs = stmt.executeQuery();],,tryWithFetchSize,223-223,[        int expectedNumRows = expectedKeys.size();],,tryWithFetchSize,224-224,[        int numRows = 0;],,tryWithFetchSize,225-225,[        while (rs.next()) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,setupTableForSplit,247-247,[        Connection conn = DriverManager.getConnection(getUrl());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testRoundRobinAfterTableSplit,97-97,[                latch.await(waitTimeMillis, TimeUnit.MILLISECONDS);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,setupTableForSplit,248-248,[        conn.createStatement().execute("CREATE TABLE " + tableName + "("],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,createTableAndInsertRows,191-191,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testIteratorsPickedInRoundRobinFashionForSaltedTable,409-409,[            stmt.execute("CREATE TABLE " + testTable + "(K VARCHAR PRIMARY KEY) SALT_BUCKETS = 8");],,testIteratorsPickedInRoundRobinFashionForSaltedTable,413-413,[            ResultSet rs = stmt.executeQuery("SELECT * FROM " + testTable);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testRoundRobinAfterTableSplit,105-105,[            ResultSet rs = stmt.executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,setupTableForSplit,252-252,[        PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + tableName + " VALUES(?,?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,createTableAndInsertRows,193-193,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testFetchSizesAndRVCExpression,211-211,[        PreparedStatement stmt = conn.prepareStatement("SELECT K FROM " + tableName + " WHERE (K, V)  > (?, ?)");],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testSelectAllRowsWithDifferentFetchSizes,135-135,[        PreparedStatement stmt = conn.prepareStatement("SELECT K, V FROM " + tableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/iterate/RoundRobinResultIteratorIT.java,testSelectRowsWithFilterAndDifferentFetchSizes,159-159,[        PreparedStatement stmt = conn.prepareStatement("SELECT K, V FROM " + tableName + " WHERE K = ?");],,testSelectRowsWithFilterAndDifferentFetchSizes,166-166,[        stmt = conn.prepareStatement("SELECT K, V FROM " + tableName + " WHERE K > ?");],,testSelectRowsWithFilterAndDifferentFetchSizes,178-178,[        stmt = conn.prepareStatement("SELECT K, V FROM " + tableName + " WHERE K > ?");],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/iterate/RoundRobinResultIteratorWithStatsIT.java,testRoundRobinBehavior,65-65,[            String testTable = "testRoundRobinBehavior".toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/iterate/RoundRobinResultIteratorWithStatsIT.java,testRoundRobinBehavior,66-66,[            conn.createStatement().execute("CREATE TABLE " + testTable + "(K VARCHAR PRIMARY KEY)");],,testRoundRobinBehavior,76-76,[            conn.createStatement().execute("UPDATE STATISTICS " + testTable);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/iterate/RoundRobinResultIteratorWithStatsIT.java,testRoundRobinBehavior,67-67,[            PreparedStatement stmt = conn.prepareStatement("UPSERT INTO " + testTable + " VALUES(?)");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,<init>,159-159,[                            spoolTo.getFile().delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/iterate/SpoolingResultIterator.java,,111-119,[            spoolTo = new DeferredFileOutputStream(size, "ResultSpooler",".bin", new File(spoolDirectory)) {,                 @Override,                 protected void thresholdReached() throws IOException {,                     try {,                         super.thresholdReached();,                     } finally {,                         chunk.close();,                     },                 }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/iterate/SpoolingResultIterator.java,reachedEnd,274-274,[                file.delete();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/phoenix/jdbc/PhoenixConnection.java,getURL,452-452,[        return url;],,getUrl,47-47,[  def getUrl = BaseTest.getUrl],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/jdbc/PhoenixConnection.java,<init>,205-205,[        final PName tenantId = JDBCUtil.getTenantId(url, info);],,<init>,204-204,[        this.info = info == null ? new Properties() : PropertiesUtil.deepCopy(info);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixConnection.java,,216-219,[            this.services = augmentedProps == currentProps ? services : new DelegateConnectionQueryServices(services) {,                 @Override,                 public ReadOnlyProps getProps() {,                     return augmentedProps;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,183-183,[    public static final byte[] ARRAY_SIZE_BYTES = Bytes.toBytes(ARRAY_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,191-191,[    public static final byte[] BASE_COLUMN_COUNT_BYTES = Bytes.toBytes(BASE_COLUMN_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,246-246,[    public static final byte[] CACHE_SIZE_BYTES = Bytes.toBytes(CACHE_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,206-206,[    public static final byte[] CLASS_NAME_BYTES = Bytes.toBytes(CLASS_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,125-125,[    public static final byte[] COLUMN_COUNT_BYTES = Bytes.toBytes(COLUMN_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,152-152,[    public static final byte[] COLUMN_DEF_BYTES = Bytes.toBytes(COLUMN_DEF);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,144-144,[    public static final byte[] COLUMN_SIZE_BYTES = Bytes.toBytes(COLUMN_SIZE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,235-235,[    public static final byte[] CURRENT_VALUE_BYTES = Bytes.toBytes(CURRENT_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,248-248,[    public static final byte[] CYCLE_FLAG_BYTES = Bytes.toBytes(CYCLE_FLAG);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,132-132,[    public static final byte[] DATA_TABLE_NAME_BYTES = Bytes.toBytes(DATA_TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,141-141,[    public static final byte[] DATA_TYPE_BYTES = Bytes.toBytes(DATA_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,147-147,[    public static final byte[] DECIMAL_DIGITS_BYTES = Bytes.toBytes(DECIMAL_DIGITS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,169-169,[    public static final byte[] DEFAULT_COLUMN_FAMILY_NAME_BYTES = Bytes.toBytes(DEFAULT_COLUMN_FAMILY_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,220-220,[    public static final byte[] DEFAULT_VALUE_BYTES = Bytes.toBytes(DEFAULT_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,173-173,[    public static final byte[] DISABLE_WAL_BYTES = Bytes.toBytes(DISABLE_WAL);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,262-262,[    public static final byte[] GUIDE_POSTS_BYTES = Bytes.toBytes(GUIDE_POSTS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,264-264,[    public static final byte[] GUIDE_POSTS_COUNT_BYTES = Bytes.toBytes(GUIDE_POSTS_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,268-268,[    public static final byte[] GUIDE_POSTS_ROW_COUNT_BYTES = Bytes.toBytes(GUIDE_POSTS_ROW_COUNT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,266-266,[    public static final byte[] GUIDE_POSTS_WIDTH_BYTES = Bytes.toBytes(GUIDE_POSTS_WIDTH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,167-167,[    public static final byte[] IMMUTABLE_ROWS_BYTES = Bytes.toBytes(IMMUTABLE_ROWS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,244-244,[    public static final byte[] INCREMENT_BY_BYTES = Bytes.toBytes(INCREMENT_BY);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,257-257,[    public static final byte[] INDEX_DISABLE_TIMESTAMP_BYTES = Bytes.toBytes(INDEX_DISABLE_TIMESTAMP);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,134-134,[    public static final byte[] INDEX_STATE_BYTES = Bytes.toBytes(INDEX_STATE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,179-179,[    public static final byte[] INDEX_TYPE_BYTES = Bytes.toBytes(INDEX_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,216-216,[    public static final byte[] IS_ARRAY_BYTES = Bytes.toBytes(IS_ARRAY);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,218-218,[    public static final byte[] IS_CONSTANT_BYTES = Bytes.toBytes(IS_CONSTANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,193-193,[    public static final byte[] IS_ROW_TIMESTAMP_BYTES = Bytes.toBytes(IS_ROW_TIMESTAMP);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,187-187,[    public static final byte[] IS_VIEW_REFERENCED_BYTES = Bytes.toBytes(IS_VIEW_REFERENCED);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,208-208,[    public static final byte[] JAR_PATH_BYTES = Bytes.toBytes(JAR_PATH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,252-252,[    public static final byte[] KEY_SEQ_BYTES = Bytes.toBytes(KEY_SEQ);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,274-274,[    public static final byte[] LAST_STATS_UPDATE_TIME_BYTES = Bytes.toBytes(LAST_STATS_UPDATE_TIME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,250-250,[    public static final byte[] LIMIT_REACHED_FLAG_BYTES = Bytes.toBytes(LIMIT_REACHED_FLAG);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,181-181,[    public static final byte[] LINK_TYPE_BYTES = Bytes.toBytes(LINK_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,242-242,[    public static final byte[] MAX_VALUE_BYTES = Bytes.toBytes(MAX_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,270-270,[    public static final byte[] MIN_KEY_BYTES = Bytes.toBytes(MIN_KEY);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,240-240,[    public static final byte[] MIN_VALUE_BYTES = Bytes.toBytes(MIN_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,175-175,[    public static final byte[] MULTI_TENANT_BYTES = Bytes.toBytes(MULTI_TENANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,150-150,[    public static final byte[] NULLABLE_BYTES = Bytes.toBytes(NULLABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,222-222,[    public static final byte[] NUM_ARGS_BYTES = Bytes.toBytes(NUM_ARGS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,157-157,[    public static final byte[] ORDINAL_POSITION_BYTES = Bytes.toBytes(ORDINAL_POSITION);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,121-121,[    public static final byte[] PK_NAME_BYTES = Bytes.toBytes(PK_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,214-214,[    public static final byte[] RETURN_TYPE_BYTES = Bytes.toBytes(RETURN_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,127-127,[    public static final byte[] SALT_BUCKETS_BYTES = Bytes.toBytes(SALT_BUCKETS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,224-224,[    public static final byte[] SEQUENCE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,231-231,[    public static final byte[] SEQUENCE_FULLNAME_BYTES = Bytes.toBytes(SEQUENCE_FULLNAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,226-226,[    public static final byte[] SEQUENCE_SCHEMA_NAME_BYTES = Bytes.toBytes(SEQUENCE_SCHEMA_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,228-228,[    public static final byte[] SEQUENCE_TABLE_NAME_BYTES = Bytes.toBytes(SEQUENCE_TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,165-165,[    public static final byte[] SORT_ORDER_BYTES = Bytes.toBytes(SORT_ORDER);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,237-237,[    public static final byte[] START_WITH_BYTES = Bytes.toBytes(START_WITH);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,129-129,[    public static final byte[] STORE_NULLS_BYTES = Bytes.toBytes(STORE_NULLS);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,98-98,[    public static final byte[] SYSTEM_CATALOG_NAME_BYTES = Bytes.toBytes(SYSTEM_CATALOG_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,93-93,[    public static final byte[] SYSTEM_CATALOG_SCHEMA_BYTES = QueryConstants.SYSTEM_SCHEMA_NAME_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,95-95,[    public static final byte[] SYSTEM_CATALOG_TABLE_BYTES = Bytes.toBytes(SYSTEM_CATALOG_TABLE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,201-201,[    public static final byte[] SYSTEM_FUNCTION_NAME_BYTES = Bytes.toBytes(SYSTEM_FUNCTION_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,101-101,[    public static final byte[] SYSTEM_STATS_NAME_BYTES = Bytes.toBytes(SYSTEM_STATS_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,196-196,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,106-106,[    public static final byte[] TABLE_NAME_BYTES = Bytes.toBytes(TABLE_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,123-123,[    public static final byte[] TABLE_SEQ_NUM_BYTES = Bytes.toBytes(TABLE_SEQ_NUM);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,108-108,[    public static final byte[] TABLE_TYPE_BYTES = Bytes.toBytes(TABLE_TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,283-283,[    public static final byte[] TRANSACTIONAL_BYTES = Bytes.toBytes(TRANSACTIONAL);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,210-210,[    public static final byte[] TYPE_BYTES = Bytes.toBytes(TYPE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,185-185,[    public static final byte[] VIEW_CONSTANT_BYTES = Bytes.toBytes(VIEW_CONSTANT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,189-189,[    public static final byte[] VIEW_INDEX_ID_BYTES = Bytes.toBytes(VIEW_INDEX_ID);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,171-171,[    public static final byte[] VIEW_STATEMENT_BYTES = Bytes.toBytes(VIEW_STATEMENT);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,177-177,[    public static final byte[] VIEW_TYPE_BYTES = Bytes.toBytes(VIEW_TYPE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,212-212,[    public static final byte[] ARG_POSITION_TYPE = Bytes.toBytes(ARG_POSITION);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,204-204,[    public static final byte[] FUNCTION_NAME_BYTES = Bytes.toBytes(FUNCTION_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,272-272,[    public static final byte[] MAX_KEY_BYTES = Bytes.toBytes(MAX_KEY);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,277-277,[    public static final byte[] PARENT_TENANT_ID_BYTES = Bytes.toBytes(PARENT_TENANT_ID);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,110-110,[    public static final byte[] PHYSICAL_NAME_BYTES = Bytes.toBytes(PHYSICAL_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,260-260,[    public static final byte[] REGION_NAME_BYTES = Bytes.toBytes(REGION_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,137-137,[    public static final byte[] TENANT_ID_BYTES = Bytes.toBytes(TENANT_ID);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getCatalogs,371-371,[        Statement stmt = connection.createStatement();],,getCatalogs,372-372,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,508-508,[            stmt = connection.createStatement();],,getColumns,510-510,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,706-706,[        Statement stmt = connection.createStatement();],,getIndexInfo,707-707,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,852-852,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,914-914,[        Statement stmt = connection.createStatement();],,getSchemas,915-915,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,946-946,[        Statement stmt = connection.createStatement();],,getSuperTables,947-947,[        return stmt.executeQuery(buf.toString());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,1054-1054,[        Statement stmt = connection.createStatement();],,getTables,1055-1055,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getColumns,510-510,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getIndexInfo,707-707,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getPrimaryKeys,852-852,[        ResultSet rs = connection.createStatement().executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSchemas,915-915,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getSuperTables,947-947,[        return stmt.executeQuery(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,getTables,1055-1055,[        return stmt.executeQuery(buf.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,494-497,[            stmt = connection.createStatement(new PhoenixStatementFactory() {,                 @Override,                 public PhoenixStatement newStatement(PhoenixConnection connection) {,                     return new PhoenixStatement(connection) {],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,next,548-548,[                inMultiTenantTable = getColumn(tuple, multiTenantIndex) == Boolean.TRUE;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,,82-504,[        super(connection);,         this.statement = parser.nextStatement(new ExecutableNodeFactory());,         if (this.statement == null) { throw new EOFException(); },         this.query = null; // TODO: add toString on SQLStatement,         this.parameterCount = statement.getBindCount();,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     },     ,     public PhoenixPreparedStatement(PhoenixConnection connection, String query) throws SQLException {,         super(connection);,         this.query = query;,         this.statement = parseStatement(query);,         this.parameterCount = statement.getBindCount();,         this.parameters = Arrays.asList(new Object[statement.getBindCount()]);,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     public PhoenixPreparedStatement(PhoenixPreparedStatement statement) throws SQLException {,         super(statement.connection);,         this.query = statement.query;,         this.statement = statement.statement;,         this.parameterCount = statement.parameters.size();,         this.parameters = new ArrayList<Object>(statement.parameters);,     }, ,     @Override,     public void addBatch() throws SQLException {,         throwIfUnboundParameters();,         batch.add(new PhoenixPreparedStatement(this));,     }, ,     /**,      * Set a bind parameter's value.,      * @param parameterIndex 1-based index of the bind parameter to be set,      * @param value value to be set,      * @throws SQLException if the bind parameter index is invalid,      */,     private void setParameter(int parameterIndex, Object value) throws SQLException {,         if (parameterIndex < 1 || parameterIndex > parameterCount) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND),                     .setMessage("Can't set parameter at index " + parameterIndex + ", " +,                              parameterCount + " bind parameters are defined"),                     .build().buildException();,         },         if (parameterIndex < 1) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND),                     .setMessage("Invalid bind parameter index " + parameterIndex),                     .build().buildException();,         },         this.parameters.set(parameterIndex - 1, value);,     }, , ,     @Override,     public void clearParameters() throws SQLException {,         Collections.fill(parameters, BindManager.UNBOUND_PARAMETER);,     }, ,     @Override,     public List<Object> getParameters() {,         return parameters;,     }, ,     private void throwIfUnboundParameters() throws SQLException {,         int i = 0;,         for (Object param : getParameters()) {,             if (param == BindManager.UNBOUND_PARAMETER) {,                 throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND),                     .setMessage("Parameter " + (i + 1) + " is unbound").build().buildException();,             },             i++;,         },     }, , ,     public QueryPlan compileQuery() throws SQLException {,         return compileQuery(statement, query);,     }, ,     public MutationPlan compileMutation() throws SQLException {,         return compileMutation(statement, query);,     }, ,     boolean execute(boolean batched) throws SQLException {,         throwIfUnboundParameters();,         if (!batched && statement.getOperation().isMutation() && !batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return execute(statement);,     }, ,     @Override,     public boolean execute() throws SQLException {,         return execute(false);,     }, ,     @Override,     public ResultSet executeQuery() throws SQLException {,         throwIfUnboundParameters();,         if (statement.getOperation().isMutation()) {,             throw new ExecuteQueryNotApplicableException(statement.getOperation());,         },         return executeQuery(statement);,     }, ,     @Override,     public int executeUpdate() throws SQLException {,         throwIfUnboundParameters();,         if (!statement.getOperation().isMutation()) {,             throw new ExecuteUpdateNotApplicableException(statement.getOperation());,         },         if (!batch.isEmpty()) {,             throw new SQLExceptionInfo.Builder(SQLExceptionCode.EXECUTE_UPDATE_WITH_NON_EMPTY_BATCH),             .build().buildException();,         },         return executeMutation(statement);,     }, ,     public QueryPlan optimizeQuery() throws SQLException {,         throwIfUnboundParameters();,         return optimizeQuery(statement);,     }, ,     @Override,     public ResultSetMetaData getMetaData() throws SQLException {,         if (statement.getOperation().isMutation()) {,             return null;,         },         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             // Just compile top level query without optimizing to get ResultSetMetaData,             QueryPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return new PhoenixResultSetMetaData(this.getConnection(), plan.getProjector());,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public ParameterMetaData getParameterMetaData() throws SQLException {,         int paramCount = statement.getBindCount();,         List<Object> params = this.getParameters();,         BitSet unsetParams = new BitSet(statement.getBindCount());,         for (int i = 0; i < paramCount; i++) {,             if ( params.get(i) == BindManager.UNBOUND_PARAMETER) {,                 unsetParams.set(i);,                 params.set(i, null);,             },         },         try {,             StatementPlan plan = statement.compilePlan(this, Sequence.ValueOp.VALIDATE_SEQUENCE);,             return plan.getParameterMetaData();,         } finally {,             int lastSetBit = 0;,             while ((lastSetBit = unsetParams.nextSetBit(lastSetBit)) != -1) {,                 params.set(lastSetBit, BindManager.UNBOUND_PARAMETER);,                 lastSetBit++;,             },         },     }, ,     @Override,     public String toString() {,         return query;,     }, ,     @Override,     public void setArray(int parameterIndex, Array x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setBytes(int parameterIndex, byte[] x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, Blob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setBoolean(int parameterIndex, boolean x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setByte(int parameterIndex, byte x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Clob x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setDate(int parameterIndex, Date x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex, new Date(cal.getTimeInMillis()));,     }, ,     @Override,     public void setDouble(int parameterIndex, double x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setFloat(int parameterIndex, float x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setInt(int parameterIndex, int x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setLong(int parameterIndex, long x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, NClob value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNString(int parameterIndex, String value) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType) throws SQLException {,         setParameter(parameterIndex, null);,     }, ,     @Override,     public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {,         setParameter(parameterIndex, null);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o) throws SQLException {,         setParameter(parameterIndex, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object o, int targetSqlType) throws SQLException {,         PDataType targetType = PDataType.fromTypeId(targetSqlType);,         PDataType sourceType = PDataType.fromLiteral(o);,         o = targetType.toObject(o, sourceType);,         setParameter(parameterIndex, o);,     }, ,     @Override,     public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {,         setObject(parameterIndex, x, targetSqlType);,     }, ,     @Override,     public void setRef(int parameterIndex, Ref x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setRowId(int parameterIndex, RowId x) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {,         throw new SQLFeatureNotSupportedException();,     }, ,     @Override,     public void setShort(int parameterIndex, short x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setString(int parameterIndex, String x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {,         cal.setTime(x);,         setParameter(parameterIndex, new Time(cal.getTimeInMillis()));,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {,         setParameter(parameterIndex, x);,     }, ,     @Override,     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {,         setParameter(parameterIndex,  x);,     }, ,     @Override,     public void setURL(int parameterIndex, URL x) throws SQLException {,         setParameter(parameterIndex, x.toExternalForm()); // Just treat as String,     }, ,     @Override,     public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {,         throw new SQLFeatureNotSupportedException();],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/jdbc/PhoenixPreparedStatement.java,setParameter,128-128,[            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND)],,setParameter,127-127,[        if (parameterIndex < 1) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/jdbc/PhoenixPreparedStatementTest.java,testMutationUsingExecuteQueryShouldFail,69-69,[            stmt.executeQuery();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixResultSet.java,next,784-784,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,299-299,[                            throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/jdbc/PhoenixStatement.java,call,356-356,[                                    throw (SQLException) e.getCause();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/jdbc/PhoenixStatement.java,execute,960-960,[                    Object consistency = getProps().get(PhoenixRuntime.CONSISTENCY_ATTRIB.toUpperCase());],,
CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,org/apache/phoenix/jdbc/PhoenixStatement.java,getOperation,555-555,[					return this.getOperation();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/jdbc/PhoenixStatement.java,,466-559,[            return new QueryPlan() {, ,                 @Override,                 public ParameterMetaData getParameterMetaData() {,                     return PhoenixParameterMetaData.EMPTY_PARAMETER_META_DATA;,                 }, ,                 @Override,                 public ExplainPlan getExplainPlan() throws SQLException {,                     return new ExplainPlan(Collections.singletonList("EXPLAIN PLAN"));,                 }, ,                 @Override,                 public ResultIterator iterator() throws SQLException {,                     return iterator;,                 },                 ,                 @Override,                 public ResultIterator iterator(ParallelScanGrouper scanGrouper) throws SQLException {,                     return iterator;,                 }, ,                 @Override,                 public long getEstimatedSize() {,                     return 0;,                 }, ,                 @Override,                 public TableRef getTableRef() {,                     return null;,                 }, ,                 @Override,                 public Set<TableRef> getSourceRefs() {,                     return Collections.emptySet();,                 }, ,                 @Override,                 public RowProjector getProjector() {,                     return EXPLAIN_PLAN_ROW_PROJECTOR;,                 }, ,                 @Override,                 public Integer getLimit() {,                     return null;,                 }, ,                 @Override,                 public OrderBy getOrderBy() {,                     return OrderBy.EMPTY_ORDER_BY;,                 }, ,                 @Override,                 public GroupBy getGroupBy() {,                     return GroupBy.EMPTY_GROUP_BY;,                 }, ,                 @Override,                 public List<KeyRange> getSplits() {,                     return Collections.emptyList();,                 }, ,                 @Override,                 public List<List<Scan>> getScans() {,                     return Collections.emptyList();,                 }, ,                 @Override,                 public StatementContext getContext() {,                     return plan.getContext();,                 }, ,                 @Override,                 public FilterableStatement getStatement() {,                     return null;,                 }, ,                 @Override,                 public boolean isDegenerate() {,                     return false;,                 }, ,                 @Override,                 public boolean isRowKeyOrdered() {,                     return true;,                 }, , 				@Override, 				public Operation getOperation() {, 					return this.getOperation();, 				},                 @Override,                 public boolean useRoundRobinIterator() throws SQLException {,                     return false;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/job/AbstractRoundRobinQueue.java,offer,115-115,[        offer(o);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,98-98,[                    return new InstrumentedJobFutureTask<T>(runnable, value);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,93-93,[                    return new InstrumentedJobFutureTask<T>(call);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,112-112,[                    return new JobFutureTask<T>(runnable, value);],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/job/JobManager.java,newTaskFor,107-107,[                    return new JobFutureTask<T>(call);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/job/JobManager.java,,236-244,[        private final RejectedExecutionHandler rejectedExecHandler = new RejectedExecutionHandler() {,             @Override,             public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {,                 TaskExecutionMetricsHolder metrics = getRequestMetric(r);,                 if (metrics != null) {,                     metrics.getNumRejectedTasks().increment();,                 },                 GLOBAL_REJECTED_TASK_COUNTER.increment();,                 throw new RejectedExecutionException("Task " + r.toString() + " rejected from " + executor.toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/join/HashCacheFactory.java,,73-141,[    private class HashCacheImpl implements HashCache {,         private final Map<ImmutableBytesPtr,List<Tuple>> hashCache;,         private final MemoryChunk memoryChunk;,         private final boolean singleValueOnly;,         ,         private HashCacheImpl(byte[] hashCacheBytes, MemoryChunk memoryChunk) {,             try {,                 this.memoryChunk = memoryChunk;,                 byte[] hashCacheByteArray = hashCacheBytes;,                 int offset = 0;,                 ByteArrayInputStream input = new ByteArrayInputStream(hashCacheByteArray, offset, hashCacheBytes.length);,                 DataInputStream dataInput = new DataInputStream(input);,                 int nExprs = dataInput.readInt();,                 List<Expression> onExpressions = new ArrayList<Expression>(nExprs);,                 for (int i = 0; i < nExprs; i++) {,                     int expressionOrdinal = WritableUtils.readVInt(dataInput);,                     Expression expression = ExpressionType.values()[expressionOrdinal].newInstance();,                     expression.readFields(dataInput);,                     onExpressions.add(expression);                        ,                 },                 boolean singleValueOnly = false;,                 int exprSizeAndSingleValueOnly = dataInput.readInt();,                 int exprSize = exprSizeAndSingleValueOnly;,                 if (exprSize < 0) {,                     exprSize *= -1;,                     singleValueOnly = true;,                 },                 this.singleValueOnly = singleValueOnly;,                 offset += exprSize;,                 int nRows = dataInput.readInt();,                 long estimatedSize = SizedUtil.sizeOfMap(nRows, SizedUtil.IMMUTABLE_BYTES_WRITABLE_SIZE, SizedUtil.RESULT_SIZE) + hashCacheBytes.length;,                 this.memoryChunk.resize(estimatedSize);,                 HashMap<ImmutableBytesPtr,List<Tuple>> hashCacheMap = new HashMap<ImmutableBytesPtr,List<Tuple>>(nRows * 5 / 4);,                 offset += Bytes.SIZEOF_INT;,                 // Build Map with evaluated hash key as key and row as value,                 for (int i = 0; i < nRows; i++) {,                     int resultSize = (int)Bytes.readVLong(hashCacheByteArray, offset);,                     offset += WritableUtils.decodeVIntSize(hashCacheByteArray[offset]);,                     ImmutableBytesWritable value = new ImmutableBytesWritable(hashCacheByteArray,offset,resultSize);,                     Tuple result = new ResultTuple(ResultUtil.toResult(value));,                     ImmutableBytesPtr key = TupleUtil.getConcatenatedValue(result, onExpressions);,                     List<Tuple> tuples = hashCacheMap.get(key);,                     if (tuples == null) {,                         tuples = new LinkedList<Tuple>();,                         hashCacheMap.put(key, tuples);,                     },                     tuples.add(result);,                     offset += resultSize;,                 },                 this.hashCache = Collections.unmodifiableMap(hashCacheMap);,             } catch (IOException e) { // Not possible with ByteArrayInputStream,                 throw new RuntimeException(e);,             },         }, ,         @Override,         public void close() {,             memoryChunk.close();,         },         ,         @Override,         public List<Tuple> get(ImmutableBytesPtr hashKey) throws IOException {,             List<Tuple> ret = hashCache.get(hashKey);,             if (singleValueOnly && ret != null && ret.size() > 1) {,                 SQLException ex = new SQLExceptionInfo.Builder(SQLExceptionCode.SINGLE_ROW_SUBQUERY_RETURNS_MULTIPLE_ROWS).build().buildException();,                 ServerUtil.throwIOException(ex.getMessage(), ex);,             },             ,             return ret;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,earlyEvaluation,109-109,[    	return earlyEvaluation;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getFieldPositions,117-117,[    	return fieldPositions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinExpressions,101-101,[        return joinExpressions;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinIds,97-97,[        return joinIds;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getJoinTypes,105-105,[        return joinTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/join/HashJoinInfo.java,getSchemas,113-113,[    	return schemas;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/AbstractBulkLoadTool.java,parseOptions,130-130,[        if (cmdLine.hasOption(HELP_OPT.getOpt())) {],,parseOptions,123-123,[        CommandLine cmdLine = null;],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/mapreduce/AbstractBulkLoadTool.java,loadData,174-174,[        return loadData(conf, cmdLine);],,loadData,168-168,[        CommandLine cmdLine = null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkImportUtil.java,getCharacter,73-73,[        return new String(Base64.decode(strValue)).charAt(0);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkImportUtil.java,setChar,64-64,[        conf.set(confKey, Base64.encodeBytes(Character.toString(charValue).getBytes()));],,
BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkImportUtilTest.java,testInitCsvImportJob,49-49,[        FileOutputStream fileOutputStream = new FileOutputStream(tempFile);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/mapreduce/CsvBulkImportUtilTest.java,testInitCsvImportJob,63-63,[        tempFile.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testAlreadyExistsOutputPath,353-353,[            PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,102-102,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,140-140,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,300-300,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,222-222,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithLocalIndex,258-258,[        PrintWriter printWriter = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testMultipleInputFiles,177-177,[        PrintWriter printWriter = new PrintWriter(outputStream);],,testMultipleInputFiles,181-181,[        printWriter = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,97-97,[        Statement stmt = conn.createStatement();],,testBasicImport,98-98,[        stmt.execute("CREATE TABLE TABLE1 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, T DATE) SPLIT ON (1,2)");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,134-134,[        Statement stmt = conn.createStatement();],,testFullOptionImport,135-135,[        stmt.execute("CREATE TABLE TABLE2 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,290-290,[        Statement stmt = conn.createStatement();],,testImportOneIndexTable,291-291,[        stmt.execute("CREATE TABLE " + tableName + "(ID INTEGER NOT NULL PRIMARY KEY, "],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,212-212,[        Statement stmt = conn.createStatement();],,testImportWithIndex,213-213,[        stmt.execute("CREATE TABLE TABLE3 (ID INTEGER NOT NULL PRIMARY KEY, " +],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testMultipleInputFiles,172-172,[        Statement stmt = conn.createStatement();],,testMultipleInputFiles,173-173,[        stmt.execute("CREATE TABLE TABLE7 (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, T DATE) SPLIT ON (1,2)");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testBasicImport,97-97,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testFullOptionImport,134-134,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,290-290,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportWithIndex,212-212,[        Statement stmt = conn.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testMultipleInputFiles,172-172,[        Statement stmt = conn.createStatement();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testImportOneIndexTable,291-291,[        stmt.execute("CREATE TABLE " + tableName + "(ID INTEGER NOT NULL PRIMARY KEY, "],,testImportOneIndexTable,296-296,[        stmt.execute(ddl);],,testImportOneIndexTable,314-314,[        ResultSet rs = stmt.executeQuery("SELECT * FROM " + tableName);],,testImportOneIndexTable,316-316,[        rs = stmt.executeQuery("SELECT FIRST_NAME FROM " + tableName + " where FIRST_NAME='FirstName 1'");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/mapreduce/CsvBulkLoadToolIT.java,testAlreadyExistsOutputPath,347-347,[            stmt.execute("CREATE TABLE " + tableName + "(ID INTEGER NOT NULL PRIMARY KEY, "],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/mapreduce/IndexToolIT.java,testSecondaryIndex,171-171,[            rs = stmt1.executeQuery("SELECT * FROM "+SchemaUtil.getTableName(schemaName, indxTable));],,testSecondaryIndex,178-178,[            rs = stmt.executeQuery(selectSql);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/mapreduce/IndexToolIT.java,testMutalbleIndexWithUpdates,226-226,[            upsertRow(stmt1, id++);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/mapreduce/IndexToolIT.java,testSecondaryIndex,139-139,[            upsertRow(stmt1, id++);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/IndexToolIT.java,testMutalbleIndexWithUpdates,215-215,[        Connection conn = DriverManager.getConnection(PhoenixRuntime.JDBC_PROTOCOL + PhoenixRuntime.JDBC_PROTOCOL_SEPARATOR + zkQuorum,props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/mapreduce/IndexToolIT.java,testSecondaryIndex,128-128,[        Connection conn = DriverManager.getConnection(PhoenixRuntime.JDBC_PROTOCOL + PhoenixRuntime.JDBC_PROTOCOL_SEPARATOR + zkQuorum,props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/mapreduce/IndexToolIT.java,testMutalbleIndexWithUpdates,261-261,[            rs = conn.createStatement().executeQuery("EXPLAIN " + selectSql);],,testMutalbleIndexWithUpdates,265-265,[            rs = stmt.executeQuery(selectSql);],,testMutalbleIndexWithUpdates,273-273,[            conn.createStatement().execute(String.format("DROP INDEX  %s ON %s",indxTable , dataTable));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/mapreduce/IndexToolIT.java,testSecondaryIndex,146-146,[            ResultSet rs = conn.createStatement().executeQuery("EXPLAIN " + selectSql);],,testSecondaryIndex,174-174,[            rs = conn.createStatement().executeQuery("EXPLAIN " + selectSql);],,testSecondaryIndex,178-178,[            rs = stmt.executeQuery(selectSql);],,testSecondaryIndex,197-197,[            conn.createStatement().execute(String.format("DROP INDEX  %s ON %s",indxTable , fullTableName));],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/mapreduce/IndexToolIT.java,assertExplainPlan,288-288,[            expectedExplainPlan = String.format("CLIENT 1-CHUNK PARALLEL 1-WAY FULL SCAN OVER %s"],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/mapreduce/IndexToolIT.java,assertExplainPlan,285-285,[            expectedExplainPlan = String.format("CLIENT 1-CHUNK PARALLEL 1-WAY RANGE SCAN OVER %s [-32768]"],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/MultiHfileOutputFormat.java,createFamilyConfValueMap,438-438,[                confValMap.put(URLDecoder.decode(familySplit[0], "UTF-8").getBytes(),],,
CORRECTNESS,EC_ARRAY_AND_NONARRAY,org/apache/phoenix/mapreduce/MultiHfileOutputFormat.java,writePartitions,484-484,[        if (!first.getRowkey().equals(HConstants.EMPTY_BYTE_ARRAY)) {],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/mapreduce/MultiHfileOutputFormat.java,write,152-152,[                String tableName = row.getTableName();],,write,146-146,[                if (row == null && kv == null) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/mapreduce/PhoenixRecordWriter.java,<init>,52-52,[        this.statement = this.conn.prepareStatement(upsertQuery);],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/phoenix/mapreduce/bulkload/TableRowkeyPair.java,compareTo,90-94,[        String otherTableName = other.getTableName();,         if(this.tableName.equals(otherTableName)) {,             return this.rowkey.compareTo(other.getRowkey());,         } else {,             return this.tableName.compareTo(otherTableName);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/mapreduce/bulkload/TargetTableRefFunctions.java,,49-49,[     public static Function<String,TargetTableRef> FROM_JSON =  new Function<String,TargetTableRef>() {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/mapreduce/bulkload/TargetTableRefFunctions.java,,81-81,[     public static Function<String,List<String>> NAMES_FROM_JSON =  new Function<String,List<String>>() {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/mapreduce/bulkload/TargetTableRefFunctions.java,,63-63,[     public static Function<List<TargetTableRef>,String> NAMES_TO_JSON =  new Function<List<TargetTableRef>,String>() {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/mapreduce/bulkload/TargetTableRefFunctions.java,,35-35,[     public static Function<TargetTableRef,String> TO_JSON =  new Function<TargetTableRef,String>() {],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/index/IndexTool.java,parseOptions,129-129,[        if (cmdLine.hasOption(HELP_OPTION.getOpt())) {],,parseOptions,122-122,[        CommandLine cmdLine = null;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/mapreduce/index/IndexTool.java,run,178-178,[            final String schemaName = cmdLine.getOptionValue(SCHEMA_NAME_OPTION.getOpt());],,run,171-171,[            CommandLine cmdLine = null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/mapreduce/index/IndexToolUtil.java,updateIndexState,55-55,[			if(connection != null) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/mapreduce/index/IndexToolUtil.java,updateIndexState,72-72,[        connection.createStatement().execute(alterQuery);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/mapreduce/index/PhoenixIndexImportDirectMapper.java,cleanup,161-161,[            context.write(new ImmutableBytesWritable(UUID.randomUUID().toString().getBytes()),],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/mapreduce/index/PhoenixIndexImportMapper.java,setup,79-79,[            this.pStatement = connection.prepareStatement(upsertQuery);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtil.java,getSelectColumnMetadataList,334-334,[            count = columnInfos == null ? 0 : columnInfos.size();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtil.java,getSelectColumnList,331-331,[            count = selectedColumnList == null ? 0 : selectedColumnList.size();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtilTest.java,testSelectStatementWithSchema,167-167,[            conn.createStatement().execute(ddl);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,76-85,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(50);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,87-96,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 MemoryChunk c3 = rmm2.allocate(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 1000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,118-127,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c1 = rmm1.allocate(50);,                 MemoryChunk c2 = rmm1.allocate(40);,                 sleepFor(4000);,                 c1.close();,                 sleepFor(2000);,                 c2.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,129-139,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 MemoryChunk c3 = rmm2.allocate(10);,                 // Will require waiting for a bit of time before t1 frees the requested memory,                 long startTime = System.currentTimeMillis();,                 c3.resize(50);,                 assertTrue(System.currentTimeMillis() - startTime >= 2000);,                 c3.close();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,160-170,[        Thread t1 = new Thread() {,             @Override,             public void run() {,                 MemoryChunk c2 = rmm1.allocate(20);,                 sleepFor(4000);,                 c1.resize(20); // resize down to test that other thread is notified,                 sleepFor(2000);,                 c2.close();,                 c1.close();,                 assertTrue(rmm1.getAvailableMemory() == rmm1.getMaxMemory());,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/memory/MemoryManagerTest.java,,172-184,[        Thread t2 = new Thread() {,             @Override,             public void run() {,                 sleepFor(2000);,                 ChildMemoryManager rmm2 = new ChildMemoryManager(gmm,100);,                 MemoryChunk c3 = rmm2.allocate(10);,                 long startTime = System.currentTimeMillis();,                 c3.resize(60); // Test that resize waits if memory not available,                 assertTrue(c1.getSize() == 20); // c1 was resized not closed,                 assertTrue(System.currentTimeMillis() - startTime >= 2000); // we waited some time before the allocate happened,                 c3.close();,                 assertTrue(rmm2.getAvailableMemory() == rmm2.getMaxMemory());,             }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/monitoring/CombinableMetric.java,,34-34,[        public static NoOpRequestMetric INSTANCE = new NoOpRequestMetric();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelectWithAutoCommit,499-499,[            readMetricsAutoCommitOn = PhoenixRuntime.getReadMetricsForMutationsSinceLastReset(pConn);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForDelete,290-290,[        Connection ddlConn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsert,216-216,[        Connection ddlConn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelect,260-260,[        Connection ddlConn = DriverManager.getConnection(getUrl());],,testMetricsForUpsertSelect,268-268,[        ddlConn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelectSameTable,590-590,[        Connection ddlConn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelectWithAutoCommit,424-424,[        Connection ddlConn = DriverManager.getConnection(getUrl());],,testMetricsForUpsertSelectWithAutoCommit,432-432,[        ddlConn = DriverManager.getConnection(getUrl());],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testNoMetricsCollectedForConnection,313-313,[        Connection ddlConn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,createTableAndInsertValues,164-164,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,createTableAndInsertValues,622-622,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForDelete,291-291,[        ddlConn.createStatement().execute(ddl);],,testMetricsForDelete,297-297,[        conn.createStatement().execute(delete);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForDeleteWithAutoCommit,379-379,[            ddlConn.createStatement().execute(ddl);],,testMetricsForDeleteWithAutoCommit,395-395,[            conn.createStatement().executeUpdate(delete);],,testMetricsForDeleteWithAutoCommit,410-410,[            conn.createStatement().executeUpdate(delete);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsert,217-217,[        ddlConn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelect,261-261,[        ddlConn.createStatement().execute(ddl);],,testMetricsForUpsertSelect,269-269,[        ddlConn.createStatement().execute(ddl);],,testMetricsForUpsertSelect,274-274,[        conn.createStatement().executeUpdate(upsertSelect);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelectSameTable,591-591,[        ddlConn.createStatement().execute(ddl);],,testMetricsForUpsertSelectSameTable,599-599,[        conn.createStatement().executeUpdate(upsertSelect);],,testMetricsForUpsertSelectSameTable,612-612,[        conn.createStatement().executeUpdate(upsertSelect);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertSelectWithAutoCommit,425-425,[        ddlConn.createStatement().execute(ddl);],,testMetricsForUpsertSelectWithAutoCommit,433-433,[        ddlConn.createStatement().execute(ddl);],,testMetricsForUpsertSelectWithAutoCommit,442-442,[            conn.createStatement().executeUpdate(upsertSelect);],,testMetricsForUpsertSelectWithAutoCommit,457-457,[            conn.createStatement().executeUpdate(upsertSelect);],,testMetricsForUpsertSelectWithAutoCommit,470-470,[            conn.createStatement().executeUpdate(upsertSelect);],,testMetricsForUpsertSelectWithAutoCommit,483-483,[            conn.createStatement().executeUpdate(upsertSelect);],,testMetricsForUpsertSelectWithAutoCommit,496-496,[            conn.createStatement().executeUpdate(upsertSelect);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertWithAutoCommit,339-339,[            ddlConn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertingIntoImmutableTableWithIndices,552-552,[            conn.createStatement().execute(tableDdl);],,testMetricsForUpsertingIntoImmutableTableWithIndices,553-553,[            conn.createStatement().execute(index1Ddl);],,testMetricsForUpsertingIntoImmutableTableWithIndices,554-554,[            conn.createStatement().execute(index2Ddl);],,testMetricsForUpsertingIntoImmutableTableWithIndices,555-555,[            conn.createStatement().execute(index3Ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testNoMetricsCollectedForConnection,314-314,[        ddlConn.createStatement().execute(ddl);],,testNoMetricsCollectedForConnection,321-321,[        ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM " + tableName);],,testNoMetricsCollectedForConnection,326-326,[        conn.createStatement().executeUpdate("UPSERT INTO " + tableName + " VALUES ('KEY', 'VALUE')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testOverallQueryMetricsForSelect,184-184,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testReadMetricsForSelect,194-194,[        conn.createStatement().execute(ddl);],,testReadMetricsForSelect,202-202,[        ResultSet rs = stmt.executeQuery(query);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,createTableAndInsertValues,170-170,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,createTableAndInsertValues,625-625,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,insertRowsInTable,714-714,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForDeleteWithAutoCommit,386-386,[            upsertRows(upsert, numRows, conn);],,testMetricsForDeleteWithAutoCommit,402-402,[            upsertRows(upsert, numRows, conn);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertWithAutoCommit,347-347,[            upsertRows(upsert, numRows, conn);],,testMetricsForUpsertWithAutoCommit,356-356,[            upsertRows(upsert, numRows, conn);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,testMetricsForUpsertingIntoImmutableTableWithIndices,564-564,[            PreparedStatement stmt = conn.prepareStatement(upsert);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,upsertRows,364-364,[        PreparedStatement stmt = conn.prepareStatement(upsert);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/monitoring/PhoenixMetricsIT.java,,735-767,[        public TestReadMetricsQueue(boolean isRequestMetricsEnabled) {,             super(isRequestMetricsEnabled);,         }, ,         @Override,         public CombinableMetric getMetric(MetricType type) {,             switch (type) {,             case SCAN_BYTES:,                 return new CombinableMetricImpl(type) {, ,                     @Override,                     public void change(long delta) {,                         super.change(SCAN_BYTES_DELTA);,                     },                 };,             case TASK_EXECUTION_TIME:,                 return new CombinableMetricImpl(type) {, ,                     @Override,                     public void change(long delta) {,                         super.change(TASK_EXECUTION_TIME_DELTA);,                     },                 };,             case MEMORY_CHUNK_BYTES:,                 return new CombinableMetricImpl(type) {, ,                     @Override,                     public void change(long delta) {,                         super.change(MEMORY_CHUNK_BYTES_DELTA);,                     },                 };,             },             return super.getMetric(type);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/monitoring/ReadMetricQueue.java,allotMetric,58-58,[        q.offer(metric);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/monitoring/ReadMetricQueue.java,combineReadMetrics,124-124,[                thisQueue.offer(combinedMetric);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/optimize/QueryOptimizer.java,,373-411,[        Collections.sort(bestCandidates, new Comparator<QueryPlan>() {, ,             @Override,             public int compare(QueryPlan plan1, QueryPlan plan2) {,                 PTable table1 = plan1.getTableRef().getTable();,                 PTable table2 = plan2.getTableRef().getTable();,                 // For shared indexes (i.e. indexes on views and local indexes),,                 // a) add back any view constants as these won't be in the index, and,                 // b) ignore the viewIndexId which will be part of the row key columns.,                 int c = (plan2.getContext().getScanRanges().getBoundPkColumnCount() + (table2.getViewIndexId() == null ? 0 : (boundRanges - 1))) - ,                         (plan1.getContext().getScanRanges().getBoundPkColumnCount() + (table1.getViewIndexId() == null ? 0 : (boundRanges - 1)));,                 if (c != 0) return c;,                 if (plan1.getGroupBy()!=null && plan2.getGroupBy()!=null) {,                     if (plan1.getGroupBy().isOrderPreserving() != plan2.getGroupBy().isOrderPreserving()) {,                         return plan1.getGroupBy().isOrderPreserving() ? -1 : 1;,                     } ,                 },                 // Use smaller table (table with fewest kv columns),                 c = (table1.getColumns().size() - table1.getPKColumns().size()) - (table2.getColumns().size() - table2.getPKColumns().size());,                 if (c != 0) return c;,                 ,                 // If all things are equal, don't choose local index as it forces scan,                 // on every region (unless there's no start/stop key),                 if (table1.getIndexType() == IndexType.LOCAL) {,                     return plan1.getContext().getScanRanges().getRanges().isEmpty() ? -1 : 1;,                 },                 if (table2.getIndexType() == IndexType.LOCAL) {,                     return plan2.getContext().getScanRanges().getRanges().isEmpty() ? 1 : -1;,                 }, ,                 // All things being equal, just use the table based on the Hint.USE_DATA_OVER_INDEX_TABLE,                 if (table1.getType() == PTableType.INDEX) {,                     return comparisonOfDataVersusIndexTable;,                 },                 if (table2.getType() == PTableType.INDEX) {,                     return -comparisonOfDataVersusIndexTable;,                 },                 ,                 return 0;],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/phoenix/parse/ColumnDef.java,<init>,101-101,[                    scale = scale == null ? PDataType.DEFAULT_SCALE : scale > maxLength ? maxLength : scale; ],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/FunctionParseNode.java,create,263-263,[                throw (SQLException) e.getTargetException();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/FunctionParseNode.java,validate,219-219,[                    if (!args[i].getAllowedValues().contains(value.toString().toUpperCase())) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/parse/FunctionParseNode.java,getExpressionCtor,127-127,[        } catch (Exception e) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getAllowedTypes,473-473,[            return allowedTypes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/FunctionParseNode.java,getArgs,358-358,[            return args;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/parse/HintNode.java,<init>,151-151,[                Hint key = Hint.valueOf(hintWord.toUpperCase());],,
STYLE,DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD,org/apache/phoenix/parse/PFunction.java,<init>,108-108,[                 (jarPath==null?0:PNameFactory.getEstimatedSize(this.jarPath));],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/phoenix/parse/ParseNodeFactory.java,negate,648-648,[        if (LiteralParseNode.ONE.equals(child) && ((LiteralParseNode)child).getType().isCoercibleTo(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/ParseNodeFactory.java,function,411-411,[            return new UDFParseNode(name, args, info);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/ParseNodeFactory.java,function,437-437,[            return new UDFParseNode(name,args,info);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,210-213,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,300-303,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.like(children.get(0),children.get(1),node.isNegate(), node.getLikeType());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,310-313,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.not(children.get(0));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,320-323,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.exists(children.get(0), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,330-333,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.cast(children.get(0), node.getDataType(), node.getMaxLength(), node.getScale());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,340-343,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.inList(children, node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,351-354,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.in(children.get(0), children.get(1), node.isNegate(), node.isSubqueryDistinct());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,362-365,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.isNull(children.get(0), node.isNegate());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,372-375,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.comparison(node.getFilterOp(), children.get(0), children.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,383-389,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 if(node.isNegate()) {,                     return NODE_FACTORY.not(NODE_FACTORY.and(children));,                 } else {,                     return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,454-457,[        return leaveCompoundNode(node, l, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.concat(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,220-223,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,499-502,[        return leaveCompoundNode(node, flattenedChildren, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.rowValueConstructor(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,514-517,[	    return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.upsertStmtArrayNode(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,562-565,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.arrayAny(nodes.get(0), (ComparisonParseNode) nodes.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,573-576,[        ParseNode normNode = leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.arrayAll(nodes.get(0), (ComparisonParseNode) nodes.get(1));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,584-587,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.elementRef(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,230-233,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.subtract(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,240-243,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.add(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,250-253,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.multiply(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,260-263,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.divide(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,270-273,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.modulus(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,280-283,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.function(node.getName(),children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/ParseNodeRewriter.java,,290-293,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.caseWhen(children);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLLexer.java,mML_HINT,3991-3991,[					t = input.LA(1);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mCHAR_ESC,3799-3867,[					switch (alt15) {, 						case 1 :, 							// PhoenixSQL.g:1235:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1236:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1237:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1238:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1239:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1240:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1241:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1242:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1243:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1244:11: '%', 							{, 							match('%'); , 							 setText("\\%"); ],,mCHAR_ESC,3736-3880,[			switch (alt16) {, 				case 1 :, 					// PhoenixSQL.g:1234:9: '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					{, 					match('\\'); , 					// PhoenixSQL.g:1235:9: ( 'n' | 'r' | 't' | 'b' | 'f' | '\\\"' | '\\'' | '\\\\' | '_' | '%' ), 					int alt15=10;, 					switch ( input.LA(1) ) {, 					case 'n':, 						{, 						alt15=1;, 						}, 						break;, 					case 'r':, 						{, 						alt15=2;, 						}, 						break;, 					case 't':, 						{, 						alt15=3;, 						}, 						break;, 					case 'b':, 						{, 						alt15=4;, 						}, 						break;, 					case 'f':, 						{, 						alt15=5;, 						}, 						break;, 					case '\"':, 						{, 						alt15=6;, 						}, 						break;, 					case '\'':, 						{, 						alt15=7;, 						}, 						break;, 					case '\\':, 						{, 						alt15=8;, 						}, 						break;, 					case '_':, 						{, 						alt15=9;, 						}, 						break;, 					case '%':, 						{, 						alt15=10;, 						}, 						break;, 					default:, 						NoViableAltException nvae =, 							new NoViableAltException("", 15, 0, input);, 						throw nvae;, 					}, 					switch (alt15) {, 						case 1 :, 							// PhoenixSQL.g:1235:11: 'n', 							{, 							match('n'); , 							 setText("\n"); , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1236:11: 'r', 							{, 							match('r'); , 							 setText("\r"); , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:1237:11: 't', 							{, 							match('t'); , 							 setText("\t"); , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:1238:11: 'b', 							{, 							match('b'); , 							 setText("\b"); , 							}, 							break;, 						case 5 :, 							// PhoenixSQL.g:1239:11: 'f', 							{, 							match('f'); , 							 setText("\f"); , 							}, 							break;, 						case 6 :, 							// PhoenixSQL.g:1240:11: '\\\"', 							{, 							match('\"'); , 							 setText("\""); , 							}, 							break;, 						case 7 :, 							// PhoenixSQL.g:1241:11: '\\'', 							{, 							match('\''); , 							 setText("\'"); , 							}, 							break;, 						case 8 :, 							// PhoenixSQL.g:1242:11: '\\\\', 							{, 							match('\\'); , 							 setText("\\"); , 							}, 							break;, 						case 9 :, 							// PhoenixSQL.g:1243:11: '_', 							{, 							match('_'); , 							 setText("\\_"); , 							}, 							break;, 						case 10 :, 							// PhoenixSQL.g:1244:11: '%', 							{, 							match('%'); , 							 setText("\\%"); , 							}, 							break;, , 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1246:9: '\\'\\'', 					{, 					match("''"); , , 					 setText("\'"); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mDECIMAL,2708-2712,[			switch (alt5) {, 				case 1 :, 					// PhoenixSQL.g:1069:4: POSINTEGER, 					{, 					mPOSINTEGER(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mDOUBLE,2806-2810,[									switch (alt6) {, 										case 1 :, 											// PhoenixSQL.g:1075:38: Exponent, 											{, 											mExponent(); ],,mDOUBLE,2783-2827,[					switch (alt8) {, 						case 1 :, 							// PhoenixSQL.g:1075:21: '.' ( POSINTEGER ( Exponent )? )?, 							{, 							match('.'); , 							// PhoenixSQL.g:1075:25: ( POSINTEGER ( Exponent )? )?, 							int alt7=2;, 							int LA7_0 = input.LA(1);, 							if ( ((LA7_0 >= '0' && LA7_0 <= '9')) ) {, 								alt7=1;, 							}, 							switch (alt7) {, 								case 1 :, 									// PhoenixSQL.g:1075:26: POSINTEGER ( Exponent )?, 									{, 									mPOSINTEGER(); , , 									// PhoenixSQL.g:1075:37: ( Exponent )?, 									int alt6=2;, 									int LA6_0 = input.LA(1);, 									if ( (LA6_0=='E'||LA6_0=='e') ) {, 										alt6=1;, 									}, 									switch (alt6) {, 										case 1 :, 											// PhoenixSQL.g:1075:38: Exponent, 											{, 											mExponent(); , , 											}, 											break;, , 									}, , 									}, 									break;, , 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:1075:53: Exponent, 							{, 							mExponent(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mSL_COMMENT,4104-4115,[			switch (alt19) {, 				case 1 :, 					// PhoenixSQL.g:1271:8: SL_COMMENT1, 					{, 					mSL_COMMENT1(); , , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1271:22: SL_COMMENT2, 					{, 					mSL_COMMENT2(); ],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLLexer.java,mTokens,4208-5255,[		switch (alt21) {, 			case 1 :, 				// PhoenixSQL.g:1:10: ACTIVE, 				{, 				mACTIVE(); , , 				}, 				break;, 			case 2 :, 				// PhoenixSQL.g:1:17: ADD, 				{, 				mADD(); , , 				}, 				break;, 			case 3 :, 				// PhoenixSQL.g:1:21: ALL, 				{, 				mALL(); , , 				}, 				break;, 			case 4 :, 				// PhoenixSQL.g:1:25: ALTER, 				{, 				mALTER(); , , 				}, 				break;, 			case 5 :, 				// PhoenixSQL.g:1:31: AND, 				{, 				mAND(); , , 				}, 				break;, 			case 6 :, 				// PhoenixSQL.g:1:35: ANY, 				{, 				mANY(); , , 				}, 				break;, 			case 7 :, 				// PhoenixSQL.g:1:39: ARRAY, 				{, 				mARRAY(); , , 				}, 				break;, 			case 8 :, 				// PhoenixSQL.g:1:45: AS, 				{, 				mAS(); , , 				}, 				break;, 			case 9 :, 				// PhoenixSQL.g:1:48: ASC, 				{, 				mASC(); , , 				}, 				break;, 			case 10 :, 				// PhoenixSQL.g:1:52: ASYNC, 				{, 				mASYNC(); , , 				}, 				break;, 			case 11 :, 				// PhoenixSQL.g:1:58: BETWEEN, 				{, 				mBETWEEN(); , , 				}, 				break;, 			case 12 :, 				// PhoenixSQL.g:1:66: BY, 				{, 				mBY(); , , 				}, 				break;, 			case 13 :, 				// PhoenixSQL.g:1:69: CACHE, 				{, 				mCACHE(); , , 				}, 				break;, 			case 14 :, 				// PhoenixSQL.g:1:75: CASCADE, 				{, 				mCASCADE(); , , 				}, 				break;, 			case 15 :, 				// PhoenixSQL.g:1:83: CASE, 				{, 				mCASE(); , , 				}, 				break;, 			case 16 :, 				// PhoenixSQL.g:1:88: CAST, 				{, 				mCAST(); , , 				}, 				break;, 			case 17 :, 				// PhoenixSQL.g:1:93: COLUMN, 				{, 				mCOLUMN(); , , 				}, 				break;, 			case 18 :, 				// PhoenixSQL.g:1:100: COLUMNS, 				{, 				mCOLUMNS(); , , 				}, 				break;, 			case 19 :, 				// PhoenixSQL.g:1:108: CONSTANT, 				{, 				mCONSTANT(); , , 				}, 				break;, 			case 20 :, 				// PhoenixSQL.g:1:117: CONSTRAINT, 				{, 				mCONSTRAINT(); , , 				}, 				break;, 			case 21 :, 				// PhoenixSQL.g:1:128: CREATE, 				{, 				mCREATE(); , , 				}, 				break;, 			case 22 :, 				// PhoenixSQL.g:1:135: CURRENT, 				{, 				mCURRENT(); , , 				}, 				break;, 			case 23 :, 				// PhoenixSQL.g:1:143: CYCLE, 				{, 				mCYCLE(); , , 				}, 				break;, 			case 24 :, 				// PhoenixSQL.g:1:149: DEFAULTVALUE, 				{, 				mDEFAULTVALUE(); , , 				}, 				break;, 			case 25 :, 				// PhoenixSQL.g:1:162: DELETE, 				{, 				mDELETE(); , , 				}, 				break;, 			case 26 :, 				// PhoenixSQL.g:1:169: DESC, 				{, 				mDESC(); , , 				}, 				break;, 			case 27 :, 				// PhoenixSQL.g:1:174: DISABLE, 				{, 				mDISABLE(); , , 				}, 				break;, 			case 28 :, 				// PhoenixSQL.g:1:182: DISTINCT, 				{, 				mDISTINCT(); , , 				}, 				break;, 			case 29 :, 				// PhoenixSQL.g:1:191: DROP, 				{, 				mDROP(); , , 				}, 				break;, 			case 30 :, 				// PhoenixSQL.g:1:196: ELSE, 				{, 				mELSE(); , , 				}, 				break;, 			case 31 :, 				// PhoenixSQL.g:1:201: END, 				{, 				mEND(); , , 				}, 				break;, 			case 32 :, 				// PhoenixSQL.g:1:205: EXISTS, 				{, 				mEXISTS(); , , 				}, 				break;, 			case 33 :, 				// PhoenixSQL.g:1:212: EXPLAIN, 				{, 				mEXPLAIN(); , , 				}, 				break;, 			case 34 :, 				// PhoenixSQL.g:1:220: FALSE, 				{, 				mFALSE(); , , 				}, 				break;, 			case 35 :, 				// PhoenixSQL.g:1:226: FIRST, 				{, 				mFIRST(); , , 				}, 				break;, 			case 36 :, 				// PhoenixSQL.g:1:232: FOR, 				{, 				mFOR(); , , 				}, 				break;, 			case 37 :, 				// PhoenixSQL.g:1:236: FROM, 				{, 				mFROM(); , , 				}, 				break;, 			case 38 :, 				// PhoenixSQL.g:1:241: FULL, 				{, 				mFULL(); , , 				}, 				break;, 			case 39 :, 				// PhoenixSQL.g:1:246: FUNCTION, 				{, 				mFUNCTION(); , , 				}, 				break;, 			case 40 :, 				// PhoenixSQL.g:1:255: GROUP, 				{, 				mGROUP(); , , 				}, 				break;, 			case 41 :, 				// PhoenixSQL.g:1:261: HAVING, 				{, 				mHAVING(); , , 				}, 				break;, 			case 42 :, 				// PhoenixSQL.g:1:268: IF, 				{, 				mIF(); , , 				}, 				break;, 			case 43 :, 				// PhoenixSQL.g:1:271: ILIKE, 				{, 				mILIKE(); , , 				}, 				break;, 			case 44 :, 				// PhoenixSQL.g:1:277: IN, 				{, 				mIN(); , , 				}, 				break;, 			case 45 :, 				// PhoenixSQL.g:1:280: INCLUDE, 				{, 				mINCLUDE(); , , 				}, 				break;, 			case 46 :, 				// PhoenixSQL.g:1:288: INCREMENT, 				{, 				mINCREMENT(); , , 				}, 				break;, 			case 47 :, 				// PhoenixSQL.g:1:298: INDEX, 				{, 				mINDEX(); , , 				}, 				break;, 			case 48 :, 				// PhoenixSQL.g:1:304: INNER, 				{, 				mINNER(); , , 				}, 				break;, 			case 49 :, 				// PhoenixSQL.g:1:310: INTO, 				{, 				mINTO(); , , 				}, 				break;, 			case 50 :, 				// PhoenixSQL.g:1:315: IS, 				{, 				mIS(); , , 				}, 				break;, 			case 51 :, 				// PhoenixSQL.g:1:318: JAR, 				{, 				mJAR(); , , 				}, 				break;, 			case 52 :, 				// PhoenixSQL.g:1:322: JARS, 				{, 				mJARS(); , , 				}, 				break;, 			case 53 :, 				// PhoenixSQL.g:1:327: JOIN, 				{, 				mJOIN(); , , 				}, 				break;, 			case 54 :, 				// PhoenixSQL.g:1:332: KEY, 				{, 				mKEY(); , , 				}, 				break;, 			case 55 :, 				// PhoenixSQL.g:1:336: LAST, 				{, 				mLAST(); , , 				}, 				break;, 			case 56 :, 				// PhoenixSQL.g:1:341: LEFT, 				{, 				mLEFT(); , , 				}, 				break;, 			case 57 :, 				// PhoenixSQL.g:1:346: LIKE, 				{, 				mLIKE(); , , 				}, 				break;, 			case 58 :, 				// PhoenixSQL.g:1:351: LIMIT, 				{, 				mLIMIT(); , , 				}, 				break;, 			case 59 :, 				// PhoenixSQL.g:1:357: LIST, 				{, 				mLIST(); , , 				}, 				break;, 			case 60 :, 				// PhoenixSQL.g:1:362: LOCAL, 				{, 				mLOCAL(); , , 				}, 				break;, 			case 61 :, 				// PhoenixSQL.g:1:368: MAXVALUE, 				{, 				mMAXVALUE(); , , 				}, 				break;, 			case 62 :, 				// PhoenixSQL.g:1:377: MINVALUE, 				{, 				mMINVALUE(); , , 				}, 				break;, 			case 63 :, 				// PhoenixSQL.g:1:386: NEXT, 				{, 				mNEXT(); , , 				}, 				break;, 			case 64 :, 				// PhoenixSQL.g:1:391: NOT, 				{, 				mNOT(); , , 				}, 				break;, 			case 65 :, 				// PhoenixSQL.g:1:395: NULL, 				{, 				mNULL(); , , 				}, 				break;, 			case 66 :, 				// PhoenixSQL.g:1:400: NULLS, 				{, 				mNULLS(); , , 				}, 				break;, 			case 67 :, 				// PhoenixSQL.g:1:406: OFF, 				{, 				mOFF(); , , 				}, 				break;, 			case 68 :, 				// PhoenixSQL.g:1:410: ON, 				{, 				mON(); , , 				}, 				break;, 			case 69 :, 				// PhoenixSQL.g:1:413: OR, 				{, 				mOR(); , , 				}, 				break;, 			case 70 :, 				// PhoenixSQL.g:1:416: ORDER, 				{, 				mORDER(); , , 				}, 				break;, 			case 71 :, 				// PhoenixSQL.g:1:422: OUTER, 				{, 				mOUTER(); , , 				}, 				break;, 			case 72 :, 				// PhoenixSQL.g:1:428: PRIMARY, 				{, 				mPRIMARY(); , , 				}, 				break;, 			case 73 :, 				// PhoenixSQL.g:1:436: REBUILD, 				{, 				mREBUILD(); , , 				}, 				break;, 			case 74 :, 				// PhoenixSQL.g:1:444: REPLACE, 				{, 				mREPLACE(); , , 				}, 				break;, 			case 75 :, 				// PhoenixSQL.g:1:452: RETURNS, 				{, 				mRETURNS(); , , 				}, 				break;, 			case 76 :, 				// PhoenixSQL.g:1:460: RIGHT, 				{, 				mRIGHT(); , , 				}, 				break;, 			case 77 :, 				// PhoenixSQL.g:1:466: ROW_TIMESTAMP, 				{, 				mROW_TIMESTAMP(); , , 				}, 				break;, 			case 78 :, 				// PhoenixSQL.g:1:480: SAMPLING, 				{, 				mSAMPLING(); , , 				}, 				break;, 			case 79 :, 				// PhoenixSQL.g:1:489: SELECT, 				{, 				mSELECT(); , , 				}, 				break;, 			case 80 :, 				// PhoenixSQL.g:1:496: SEQUENCE, 				{, 				mSEQUENCE(); , , 				}, 				break;, 			case 81 :, 				// PhoenixSQL.g:1:505: SESSION, 				{, 				mSESSION(); , , 				}, 				break;, 			case 82 :, 				// PhoenixSQL.g:1:513: SET, 				{, 				mSET(); , , 				}, 				break;, 			case 83 :, 				// PhoenixSQL.g:1:517: SOME, 				{, 				mSOME(); , , 				}, 				break;, 			case 84 :, 				// PhoenixSQL.g:1:522: SPLIT, 				{, 				mSPLIT(); , , 				}, 				break;, 			case 85 :, 				// PhoenixSQL.g:1:528: START, 				{, 				mSTART(); , , 				}, 				break;, 			case 86 :, 				// PhoenixSQL.g:1:534: STATISTICS, 				{, 				mSTATISTICS(); , , 				}, 				break;, 			case 87 :, 				// PhoenixSQL.g:1:545: TABLE, 				{, 				mTABLE(); , , 				}, 				break;, 			case 88 :, 				// PhoenixSQL.g:1:551: TABLES, 				{, 				mTABLES(); , , 				}, 				break;, 			case 89 :, 				// PhoenixSQL.g:1:558: TEMPORARY, 				{, 				mTEMPORARY(); , , 				}, 				break;, 			case 90 :, 				// PhoenixSQL.g:1:568: THEN, 				{, 				mTHEN(); , , 				}, 				break;, 			case 91 :, 				// PhoenixSQL.g:1:573: TRACE, 				{, 				mTRACE(); , , 				}, 				break;, 			case 92 :, 				// PhoenixSQL.g:1:579: TRUE, 				{, 				mTRUE(); , , 				}, 				break;, 			case 93 :, 				// PhoenixSQL.g:1:584: UNION, 				{, 				mUNION(); , , 				}, 				break;, 			case 94 :, 				// PhoenixSQL.g:1:590: UNUSABLE, 				{, 				mUNUSABLE(); , , 				}, 				break;, 			case 95 :, 				// PhoenixSQL.g:1:599: UPDATE, 				{, 				mUPDATE(); , , 				}, 				break;, 			case 96 :, 				// PhoenixSQL.g:1:606: UPSERT, 				{, 				mUPSERT(); , , 				}, 				break;, 			case 97 :, 				// PhoenixSQL.g:1:613: USABLE, 				{, 				mUSABLE(); , , 				}, 				break;, 			case 98 :, 				// PhoenixSQL.g:1:620: USING, 				{, 				mUSING(); , , 				}, 				break;, 			case 99 :, 				// PhoenixSQL.g:1:626: VALUE, 				{, 				mVALUE(); , , 				}, 				break;, 			case 100 :, 				// PhoenixSQL.g:1:632: VALUES, 				{, 				mVALUES(); , , 				}, 				break;, 			case 101 :, 				// PhoenixSQL.g:1:639: VIEW, 				{, 				mVIEW(); , , 				}, 				break;, 			case 102 :, 				// PhoenixSQL.g:1:644: WHEN, 				{, 				mWHEN(); , , 				}, 				break;, 			case 103 :, 				// PhoenixSQL.g:1:649: WHERE, 				{, 				mWHERE(); , , 				}, 				break;, 			case 104 :, 				// PhoenixSQL.g:1:655: WITH, 				{, 				mWITH(); , , 				}, 				break;, 			case 105 :, 				// PhoenixSQL.g:1:660: WITHIN, 				{, 				mWITHIN(); , , 				}, 				break;, 			case 106 :, 				// PhoenixSQL.g:1:667: HINT_START, 				{, 				mHINT_START(); , , 				}, 				break;, 			case 107 :, 				// PhoenixSQL.g:1:678: COMMENT_START, 				{, 				mCOMMENT_START(); , , 				}, 				break;, 			case 108 :, 				// PhoenixSQL.g:1:692: COMMENT_AND_HINT_END, 				{, 				mCOMMENT_AND_HINT_END(); , , 				}, 				break;, 			case 109 :, 				// PhoenixSQL.g:1:713: SL_COMMENT1, 				{, 				mSL_COMMENT1(); , , 				}, 				break;, 			case 110 :, 				// PhoenixSQL.g:1:725: SL_COMMENT2, 				{, 				mSL_COMMENT2(); , , 				}, 				break;, 			case 111 :, 				// PhoenixSQL.g:1:737: BIND_NAME, 				{, 				mBIND_NAME(); , , 				}, 				break;, 			case 112 :, 				// PhoenixSQL.g:1:747: NAME, 				{, 				mNAME(); , , 				}, 				break;, 			case 113 :, 				// PhoenixSQL.g:1:752: NUMBER, 				{, 				mNUMBER(); , , 				}, 				break;, 			case 114 :, 				// PhoenixSQL.g:1:759: DECIMAL, 				{, 				mDECIMAL(); , , 				}, 				break;, 			case 115 :, 				// PhoenixSQL.g:1:767: DOUBLE, 				{, 				mDOUBLE(); , , 				}, 				break;, 			case 116 :, 				// PhoenixSQL.g:1:774: Exponent, 				{, 				mExponent(); , , 				}, 				break;, 			case 117 :, 				// PhoenixSQL.g:1:783: DOUBLE_QUOTE, 				{, 				mDOUBLE_QUOTE(); , , 				}, 				break;, 			case 118 :, 				// PhoenixSQL.g:1:796: EQ, 				{, 				mEQ(); , , 				}, 				break;, 			case 119 :, 				// PhoenixSQL.g:1:799: LT, 				{, 				mLT(); , , 				}, 				break;, 			case 120 :, 				// PhoenixSQL.g:1:802: GT, 				{, 				mGT(); , , 				}, 				break;, 			case 121 :, 				// PhoenixSQL.g:1:805: DOUBLE_EQ, 				{, 				mDOUBLE_EQ(); , , 				}, 				break;, 			case 122 :, 				// PhoenixSQL.g:1:815: NOEQ1, 				{, 				mNOEQ1(); , , 				}, 				break;, 			case 123 :, 				// PhoenixSQL.g:1:821: NOEQ2, 				{, 				mNOEQ2(); , , 				}, 				break;, 			case 124 :, 				// PhoenixSQL.g:1:827: CONCAT, 				{, 				mCONCAT(); , , 				}, 				break;, 			case 125 :, 				// PhoenixSQL.g:1:834: COMMA, 				{, 				mCOMMA(); , , 				}, 				break;, 			case 126 :, 				// PhoenixSQL.g:1:840: LPAREN, 				{, 				mLPAREN(); , , 				}, 				break;, 			case 127 :, 				// PhoenixSQL.g:1:847: RPAREN, 				{, 				mRPAREN(); , , 				}, 				break;, 			case 128 :, 				// PhoenixSQL.g:1:854: SEMICOLON, 				{, 				mSEMICOLON(); , , 				}, 				break;, 			case 129 :, 				// PhoenixSQL.g:1:864: COLON, 				{, 				mCOLON(); , , 				}, 				break;, 			case 130 :, 				// PhoenixSQL.g:1:870: QUESTION, 				{, 				mQUESTION(); , , 				}, 				break;, 			case 131 :, 				// PhoenixSQL.g:1:879: LSQUARE, 				{, 				mLSQUARE(); , , 				}, 				break;, 			case 132 :, 				// PhoenixSQL.g:1:887: RSQUARE, 				{, 				mRSQUARE(); , , 				}, 				break;, 			case 133 :, 				// PhoenixSQL.g:1:895: LCURLY, 				{, 				mLCURLY(); , , 				}, 				break;, 			case 134 :, 				// PhoenixSQL.g:1:902: RCURLY, 				{, 				mRCURLY(); , , 				}, 				break;, 			case 135 :, 				// PhoenixSQL.g:1:909: AT, 				{, 				mAT(); , , 				}, 				break;, 			case 136 :, 				// PhoenixSQL.g:1:912: TILDE, 				{, 				mTILDE(); , , 				}, 				break;, 			case 137 :, 				// PhoenixSQL.g:1:918: PLUS, 				{, 				mPLUS(); , , 				}, 				break;, 			case 138 :, 				// PhoenixSQL.g:1:923: MINUS, 				{, 				mMINUS(); , , 				}, 				break;, 			case 139 :, 				// PhoenixSQL.g:1:929: ASTERISK, 				{, 				mASTERISK(); , , 				}, 				break;, 			case 140 :, 				// PhoenixSQL.g:1:938: DIVIDE, 				{, 				mDIVIDE(); , , 				}, 				break;, 			case 141 :, 				// PhoenixSQL.g:1:945: PERCENT, 				{, 				mPERCENT(); , , 				}, 				break;, 			case 142 :, 				// PhoenixSQL.g:1:953: OUTER_JOIN, 				{, 				mOUTER_JOIN(); , , 				}, 				break;, 			case 143 :, 				// PhoenixSQL.g:1:964: STRING_LITERAL, 				{, 				mSTRING_LITERAL(); , , 				}, 				break;, 			case 144 :, 				// PhoenixSQL.g:1:979: WS, 				{, 				mWS(); , , 				}, 				break;, 			case 145 :, 				// PhoenixSQL.g:1:982: EOL, 				{, 				mEOL(); , , 				}, 				break;, 			case 146 :, 				// PhoenixSQL.g:1:986: ML_HINT, 				{, 				mML_HINT(); , , 				}, 				break;, 			case 147 :, 				// PhoenixSQL.g:1:994: ML_COMMENT, 				{, 				mML_COMMENT(); , , 				}, 				break;, 			case 148 :, 				// PhoenixSQL.g:1:1005: SL_COMMENT, 				{, 				mSL_COMMENT(); , , 				}, 				break;, 			case 149 :, 				// PhoenixSQL.g:1:1016: DOT, 				{, 				mDOT(); , , 				}, 				break;, 			case 150 :, 				// PhoenixSQL.g:1:1020: OTHER, 				{, 				mOTHER(); ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/parse/PhoenixSQLLexer.java,,6102-6233,[		public DFA21(BaseRecognizer recognizer) {, 			this.recognizer = recognizer;, 			this.decisionNumber = 21;, 			this.eot = DFA21_eot;, 			this.eof = DFA21_eof;, 			this.min = DFA21_min;, 			this.max = DFA21_max;, 			this.accept = DFA21_accept;, 			this.special = DFA21_special;, 			this.transition = DFA21_transition;, 		}, 		@Override, 		public String getDescription() {, 			return "1:1: Tokens : ( ACTIVE | ADD | ALL | ALTER | AND | ANY | ARRAY | AS | ASC | ASYNC | BETWEEN | BY | CACHE | CASCADE | CASE | CAST | COLUMN | COLUMNS | CONSTANT | CONSTRAINT | CREATE | CURRENT | CYCLE | DEFAULTVALUE | DELETE | DESC | DISABLE | DISTINCT | DROP | ELSE | END | EXISTS | EXPLAIN | FALSE | FIRST | FOR | FROM | FULL | FUNCTION | GROUP | HAVING | IF | ILIKE | IN | INCLUDE | INCREMENT | INDEX | INNER | INTO | IS | JAR | JARS | JOIN | KEY | LAST | LEFT | LIKE | LIMIT | LIST | LOCAL | MAXVALUE | MINVALUE | NEXT | NOT | NULL | NULLS | OFF | ON | OR | ORDER | OUTER | PRIMARY | REBUILD | REPLACE | RETURNS | RIGHT | ROW_TIMESTAMP | SAMPLING | SELECT | SEQUENCE | SESSION | SET | SOME | SPLIT | START | STATISTICS | TABLE | TABLES | TEMPORARY | THEN | TRACE | TRUE | UNION | UNUSABLE | UPDATE | UPSERT | USABLE | USING | VALUE | VALUES | VIEW | WHEN | WHERE | WITH | WITHIN | HINT_START | COMMENT_START | COMMENT_AND_HINT_END | SL_COMMENT1 | SL_COMMENT2 | BIND_NAME | NAME | NUMBER | DECIMAL | DOUBLE | Exponent | DOUBLE_QUOTE | EQ | LT | GT | DOUBLE_EQ | NOEQ1 | NOEQ2 | CONCAT | COMMA | LPAREN | RPAREN | SEMICOLON | COLON | QUESTION | LSQUARE | RSQUARE | LCURLY | RCURLY | AT | TILDE | PLUS | MINUS | ASTERISK | DIVIDE | PERCENT | OUTER_JOIN | STRING_LITERAL | WS | EOL | ML_HINT | ML_COMMENT | SL_COMMENT | DOT | OTHER );";, 		}, 		@Override, 		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {, 			IntStream input = _input;, 			int _s = s;, 			switch ( s ) {, 					case 0 : , 						int LA21_0 = input.LA(1);, 						s = -1;, 						if ( (LA21_0=='a') ) {s = 1;}, 						else if ( (LA21_0=='b') ) {s = 2;}, 						else if ( (LA21_0=='c') ) {s = 3;}, 						else if ( (LA21_0=='d') ) {s = 4;}, 						else if ( (LA21_0=='e') ) {s = 5;}, 						else if ( (LA21_0=='f') ) {s = 6;}, 						else if ( (LA21_0=='g') ) {s = 7;}, 						else if ( (LA21_0=='h') ) {s = 8;}, 						else if ( (LA21_0=='i') ) {s = 9;}, 						else if ( (LA21_0=='j') ) {s = 10;}, 						else if ( (LA21_0=='k') ) {s = 11;}, 						else if ( (LA21_0=='l') ) {s = 12;}, 						else if ( (LA21_0=='m') ) {s = 13;}, 						else if ( (LA21_0=='n') ) {s = 14;}, 						else if ( (LA21_0=='o') ) {s = 15;}, 						else if ( (LA21_0=='p') ) {s = 16;}, 						else if ( (LA21_0=='r') ) {s = 17;}, 						else if ( (LA21_0=='s') ) {s = 18;}, 						else if ( (LA21_0=='t') ) {s = 19;}, 						else if ( (LA21_0=='u') ) {s = 20;}, 						else if ( (LA21_0=='v') ) {s = 21;}, 						else if ( (LA21_0=='w') ) {s = 22;}, 						else if ( (LA21_0=='/') ) {s = 23;}, 						else if ( (LA21_0=='*') ) {s = 24;}, 						else if ( (LA21_0=='-') ) {s = 25;}, 						else if ( (LA21_0==':') ) {s = 26;}, 						else if ( (LA21_0=='E') ) {s = 27;}, 						else if ( (LA21_0=='\"') ) {s = 28;}, 						else if ( ((LA21_0 >= '0' && LA21_0 <= '9')) ) {s = 29;}, 						else if ( (LA21_0=='.') ) {s = 30;}, 						else if ( ((LA21_0 >= 'A' && LA21_0 <= 'D')||(LA21_0 >= 'F' && LA21_0 <= 'Z')||LA21_0=='q'||(LA21_0 >= 'x' && LA21_0 <= 'z')) ) {s = 31;}, 						else if ( (LA21_0=='=') ) {s = 32;}, 						else if ( (LA21_0=='<') ) {s = 33;}, 						else if ( (LA21_0=='>') ) {s = 34;}, 						else if ( (LA21_0=='!') ) {s = 35;}, 						else if ( (LA21_0=='|') ) {s = 36;}, 						else if ( (LA21_0==',') ) {s = 37;}, 						else if ( (LA21_0=='(') ) {s = 38;}, 						else if ( (LA21_0==')') ) {s = 39;}, 						else if ( (LA21_0==';') ) {s = 40;}, 						else if ( (LA21_0=='?') ) {s = 41;}, 						else if ( (LA21_0=='[') ) {s = 42;}, 						else if ( (LA21_0==']') ) {s = 43;}, 						else if ( (LA21_0=='{') ) {s = 44;}, 						else if ( (LA21_0=='}') ) {s = 45;}, 						else if ( (LA21_0=='@') ) {s = 46;}, 						else if ( (LA21_0=='~') ) {s = 47;}, 						else if ( (LA21_0=='+') ) {s = 48;}, 						else if ( (LA21_0=='%') ) {s = 49;}, 						else if ( (LA21_0=='\'') ) {s = 50;}, 						else if ( (LA21_0=='\t'||LA21_0==' ') ) {s = 51;}, 						else if ( (LA21_0=='\n'||LA21_0=='\r') ) {s = 52;}, 						else if ( ((LA21_0 >= '\u0000' && LA21_0 <= '\b')||(LA21_0 >= '\u000B' && LA21_0 <= '\f')||(LA21_0 >= '\u000E' && LA21_0 <= '\u001F')||(LA21_0 >= '#' && LA21_0 <= '$')||LA21_0=='&'||LA21_0=='\\'||(LA21_0 >= '^' && LA21_0 <= '`')||(LA21_0 >= '\u007F' && LA21_0 <= '\uFFFF')) ) {s = 53;}, 						if ( s>=0 ) return s;, 						break;, , 					case 1 : , 						int LA21_124 = input.LA(1);, 						s = -1;, 						if ( ((LA21_124 >= '\u0000' && LA21_124 <= '\uFFFF')) ) {s = 259;}, 						else s = 258;, 						if ( s>=0 ) return s;, 						break;, , 					case 2 : , 						int LA21_255 = input.LA(1);, 						s = -1;, 						if ( ((LA21_255 >= '\u0000' && LA21_255 <= '\uFFFF')) ) {s = 356;}, 						else s = 355;, 						if ( s>=0 ) return s;, 						break;, , 					case 3 : , 						int LA21_128 = input.LA(1);, 						s = -1;, 						if ( ((LA21_128 >= '\u0000' && LA21_128 <= '\uFFFF')) ) {s = 259;}, 						else s = 260;, 						if ( s>=0 ) return s;, 						break;, , 					case 4 : , 						int LA21_50 = input.LA(1);, 						s = -1;, 						if ( ((LA21_50 >= '\u0000' && LA21_50 <= '\uFFFF')) ) {s = 160;}, 						else s = 53;, 						if ( s>=0 ) return s;, 						break;, , 					case 5 : , 						int LA21_28 = input.LA(1);, 						s = -1;, 						if ( ((LA21_28 >= '\u0000' && LA21_28 <= '\uFFFF')) ) {s = 60;}, 						else s = 132;, 						if ( s>=0 ) return s;, 						break;, , 					case 6 : , 						int LA21_123 = input.LA(1);, 						s = -1;, 						if ( (LA21_123=='+') ) {s = 255;}, 						else if ( ((LA21_123 >= '\u0000' && LA21_123 <= '*')||(LA21_123 >= ',' && LA21_123 <= '\uFFFF')) ) {s = 257;}, 						else s = 256;, 						if ( s>=0 ) return s;, 						break;, 			}, 			NoViableAltException nvae =, 				new NoViableAltException(getDescription(), 21, _s, input);, 			error(nvae);, 			throw nvae;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/parse/PhoenixSQLLexer.java,,5305-5318,[		public DFA9(BaseRecognizer recognizer) {, 			this.recognizer = recognizer;, 			this.decisionNumber = 9;, 			this.eot = DFA9_eot;, 			this.eof = DFA9_eof;, 			this.min = DFA9_min;, 			this.max = DFA9_max;, 			this.accept = DFA9_accept;, 			this.special = DFA9_special;, 			this.transition = DFA9_transition;, 		}, 		@Override, 		public String getDescription() {, 			return "1072:1: DOUBLE : ( '.' POSINTEGER Exponent | POSINTEGER '.' Exponent | POSINTEGER ( '.' ( POSINTEGER ( Exponent )? )? | Exponent ) );";],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,function_argument,8755-8755,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function_argument6792); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,function_argument,8694-8694,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function_argument6764); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,function_argument,8706-8706,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function_argument6771); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,8021-8021,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term6208); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,8343-8343,[					n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term6528); if (state.failed) return ret;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,8158-8158,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term6350); if (state.failed) return ret;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/parse/PhoenixSQLParser.java,getTokenNames,285-285,[	@Override public String[] getTokenNames() { return PhoenixSQLParser.tokenNames; }],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/parse/PhoenixSQLParser.java,,87-87,[	public static final String[] tokenNames = new String[] {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,add_expression,7403-7403,[			if (state.failed) return ret;],,add_expression,7418-7418,[					match(input,PLUS,FOLLOW_PLUS_in_add_expression5900); if (state.failed) return ret;],,add_expression,7422-7422,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,add_jars_node,3063-3063,[			match(input,ADD,FOLLOW_ADD_in_add_jars_node3002); if (state.failed) return ret;],,add_jars_node,3064-3064,[			match(input,JARS,FOLLOW_JARS_in_add_jars_node3004); if (state.failed) return ret;],,add_jars_node,3068-3068,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_index_node,2686-2686,[			match(input,ALTER,FOLLOW_ALTER_in_alter_index_node2682); if (state.failed) return ret;],,alter_index_node,2687-2687,[			match(input,INDEX,FOLLOW_INDEX_in_alter_index_node2684); if (state.failed) return ret;],,alter_index_node,2698-2698,[					match(input,IF,FOLLOW_IF_in_alter_index_node2687); if (state.failed) return ret;],,alter_index_node,2708-2708,[			if (state.failed) return ret;],,alter_index_node,2699-2699,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_index_node2691); if (state.failed) return ret;],,alter_index_node,2709-2709,[			match(input,ON,FOLLOW_ON_in_alter_index_node2699); if (state.failed) return ret;],,alter_index_node,2713-2713,[			if (state.failed) return ret;],,alter_index_node,2721-2721,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_session_node,3165-3165,[			match(input,ALTER,FOLLOW_ALTER_in_alter_session_node3092); if (state.failed) return ret;],,alter_session_node,3166-3166,[			match(input,SESSION,FOLLOW_SESSION_in_alter_session_node3094); if (state.failed) return ret;],,alter_session_node,3170-3170,[			match(input,SET,FOLLOW_SET_in_alter_session_node3097); if (state.failed) return ret;],,alter_session_node,3174-3174,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,alter_table_node,3212-3212,[			match(input,ALTER,FOLLOW_ALTER_in_alter_table_node3135); if (state.failed) return ret;],,alter_table_node,3224-3224,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,3234-3234,[					match(input,TABLE,FOLLOW_TABLE_in_alter_table_node3138); if (state.failed) return ret;],,alter_table_node,3240-3240,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_alter_table_node3144); if (state.failed) return ret;],,alter_table_node,3249-3249,[			if (state.failed) return ret;],,alter_table_node,3269-3269,[				if (state.backtracking>0) {state.failed=true; return ret;}],,alter_table_node,3281-3281,[					match(input,DROP,FOLLOW_DROP_in_alter_table_node3162); if (state.failed) return ret;],,alter_table_node,3314-3314,[					match(input,ADD,FOLLOW_ADD_in_alter_table_node3183); if (state.failed) return ret;],,alter_table_node,3371-3371,[					match(input,SET,FOLLOW_SET_in_alter_table_node3213); if (state.failed) return ret;],,alter_table_node,3282-3282,[					match(input,COLUMN,FOLLOW_COLUMN_in_alter_table_node3164); if (state.failed) return ret;],,alter_table_node,3325-3325,[							match(input,IF,FOLLOW_IF_in_alter_table_node3186); if (state.failed) return ret;],,alter_table_node,3378-3378,[					if (state.failed) return ret;],,alter_table_node,3293-3293,[							match(input,IF,FOLLOW_IF_in_alter_table_node3167); if (state.failed) return ret;],,alter_table_node,3326-3326,[							match(input,NOT,FOLLOW_NOT_in_alter_table_node3188); if (state.failed) return ret;],,alter_table_node,3339-3339,[					if (state.failed) return ret;],,alter_table_node,3303-3303,[					if (state.failed) return ret;],,alter_table_node,3294-3294,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node3171); if (state.failed) return ret;],,alter_table_node,3327-3327,[							ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_alter_table_node3192); if (state.failed) return ret;],,alter_table_node,3355-3355,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,and_expression,6285-6285,[			if (state.failed) return ret;],,and_expression,6300-6300,[					match(input,AND,FOLLOW_AND_in_and_expression5156); if (state.failed) return ret;],,and_expression,6304-6304,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,array_expression,7724-7724,[			if (state.failed) return ret;],,array_expression,7735-7735,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_array_expression6141); if (state.failed) return ret;],,array_expression,7739-7739,[					if (state.failed) return ret;],,array_expression,7740-7740,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_array_expression6147); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_expression,7334-7334,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,9452-9452,[				if (state.backtracking>0) {state.failed=true; return ret;}],,bind_name,9469-9469,[					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name7270); if (state.failed) return ret;],,bind_name,9462-9462,[					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name7257); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,7292-7292,[					match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression5797); if (state.failed) return ret;],,boolean_expression,7293-7293,[					match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5799); if (state.failed) return ret;],,boolean_expression,6679-6679,[					if (state.failed) return ret;],,boolean_expression,6666-6666,[				if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6741-6741,[						if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7037-7037,[							match(input,IS,FOLLOW_IS_in_boolean_expression5421); if (state.failed) return ret;],,boolean_expression,7297-7297,[					if (state.failed) return ret;],,boolean_expression,7298-7298,[					match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5805); if (state.failed) return ret;],,boolean_expression,6756-6756,[							if (state.failed) return ret;],,boolean_expression,7076-7076,[									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression5459); if (state.failed) return ret;],,boolean_expression,7106-7106,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7054-7054,[							match(input,NULL,FOLLOW_NULL_in_boolean_expression5428); if (state.failed) return ret;],,boolean_expression,7118-7118,[									match(input,LIKE,FOLLOW_LIKE_in_boolean_expression5464); if (state.failed) return ret;],,boolean_expression,7134-7134,[									match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression5506); if (state.failed) return ret;],,boolean_expression,7150-7150,[									match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression5548); if (state.failed) return ret;],,boolean_expression,7174-7174,[									match(input,IN,FOLLOW_IN_in_boolean_expression5597); if (state.failed) return ret;],,boolean_expression,7048-7048,[									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression5425); if (state.failed) return ret;],,boolean_expression,6894-6894,[								if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6915-6915,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5336); if (state.failed) return ret;],,boolean_expression,6835-6835,[									if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6879-6879,[									if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7234-7234,[											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5644); if (state.failed) return ret;],,boolean_expression,7251-7251,[											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5691); if (state.failed) return ret;],,boolean_expression,7206-7206,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6942-6942,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6991-6991,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7122-7122,[									if (state.failed) return ret;],,boolean_expression,7138-7138,[									if (state.failed) return ret;],,boolean_expression,7154-7154,[									if (state.failed) return ret;],,boolean_expression,6964-6964,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5360); if (state.failed) return ret;],,boolean_expression,7013-7013,[									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5385); if (state.failed) return ret;],,boolean_expression,6906-6906,[									if (state.failed) return ret;],,boolean_expression,6952-6952,[											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression5351); if (state.failed) return ret;],,boolean_expression,6958-6958,[											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression5357); if (state.failed) return ret;],,boolean_expression,7001-7001,[											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression5376); if (state.failed) return ret;],,boolean_expression,7007-7007,[											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression5382); if (state.failed) return ret;],,boolean_expression,7155-7155,[									match(input,AND,FOLLOW_AND_in_boolean_expression5554); if (state.failed) return ret;],,boolean_expression,7222-7222,[											if (state.failed) return ret;],,boolean_expression,6919-6919,[									if (state.failed) return ret;],,boolean_expression,7238-7238,[											if (state.failed) return ret;],,boolean_expression,7255-7255,[											if (state.failed) return ret;],,boolean_expression,6920-6920,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5342); if (state.failed) return ret;],,boolean_expression,6968-6968,[									if (state.failed) return ret;],,boolean_expression,7017-7017,[									if (state.failed) return ret;],,boolean_expression,6791-6791,[									if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6818-6818,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,6862-6862,[										if (state.backtracking>0) {state.failed=true; return ret;}],,boolean_expression,7239-7239,[											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5650); if (state.failed) return ret;],,boolean_expression,7256-7256,[											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5697); if (state.failed) return ret;],,boolean_expression,7159-7159,[									if (state.failed) return ret;],,boolean_expression,6969-6969,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5366); if (state.failed) return ret;],,boolean_expression,7018-7018,[									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5391); if (state.failed) return ret;],,boolean_expression,7191-7191,[											if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,9597-9597,[				if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9607-9607,[					match(input,CASE,FOLLOW_CASE_in_case_statement7353); if (state.failed) return ret;],,case_statement,9677-9677,[					match(input,CASE,FOLLOW_CASE_in_case_statement7397); if (state.failed) return ret;],,case_statement,9692-9692,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement7400); if (state.failed) return ret;],,case_statement,9611-9611,[					if (state.failed) return ret;],,case_statement,9708-9708,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9582-9582,[					if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9725-9725,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement7417); if (state.failed) return ret;],,case_statement,9736-9736,[					match(input,END,FOLLOW_END_in_case_statement7427); if (state.failed) return ret;],,case_statement,9626-9626,[							match(input,WHEN,FOLLOW_WHEN_in_case_statement7360); if (state.failed) return ret;],,case_statement,9696-9696,[							if (state.failed) return ret;],,case_statement,9642-9642,[							if (state.backtracking>0) {state.failed=true; return ret;}],,case_statement,9697-9697,[							match(input,THEN,FOLLOW_THEN_in_case_statement7406); if (state.failed) return ret;],,case_statement,9659-9659,[							match(input,ELSE,FOLLOW_ELSE_in_case_statement7377); if (state.failed) return ret;],,case_statement,9670-9670,[					match(input,END,FOLLOW_END_in_case_statement7387); if (state.failed) return ret;],,case_statement,9729-9729,[							if (state.failed) return ret;],,case_statement,9630-9630,[							if (state.failed) return ret;],,case_statement,9631-9631,[							match(input,THEN,FOLLOW_THEN_in_case_statement7366); if (state.failed) return ret;],,case_statement,9701-9701,[							if (state.failed) return ret;],,case_statement,9663-9663,[							if (state.failed) return ret;],,case_statement,9635-9635,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,col_name_with_sort_order_rowtimestamp,1943-1943,[			if (state.failed) return ret;],,col_name_with_sort_order_rowtimestamp,1957-1957,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_col_name_with_sort_order_rowtimestamp2194); if (state.failed) return ret;],,col_name_with_sort_order_rowtimestamp,1963-1963,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_col_name_with_sort_order_rowtimestamp2198); if (state.failed) return ret;],,col_name_with_sort_order_rowtimestamp,1979-1979,[					rr=(Token)match(input,ROW_TIMESTAMP,FOLLOW_ROW_TIMESTAMP_in_col_name_with_sort_order_rowtimestamp2205); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_def,3709-3709,[			if (state.failed) return ret;],,column_def,3713-3713,[			if (state.failed) return ret;],,column_def,3724-3724,[					match(input,LPAREN,FOLLOW_LPAREN_in_column_def3450); if (state.failed) return ret;],,column_def,3759-3759,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_column_def3471); if (state.failed) return ret;],,column_def,3725-3725,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def3454); if (state.failed) return ret;],,column_def,3775-3775,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_column_def3477); if (state.failed) return ret;],,column_def,3736-3736,[							match(input,COMMA,FOLLOW_COMMA_in_column_def3457); if (state.failed) return ret;],,column_def,3743-3743,[					match(input,RPAREN,FOLLOW_RPAREN_in_column_def3465); if (state.failed) return ret;],,column_def,3818-3818,[							nn=(Token)match(input,NOT,FOLLOW_NOT_in_column_def3493); if (state.failed) return ret;],,column_def,3824-3824,[					n=(Token)match(input,NULL,FOLLOW_NULL_in_column_def3498); if (state.failed) return ret;],,column_def,3840-3840,[					pk=(Token)match(input,PRIMARY,FOLLOW_PRIMARY_in_column_def3505); if (state.failed) return ret;],,column_def,3792-3792,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_column_def3486); if (state.failed) return ret;],,column_def,3786-3786,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def3482); if (state.failed) return ret;],,column_def,3737-3737,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_column_def3461); if (state.failed) return ret;],,column_def,3841-3841,[					match(input,KEY,FOLLOW_KEY_in_column_def3507); if (state.failed) return ret;],,column_def,3855-3855,[							order=(Token)match(input,ASC,FOLLOW_ASC_in_column_def3512); if (state.failed) return ret;],,column_def,3861-3861,[							order=(Token)match(input,DESC,FOLLOW_DESC_in_column_def3516); if (state.failed) return ret;],,column_def,3877-3877,[							rr=(Token)match(input,ROW_TIMESTAMP,FOLLOW_ROW_TIMESTAMP_in_column_def3522); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2396-2396,[				if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2381-2381,[					if (state.backtracking>0) {state.failed=true; return ret;}],,column_name,2409-2409,[					if (state.failed) return ret;],,column_name,2419-2419,[					if (state.failed) return ret;],,column_name,2420-2420,[					match(input,DOT,FOLLOW_DOT_in_column_name2494); if (state.failed) return ret;],,column_name,2424-2424,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,comparison_op,6561-6561,[				if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,6570-6570,[					match(input,EQ,FOLLOW_EQ_in_comparison_op5250); if (state.failed) return ret;],,comparison_op,6577-6577,[					match(input,LT,FOLLOW_LT_in_comparison_op5257); if (state.failed) return ret;],,comparison_op,6584-6584,[					match(input,GT,FOLLOW_GT_in_comparison_op5264); if (state.failed) return ret;],,comparison_op,6591-6591,[					match(input,LT,FOLLOW_LT_in_comparison_op5271); if (state.failed) return ret;],,comparison_op,6599-6599,[					match(input,GT,FOLLOW_GT_in_comparison_op5280); if (state.failed) return ret;],,comparison_op,6613-6613,[						if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,6592-6592,[					match(input,EQ,FOLLOW_EQ_in_comparison_op5273); if (state.failed) return ret;],,comparison_op,6600-6600,[					match(input,EQ,FOLLOW_EQ_in_comparison_op5282); if (state.failed) return ret;],,comparison_op,6540-6540,[					if (state.backtracking>0) {state.failed=true; return ret;}],,comparison_op,6515-6515,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,concat_expression,7529-7529,[			if (state.failed) return ret;],,concat_expression,7544-7544,[					match(input,CONCAT,FOLLOW_CONCAT_in_concat_expression5988); if (state.failed) return ret;],,concat_expression,7548-7548,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_function_node,2852-2852,[			match(input,CREATE,FOLLOW_CREATE_in_create_function_node2823); if (state.failed) return ret;],,create_function_node,2863-2863,[					match(input,OR,FOLLOW_OR_in_create_function_node2826); if (state.failed) return ret;],,create_function_node,2886-2886,[			match(input,FUNCTION,FOLLOW_FUNCTION_in_create_function_node2841); if (state.failed) return ret;],,create_function_node,2880-2880,[					temp=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_function_node2837); if (state.failed) return ret;],,create_function_node,2864-2864,[					replace=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_create_function_node2830); if (state.failed) return ret;],,create_function_node,2890-2890,[			if (state.failed) return ret;],,create_function_node,2894-2894,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_function_node2856); if (state.failed) return ret;],,create_function_node,2898-2898,[			if (state.failed) return ret;],,create_function_node,2899-2899,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_function_node2862); if (state.failed) return ret;],,create_function_node,2902-2902,[			match(input,RETURNS,FOLLOW_RETURNS_in_create_function_node2872); if (state.failed) return ret;],,create_function_node,2906-2906,[			if (state.failed) return ret;],,create_function_node,2907-2907,[			match(input,AS,FOLLOW_AS_in_create_function_node2878); if (state.failed) return ret;],,create_function_node,2914-2914,[			if (state.failed) return ret;],,create_function_node,2927-2927,[					match(input,USING,FOLLOW_USING_in_create_function_node2895); if (state.failed) return ret;],,create_function_node,2928-2928,[					match(input,JAR,FOLLOW_JAR_in_create_function_node2897); if (state.failed) return ret;],,create_function_node,2935-2935,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_index_node,1319-1319,[			match(input,CREATE,FOLLOW_CREATE_in_create_index_node1711); if (state.failed) return ret;],,create_index_node,1336-1336,[			match(input,INDEX,FOLLOW_INDEX_in_create_index_node1718); if (state.failed) return ret;],,create_index_node,1330-1330,[					l=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_create_index_node1715); if (state.failed) return ret;],,create_index_node,1347-1347,[					match(input,IF,FOLLOW_IF_in_create_index_node1721); if (state.failed) return ret;],,create_index_node,1348-1348,[					match(input,NOT,FOLLOW_NOT_in_create_index_node1723); if (state.failed) return ret;],,create_index_node,1358-1358,[			if (state.failed) return ret;],,create_index_node,1359-1359,[			match(input,ON,FOLLOW_ON_in_create_index_node1735); if (state.failed) return ret;],,create_index_node,1349-1349,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_index_node1727); if (state.failed) return ret;],,create_index_node,1363-1363,[			if (state.failed) return ret;],,create_index_node,1367-1367,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1750); if (state.failed) return ret;],,create_index_node,1371-1371,[			if (state.failed) return ret;],,create_index_node,1372-1372,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1756); if (state.failed) return ret;],,create_index_node,1385-1385,[					match(input,INCLUDE,FOLLOW_INCLUDE_in_create_index_node1768); if (state.failed) return ret;],,create_index_node,1389-1389,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_index_node1771); if (state.failed) return ret;],,create_index_node,1412-1412,[					async=(Token)match(input,ASYNC,FOLLOW_ASYNC_in_create_index_node1793); if (state.failed) return ret;],,create_index_node,1447-1447,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_index_node1821); if (state.failed) return ret;],,create_index_node,1431-1431,[					if (state.failed) return ret;],,create_index_node,1393-1393,[					if (state.failed) return ret;],,create_index_node,1448-1448,[					match(input,ON,FOLLOW_ON_in_create_index_node1823); if (state.failed) return ret;],,create_index_node,1394-1394,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_index_node1777); if (state.failed) return ret;],,create_index_node,1452-1452,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_sequence_node,1495-1495,[			match(input,CREATE,FOLLOW_CREATE_in_create_sequence_node1863); if (state.failed) return ret;],,create_sequence_node,1496-1496,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_create_sequence_node1865); if (state.failed) return ret;],,create_sequence_node,1507-1507,[					match(input,IF,FOLLOW_IF_in_create_sequence_node1869); if (state.failed) return ret;],,create_sequence_node,1508-1508,[					match(input,NOT,FOLLOW_NOT_in_create_sequence_node1871); if (state.failed) return ret;],,create_sequence_node,1518-1518,[			if (state.failed) return ret;],,create_sequence_node,1509-1509,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_sequence_node1875); if (state.failed) return ret;],,create_sequence_node,1529-1529,[					match(input,START,FOLLOW_START_in_create_sequence_node1892); if (state.failed) return ret;],,create_sequence_node,1565-1565,[					match(input,INCREMENT,FOLLOW_INCREMENT_in_create_sequence_node1912); if (state.failed) return ret;],,create_sequence_node,1601-1601,[					match(input,MINVALUE,FOLLOW_MINVALUE_in_create_sequence_node1932); if (state.failed) return ret;],,create_sequence_node,1540-1540,[							match(input,WITH,FOLLOW_WITH_in_create_sequence_node1894); if (state.failed) return ret;],,create_sequence_node,1621-1621,[					match(input,MAXVALUE,FOLLOW_MAXVALUE_in_create_sequence_node1949); if (state.failed) return ret;],,create_sequence_node,1576-1576,[							match(input,BY,FOLLOW_BY_in_create_sequence_node1914); if (state.failed) return ret;],,create_sequence_node,1549-1549,[					if (state.failed) return ret;],,create_sequence_node,1641-1641,[					cyc=(Token)match(input,CYCLE,FOLLOW_CYCLE_in_create_sequence_node1968); if (state.failed) return ret;],,create_sequence_node,1585-1585,[					if (state.failed) return ret;],,create_sequence_node,1605-1605,[					if (state.failed) return ret;],,create_sequence_node,1657-1657,[					match(input,CACHE,FOLLOW_CACHE_in_create_sequence_node1982); if (state.failed) return ret;],,create_sequence_node,1625-1625,[					if (state.failed) return ret;],,create_sequence_node,1661-1661,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_table_node,1025-1025,[			match(input,CREATE,FOLLOW_CREATE_in_create_table_node1453); if (state.failed) return ret;],,create_table_node,1026-1026,[			match(input,TABLE,FOLLOW_TABLE_in_create_table_node1455); if (state.failed) return ret;],,create_table_node,1037-1037,[					match(input,IF,FOLLOW_IF_in_create_table_node1458); if (state.failed) return ret;],,create_table_node,1038-1038,[					match(input,NOT,FOLLOW_NOT_in_create_table_node1460); if (state.failed) return ret;],,create_table_node,1048-1048,[			if (state.failed) return ret;],,create_table_node,1052-1052,[			match(input,LPAREN,FOLLOW_LPAREN_in_create_table_node1482); if (state.failed) return ret;],,create_table_node,1039-1039,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_node1464); if (state.failed) return ret;],,create_table_node,1056-1056,[			if (state.failed) return ret;],,create_table_node,1076-1076,[			match(input,RPAREN,FOLLOW_RPAREN_in_create_table_node1495); if (state.failed) return ret;],,create_table_node,1070-1070,[					if (state.failed) return ret;],,create_table_node,1108-1108,[					match(input,SPLIT,FOLLOW_SPLIT_in_create_table_node1522); if (state.failed) return ret;],,create_table_node,1092-1092,[					if (state.failed) return ret;],,create_table_node,1109-1109,[					match(input,ON,FOLLOW_ON_in_create_table_node1524); if (state.failed) return ret;],,create_table_node,1113-1113,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,create_view_node,1155-1155,[			match(input,CREATE,FOLLOW_CREATE_in_create_view_node1564); if (state.failed) return ret;],,create_view_node,1156-1156,[			match(input,VIEW,FOLLOW_VIEW_in_create_view_node1566); if (state.failed) return ret;],,create_view_node,1167-1167,[					match(input,IF,FOLLOW_IF_in_create_view_node1569); if (state.failed) return ret;],,create_view_node,1168-1168,[					match(input,NOT,FOLLOW_NOT_in_create_view_node1571); if (state.failed) return ret;],,create_view_node,1178-1178,[			if (state.failed) return ret;],,create_view_node,1169-1169,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_view_node1575); if (state.failed) return ret;],,create_view_node,1189-1189,[					match(input,LPAREN,FOLLOW_LPAREN_in_create_view_node1593); if (state.failed) return ret;],,create_view_node,1229-1229,[					match(input,AS,FOLLOW_AS_in_create_view_node1620); if (state.failed) return ret;],,create_view_node,1230-1230,[					match(input,SELECT,FOLLOW_SELECT_in_create_view_node1622); if (state.failed) return ret;],,create_view_node,1193-1193,[					if (state.failed) return ret;],,create_view_node,1231-1231,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_create_view_node1624); if (state.failed) return ret;],,create_view_node,1275-1275,[					if (state.failed) return ret;],,create_view_node,1232-1232,[					match(input,FROM,FOLLOW_FROM_in_create_view_node1636); if (state.failed) return ret;],,create_view_node,1213-1213,[					match(input,RPAREN,FOLLOW_RPAREN_in_create_view_node1606); if (state.failed) return ret;],,create_view_node,1207-1207,[							if (state.failed) return ret;],,create_view_node,1236-1236,[					if (state.failed) return ret;],,create_view_node,1247-1247,[							match(input,WHERE,FOLLOW_WHERE_in_create_view_node1653); if (state.failed) return ret;],,create_view_node,1251-1251,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,delete_jar_node,3129-3129,[			match(input,DELETE,FOLLOW_DELETE_in_delete_jar_node3058); if (state.failed) return ret;],,delete_jar_node,3130-3130,[			match(input,JAR,FOLLOW_JAR_in_delete_jar_node3060); if (state.failed) return ret;],,delete_jar_node,3134-3134,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,delete_node,4803-4803,[			match(input,DELETE,FOLLOW_DELETE_in_delete_node4206); if (state.failed) return ret;],,delete_node,4823-4823,[			match(input,FROM,FOLLOW_FROM_in_delete_node4215); if (state.failed) return ret;],,delete_node,4817-4817,[					if (state.failed) return ret;],,delete_node,4827-4827,[			if (state.failed) return ret;],,delete_node,4838-4838,[					match(input,WHERE,FOLLOW_WHERE_in_delete_node4230); if (state.failed) return ret;],,delete_node,4858-4858,[					match(input,ORDER,FOLLOW_ORDER_in_delete_node4247); if (state.failed) return ret;],,delete_node,4879-4879,[					match(input,LIMIT,FOLLOW_LIMIT_in_delete_node4266); if (state.failed) return ret;],,delete_node,4859-4859,[					match(input,BY,FOLLOW_BY_in_delete_node4249); if (state.failed) return ret;],,delete_node,4842-4842,[					if (state.failed) return ret;],,delete_node,4883-4883,[					if (state.failed) return ret;],,delete_node,4863-4863,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_function_node,3010-3010,[			match(input,DROP,FOLLOW_DROP_in_drop_function_node2964); if (state.failed) return ret;],,drop_function_node,3011-3011,[			match(input,FUNCTION,FOLLOW_FUNCTION_in_drop_function_node2966); if (state.failed) return ret;],,drop_function_node,3022-3022,[					match(input,IF,FOLLOW_IF_in_drop_function_node2969); if (state.failed) return ret;],,drop_function_node,3032-3032,[			if (state.failed) return ret;],,drop_function_node,3023-3023,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_function_node2973); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_index_node,2625-2625,[			match(input,DROP,FOLLOW_DROP_in_drop_index_node2631); if (state.failed) return ret;],,drop_index_node,2626-2626,[			match(input,INDEX,FOLLOW_INDEX_in_drop_index_node2633); if (state.failed) return ret;],,drop_index_node,2637-2637,[					match(input,IF,FOLLOW_IF_in_drop_index_node2636); if (state.failed) return ret;],,drop_index_node,2647-2647,[			if (state.failed) return ret;],,drop_index_node,2638-2638,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_index_node2640); if (state.failed) return ret;],,drop_index_node,2648-2648,[			match(input,ON,FOLLOW_ON_in_drop_index_node2648); if (state.failed) return ret;],,drop_index_node,2652-2652,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_sequence_node,1763-1763,[			match(input,DROP,FOLLOW_DROP_in_drop_sequence_node2055); if (state.failed) return ret;],,drop_sequence_node,1764-1764,[			match(input,SEQUENCE,FOLLOW_SEQUENCE_in_drop_sequence_node2057); if (state.failed) return ret;],,drop_sequence_node,1775-1775,[					match(input,IF,FOLLOW_IF_in_drop_sequence_node2061); if (state.failed) return ret;],,drop_sequence_node,1785-1785,[			if (state.failed) return ret;],,drop_sequence_node,1776-1776,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_sequence_node2065); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,drop_table_node,2522-2522,[			match(input,DROP,FOLLOW_DROP_in_drop_table_node2569); if (state.failed) return ret;],,drop_table_node,2534-2534,[				if (state.backtracking>0) {state.failed=true; return ret;}],,drop_table_node,2550-2550,[					match(input,TABLE,FOLLOW_TABLE_in_drop_table_node2578); if (state.failed) return ret;],,drop_table_node,2544-2544,[					v=(Token)match(input,VIEW,FOLLOW_VIEW_in_drop_table_node2574); if (state.failed) return ret;],,drop_table_node,2566-2566,[					match(input,IF,FOLLOW_IF_in_drop_table_node2582); if (state.failed) return ret;],,drop_table_node,2576-2576,[			if (state.failed) return ret;],,drop_table_node,2567-2567,[					ex=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_node2586); if (state.failed) return ret;],,drop_table_node,2587-2587,[					c=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_drop_table_node2597); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_def,3994-3994,[			if (state.failed) return ret;],,dyn_column_def,3998-3998,[			if (state.failed) return ret;],,dyn_column_def,4009-4009,[					match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_def3610); if (state.failed) return ret;],,dyn_column_def,4044-4044,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_def3631); if (state.failed) return ret;],,dyn_column_def,4010-4010,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def3614); if (state.failed) return ret;],,dyn_column_def,4060-4060,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_def3637); if (state.failed) return ret;],,dyn_column_def,4021-4021,[							match(input,COMMA,FOLLOW_COMMA_in_dyn_column_def3617); if (state.failed) return ret;],,dyn_column_def,4028-4028,[					match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_def3625); if (state.failed) return ret;],,dyn_column_def,4077-4077,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_def3646); if (state.failed) return ret;],,dyn_column_def,4071-4071,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def3642); if (state.failed) return ret;],,dyn_column_def,4022-4022,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_def3621); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,dyn_column_name_or_def,4127-4127,[			if (state.failed) return ret;],,dyn_column_name_or_def,4141-4141,[					if (state.failed) return ret;],,dyn_column_name_or_def,4152-4152,[							match(input,LPAREN,FOLLOW_LPAREN_in_dyn_column_name_or_def3691); if (state.failed) return ret;],,dyn_column_name_or_def,4187-4187,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_dyn_column_name_or_def3712); if (state.failed) return ret;],,dyn_column_name_or_def,4153-4153,[							l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3695); if (state.failed) return ret;],,dyn_column_name_or_def,4203-4203,[							lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_dyn_column_name_or_def3718); if (state.failed) return ret;],,dyn_column_name_or_def,4164-4164,[									match(input,COMMA,FOLLOW_COMMA_in_dyn_column_name_or_def3698); if (state.failed) return ret;],,dyn_column_name_or_def,4171-4171,[							match(input,RPAREN,FOLLOW_RPAREN_in_dyn_column_name_or_def3706); if (state.failed) return ret;],,dyn_column_name_or_def,4220-4220,[							match(input,RSQUARE,FOLLOW_RSQUARE_in_dyn_column_name_or_def3727); if (state.failed) return ret;],,dyn_column_name_or_def,4214-4214,[									a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3723); if (state.failed) return ret;],,dyn_column_name_or_def,4165-4165,[									s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_dyn_column_name_or_def3702); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,explain_node,985-985,[			match(input,EXPLAIN,FOLLOW_EXPLAIN_in_explain_node1423); if (state.failed) return ret;],,explain_node,989-989,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,expression,6187-6187,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,expression_with_sort_order,2118-2118,[			if (state.failed) return ret;],,expression_with_sort_order,2134-2134,[					order=(Token)match(input,ASC,FOLLOW_ASC_in_expression_with_sort_order2312); if (state.failed) return ret;],,expression_with_sort_order,2140-2140,[					order=(Token)match(input,DESC,FOLLOW_DESC_in_expression_with_sort_order2316); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2275-2275,[				if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2260-2260,[					if (state.backtracking>0) {state.failed=true; return ret;}],,fam_prop_name,2288-2288,[					if (state.failed) return ret;],,fam_prop_name,2298-2298,[					if (state.failed) return ret;],,fam_prop_name,2299-2299,[					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2412); if (state.failed) return ret;],,fam_prop_name,2303-2303,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,9130-9130,[				if (state.backtracking>0) {state.failed=true; return ret;}],,from_table_name,9143-9143,[					if (state.failed) return ret;],,from_table_name,9153-9153,[					if (state.failed) return ret;],,from_table_name,9154-9154,[					match(input,DOT,FOLLOW_DOT_in_from_table_name7013); if (state.failed) return ret;],,from_table_name,9158-9158,[					if (state.failed) return ret;],,from_table_name,9115-9115,[					if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,function_argument,8682-8682,[			if (state.failed) return ret;],,function_argument,8693-8693,[					match(input,LPAREN,FOLLOW_LPAREN_in_function_argument6760); if (state.failed) return ret;],,function_argument,8728-8728,[					ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_function_argument6781); if (state.failed) return ret;],,function_argument,8694-8694,[					l=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function_argument6764); if (state.failed) return ret;],,function_argument,8744-8744,[					lsq=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_function_argument6787); if (state.failed) return ret;],,function_argument,8777-8777,[					c=(Token)match(input,CONSTANT,FOLLOW_CONSTANT_in_function_argument6805); if (state.failed) return ret;],,function_argument,8705-8705,[							match(input,COMMA,FOLLOW_COMMA_in_function_argument6767); if (state.failed) return ret;],,function_argument,8712-8712,[					match(input,RPAREN,FOLLOW_RPAREN_in_function_argument6775); if (state.failed) return ret;],,function_argument,8793-8793,[					match(input,DEFAULTVALUE,FOLLOW_DEFAULTVALUE_in_function_argument6810); if (state.failed) return ret;],,function_argument,8761-8761,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_function_argument6796); if (state.failed) return ret;],,function_argument,8814-8814,[					match(input,MINVALUE,FOLLOW_MINVALUE_in_function_argument6823); if (state.failed) return ret;],,function_argument,8755-8755,[							a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function_argument6792); if (state.failed) return ret;],,function_argument,8794-8794,[					match(input,EQ,FOLLOW_EQ_in_function_argument6812); if (state.failed) return ret;],,function_argument,8706-8706,[							s=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function_argument6771); if (state.failed) return ret;],,function_argument,8835-8835,[					match(input,MAXVALUE,FOLLOW_MAXVALUE_in_function_argument6837); if (state.failed) return ret;],,function_argument,8815-8815,[					match(input,EQ,FOLLOW_EQ_in_function_argument6825); if (state.failed) return ret;],,function_argument,8836-8836,[					match(input,EQ,FOLLOW_EQ_in_function_argument6839); if (state.failed) return ret;],,function_argument,8798-8798,[					if (state.failed) return ret;],,function_argument,8819-8819,[					if (state.failed) return ret;],,function_argument,8840-8840,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,hintClause,5018-5018,[			c=(Token)match(input,ML_HINT,FOLLOW_ML_HINT_in_hintClause4372); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,identifier,9505-9505,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,ik_constraint,2018-2018,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,index_name,8948-8948,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1706-1706,[				if (state.backtracking>0) {state.failed=true; return ret;}],,int_literal_or_bind,1719-1719,[					if (state.failed) return ret;],,int_literal_or_bind,1729-1729,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,int_or_long_literal,9411-9411,[			n=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_int_or_long_literal7229); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,jar_path,2978-2978,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,join_type,6008-6008,[				if (state.backtracking>0) {state.failed=true; return ret;}],,join_type,6039-6039,[					match(input,LEFT,FOLLOW_LEFT_in_join_type4974); if (state.failed) return ret;],,join_type,6062-6062,[					match(input,RIGHT,FOLLOW_RIGHT_in_join_type4991); if (state.failed) return ret;],,join_type,6085-6085,[					match(input,FULL,FOLLOW_FULL_in_join_type5007); if (state.failed) return ret;],,join_type,6027-6027,[							match(input,INNER,FOLLOW_INNER_in_join_type4959); if (state.failed) return ret;],,join_type,6050-6050,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4976); if (state.failed) return ret;],,join_type,6073-6073,[							match(input,OUTER,FOLLOW_OUTER_in_join_type4993); if (state.failed) return ret;],,join_type,6096-6096,[							match(input,OUTER,FOLLOW_OUTER_in_join_type5010); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4928-4928,[				if (state.backtracking>0) {state.failed=true; return ret;}],,limit,4941-4941,[					if (state.failed) return ret;],,limit,4951-4951,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,list_jars_node,3097-3097,[			match(input,LIST,FOLLOW_LIST_in_list_jars_node3033); if (state.failed) return ret;],,list_jars_node,3098-3098,[			match(input,JARS,FOLLOW_JARS_in_list_jars_node3035); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal,9302-9302,[				if (state.backtracking>0) {state.failed=true; return ret;}],,literal,9347-9347,[					match(input,NULL,FOLLOW_NULL_in_literal7155); if (state.failed) return ret;],,literal,9354-9354,[					match(input,TRUE,FOLLOW_TRUE_in_literal7167); if (state.failed) return ret;],,literal,9361-9361,[					match(input,FALSE,FOLLOW_FALSE_in_literal7180); if (state.failed) return ret;],,literal,9311-9311,[					s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal7095); if (state.failed) return ret;],,literal,9320-9320,[					n=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_literal7109); if (state.failed) return ret;],,literal,9329-9329,[					d=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal7123); if (state.failed) return ret;],,literal,9338-9338,[					dbl=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_literal7138); if (state.failed) return ret;],,literal,9371-9371,[					if (state.failed) return ret;],,literal,9372-9372,[					t=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal7198); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,9213-9213,[					if (state.failed) return ret;],,literal_or_bind,9223-9223,[					if (state.failed) return ret;],,literal_or_bind,9200-9200,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,multiply_divide_modulo_expression,7594-7594,[			if (state.failed) return ret;],,multiply_divide_modulo_expression,7616-7616,[						if (state.backtracking>0) {state.failed=true; return ret;}],,multiply_divide_modulo_expression,7623-7623,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,negate_expression,7680-7680,[					m=(Token)match(input,MINUS,FOLLOW_MINUS_in_negate_expression6105); if (state.failed) return ret;],,negate_expression,7689-7689,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,nextStatement,467-467,[					match(input,EOF,FOLLOW_EOF_in_nextStatement1066); if (state.failed) return ret;],,nextStatement,453-453,[					if (state.failed) return ret;],,nextStatement,440-440,[				if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,not_expression,6463-6463,[					match(input,LPAREN,FOLLOW_LPAREN_in_not_expression5224); if (state.failed) return ret;],,not_expression,6431-6431,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression5202); if (state.failed) return ret;],,not_expression,6457-6457,[							n=(Token)match(input,NOT,FOLLOW_NOT_in_not_expression5221); if (state.failed) return ret;],,not_expression,6440-6440,[					if (state.failed) return ret;],,not_expression,6467-6467,[					if (state.failed) return ret;],,not_expression,6468-6468,[					match(input,RPAREN,FOLLOW_RPAREN_in_not_expression5230); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,oneStatement,756-756,[				if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,717-717,[					if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,646-646,[					if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,684-684,[					if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,600-600,[					if (state.backtracking>0) {state.failed=true; return ret;}],,oneStatement,768-768,[					if (state.failed) return ret;],,oneStatement,777-777,[					if (state.failed) return ret;],,oneStatement,786-786,[					if (state.failed) return ret;],,oneStatement,795-795,[					if (state.failed) return ret;],,oneStatement,804-804,[					if (state.failed) return ret;],,oneStatement,813-813,[					if (state.failed) return ret;],,oneStatement,822-822,[					if (state.failed) return ret;],,oneStatement,831-831,[					if (state.failed) return ret;],,oneStatement,840-840,[					if (state.failed) return ret;],,oneStatement,849-849,[					if (state.failed) return ret;],,oneStatement,858-858,[					if (state.failed) return ret;],,oneStatement,867-867,[					if (state.failed) return ret;],,oneStatement,876-876,[					if (state.failed) return ret;],,oneStatement,885-885,[					if (state.failed) return ret;],,oneStatement,894-894,[					if (state.failed) return ret;],,oneStatement,903-903,[					if (state.failed) return ret;],,oneStatement,912-912,[					if (state.failed) return ret;],,oneStatement,921-921,[					if (state.failed) return ret;],,oneStatement,930-930,[					if (state.failed) return ret;],,oneStatement,939-939,[					if (state.failed) return ret;],,oneStatement,948-948,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,or_expression,6222-6222,[			if (state.failed) return ret;],,or_expression,6237-6237,[					match(input,OR,FOLLOW_OR_in_or_expression5111); if (state.failed) return ret;],,or_expression,6241-6241,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseAlias,6144-6144,[					match(input,AS,FOLLOW_AS_in_parseAlias5041); if (state.failed) return ret;],,parseAlias,6153-6153,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseFrom,5575-5575,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseNoReserved,9536-9536,[			n=(Token)match(input,NAME,FOLLOW_NAME_in_parseNoReserved7326); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,5461-5461,[			if (state.failed) return ret;],,parseOrderByField,5477-5477,[					match(input,ASC,FOLLOW_ASC_in_parseOrderByField4657); if (state.failed) return ret;],,parseOrderByField,5484-5484,[					match(input,DESC,FOLLOW_DESC_in_parseOrderByField4663); if (state.failed) return ret;],,parseOrderByField,5501-5501,[					match(input,NULLS,FOLLOW_NULLS_in_parseOrderByField4678); if (state.failed) return ret;],,parseOrderByField,5513-5513,[						if (state.backtracking>0) {state.failed=true; return ret;}],,parseOrderByField,5523-5523,[							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField4681); if (state.failed) return ret;],,parseOrderByField,5530-5530,[							match(input,LAST,FOLLOW_LAST_in_parseOrderByField4687); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,pk_constraint,1827-1827,[					match(input,COMMA,FOLLOW_COMMA_in_pk_constraint2100); if (state.failed) return ret;],,pk_constraint,1833-1833,[			match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_pk_constraint2103); if (state.failed) return ret;],,pk_constraint,1837-1837,[			if (state.failed) return ret;],,pk_constraint,1838-1838,[			match(input,PRIMARY,FOLLOW_PRIMARY_in_pk_constraint2109); if (state.failed) return ret;],,pk_constraint,1839-1839,[			match(input,KEY,FOLLOW_KEY_in_pk_constraint2111); if (state.failed) return ret;],,pk_constraint,1840-1840,[			match(input,LPAREN,FOLLOW_LPAREN_in_pk_constraint2113); if (state.failed) return ret;],,pk_constraint,1844-1844,[			if (state.failed) return ret;],,pk_constraint,1845-1845,[			match(input,RPAREN,FOLLOW_RPAREN_in_pk_constraint2119); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_name,3525-3525,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,prop_value,2339-2339,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,query,543-543,[			if (state.failed) return ret;],,query,544-544,[			match(input,EOF,FOLLOW_EOF_in_query1124); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,recoverFromMismatchedToken,349-349,[	            Object inserted = getMissingSymbol(input, e, ttype, follow);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,sampling_rate,4987-4987,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,select_node,4537-4537,[			if (state.failed) return ret;],,select_node,4548-4548,[					match(input,ORDER,FOLLOW_ORDER_in_select_node4003); if (state.failed) return ret;],,select_node,4569-4569,[					match(input,LIMIT,FOLLOW_LIMIT_in_select_node4022); if (state.failed) return ret;],,select_node,4549-4549,[					match(input,BY,FOLLOW_BY_in_select_node4005); if (state.failed) return ret;],,select_node,4573-4573,[					if (state.failed) return ret;],,select_node,4553-4553,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,5249-5249,[					if (state.failed) return ret;],,selectable,5278-5278,[					if (state.failed) return ret;],,selectable,5290-5290,[					if (state.failed) return ret;],,selectable,5279-5279,[					match(input,DOT,FOLLOW_DOT_in_selectable4476); if (state.failed) return ret;],,selectable,5291-5291,[					match(input,DOT,FOLLOW_DOT_in_selectable4495); if (state.failed) return ret;],,selectable,5236-5236,[				if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,5280-5280,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable4478); if (state.failed) return ret;],,selectable,5263-5263,[							if (state.failed) return ret;],,selectable,5295-5295,[					if (state.failed) return ret;],,selectable,5296-5296,[					match(input,DOT,FOLLOW_DOT_in_selectable4501); if (state.failed) return ret;],,selectable,5297-5297,[					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable4503); if (state.failed) return ret;],,selectable,5221-5221,[					if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,5204-5204,[						if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,5187-5187,[							if (state.backtracking>0) {state.failed=true; return ret;}],,selectable,5170-5170,[								if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,single_select,4307-4307,[			match(input,SELECT,FOLLOW_SELECT_in_single_select3800); if (state.failed) return ret;],,single_select,4346-4346,[					match(input,ALL,FOLLOW_ALL_in_single_select3825); if (state.failed) return ret;],,single_select,4321-4321,[					if (state.failed) return ret;],,single_select,4340-4340,[					d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_single_select3821); if (state.failed) return ret;],,single_select,4355-4355,[			if (state.failed) return ret;],,single_select,4366-4366,[					match(input,FROM,FOLLOW_FROM_in_single_select3842); if (state.failed) return ret;],,single_select,4386-4386,[					match(input,WHERE,FOLLOW_WHERE_in_single_select3859); if (state.failed) return ret;],,single_select,4406-4406,[					match(input,GROUP,FOLLOW_GROUP_in_single_select3876); if (state.failed) return ret;],,single_select,4370-4370,[					if (state.failed) return ret;],,single_select,4427-4427,[					match(input,HAVING,FOLLOW_HAVING_in_single_select3895); if (state.failed) return ret;],,single_select,4407-4407,[					match(input,BY,FOLLOW_BY_in_single_select3878); if (state.failed) return ret;],,single_select,4390-4390,[					if (state.failed) return ret;],,single_select,4431-4431,[					if (state.failed) return ret;],,single_select,4411-4411,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,statement,502-502,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subquery_expression,4269-4269,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,subtract_expression,7466-7466,[			if (state.failed) return ret;],,subtract_expression,7481-7481,[					match(input,MINUS,FOLLOW_MINUS_in_subtract_expression5944); if (state.failed) return ret;],,subtract_expression,7485-7485,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_factor,5783-5783,[				if (state.backtracking>0) {state.failed=true; return ret;}],,table_factor,5792-5792,[					match(input,LPAREN,FOLLOW_LPAREN_in_table_factor4834); if (state.failed) return ret;],,table_factor,5915-5915,[					match(input,LPAREN,FOLLOW_LPAREN_in_table_factor4916); if (state.failed) return ret;],,table_factor,5757-5757,[					if (state.backtracking>0) {state.failed=true; return ret;}],,table_factor,5807-5807,[					if (state.failed) return ret;],,table_factor,5852-5852,[					if (state.failed) return ret;],,table_factor,5796-5796,[					if (state.failed) return ret;],,table_factor,5919-5919,[					if (state.failed) return ret;],,table_factor,5797-5797,[					match(input,RPAREN,FOLLOW_RPAREN_in_table_factor4840); if (state.failed) return ret;],,table_factor,5920-5920,[					match(input,RPAREN,FOLLOW_RPAREN_in_table_factor4922); if (state.failed) return ret;],,table_factor,5828-5828,[									match(input,AS,FOLLOW_AS_in_table_factor4858); if (state.failed) return ret;],,table_factor,5873-5873,[									match(input,AS,FOLLOW_AS_in_table_factor4885); if (state.failed) return ret;],,table_factor,5898-5898,[							match(input,LPAREN,FOLLOW_LPAREN_in_table_factor4896); if (state.failed) return ret;],,table_factor,5837-5837,[							if (state.failed) return ret;],,table_factor,5882-5882,[							if (state.failed) return ret;],,table_factor,5941-5941,[									match(input,AS,FOLLOW_AS_in_table_factor4926); if (state.failed) return ret;],,table_factor,5902-5902,[							if (state.failed) return ret;],,table_factor,5903-5903,[							match(input,RPAREN,FOLLOW_RPAREN_in_table_factor4902); if (state.failed) return ret;],,table_factor,5950-5950,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_list,5610-5610,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,9043-9043,[				if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,9028-9028,[					if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,9011-9011,[						if (state.backtracking>0) {state.failed=true; return ret;}],,table_name,9056-9056,[					if (state.failed) return ret;],,table_name,9066-9066,[					if (state.failed) return ret;],,table_name,9067-9067,[					match(input,DOT,FOLLOW_DOT_in_table_name6965); if (state.failed) return ret;],,table_name,9071-9071,[					if (state.failed) return ret;],,table_name,8994-8994,[							if (state.backtracking>0) {state.failed=true; return ret;}],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,table_ref,5674-5674,[			if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7992-7992,[				if (state.backtracking>0) {state.failed=true; return ret;}],,term,8187-8187,[					match(input,LPAREN,FOLLOW_LPAREN_in_term6391); if (state.failed) return ret;],,term,8206-8206,[					match(input,CAST,FOLLOW_CAST_in_term6415); if (state.failed) return ret;],,term,7928-7928,[					if (state.backtracking>0) {state.failed=true; return ret;}],,term,8021-8021,[					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term6208); if (state.failed) return ret;],,term,8343-8343,[					n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term6528); if (state.failed) return ret;],,term,8305-8305,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,7912-7912,[						if (state.backtracking>0) {state.failed=true; return ret;}],,term,8207-8207,[					match(input,LPAREN,FOLLOW_LPAREN_in_term6417); if (state.failed) return ret;],,term,8321-8321,[							match(input,CURRENT,FOLLOW_CURRENT_in_term6491); if (state.failed) return ret;],,term,8327-8327,[					match(input,VALUE,FOLLOW_VALUE_in_term6494); if (state.failed) return ret;],,term,8004-8004,[					if (state.failed) return ret;],,term,8014-8014,[					if (state.failed) return ret;],,term,8037-8037,[					if (state.failed) return ret;],,term,8052-8052,[					if (state.failed) return ret;],,term,8133-8133,[					if (state.failed) return ret;],,term,8156-8156,[					if (state.failed) return ret;],,term,8180-8180,[					if (state.failed) return ret;],,term,8022-8022,[					match(input,LSQUARE,FOLLOW_LSQUARE_in_term6210); if (state.failed) return ret;],,term,8315-8315,[							n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term6487); if (state.failed) return ret;],,term,8328-8328,[					match(input,FOR,FOLLOW_FOR_in_term6496); if (state.failed) return ret;],,term,8038-8038,[					match(input,DOT,FOLLOW_DOT_in_term6232); if (state.failed) return ret;],,term,8053-8053,[					match(input,LPAREN,FOLLOW_LPAREN_in_term6252); if (state.failed) return ret;],,term,8134-8134,[					match(input,LPAREN,FOLLOW_LPAREN_in_term6314); if (state.failed) return ret;],,term,8157-8157,[					match(input,LPAREN,FOLLOW_LPAREN_in_term6346); if (state.failed) return ret;],,term,8191-8191,[					if (state.failed) return ret;],,term,7972-7972,[					if (state.backtracking>0) {state.failed=true; return ret;}],,term,8349-8349,[					if (state.failed) return ret;],,term,8192-8192,[					match(input,RPAREN,FOLLOW_RPAREN_in_term6397); if (state.failed) return ret;],,term,8211-8211,[					if (state.failed) return ret;],,term,8026-8026,[					if (state.failed) return ret;],,term,8135-8135,[					t=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_term6318); if (state.failed) return ret;],,term,8158-8158,[					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term6350); if (state.failed) return ret;],,term,8350-8350,[					match(input,VALUES,FOLLOW_VALUES_in_term6535); if (state.failed) return ret;],,term,8212-8212,[					match(input,AS,FOLLOW_AS_in_term6423); if (state.failed) return ret;],,term,8332-8332,[					if (state.failed) return ret;],,term,8042-8042,[					if (state.failed) return ret;],,term,8057-8057,[					if (state.failed) return ret;],,term,8027-8027,[					match(input,RSQUARE,FOLLOW_RSQUARE_in_term6216); if (state.failed) return ret;],,term,8136-8136,[					match(input,RPAREN,FOLLOW_RPAREN_in_term6320); if (state.failed) return ret;],,term,8351-8351,[					match(input,FOR,FOLLOW_FOR_in_term6537); if (state.failed) return ret;],,term,8058-8058,[					match(input,RPAREN,FOLLOW_RPAREN_in_term6258); if (state.failed) return ret;],,term,8162-8162,[					if (state.failed) return ret;],,term,8216-8216,[					if (state.failed) return ret;],,term,8163-8163,[					match(input,RPAREN,FOLLOW_RPAREN_in_term6356); if (state.failed) return ret;],,term,8355-8355,[					if (state.failed) return ret;],,term,8069-8069,[							wg=(Token)match(input,WITHIN,FOLLOW_WITHIN_in_term6263); if (state.failed) return ret;],,term,8227-8227,[							match(input,LPAREN,FOLLOW_LPAREN_in_term6430); if (state.failed) return ret;],,term,8070-8070,[							wg=(Token)match(input,GROUP,FOLLOW_GROUP_in_term6265); if (state.failed) return ret;],,term,8283-8283,[					match(input,RPAREN,FOLLOW_RPAREN_in_term6464); if (state.failed) return ret;],,term,8228-8228,[							length=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term6434); if (state.failed) return ret;],,term,8265-8265,[							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term6452); if (state.failed) return ret;],,term,8274-8274,[							ar=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_term6457); if (state.failed) return ret;],,term,8071-8071,[							wg=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_term6267); if (state.failed) return ret;],,term,8275-8275,[							ar=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_term6459); if (state.failed) return ret;],,term,8239-8239,[									match(input,COMMA,FOLLOW_COMMA_in_term6437); if (state.failed) return ret;],,term,8246-8246,[							match(input,RPAREN,FOLLOW_RPAREN_in_term6445); if (state.failed) return ret;],,term,8072-8072,[							wg=(Token)match(input,ORDER,FOLLOW_ORDER_in_term6269); if (state.failed) return ret;],,term,8240-8240,[									scale=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term6441); if (state.failed) return ret;],,term,8073-8073,[							wg=(Token)match(input,BY,FOLLOW_BY_in_term6271); if (state.failed) return ret;],,term,8077-8077,[							if (state.failed) return ret;],,term,8089-8089,[								if (state.backtracking>0) {state.failed=true; return ret;}],,term,8099-8099,[									a=(Token)match(input,ASC,FOLLOW_ASC_in_term6280); if (state.failed) return ret;],,term,8105-8105,[									wg=(Token)match(input,DESC,FOLLOW_DESC_in_term6284); if (state.failed) return ret;],,term,8111-8111,[							wg=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_term6287); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,trace_node,2756-2756,[			match(input,TRACE,FOLLOW_TRACE_in_trace_node2757); if (state.failed) return ret;],,trace_node,2768-2768,[				if (state.backtracking>0) {state.failed=true; return ret;}],,trace_node,2781-2781,[					flag=(Token)match(input,ON,FOLLOW_ON_in_trace_node2765); if (state.failed) return ret;],,trace_node,2810-2810,[					flag=(Token)match(input,OFF,FOLLOW_OFF_in_trace_node2789); if (state.failed) return ret;],,trace_node,2792-2792,[							match(input,WITH,FOLLOW_WITH_in_trace_node2770); if (state.failed) return ret;],,trace_node,2793-2793,[							match(input,SAMPLING,FOLLOW_SAMPLING_in_trace_node2772); if (state.failed) return ret;],,trace_node,2797-2797,[							if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,update_statistics_node,3420-3420,[			match(input,UPDATE,FOLLOW_UPDATE_in_update_statistics_node3252); if (state.failed) return ret;],,update_statistics_node,3421-3421,[			match(input,STATISTICS,FOLLOW_STATISTICS_in_update_statistics_node3254); if (state.failed) return ret;],,update_statistics_node,3425-3425,[			if (state.failed) return ret;],,update_statistics_node,3449-3449,[					s=(Token)match(input,INDEX,FOLLOW_INDEX_in_update_statistics_node3263); if (state.failed) return ret;],,update_statistics_node,3455-3455,[					s=(Token)match(input,ALL,FOLLOW_ALL_in_update_statistics_node3269); if (state.failed) return ret;],,update_statistics_node,3461-3461,[					s=(Token)match(input,COLUMNS,FOLLOW_COLUMNS_in_update_statistics_node3275); if (state.failed) return ret;],,update_statistics_node,3477-3477,[					match(input,SET,FOLLOW_SET_in_update_statistics_node3280); if (state.failed) return ret;],,update_statistics_node,3484-3484,[					if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,upsert_node,4614-4614,[			match(input,UPSERT,FOLLOW_UPSERT_in_upsert_node4065); if (state.failed) return ret;],,upsert_node,4634-4634,[			match(input,INTO,FOLLOW_INTO_in_upsert_node4074); if (state.failed) return ret;],,upsert_node,4628-4628,[					if (state.failed) return ret;],,upsert_node,4638-4638,[			if (state.failed) return ret;],,upsert_node,4649-4649,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node4089); if (state.failed) return ret;],,upsert_node,4671-4671,[				if (state.backtracking>0) {state.failed=true; return ret;}],,upsert_node,4684-4684,[					match(input,VALUES,FOLLOW_VALUES_in_upsert_node4109); if (state.failed) return ret;],,upsert_node,4685-4685,[					match(input,LPAREN,FOLLOW_LPAREN_in_upsert_node4111); if (state.failed) return ret;],,upsert_node,4653-4653,[					if (state.failed) return ret;],,upsert_node,4701-4701,[					if (state.failed) return ret;],,upsert_node,4654-4654,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node4095); if (state.failed) return ret;],,upsert_node,4689-4689,[					if (state.failed) return ret;],,upsert_node,4690-4690,[					match(input,RPAREN,FOLLOW_RPAREN_in_upsert_node4117); if (state.failed) return ret;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/parse/PhoenixSQLParser.java,value_expression,7368-7368,[			if (state.failed) return ret;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,bind_name,9458-9470,[			switch (alt173) {, 				case 1 :, 					// PhoenixSQL.g:1024:9: n= BIND_NAME, 					{, 					n=(Token)match(input,BIND_NAME,FOLLOW_BIND_NAME_in_bind_name7257); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { String bind = n.getText().substring(1); updateBind(bind); ret = bind; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:1025:9: QUESTION, 					{, 					match(input,QUESTION,FOLLOW_QUESTION_in_bind_name7270); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = nextBind(); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,boolean_expression,7212-7257,[									switch (alt136) {, 										case 1 :, 											// PhoenixSQL.g:821:38: (r= bind_expression ), 											{, 											// PhoenixSQL.g:821:38: (r= bind_expression ), 											// PhoenixSQL.g:821:39: r= bind_expression, 											{, 											pushFollow(FOLLOW_bind_expression_in_boolean_expression5603);, 											r=bind_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 											}, , 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:822:35: ( LPAREN r= subquery_expression RPAREN ), 											{, 											// PhoenixSQL.g:822:35: ( LPAREN r= subquery_expression RPAREN ), 											// PhoenixSQL.g:822:36: LPAREN r= subquery_expression RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5644); if (state.failed) return ret;, 											pushFollow(FOLLOW_subquery_expression_in_boolean_expression5648);, 											r=subquery_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5650); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null,false);}, 											}, , 											}, 											break;, 										case 3 :, 											// PhoenixSQL.g:823:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											{, 											// PhoenixSQL.g:823:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											// PhoenixSQL.g:823:36: LPAREN v= one_or_more_expressions RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5691); if (state.failed) return ret;, 											pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression5695);, 											v=one_or_more_expressions();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5697); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}],,boolean_expression,6746-7281,[					switch (alt138) {, 						case 1 :, 							// PhoenixSQL.g:816:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							{, 							// PhoenixSQL.g:816:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							// PhoenixSQL.g:816:30: op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							{, 							pushFollow(FOLLOW_comparison_op_in_boolean_expression5326);, 							op=comparison_op();, 							state._fsp--;, 							if (state.failed) return ret;, 							// PhoenixSQL.g:816:47: (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							int alt133=4;, 							switch ( input.LA(1) ) {, 							case ARRAY:, 							case BIND_NAME:, 							case CASE:, 							case CAST:, 							case CURRENT:, 							case DECIMAL:, 							case DOUBLE:, 							case FALSE:, 							case MINUS:, 							case NAME:, 							case NEXT:, 							case NULL:, 							case NUMBER:, 							case QUESTION:, 							case STRING_LITERAL:, 							case TRUE:, 								{, 								alt133=1;, 								}, 								break;, 							case LPAREN:, 								{, 								int LA133_2 = input.LA(2);, 								if ( (LA133_2==ARRAY||LA133_2==BIND_NAME||(LA133_2 >= CASE && LA133_2 <= CAST)||LA133_2==CURRENT||LA133_2==DECIMAL||LA133_2==DOUBLE||LA133_2==EXISTS||LA133_2==FALSE||LA133_2==LPAREN||LA133_2==MINUS||(LA133_2 >= NAME && LA133_2 <= NEXT)||(LA133_2 >= NOT && LA133_2 <= NULL)||LA133_2==NUMBER||LA133_2==QUESTION||LA133_2==STRING_LITERAL||LA133_2==TRUE) ) {, 									alt133=1;, 								}, 								else if ( (LA133_2==SELECT) ) {, 									alt133=2;, 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 133, 2, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ALL:, 								{, 								int LA133_3 = input.LA(2);, 								if ( (LA133_3==LPAREN) ) {, 									int LA133_6 = input.LA(3);, 									if ( (LA133_6==ARRAY||LA133_6==BIND_NAME||(LA133_6 >= CASE && LA133_6 <= CAST)||LA133_6==CURRENT||LA133_6==DECIMAL||LA133_6==DOUBLE||LA133_6==FALSE||LA133_6==LPAREN||LA133_6==MINUS||(LA133_6 >= NAME && LA133_6 <= NEXT)||LA133_6==NULL||LA133_6==NUMBER||LA133_6==QUESTION||LA133_6==STRING_LITERAL||LA133_6==TRUE) ) {, 										alt133=3;, 									}, 									else if ( (LA133_6==SELECT) ) {, 										alt133=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 133, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 133, 3, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ANY:, 								{, 								int LA133_4 = input.LA(2);, 								if ( (LA133_4==LPAREN) ) {, 									int LA133_6 = input.LA(3);, 									if ( (LA133_6==ARRAY||LA133_6==BIND_NAME||(LA133_6 >= CASE && LA133_6 <= CAST)||LA133_6==CURRENT||LA133_6==DECIMAL||LA133_6==DOUBLE||LA133_6==FALSE||LA133_6==LPAREN||LA133_6==MINUS||(LA133_6 >= NAME && LA133_6 <= NEXT)||LA133_6==NULL||LA133_6==NUMBER||LA133_6==QUESTION||LA133_6==STRING_LITERAL||LA133_6==TRUE) ) {, 										alt133=3;, 									}, 									else if ( (LA133_6==SELECT) ) {, 										alt133=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 133, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 133, 4, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 133, 0, input);, 								throw nvae;, 							}, 							switch (alt133) {, 								case 1 :, 									// PhoenixSQL.g:816:48: r= value_expression, 									{, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5331);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:816:69: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:816:69: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:816:70: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5336); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression5340);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5342); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:816:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									{, 									// PhoenixSQL.g:816:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									// PhoenixSQL.g:816:110: (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN, 									{, 									// PhoenixSQL.g:816:110: (all= ALL |any= ANY ), 									int alt131=2;, 									int LA131_0 = input.LA(1);, 									if ( (LA131_0==ALL) ) {, 										alt131=1;, 									}, 									else if ( (LA131_0==ANY) ) {, 										alt131=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 131, 0, input);, 										throw nvae;, 									}, , 									switch (alt131) {, 										case 1 :, 											// PhoenixSQL.g:816:111: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression5351); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:816:121: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression5357); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5360); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5364);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5366); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:816:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:816:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:816:168: (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN, 									{, 									// PhoenixSQL.g:816:168: (all= ALL |any= ANY ), 									int alt132=2;, 									int LA132_0 = input.LA(1);, 									if ( (LA132_0==ALL) ) {, 										alt132=1;, 									}, 									else if ( (LA132_0==ANY) ) {, 										alt132=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 132, 0, input);, 										throw nvae;, 									}, , 									switch (alt132) {, 										case 1 :, 											// PhoenixSQL.g:816:169: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression5376); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:816:179: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression5382); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5385); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression5389);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5391); if (state.failed) return ret;, 									}, , 									}, 									break;, , 							}, , 							if ( state.backtracking==0 ) {ret = all != null ? factory.wrapInAll(op, l, r) : any != null ? factory.wrapInAny(op, l, r) : factory.comparison(op,l,r); }, 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:817:22: ( IS (n= NOT )? NULL ), 							{, 							// PhoenixSQL.g:817:22: ( IS (n= NOT )? NULL ), 							// PhoenixSQL.g:817:23: IS (n= NOT )? NULL, 							{, 							match(input,IS,FOLLOW_IS_in_boolean_expression5421); if (state.failed) return ret;, 							// PhoenixSQL.g:817:27: (n= NOT )?, 							int alt134=2;, 							int LA134_0 = input.LA(1);, 							if ( (LA134_0==NOT) ) {, 								alt134=1;, 							}, 							switch (alt134) {, 								case 1 :, 									// PhoenixSQL.g:817:27: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression5425); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,NULL,FOLLOW_NULL_in_boolean_expression5428); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.isNull(l,n!=null); }, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:818:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							{, 							// PhoenixSQL.g:818:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							// PhoenixSQL.g:818:24: (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							{, 							// PhoenixSQL.g:818:25: (n= NOT )?, 							int alt135=2;, 							int LA135_0 = input.LA(1);, 							if ( (LA135_0==NOT) ) {, 								alt135=1;, 							}, 							switch (alt135) {, 								case 1 :, 									// PhoenixSQL.g:818:25: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression5459); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							// PhoenixSQL.g:818:31: ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							int alt137=4;, 							switch ( input.LA(1) ) {, 							case LIKE:, 								{, 								alt137=1;, 								}, 								break;, 							case ILIKE:, 								{, 								alt137=2;, 								}, 								break;, 							case BETWEEN:, 								{, 								alt137=3;, 								}, 								break;, 							case IN:, 								{, 								alt137=4;, 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 137, 0, input);, 								throw nvae;, 							}, 							switch (alt137) {, 								case 1 :, 									// PhoenixSQL.g:818:32: ( LIKE r= value_expression ), 									{, 									// PhoenixSQL.g:818:32: ( LIKE r= value_expression ), 									// PhoenixSQL.g:818:33: LIKE r= value_expression, 									{, 									match(input,LIKE,FOLLOW_LIKE_in_boolean_expression5464); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5468);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_SENSITIVE); }, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:819:32: ( ILIKE r= value_expression ), 									{, 									// PhoenixSQL.g:819:32: ( ILIKE r= value_expression ), 									// PhoenixSQL.g:819:33: ILIKE r= value_expression, 									{, 									match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression5506); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5510);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_INSENSITIVE); }, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:820:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									{, 									// PhoenixSQL.g:820:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									// PhoenixSQL.g:820:33: BETWEEN r1= value_expression AND r2= value_expression, 									{, 									match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression5548); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5552);, 									r1=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,AND,FOLLOW_AND_in_boolean_expression5554); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5558);, 									r2=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.between(l,r1,r2,n!=null); }, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:821:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									{, 									// PhoenixSQL.g:821:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									// PhoenixSQL.g:821:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									{, 									// PhoenixSQL.g:821:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									// PhoenixSQL.g:821:34: IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									{, 									match(input,IN,FOLLOW_IN_in_boolean_expression5597); if (state.failed) return ret;, 									// PhoenixSQL.g:821:37: ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									int alt136=3;, 									int LA136_0 = input.LA(1);, 									if ( (LA136_0==BIND_NAME||LA136_0==QUESTION) ) {, 										alt136=1;, 									}, 									else if ( (LA136_0==LPAREN) ) {, 										int LA136_2 = input.LA(2);, 										if ( (LA136_2==SELECT) ) {, 											alt136=2;, 										}, 										else if ( (LA136_2==ARRAY||LA136_2==BIND_NAME||(LA136_2 >= CASE && LA136_2 <= CAST)||LA136_2==CURRENT||LA136_2==DECIMAL||LA136_2==DOUBLE||LA136_2==EXISTS||LA136_2==FALSE||LA136_2==LPAREN||LA136_2==MINUS||(LA136_2 >= NAME && LA136_2 <= NEXT)||(LA136_2 >= NOT && LA136_2 <= NULL)||LA136_2==NUMBER||LA136_2==QUESTION||LA136_2==STRING_LITERAL||LA136_2==TRUE) ) {, 											alt136=3;, 										}, , 										else {, 											if (state.backtracking>0) {state.failed=true; return ret;}, 											int nvaeMark = input.mark();, 											try {, 												input.consume();, 												NoViableAltException nvae =, 													new NoViableAltException("", 136, 2, input);, 												throw nvae;, 											} finally {, 												input.rewind(nvaeMark);, 											}, 										}, , 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 136, 0, input);, 										throw nvae;, 									}, , 									switch (alt136) {, 										case 1 :, 											// PhoenixSQL.g:821:38: (r= bind_expression ), 											{, 											// PhoenixSQL.g:821:38: (r= bind_expression ), 											// PhoenixSQL.g:821:39: r= bind_expression, 											{, 											pushFollow(FOLLOW_bind_expression_in_boolean_expression5603);, 											r=bind_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 											}, , 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:822:35: ( LPAREN r= subquery_expression RPAREN ), 											{, 											// PhoenixSQL.g:822:35: ( LPAREN r= subquery_expression RPAREN ), 											// PhoenixSQL.g:822:36: LPAREN r= subquery_expression RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5644); if (state.failed) return ret;, 											pushFollow(FOLLOW_subquery_expression_in_boolean_expression5648);, 											r=subquery_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5650); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null,false);}, 											}, , 											}, 											break;, 										case 3 :, 											// PhoenixSQL.g:823:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											{, 											// PhoenixSQL.g:823:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											// PhoenixSQL.g:823:36: LPAREN v= one_or_more_expressions RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5691); if (state.failed) return ret;, 											pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression5695);, 											v=one_or_more_expressions();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5697); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}, 											}, , 											}, 											break;, , 									}, , 									}, , 									}, , 									}, 									break;, , 							}, , 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:826:23: , 							{, 							if ( state.backtracking==0 ) { ret = l; }],,boolean_expression,6672-7299,[			switch (alt139) {, 				case 1 :, 					// PhoenixSQL.g:816:9: l= value_expression ( (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ) | ( IS (n= NOT )? NULL ) | ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ) |), 					{, 					pushFollow(FOLLOW_value_expression_in_boolean_expression5320);, 					l=value_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:816:28: ( (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ) | ( IS (n= NOT )? NULL ) | ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ) |), 					int alt138=4;, 					switch ( input.LA(1) ) {, 					case EQ:, 					case GT:, 					case LT:, 					case NOEQ1:, 					case NOEQ2:, 						{, 						alt138=1;, 						}, 						break;, 					case IS:, 						{, 						alt138=2;, 						}, 						break;, 					case BETWEEN:, 					case ILIKE:, 					case IN:, 					case LIKE:, 					case NOT:, 						{, 						alt138=3;, 						}, 						break;, 					case EOF:, 					case AND:, 					case AS:, 					case ASC:, 					case COMMA:, 					case DESC:, 					case ELSE:, 					case END:, 					case FROM:, 					case FULL:, 					case GROUP:, 					case HAVING:, 					case INNER:, 					case JOIN:, 					case LEFT:, 					case LIMIT:, 					case MAXVALUE:, 					case MINVALUE:, 					case NAME:, 					case NULLS:, 					case OR:, 					case ORDER:, 					case RIGHT:, 					case RPAREN:, 					case RSQUARE:, 					case SEMICOLON:, 					case THEN:, 					case UNION:, 					case WHEN:, 					case WHERE:, 						{, 						alt138=4;, 						}, 						break;, 					default:, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						NoViableAltException nvae =, 							new NoViableAltException("", 138, 0, input);, 						throw nvae;, 					}, 					switch (alt138) {, 						case 1 :, 							// PhoenixSQL.g:816:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							{, 							// PhoenixSQL.g:816:29: (op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ) ), 							// PhoenixSQL.g:816:30: op= comparison_op (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							{, 							pushFollow(FOLLOW_comparison_op_in_boolean_expression5326);, 							op=comparison_op();, 							state._fsp--;, 							if (state.failed) return ret;, 							// PhoenixSQL.g:816:47: (r= value_expression | ( LPAREN r= subquery_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ) | ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ) ), 							int alt133=4;, 							switch ( input.LA(1) ) {, 							case ARRAY:, 							case BIND_NAME:, 							case CASE:, 							case CAST:, 							case CURRENT:, 							case DECIMAL:, 							case DOUBLE:, 							case FALSE:, 							case MINUS:, 							case NAME:, 							case NEXT:, 							case NULL:, 							case NUMBER:, 							case QUESTION:, 							case STRING_LITERAL:, 							case TRUE:, 								{, 								alt133=1;, 								}, 								break;, 							case LPAREN:, 								{, 								int LA133_2 = input.LA(2);, 								if ( (LA133_2==ARRAY||LA133_2==BIND_NAME||(LA133_2 >= CASE && LA133_2 <= CAST)||LA133_2==CURRENT||LA133_2==DECIMAL||LA133_2==DOUBLE||LA133_2==EXISTS||LA133_2==FALSE||LA133_2==LPAREN||LA133_2==MINUS||(LA133_2 >= NAME && LA133_2 <= NEXT)||(LA133_2 >= NOT && LA133_2 <= NULL)||LA133_2==NUMBER||LA133_2==QUESTION||LA133_2==STRING_LITERAL||LA133_2==TRUE) ) {, 									alt133=1;, 								}, 								else if ( (LA133_2==SELECT) ) {, 									alt133=2;, 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 133, 2, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ALL:, 								{, 								int LA133_3 = input.LA(2);, 								if ( (LA133_3==LPAREN) ) {, 									int LA133_6 = input.LA(3);, 									if ( (LA133_6==ARRAY||LA133_6==BIND_NAME||(LA133_6 >= CASE && LA133_6 <= CAST)||LA133_6==CURRENT||LA133_6==DECIMAL||LA133_6==DOUBLE||LA133_6==FALSE||LA133_6==LPAREN||LA133_6==MINUS||(LA133_6 >= NAME && LA133_6 <= NEXT)||LA133_6==NULL||LA133_6==NUMBER||LA133_6==QUESTION||LA133_6==STRING_LITERAL||LA133_6==TRUE) ) {, 										alt133=3;, 									}, 									else if ( (LA133_6==SELECT) ) {, 										alt133=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 133, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 133, 3, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							case ANY:, 								{, 								int LA133_4 = input.LA(2);, 								if ( (LA133_4==LPAREN) ) {, 									int LA133_6 = input.LA(3);, 									if ( (LA133_6==ARRAY||LA133_6==BIND_NAME||(LA133_6 >= CASE && LA133_6 <= CAST)||LA133_6==CURRENT||LA133_6==DECIMAL||LA133_6==DOUBLE||LA133_6==FALSE||LA133_6==LPAREN||LA133_6==MINUS||(LA133_6 >= NAME && LA133_6 <= NEXT)||LA133_6==NULL||LA133_6==NUMBER||LA133_6==QUESTION||LA133_6==STRING_LITERAL||LA133_6==TRUE) ) {, 										alt133=3;, 									}, 									else if ( (LA133_6==SELECT) ) {, 										alt133=4;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										int nvaeMark = input.mark();, 										try {, 											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {, 												input.consume();, 											}, 											NoViableAltException nvae =, 												new NoViableAltException("", 133, 6, input);, 											throw nvae;, 										} finally {, 											input.rewind(nvaeMark);, 										}, 									}, , 								}, , 								else {, 									if (state.backtracking>0) {state.failed=true; return ret;}, 									int nvaeMark = input.mark();, 									try {, 										input.consume();, 										NoViableAltException nvae =, 											new NoViableAltException("", 133, 4, input);, 										throw nvae;, 									} finally {, 										input.rewind(nvaeMark);, 									}, 								}, , 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 133, 0, input);, 								throw nvae;, 							}, 							switch (alt133) {, 								case 1 :, 									// PhoenixSQL.g:816:48: r= value_expression, 									{, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5331);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:816:69: ( LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:816:69: ( LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:816:70: LPAREN r= subquery_expression RPAREN, 									{, 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5336); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression5340);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5342); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:816:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									{, 									// PhoenixSQL.g:816:109: ( (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN ), 									// PhoenixSQL.g:816:110: (all= ALL |any= ANY ) LPAREN r= value_expression RPAREN, 									{, 									// PhoenixSQL.g:816:110: (all= ALL |any= ANY ), 									int alt131=2;, 									int LA131_0 = input.LA(1);, 									if ( (LA131_0==ALL) ) {, 										alt131=1;, 									}, 									else if ( (LA131_0==ANY) ) {, 										alt131=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 131, 0, input);, 										throw nvae;, 									}, , 									switch (alt131) {, 										case 1 :, 											// PhoenixSQL.g:816:111: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression5351); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:816:121: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression5357); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5360); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5364);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5366); if (state.failed) return ret;, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:816:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									{, 									// PhoenixSQL.g:816:167: ( (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN ), 									// PhoenixSQL.g:816:168: (all= ALL |any= ANY ) LPAREN r= subquery_expression RPAREN, 									{, 									// PhoenixSQL.g:816:168: (all= ALL |any= ANY ), 									int alt132=2;, 									int LA132_0 = input.LA(1);, 									if ( (LA132_0==ALL) ) {, 										alt132=1;, 									}, 									else if ( (LA132_0==ANY) ) {, 										alt132=2;, 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 132, 0, input);, 										throw nvae;, 									}, , 									switch (alt132) {, 										case 1 :, 											// PhoenixSQL.g:816:169: all= ALL, 											{, 											all=(Token)match(input,ALL,FOLLOW_ALL_in_boolean_expression5376); if (state.failed) return ret;, 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:816:179: any= ANY, 											{, 											any=(Token)match(input,ANY,FOLLOW_ANY_in_boolean_expression5382); if (state.failed) return ret;, 											}, 											break;, , 									}, , 									match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5385); if (state.failed) return ret;, 									pushFollow(FOLLOW_subquery_expression_in_boolean_expression5389);, 									r=subquery_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5391); if (state.failed) return ret;, 									}, , 									}, 									break;, , 							}, , 							if ( state.backtracking==0 ) {ret = all != null ? factory.wrapInAll(op, l, r) : any != null ? factory.wrapInAny(op, l, r) : factory.comparison(op,l,r); }, 							}, , 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:817:22: ( IS (n= NOT )? NULL ), 							{, 							// PhoenixSQL.g:817:22: ( IS (n= NOT )? NULL ), 							// PhoenixSQL.g:817:23: IS (n= NOT )? NULL, 							{, 							match(input,IS,FOLLOW_IS_in_boolean_expression5421); if (state.failed) return ret;, 							// PhoenixSQL.g:817:27: (n= NOT )?, 							int alt134=2;, 							int LA134_0 = input.LA(1);, 							if ( (LA134_0==NOT) ) {, 								alt134=1;, 							}, 							switch (alt134) {, 								case 1 :, 									// PhoenixSQL.g:817:27: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression5425); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,NULL,FOLLOW_NULL_in_boolean_expression5428); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret = factory.isNull(l,n!=null); }, 							}, , 							}, 							break;, 						case 3 :, 							// PhoenixSQL.g:818:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							{, 							// PhoenixSQL.g:818:22: ( (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ) ), 							// PhoenixSQL.g:818:24: (n= NOT )? ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							{, 							// PhoenixSQL.g:818:25: (n= NOT )?, 							int alt135=2;, 							int LA135_0 = input.LA(1);, 							if ( (LA135_0==NOT) ) {, 								alt135=1;, 							}, 							switch (alt135) {, 								case 1 :, 									// PhoenixSQL.g:818:25: n= NOT, 									{, 									n=(Token)match(input,NOT,FOLLOW_NOT_in_boolean_expression5459); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							// PhoenixSQL.g:818:31: ( ( LIKE r= value_expression ) | ( ILIKE r= value_expression ) | ( BETWEEN r1= value_expression AND r2= value_expression ) | ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ) ), 							int alt137=4;, 							switch ( input.LA(1) ) {, 							case LIKE:, 								{, 								alt137=1;, 								}, 								break;, 							case ILIKE:, 								{, 								alt137=2;, 								}, 								break;, 							case BETWEEN:, 								{, 								alt137=3;, 								}, 								break;, 							case IN:, 								{, 								alt137=4;, 								}, 								break;, 							default:, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 137, 0, input);, 								throw nvae;, 							}, 							switch (alt137) {, 								case 1 :, 									// PhoenixSQL.g:818:32: ( LIKE r= value_expression ), 									{, 									// PhoenixSQL.g:818:32: ( LIKE r= value_expression ), 									// PhoenixSQL.g:818:33: LIKE r= value_expression, 									{, 									match(input,LIKE,FOLLOW_LIKE_in_boolean_expression5464); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5468);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_SENSITIVE); }, 									}, , 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:819:32: ( ILIKE r= value_expression ), 									{, 									// PhoenixSQL.g:819:32: ( ILIKE r= value_expression ), 									// PhoenixSQL.g:819:33: ILIKE r= value_expression, 									{, 									match(input,ILIKE,FOLLOW_ILIKE_in_boolean_expression5506); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5510);, 									r=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.like(l,r,n!=null,LikeType.CASE_INSENSITIVE); }, 									}, , 									}, 									break;, 								case 3 :, 									// PhoenixSQL.g:820:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									{, 									// PhoenixSQL.g:820:32: ( BETWEEN r1= value_expression AND r2= value_expression ), 									// PhoenixSQL.g:820:33: BETWEEN r1= value_expression AND r2= value_expression, 									{, 									match(input,BETWEEN,FOLLOW_BETWEEN_in_boolean_expression5548); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5552);, 									r1=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									match(input,AND,FOLLOW_AND_in_boolean_expression5554); if (state.failed) return ret;, 									pushFollow(FOLLOW_value_expression_in_boolean_expression5558);, 									r2=value_expression();, 									state._fsp--;, 									if (state.failed) return ret;, 									if ( state.backtracking==0 ) {ret = factory.between(l,r1,r2,n!=null); }, 									}, , 									}, 									break;, 								case 4 :, 									// PhoenixSQL.g:821:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									{, 									// PhoenixSQL.g:821:32: ( ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ) ), 									// PhoenixSQL.g:821:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									{, 									// PhoenixSQL.g:821:33: ( IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ) ), 									// PhoenixSQL.g:821:34: IN ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									{, 									match(input,IN,FOLLOW_IN_in_boolean_expression5597); if (state.failed) return ret;, 									// PhoenixSQL.g:821:37: ( (r= bind_expression ) | ( LPAREN r= subquery_expression RPAREN ) | ( LPAREN v= one_or_more_expressions RPAREN ) ), 									int alt136=3;, 									int LA136_0 = input.LA(1);, 									if ( (LA136_0==BIND_NAME||LA136_0==QUESTION) ) {, 										alt136=1;, 									}, 									else if ( (LA136_0==LPAREN) ) {, 										int LA136_2 = input.LA(2);, 										if ( (LA136_2==SELECT) ) {, 											alt136=2;, 										}, 										else if ( (LA136_2==ARRAY||LA136_2==BIND_NAME||(LA136_2 >= CASE && LA136_2 <= CAST)||LA136_2==CURRENT||LA136_2==DECIMAL||LA136_2==DOUBLE||LA136_2==EXISTS||LA136_2==FALSE||LA136_2==LPAREN||LA136_2==MINUS||(LA136_2 >= NAME && LA136_2 <= NEXT)||(LA136_2 >= NOT && LA136_2 <= NULL)||LA136_2==NUMBER||LA136_2==QUESTION||LA136_2==STRING_LITERAL||LA136_2==TRUE) ) {, 											alt136=3;, 										}, , 										else {, 											if (state.backtracking>0) {state.failed=true; return ret;}, 											int nvaeMark = input.mark();, 											try {, 												input.consume();, 												NoViableAltException nvae =, 													new NoViableAltException("", 136, 2, input);, 												throw nvae;, 											} finally {, 												input.rewind(nvaeMark);, 											}, 										}, , 									}, , 									else {, 										if (state.backtracking>0) {state.failed=true; return ret;}, 										NoViableAltException nvae =, 											new NoViableAltException("", 136, 0, input);, 										throw nvae;, 									}, , 									switch (alt136) {, 										case 1 :, 											// PhoenixSQL.g:821:38: (r= bind_expression ), 											{, 											// PhoenixSQL.g:821:38: (r= bind_expression ), 											// PhoenixSQL.g:821:39: r= bind_expression, 											{, 											pushFollow(FOLLOW_bind_expression_in_boolean_expression5603);, 											r=bind_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.inList(Arrays.asList(l,r),n!=null);}, 											}, , 											}, 											break;, 										case 2 :, 											// PhoenixSQL.g:822:35: ( LPAREN r= subquery_expression RPAREN ), 											{, 											// PhoenixSQL.g:822:35: ( LPAREN r= subquery_expression RPAREN ), 											// PhoenixSQL.g:822:36: LPAREN r= subquery_expression RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5644); if (state.failed) return ret;, 											pushFollow(FOLLOW_subquery_expression_in_boolean_expression5648);, 											r=subquery_expression();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5650); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {ret = factory.in(l,r,n!=null,false);}, 											}, , 											}, 											break;, 										case 3 :, 											// PhoenixSQL.g:823:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											{, 											// PhoenixSQL.g:823:35: ( LPAREN v= one_or_more_expressions RPAREN ), 											// PhoenixSQL.g:823:36: LPAREN v= one_or_more_expressions RPAREN, 											{, 											match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5691); if (state.failed) return ret;, 											pushFollow(FOLLOW_one_or_more_expressions_in_boolean_expression5695);, 											v=one_or_more_expressions();, 											state._fsp--;, 											if (state.failed) return ret;, 											match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5697); if (state.failed) return ret;, 											if ( state.backtracking==0 ) {List<ParseNode> il = new ArrayList<ParseNode>(v.size() + 1); il.add(l); il.addAll(v); ret = factory.inList(il,n!=null);}, 											}, , 											}, 											break;, , 									}, , 									}, , 									}, , 									}, 									break;, , 							}, , 							}, , 							}, 							break;, 						case 4 :, 							// PhoenixSQL.g:826:23: , 							{, 							if ( state.backtracking==0 ) { ret = l; }, 							}, 							break;, , 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:827:9: EXISTS LPAREN s= subquery_expression RPAREN, 					{, 					match(input,EXISTS,FOLLOW_EXISTS_in_boolean_expression5797); if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_boolean_expression5799); if (state.failed) return ret;, 					pushFollow(FOLLOW_subquery_expression_in_boolean_expression5803);, 					s=subquery_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_boolean_expression5805); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.exists(s,false);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,case_statement,9655-9664,[					switch (alt175) {, 						case 1 :, 							// PhoenixSQL.g:1039:107: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement7377); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement7381);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,case_statement,9721-9730,[					switch (alt177) {, 						case 1 :, 							// PhoenixSQL.g:1040:73: ELSE el= expression, 							{, 							match(input,ELSE,FOLLOW_ELSE_in_case_statement7417); if (state.failed) return ret;, 							pushFollow(FOLLOW_expression_in_case_statement7421);, 							el=expression();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {w.add(el);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,column_name,2402-2425,[			switch (alt38) {, 				case 1 :, 					// PhoenixSQL.g:516:9: field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2478);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:517:9: family= identifier DOT field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_column_name2492);, 					family=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_column_name2494); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_column_name2498);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.columnName(family, field); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,comparison_op,6566-6617,[			switch (alt130) {, 				case 1 :, 					// PhoenixSQL.g:807:4: EQ, 					{, 					match(input,EQ,FOLLOW_EQ_in_comparison_op5250); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.EQUAL; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:808:4: LT, 					{, 					match(input,LT,FOLLOW_LT_in_comparison_op5257); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.LESS; }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:809:4: GT, 					{, 					match(input,GT,FOLLOW_GT_in_comparison_op5264); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.GREATER; }, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:810:4: LT EQ, 					{, 					match(input,LT,FOLLOW_LT_in_comparison_op5271); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_comparison_op5273); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.LESS_OR_EQUAL; }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:811:4: GT EQ, 					{, 					match(input,GT,FOLLOW_GT_in_comparison_op5280); if (state.failed) return ret;, 					match(input,EQ,FOLLOW_EQ_in_comparison_op5282); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = CompareOp.GREATER_OR_EQUAL; }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:812:4: ( NOEQ1 | NOEQ2 ), 					{, 					if ( (input.LA(1) >= NOEQ1 && input.LA(1) <= NOEQ2) ) {, 						input.consume();, 						state.errorRecovery=false;, 						state.failed=false;, 					}, 					else {, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						MismatchedSetException mse = new MismatchedSetException(null,input);, 						throw mse;, 					}, 					if ( state.backtracking==0 ) { ret = CompareOp.NOT_EQUAL; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,fam_prop_name,2281-2304,[			switch (alt37) {, 				case 1 :, 					// PhoenixSQL.g:507:9: propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2396);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(propName); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:508:9: familyName= identifier DOT propName= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2410);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_fam_prop_name2412); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_fam_prop_name2416);, 					propName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.propertyName(familyName, propName); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,from_table_name,9136-9159,[			switch (alt170) {, 				case 1 :, 					// PhoenixSQL.g:980:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name6997);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:981:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_from_table_name7011);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_from_table_name7013); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_from_table_name7017);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,int_literal_or_bind,1712-1730,[			switch (alt28) {, 				case 1 :, 					// PhoenixSQL.g:464:7: n= int_or_long_literal, 					{, 					pushFollow(FOLLOW_int_or_long_literal_in_int_literal_or_bind2017);, 					n=int_or_long_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = n; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:465:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_int_literal_or_bind2029);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = b; }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,limit,4934-4952,[			switch (alt99) {, 				case 1 :, 					// PhoenixSQL.g:703:7: b= bind_expression, 					{, 					pushFollow(FOLLOW_bind_expression_in_limit4305);, 					b=bind_expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(b); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:704:7: l= int_or_long_literal, 					{, 					pushFollow(FOLLOW_int_or_long_literal_in_limit4317);, 					l=int_or_long_literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.limit(l); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,literal_or_bind,9206-9224,[			switch (alt171) {, 				case 1 :, 					// PhoenixSQL.g:986:9: e= literal, 					{, 					pushFollow(FOLLOW_literal_in_literal_or_bind7049);, 					e=literal();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = e; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:987:9: b= bind_name, 					{, 					pushFollow(FOLLOW_bind_name_in_literal_or_bind7063);, 					b=bind_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.bind(b); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,parseOrderByField,5473-5485,[			switch (alt106) {, 				case 1 :, 					// PhoenixSQL.g:748:10: ASC, 					{, 					match(input,ASC,FOLLOW_ASC_in_parseOrderByField4657); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = true;}, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:748:38: DESC, 					{, 					match(input,DESC,FOLLOW_DESC_in_parseOrderByField4663); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {isAscending = false;}],,parseOrderByField,5519-5531,[					switch (alt107) {, 						case 1 :, 							// PhoenixSQL.g:749:17: FIRST, 							{, 							match(input,FIRST,FOLLOW_FIRST_in_parseOrderByField4681); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = false;}, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:749:46: LAST, 							{, 							match(input,LAST,FOLLOW_LAST_in_parseOrderByField4687); if (state.failed) return ret;, 							if ( state.backtracking==0 ) {nullsLast = true;}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,select_list,5064-5106,[			switch (alt101) {, 				case 1 :, 					// PhoenixSQL.g:718:9: n= selectable ( COMMA n= selectable )*, 					{, 					pushFollow(FOLLOW_selectable_in_select_list4404);, 					n=selectable();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(n);}, 					// PhoenixSQL.g:718:36: ( COMMA n= selectable )*, 					loop100:, 					while (true) {, 						int alt100=2;, 						int LA100_0 = input.LA(1);, 						if ( (LA100_0==COMMA) ) {, 							alt100=1;, 						}, , 						switch (alt100) {, 						case 1 :, 							// PhoenixSQL.g:718:37: COMMA n= selectable, 							{, 							match(input,COMMA,FOLLOW_COMMA_in_select_list4409); if (state.failed) return ret;, 							pushFollow(FOLLOW_selectable_in_select_list4413);, 							n=selectable();, 							state._fsp--;, 							if (state.failed) return ret;, 							if ( state.backtracking==0 ) {ret.add(n);}, 							}, 							break;, , 						default :, 							break loop100;, 						}, 					}, , 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:719:7: ASTERISK, 					{, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list4425); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = Collections.<AliasedNode>singletonList(factory.aliasedNode(null, factory.wildcard()));}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,selectable,5242-5298,[			switch (alt103) {, 				case 1 :, 					// PhoenixSQL.g:724:9: field= expression (a= parseAlias )?, 					{, 					pushFollow(FOLLOW_expression_in_selectable4454);, 					field=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:724:26: (a= parseAlias )?, 					int alt102=2;, 					int LA102_0 = input.LA(1);, 					if ( (LA102_0==AS||LA102_0==NAME) ) {, 						alt102=1;, 					}, 					switch (alt102) {, 						case 1 :, 							// PhoenixSQL.g:724:27: a= parseAlias, 							{, 							pushFollow(FOLLOW_parseAlias_in_selectable4459);, 							a=parseAlias();, 							state._fsp--;, 							if (state.failed) return ret;, 							}, 							break;, , 					}, , 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(a, field); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:725:8: familyName= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable4474);, 					familyName=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable4476); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable4478); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.family(familyName));}, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:726:9: s= identifier DOT t= identifier DOT ASTERISK, 					{, 					pushFollow(FOLLOW_identifier_in_selectable4493);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable4495); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_selectable4499);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_selectable4501); if (state.failed) return ret;, 					match(input,ASTERISK,FOLLOW_ASTERISK_in_selectable4503); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.aliasedNode(null, factory.tableWildcard(factory.table(s, t))); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,table_name,9049-9072,[			switch (alt169) {, 				case 1 :, 					// PhoenixSQL.g:974:9: t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name6949);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(null, t); }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:975:9: s= identifier DOT t= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_table_name6963);, 					s=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_table_name6965); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_table_name6969);, 					t=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.table(s, t); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,term,7997-8357,[			switch (alt152) {, 				case 1 :, 					// PhoenixSQL.g:877:9: e= literal_or_bind, 					{, 					pushFollow(FOLLOW_literal_or_bind_in_term6180);, 					e=literal_or_bind();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = e; }, 					}, 					break;, 				case 2 :, 					// PhoenixSQL.g:878:9: field= identifier, 					{, 					pushFollow(FOLLOW_identifier_in_term6194);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.column(null,field,field); }, 					}, 					break;, 				case 3 :, 					// PhoenixSQL.g:879:9: ex= ARRAY LSQUARE v= one_or_more_expressions RSQUARE, 					{, 					ex=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term6208); if (state.failed) return ret;, 					match(input,LSQUARE,FOLLOW_LSQUARE_in_term6210); if (state.failed) return ret;, 					pushFollow(FOLLOW_one_or_more_expressions_in_term6214);, 					v=one_or_more_expressions();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RSQUARE,FOLLOW_RSQUARE_in_term6216); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret = factory.upsertStmtArrayNode(v);}, 					}, 					break;, 				case 4 :, 					// PhoenixSQL.g:880:9: tableName= table_name DOT field= identifier, 					{, 					pushFollow(FOLLOW_table_name_in_term6230);, 					tableName=table_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,DOT,FOLLOW_DOT_in_term6232); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_term6236);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.column(tableName, field, field); }, 					}, 					break;, 				case 5 :, 					// PhoenixSQL.g:881:9: field= identifier LPAREN l= zero_or_more_expressions RPAREN wg= ( WITHIN GROUP LPAREN ORDER BY l2= one_or_more_expressions (a= ASC | DESC ) RPAREN )?, 					{, 					pushFollow(FOLLOW_identifier_in_term6250);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_term6252); if (state.failed) return ret;, 					pushFollow(FOLLOW_zero_or_more_expressions_in_term6256);, 					l=zero_or_more_expressions();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_term6258); if (state.failed) return ret;, 					// PhoenixSQL.g:881:70: ( WITHIN GROUP LPAREN ORDER BY l2= one_or_more_expressions (a= ASC | DESC ) RPAREN )?, 					int alt147=2;, 					int LA147_0 = input.LA(1);, 					if ( (LA147_0==WITHIN) ) {, 						alt147=1;, 					}, 					switch (alt147) {, 						case 1 :, 							// PhoenixSQL.g:881:71: WITHIN GROUP LPAREN ORDER BY l2= one_or_more_expressions (a= ASC | DESC ) RPAREN, 							{, 							wg=(Token)match(input,WITHIN,FOLLOW_WITHIN_in_term6263); if (state.failed) return ret;, 							wg=(Token)match(input,GROUP,FOLLOW_GROUP_in_term6265); if (state.failed) return ret;, 							wg=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_term6267); if (state.failed) return ret;, 							wg=(Token)match(input,ORDER,FOLLOW_ORDER_in_term6269); if (state.failed) return ret;, 							wg=(Token)match(input,BY,FOLLOW_BY_in_term6271); if (state.failed) return ret;, 							pushFollow(FOLLOW_one_or_more_expressions_in_term6275);, 							l2=one_or_more_expressions();, 							state._fsp--;, 							if (state.failed) return ret;, 							// PhoenixSQL.g:881:127: (a= ASC | DESC ), 							int alt146=2;, 							int LA146_0 = input.LA(1);, 							if ( (LA146_0==ASC) ) {, 								alt146=1;, 							}, 							else if ( (LA146_0==DESC) ) {, 								alt146=2;, 							}, , 							else {, 								if (state.backtracking>0) {state.failed=true; return ret;}, 								NoViableAltException nvae =, 									new NoViableAltException("", 146, 0, input);, 								throw nvae;, 							}, , 							switch (alt146) {, 								case 1 :, 									// PhoenixSQL.g:881:128: a= ASC, 									{, 									a=(Token)match(input,ASC,FOLLOW_ASC_in_term6280); if (state.failed) return ret;, 									}, 									break;, 								case 2 :, 									// PhoenixSQL.g:881:136: DESC, 									{, 									wg=(Token)match(input,DESC,FOLLOW_DESC_in_term6284); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							wg=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_term6287); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					if ( state.backtracking==0 ) {, 					            FunctionParseNode f = wg==null ? factory.function(field, l) : factory.function(field,l,l2,a!=null);, 					            if (!contextStack.isEmpty()) {, 					            	contextStack.peek().setAggregate(f.isAggregate());, 					            }, 					            if(f instanceof UDFParseNode) udfParseNodes.put(f.getName(),(UDFParseNode)f);, 					            ret = f;, 					        }, 					}, 					break;, 				case 6 :, 					// PhoenixSQL.g:890:9: field= identifier LPAREN t= ASTERISK RPAREN, 					{, 					pushFollow(FOLLOW_identifier_in_term6312);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_term6314); if (state.failed) return ret;, 					t=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_term6318); if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_term6320); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {, 					            if (!isCountFunction(field)) {, 					                throwRecognitionException(t);, 					            }, 					            FunctionParseNode f = factory.function(field, LiteralParseNode.STAR);, 					            if (!contextStack.isEmpty()) {, 					            	contextStack.peek().setAggregate(f.isAggregate());, 					            }, 					            if(f instanceof UDFParseNode) udfParseNodes.put(f.getName(),(UDFParseNode)f);, 					            ret = f;, 					        }, 					}, 					break;, 				case 7 :, 					// PhoenixSQL.g:902:9: field= identifier LPAREN t= DISTINCT l= zero_or_more_expressions RPAREN, 					{, 					pushFollow(FOLLOW_identifier_in_term6344);, 					field=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_term6346); if (state.failed) return ret;, 					t=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_term6350); if (state.failed) return ret;, 					pushFollow(FOLLOW_zero_or_more_expressions_in_term6354);, 					l=zero_or_more_expressions();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_term6356); if (state.failed) return ret;, 					if ( state.backtracking==0 ) {, 					            FunctionParseNode f = factory.functionDistinct(field, l);, 					            if (!contextStack.isEmpty()) {, 					            	contextStack.peek().setAggregate(f.isAggregate());, 					            }, 					            if(f instanceof UDFParseNode) udfParseNodes.put(f.getName(),(UDFParseNode)f);, 					            ret = f;, 					        }, 					}, 					break;, 				case 8 :, 					// PhoenixSQL.g:911:9: e= case_statement, 					{, 					pushFollow(FOLLOW_case_statement_in_term6379);, 					e=case_statement();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = e; }, 					}, 					break;, 				case 9 :, 					// PhoenixSQL.g:912:9: LPAREN l= one_or_more_expressions RPAREN, 					{, 					match(input,LPAREN,FOLLOW_LPAREN_in_term6391); if (state.failed) return ret;, 					pushFollow(FOLLOW_one_or_more_expressions_in_term6395);, 					l=one_or_more_expressions();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,RPAREN,FOLLOW_RPAREN_in_term6397); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { , 					    		if(l.size() == 1) {, 					    			ret = l.get(0);, 					    		}	, 					    		else {, 					    			ret = factory.rowValueConstructor(l);, 					    		}	 , 					    	}, 					}, 					break;, 				case 10 :, 					// PhoenixSQL.g:921:9: CAST LPAREN e= expression AS dt= identifier ( LPAREN length= NUMBER ( COMMA scale= NUMBER )? RPAREN )? ar= ( ARRAY | ( LSQUARE RSQUARE ) )? RPAREN, 					{, 					match(input,CAST,FOLLOW_CAST_in_term6415); if (state.failed) return ret;, 					match(input,LPAREN,FOLLOW_LPAREN_in_term6417); if (state.failed) return ret;, 					pushFollow(FOLLOW_expression_in_term6421);, 					e=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,AS,FOLLOW_AS_in_term6423); if (state.failed) return ret;, 					pushFollow(FOLLOW_identifier_in_term6427);, 					dt=identifier();, 					state._fsp--;, 					if (state.failed) return ret;, 					// PhoenixSQL.g:921:51: ( LPAREN length= NUMBER ( COMMA scale= NUMBER )? RPAREN )?, 					int alt149=2;, 					int LA149_0 = input.LA(1);, 					if ( (LA149_0==LPAREN) ) {, 						alt149=1;, 					}, 					switch (alt149) {, 						case 1 :, 							// PhoenixSQL.g:921:52: LPAREN length= NUMBER ( COMMA scale= NUMBER )? RPAREN, 							{, 							match(input,LPAREN,FOLLOW_LPAREN_in_term6430); if (state.failed) return ret;, 							length=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term6434); if (state.failed) return ret;, 							// PhoenixSQL.g:921:73: ( COMMA scale= NUMBER )?, 							int alt148=2;, 							int LA148_0 = input.LA(1);, 							if ( (LA148_0==COMMA) ) {, 								alt148=1;, 							}, 							switch (alt148) {, 								case 1 :, 									// PhoenixSQL.g:921:74: COMMA scale= NUMBER, 									{, 									match(input,COMMA,FOLLOW_COMMA_in_term6437); if (state.failed) return ret;, 									scale=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_term6441); if (state.failed) return ret;, 									}, 									break;, , 							}, , 							match(input,RPAREN,FOLLOW_RPAREN_in_term6445); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					// PhoenixSQL.g:921:107: ( ARRAY | ( LSQUARE RSQUARE ) )?, 					int alt150=3;, 					int LA150_0 = input.LA(1);, 					if ( (LA150_0==ARRAY) ) {, 						alt150=1;, 					}, 					else if ( (LA150_0==LSQUARE) ) {, 						alt150=2;, 					}, 					switch (alt150) {, 						case 1 :, 							// PhoenixSQL.g:921:108: ARRAY, 							{, 							ar=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_term6452); if (state.failed) return ret;, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:921:116: ( LSQUARE RSQUARE ), 							{, 							// PhoenixSQL.g:921:116: ( LSQUARE RSQUARE ), 							// PhoenixSQL.g:921:117: LSQUARE RSQUARE, 							{, 							ar=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_term6457); if (state.failed) return ret;, 							ar=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_term6459); if (state.failed) return ret;, 							}, , 							}, 							break;, , 					}, , 					match(input,RPAREN,FOLLOW_RPAREN_in_term6464); if (state.failed) return ret;, 					if ( state.backtracking==0 ) { ret = factory.cast(e, dt,, 					                     length == null ? null : Integer.parseInt(length.getText()),, 					                     scale == null ? null : Integer.parseInt(scale.getText()),, 					                     ar!=null);, 					        }, 					}, 					break;, 				case 11 :, 					// PhoenixSQL.g:927:9: (n= NEXT | CURRENT ) VALUE FOR s= from_table_name, 					{, 					// PhoenixSQL.g:927:9: (n= NEXT | CURRENT ), 					int alt151=2;, 					int LA151_0 = input.LA(1);, 					if ( (LA151_0==NEXT) ) {, 						alt151=1;, 					}, 					else if ( (LA151_0==CURRENT) ) {, 						alt151=2;, 					}, , 					else {, 						if (state.backtracking>0) {state.failed=true; return ret;}, 						NoViableAltException nvae =, 							new NoViableAltException("", 151, 0, input);, 						throw nvae;, 					}, , 					switch (alt151) {, 						case 1 :, 							// PhoenixSQL.g:927:10: n= NEXT, 							{, 							n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term6487); if (state.failed) return ret;, 							}, 							break;, 						case 2 :, 							// PhoenixSQL.g:927:19: CURRENT, 							{, 							match(input,CURRENT,FOLLOW_CURRENT_in_term6491); if (state.failed) return ret;, 							}, 							break;, , 					}, , 					match(input,VALUE,FOLLOW_VALUE_in_term6494); if (state.failed) return ret;, 					match(input,FOR,FOLLOW_FOR_in_term6496); if (state.failed) return ret;, 					pushFollow(FOLLOW_from_table_name_in_term6500);, 					s=from_table_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { contextStack.peek().hasSequences(true);, 					          ret = n==null ? factory.currentValueFor(s) : factory.nextValueFor(s, null); }, 					}, 					break;, 				case 12 :, 					// PhoenixSQL.g:930:9: (n= NEXT ) lorb= literal_or_bind VALUES FOR s= from_table_name, 					{, 					// PhoenixSQL.g:930:9: (n= NEXT ), 					// PhoenixSQL.g:930:10: n= NEXT, 					{, 					n=(Token)match(input,NEXT,FOLLOW_NEXT_in_term6528); if (state.failed) return ret;, 					}, , 					pushFollow(FOLLOW_literal_or_bind_in_term6533);, 					lorb=literal_or_bind();, 					state._fsp--;, 					if (state.failed) return ret;, 					match(input,VALUES,FOLLOW_VALUES_in_term6535); if (state.failed) return ret;, 					match(input,FOR,FOLLOW_FOR_in_term6537); if (state.failed) return ret;, 					pushFollow(FOLLOW_from_table_name_in_term6541);, 					s=from_table_name();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) { contextStack.peek().hasSequences(true);, 					          ret = factory.nextValueFor(s, lorb); }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,update_statistics_node,3428-3441,[			switch ( input.LA(1) ) {, 				case INDEX:, 					{, 					alt56=1;, 					}, 					break;, 				case ALL:, 					{, 					alt56=2;, 					}, 					break;, 				case COLUMNS:, 					{, 					alt56=3;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,zero_or_more_data_types,8597-8605,[			switch (alt157) {, 				case 1 :, 					// PhoenixSQL.g:952:8: fa= function_argument, 					{, 					pushFollow(FOLLOW_function_argument_in_zero_or_more_data_types6719);, 					fa=function_argument();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(fa);}],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/parse/PhoenixSQLParser.java,zero_or_more_expressions,8520-8528,[			switch (alt155) {, 				case 1 :, 					// PhoenixSQL.g:947:9: v= expression, 					{, 					pushFollow(FOLLOW_expression_in_zero_or_more_expressions6674);, 					v=expression();, 					state._fsp--;, 					if (state.failed) return ret;, 					if ( state.backtracking==0 ) {ret.add(v);}],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/phoenix/parse/PrimaryKeyConstraint.java,isColumnRowTimestamp,74-74,[        return columnNameToRowTimestamp.get(columnName) != null && columnNameToRowTimestamp.get(columnName).getSecond() == Boolean.TRUE;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,nextStatement,96-96,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseExpression,154-154,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseLiteral,172-172,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseQuery,135-135,[                throw (SQLException) e.getCause();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/parse/SQLParser.java,parseStatement,116-116,[                throw (SQLException) e.getCause();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,125-128,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.and(children);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/parse/SelectStatementRewriter.java,,140-143,[        return leaveCompoundNode(node, nodes, new CompoundNodeFactory() {,             @Override,             public ParseNode createNode(List<ParseNode> children) {,                 return NODE_FACTORY.or(children);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/pherf/ConfigurationParserTest.java,testConfigReader,119-119,[        } catch (Exception e) {],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/phoenix/pherf/ConfigurationParserTest.java,getResourceUrl,126-126,[        URL resourceUrl = getClass().getResource("/scenario/test_scenario.xml");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pherf/DataIngestIT.java,applySchema,57-57,[        resources = new ArrayList<>(reader.getResourceList());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pherf/DataIngestIT.java,,138-144,[            Integer count = new JdbcSession(connection).sql(sql).select(new Outcome<Integer>() {,                 @Override public Integer handle(ResultSet resultSet, Statement statement),                         throws SQLException {,                     while (resultSet.next()) {,                         return resultSet.getInt(1);,                     },                     return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pherf/DataIngestIT.java,,204-210,[        Integer count = new JdbcSession(connection).sql(sql).select(new Outcome<Integer>() {,             @Override public Integer handle(ResultSet resultSet, Statement statement),                     throws SQLException {,                 while (resultSet.next()) {,                     return resultSet.getInt(1);,                 },                 return null;],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/pherf/Pherf.java,<init>,126-126,[            System.exit(1);],,<init>,172-172,[            System.exit(1);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/pherf/Pherf.java,run,264-264,[                    if (null != workload) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/pherf/Pherf.java,run,296-296,[            if (workloadExecutor != null) {],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/pherf/PherfConstants.java,create,80-81,[        if (instance == null) {,             instance = new PherfConstants();],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/pherf/PherfConstants.java,getProperties,96-97,[        if (instanceProperties == null) {,             instanceProperties = loadProperties(fileName);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/pherf/PherfMainIT.java,,27-27,[    public final ExpectedSystemExit exit = ExpectedSystemExit.none();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/pherf/ResultBaseTestIT.java,,42-42,[    protected static ResultUtil resultUtil = new ResultUtil();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/pherf/ResultBaseTestIT.java,,37-37,[    protected static PhoenixUtil util = PhoenixUtil.create(true);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pherf/RuleGeneratorTest.java,,147-165,[            Thread t = new Thread() {, ,                 @Override,                 public void run() {,                     for (int i = 0; i < increments; i++) {,                         try {,                             DataValue value = rulesApplier.getDataValue(column);,                             String strValue = value.getValue();,                             synchronized (testSet) {,                                 assertFalse("Incrementer gave a duplicate value: " + strValue, testSet.contains(strValue));,                                 assertTrue("Length did not equal expected.",,                                         strValue.length() == column.getLength());,                                 testSet.add(strValue);,                             },                         } catch (Exception e) {,                             fail("Caught an exception during test: " + e.getMessage());,                         },                     },                 }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/pherf/SchemaReaderIT.java,,40-40,[    protected static PhoenixUtil util = PhoenixUtil.create(true);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/pherf/SchemaReaderIT.java,assertApplySchemaTest,56-56,[                            .toString()));],,assertApplySchemaTest,55-55,[                    PherfConstants.RESOURCE_DATAMODEL + "/" + resources.get(0).getFileName()],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/phoenix/pherf/SchemaReaderIT.java,assertApplySchemaTest,61-61,[            URL resourceUrl = getClass().getResource("/scenario/test_scenario.xml");],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/pherf/configuration/Column.java,equals,62-62,[        Column col = (Column)column;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/phoenix/pherf/configuration/Column.java,equals,62-63,[        Column col = (Column)column;,         return (getType() == col.getType());],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/pherf/configuration/Column.java,equals,62-63,[        Column col = (Column)column;,         return (getType() == col.getType());],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/pherf/configuration/Query.java,setHint,115-115,[                    this.statement.toUpperCase()],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pherf/configuration/Query.java,setHint,115-115,[                    this.statement.toUpperCase()],,
BAD_PRACTICE,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS,org/apache/phoenix/pherf/configuration/Scenario.java,equals,56-56,[        Scenario scenario = (Scenario) object;],,
BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,org/apache/phoenix/pherf/configuration/Scenario.java,equals,56-57,[        Scenario scenario = (Scenario) object;,         return (this.tableName.equals(scenario.getTableName()));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pherf/configuration/Scenario.java,equals,57-57,[        return (this.tableName.equals(scenario.getTableName()));],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/pherf/configuration/XMLConfigParser.java,readDataModel,117-117,[        String fName = PherfConstants.RESOURCE_SCENARIO + "/" + file.getFileName().toString();],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/phoenix/pherf/jmx/MonitorManager.java,run,130-130,[                                Thread.sleep(getMonitorFrequency());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/pherf/jmx/monitors/FreeMemoryMonitor.java,getStat,27-27,[        Stat<Long> stat = new Stat(new Long(Runtime.getRuntime().freeMemory()));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/pherf/jmx/monitors/MaxMemoryMonitor.java,getStat,27-27,[        Stat<Long> stat = new Stat(new Long(Runtime.getRuntime().maxMemory()));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/pherf/jmx/monitors/ThreadMonitor.java,getStat,29-29,[        Stat<Integer> stat = new Stat(new Integer(ManagementFactory.getThreadMXBean().getThreadCount()));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/pherf/jmx/monitors/TotalMemoryMonitor.java,getStat,27-27,[        Stat<Long> stat = new Stat(new Long(Runtime.getRuntime().totalMemory()));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/pherf/result/ResultUtil.java,ensureBaseDirExists,158-158,[            baseDir.mkdir();],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/pherf/result/RunTime.java,getStartTime,62-62,[        return startTime;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/pherf/result/RunTime.java,<init>,55-55,[        this.startTime = startTime;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/pherf/result/RunTime.java,setStartTime,66-66,[        this.startTime = startTime;],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/phoenix/pherf/result/RunTime.java,compareTo,82-82,[        return compare(this, o);],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/phoenix/pherf/result/RunTime.java,,25-107,[public class RunTime implements Comparator<RunTime>, Comparable<RunTime> {,     private Date startTime;,     private Integer elapsedDurationInMs;,     private String message;,     private Long resultRowCount;,     private String explainPlan;, ,     @SuppressWarnings("unused") public RunTime() {,     }, ,     @SuppressWarnings("unused") public RunTime(Integer elapsedDurationInMs) {,         this(null, elapsedDurationInMs);,     }, ,     public RunTime(Long resultRowCount, Integer elapsedDurationInMs) {,         this(null, resultRowCount, elapsedDurationInMs);,     }, ,     public RunTime(Date startTime, Long resultRowCount, Integer elapsedDurationInMs) {,         this(null, null, startTime, resultRowCount, elapsedDurationInMs);,     }, ,     public RunTime(String message, Date startTime, Long resultRowCount,,             Integer elapsedDurationInMs) {,         this(message, null, startTime, resultRowCount, elapsedDurationInMs);,     }, ,     public RunTime(String message, String explainPlan, Date startTime, Long resultRowCount,,             Integer elapsedDurationInMs) {,         this.elapsedDurationInMs = elapsedDurationInMs;,         this.startTime = startTime;,         this.resultRowCount = resultRowCount;,         this.message = message;,         this.explainPlan = explainPlan;,     }, ,     @XmlAttribute() public Date getStartTime() {,         return startTime;,     }, ,     @SuppressWarnings("unused") public void setStartTime(Date startTime) {,         this.startTime = startTime;,     }, ,     @XmlAttribute() public Integer getElapsedDurationInMs() {,         return elapsedDurationInMs;,     }, ,     @SuppressWarnings("unused") public void setElapsedDurationInMs(Integer elapsedDurationInMs) {,         this.elapsedDurationInMs = elapsedDurationInMs;,     }, ,     @Override public int compare(RunTime r1, RunTime r2) {,         return r1.getElapsedDurationInMs().compareTo(r2.getElapsedDurationInMs());,     }, ,     @Override public int compareTo(RunTime o) {,         return compare(this, o);,     }, ,     @XmlAttribute() public String getMessage() {,         return message;,     }, ,     @SuppressWarnings("unused") public void setMessage(String message) {,         this.message = message;,     }, ,     @XmlAttribute() public String getExplainPlan() {,         return explainPlan;,     }, ,     @SuppressWarnings("unused") public void setExplainPlan(String explainPlan) {,         this.explainPlan = explainPlan;,     }, ,     @XmlAttribute() public Long getResultRowCount() {,         return resultRowCount;,     }, ,     @SuppressWarnings("unused") public void setResultRowCount(Long resultRowCount) {,         this.resultRowCount = resultRowCount;,     }],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/phoenix/pherf/configuration/Scenario.java,equals,56-57,[        Scenario scenario = (Scenario) object;,         return (this.tableName.equals(scenario.getTableName()));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/pherf/result/ThreadTime.java,getAvgTimeInMs,72-72,[        Integer totalTimeInMs = new Integer(0);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/pherf/result/impl/CSVFileResultHandler.java,open,84-84,[        csvPrinter = new CSVPrinter(new PrintWriter(resultFileName), CSVFormat.DEFAULT);],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/pherf/result/impl/CSVFileResultHandler.java,read,74-74,[            parser.close();],,read,50-50,[        CSVParser parser = null;],,read,53-53,[            File file = new File(resultFileName);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/pherf/result/impl/XMLResultHandler.java,write,46-46,[            os = new FileOutputStream(resultFileName);],,write,47-47,[            ResultValue resultValue = result.getResultValues().get(0);],,write,48-48,[            jaxbMarshaller.marshal(resultValue.getResultValue(), os);],,write,50-50,[            if (os != null) {],,write,51-51,[                os.flush();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/pherf/rules/RulesApplier.java,getDataValue,142-152,[                if ((column.getDataValues() != null) && (column.getDataValues().size() > 0)) {,                     data = pickDataValueFromList(dataValues);,                 } else {,                     Preconditions.checkArgument(length > 0, "length needs to be > 0");,                     if (column.getDataSequence() == DataSequence.SEQUENTIAL) {,                         data = getSequentialDataValue(column);,                     } else {,                         data = getRandomDataValue(column);,                     },                 },                 break;],,getDataValue,154-164,[                if ((column.getDataValues() != null) && (column.getDataValues().size() > 0)) {,                     data = pickDataValueFromList(dataValues);,                 } else {,                     Preconditions.checkArgument(length > 0, "length needs to be > 0");,                     if (column.getDataSequence() == DataSequence.SEQUENTIAL) {,                         data = getSequentialDataValue(column);,                     } else {,                         data = getRandomDataValue(column);,                     },                 },                 break;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/pherf/schema/SchemaReader.java,resourceToString,79-79,[        BufferedReader br = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream(fName)));],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/pherf/schema/SchemaReader.java,resourceToString,78-78,[        String fName = PherfConstants.RESOURCE_DATAMODEL + "/" + file.getFileName().toString();],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/phoenix/pherf/schema/SchemaReader.java,resourceToString,79-79,[        BufferedReader br = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream(fName)));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/schema/SchemaReader.java,applySchema,68-68,[                pUtil.executeStatement(resourceToString(file), connection);],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/phoenix/pherf/schema/SchemaReader.java,resourceToString,79-79,[        BufferedReader br = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream(fName)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,read,100-100,[    	FileReader in = new FileReader(resultFileName);],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,renderAsGoogleChartsHTML,166-166,[    		if (!lastKeyPrefix.equalsIgnoreCase(currentKeyPrefix) && lastKeyPrefix != "") {],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,read,100-100,[    	FileReader in = new FileReader(resultFileName);],,read,101-101,[    	final CSVParser parser = new CSVParser(in, CSVFormat.DEFAULT.withHeader());],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,getBlankRow,202-202,[    		ret += ",0,''";],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,getToolTipAsHTML,215-215,[    		ret += "<td>" + getToolText(nodeSet.getValue()) + "</td>";],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,,238-249,[    	private Map<String, Node> dataSet = new LinkedHashMap<String, Node>();, 		,     	public DataNode(String label, Node node) {,     		this.getDataSet().put(label, node);,     	},     	, 		public Map<String, Node> getDataSet() {, 			return dataSet;, 		}, 		public void setDataSet(Map<String, Node> dataSet) {, 			this.dataSet = dataSet;, 		}],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/pherf/util/GoogleChartGenerator.java,,261-376,[    	private DecimalFormat df = new DecimalFormat("#.#");,     	,     	public Node(long minTime, long avgTime, long numRuns, String explainPlan, String query, String tenantId, String label, long rowCount) {,     		this.setMinTime(minTime);,     		this.setAvgTime(avgTime);,     		this.setNumRuns(numRuns);,     		this.setExplainPlan(explainPlan);,     		this.setQuery(query);,     		this.setTenantId(tenantId);,     		this.setLabel(label);,     		this.setRowCount(rowCount);,     	},     	, 		String getExplainPlan() {, 			return explainPlan;, 		}, 		String getExplainPlanAsHTML() {, 			return "</br><font face=arial size=1><b>EXPLAIN PLAN </b>", 					+ explainPlan.replace("'", "") + "</font><br>";, 		}, 		, 		void setExplainPlan(String explainPlan) {, 			this.explainPlan = explainPlan;, 		}, 		long getTime(CompareType compareType) {, 			return (compareType == CompareType.AVERAGE ? getAvgTime() : getMinTime());, 		}, 		, 		long getMinTime() {, 			if (minTime <= 2) , 				return 2;, 			else, 				return minTime;, 		}, 		public String getMinTimeAsHTML() {, 			return "<font face=arial size=1><b>MIN TIME </b></font><font face=arial size=3>", 					+ minTime, 					+ " ms (", 					+ df.format((double) minTime / 1000), 					+ " sec)</font><br>";, 		}, 		void setMinTime(long minTime) {, 			this.minTime = minTime;, 		}, 		long getAvgTime() {, 			return avgTime;, 		}, 		public String getAvgTimeAsHTML() {, 			return "<font face=arial size=1><b>AVERAGE TIME </b></font><font face=arial size=3>", 					+ avgTime, 					+ " ms (", 					+ df.format((double) avgTime / 1000), 					+ " sec)</font><br>";, 		}, 		void setAvgTime(long avgTime) {, 			this.avgTime = avgTime;, 		}, , 		public long getNumRuns() {, 			return numRuns;, 		}, 		public String getNumRunsAsHTML() {, 			return "<font face=arial size=1><b>NUMBER OF RUNS </b></font><font face=arial size=3>", 					+ numRuns + "</font><br>";, 		}, , 		public void setNumRuns(long numRuns) {, 			this.numRuns = numRuns;, 		}, , 		public String getQuery() {, 			return query;, 		}, , 		public String getQueryAsHTML() {, 			return "<br><font face=arial size=1><b>QUERY </b>", 					+ query.replace("'", "") + " (TENANT ID: " + getTenantId(), 					+ ")</font><br>";, 		}, 		, 		public void setQuery(String query) {, 			this.query = query;, 		}, , 		public String getTenantId() {, 			return tenantId;, 		}, 		, 		public void setTenantId(String tenantId) {, 			this.tenantId = tenantId;, 		}, , 		public String getLabel() {, 			return label;, 		}, 		, 		public String getLabelAsHTML() {, 			return "<font face=arial size=4 color=#666699>" + label, 					+ "</font><br>";, 		}, , 		public void setLabel(String label) {, 			this.label = label;, 		}, , 		public long getRowCount() {, 			return rowCount;, 		}, 		public String getRowCountAsHTML() {, 			return "<font face=arial size=1><b>RESULT ROW COUNT </b></font><font face=arial size=3>", 					+ rowCount + "</font><br>";, 		}, , 		public void setRowCount(long rowCount) {, 			this.rowCount = rowCount;, 		}],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/pherf/util/PhoenixUtil.java,deleteTables,195-195,[        regexMatch = regexMatch.toUpperCase().replace("ALL", ".*");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/pherf/util/PhoenixUtil.java,getExplainPlan,352-352,[            statement = conn.prepareStatement("EXPLAIN " + query.getStatement());],,getExplainPlan,353-353,[            rs = statement.executeQuery();],,getExplainPlan,354-354,[            while (rs.next()) {],,getExplainPlan,358-358,[        } catch (Exception e) {],,getExplainPlan,359-359,[            e.printStackTrace();],,getExplainPlan,361-361,[            if (rs != null) rs.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pherf/util/PhoenixUtil.java,getExplainPlan,352-352,[            statement = conn.prepareStatement("EXPLAIN " + query.getStatement());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,deleteTables,208-208,[                        executeStatementThrowException("DROP TABLE "],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,executeQuerySetDdls,273-273,[                    executeStatement(query.getDdl(),],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,executeScenarioDdl,296-296,[                executeStatement(scenario.getDdl(), conn = getConnection(scenario.getTenantId()));],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,executeStatement,154-154,[            preparedStatement = connection.prepareStatement(sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,executeStatement,117-117,[            result = executeStatement(sql, connection);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,executeStatementThrowException,139-139,[            preparedStatement = connection.prepareStatement(sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,getExplainPlan,352-352,[            statement = conn.prepareStatement("EXPLAIN " + query.getStatement());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/util/PhoenixUtil.java,updatePhoenixStats,335-335,[        executeStatement("UPDATE STATISTICS " + tableName, scenario);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/phoenix/pherf/util/ResourceList.java,getResourcesFromDirectory,162-162,[        for (final File file : fileList) {],,getResourcesFromDirectory,161-161,[        final File[] fileList = directory.listFiles();],,
BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,org/apache/phoenix/pherf/util/ResourceList.java,getResourcesFromJarFile,130-130,[            zf = new ZipFile(file);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/pherf/workload/MultiThreadedRunner.java,timedQuery,111-111,[                query.getStatement().toUpperCase().trim().contains("COUNT(*)") ? true : false;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/pherf/workload/MultiThreadedRunner.java,timedQuery,123-123,[            statement = conn.prepareStatement(query.getStatement());],,timedQuery,124-124,[            boolean isQuery = statement.execute();],,timedQuery,144-144,[        } catch (Exception e) {],,timedQuery,145-145,[            e.printStackTrace();],,timedQuery,146-146,[            exception = e.getMessage();],,timedQuery,148-148,[            getThreadTime().getRunTimesInMs().add(new RunTime(exception, startDate, resultRowCount,],,timedQuery,149-149,[                    (int) (System.currentTimeMillis() - start)));],,timedQuery,151-151,[            if (rs != null) rs.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pherf/workload/MultiThreadedRunner.java,timedQuery,123-123,[            statement = conn.prepareStatement(query.getStatement());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/workload/MultiThreadedRunner.java,timedQuery,123-123,[            statement = conn.prepareStatement(query.getStatement());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/pherf/workload/MultiThreadedRunner.java,run,85-85,[                        lastResultWritten = System.currentTimeMillis();],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/phoenix/pherf/workload/MultithreadedDiffer.java,run,84-84,[        logger.info("\n\nThread Starting " + t.getName() + " ; " + query.getStatement() + " for "],,
CORRECTNESS,UWF_UNWRITTEN_FIELD,org/apache/phoenix/pherf/workload/MultithreadedDiffer.java,,84-84,[        logger.info("\n\nThread Starting " + t.getName() + " ; " + query.getStatement() + " for "],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/pherf/workload/QueryVerifier.java,exportCSV,81-81,[                                .getBytes());],,exportCSV,83-83,[                    fos.write(PherfConstants.NEW_LINE.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/pherf/workload/QueryVerifier.java,fileToLines,131-131,[            BufferedReader in = new BufferedReader(new FileReader(filename));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/pherf/workload/QueryVerifier.java,exportCSV,70-70,[        FileOutputStream fos = new FileOutputStream(fileName);],,exportCSV,72-72,[            conn = pUtil.getConnection(query.getTenantId());],,exportCSV,73-73,[            statement = conn.prepareStatement(query.getStatement());],,exportCSV,74-74,[            boolean isQuery = statement.execute();],,exportCSV,88-88,[        } catch (Exception e) {],,exportCSV,89-89,[            e.printStackTrace();],,exportCSV,91-91,[            if (rs != null) rs.close();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/pherf/workload/QueryVerifier.java,exportCSV,73-73,[            statement = conn.prepareStatement(query.getStatement());],,exportCSV,74-74,[            boolean isQuery = statement.execute();],,exportCSV,88-88,[        } catch (Exception e) {],,exportCSV,89-89,[            e.printStackTrace();],,exportCSV,91-91,[            if (rs != null) rs.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/pherf/workload/QueryVerifier.java,exportCSV,73-73,[            statement = conn.prepareStatement(query.getStatement());],,
BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,org/apache/phoenix/pherf/workload/QueryVerifier.java,exportCSV,70-70,[        FileOutputStream fos = new FileOutputStream(fileName);],,
BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,org/apache/phoenix/pherf/workload/QueryVerifier.java,fileToLines,131-131,[            BufferedReader in = new BufferedReader(new FileReader(filename));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/phoenix/pherf/workload/QueryVerifier.java,ensureBaseDirExists,169-169,[            baseDir.mkdir();],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/workload/QueryVerifier.java,exportCSV,73-73,[            statement = conn.prepareStatement(query.getStatement());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/pherf/workload/WriteWorkload.java,call,256-256,[                    stmt = connection.prepareStatement(sql);],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/pherf/workload/WriteWorkload.java,call,269-269,[                            if (i % PherfConstants.LOG_PER_NROWS == 0 && i != 0) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/phoenix/pherf/workload/WriteWorkload.java,,407-417,[        public Info(long duration, int rows) {,             this.duration = duration;,             this.rowCount = rows;,         }, ,         public long getDuration() {,             return duration;,         }, ,         public int getRowCount() {,             return rowCount;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/pig/PhoenixHBaseLoader.java,initializePhoenixPigConfiguration,146-146,[            this.tableName = pair.getFirst();],,initializePhoenixPigConfiguration,132-132,[        Pair<String,String> pair = null;],,initializePhoenixPigConfiguration,139-139,[             } else if (location.startsWith(PHOENIX_QUERY_SCHEME)) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/pig/PhoenixHBaseLoader.java,getPartitionKeys,247-247,[        return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForQuery,124-124,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,66-66,[        conn.createStatement().execute(ddl);],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForQuery,121-121,[        String ddl = String.format("CREATE TABLE " + TABLE +],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForQuery,121-121,[        String ddl = String.format("CREATE TABLE " + TABLE +],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,testSchemaForTable,63-63,[        final String ddl = String.format("CREATE TABLE %s "],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithBinaryDataTypes,198-198,[            assertEquals(i * 5, rs.getInt(2));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithBinaryDataTypes,192-192,[                .executeQuery(String.format("SELECT col1 , col2 , col3 , col4 , col5 , col6, col7  FROM %s ORDER BY col1" , tableName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStoreWithDateTime,248-248,[                .executeQuery(String.format("SELECT col1 , col2 , col3 , col4 FROM %s " , tableName));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStorerForSpecificColumns,137-137,[                .executeQuery("SELECT id, name,age FROM " + tableName + " ORDER BY id");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,testStorerForSpecificColumns,106-106,[        stmt.execute("CREATE TABLE " + tableName +],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/phoenix/pig/udf/ReserveNSequence.java,exec,80-80,[            String sql = getNextNSequenceSelectStatement(Long.valueOf(numToReserve), sequenceName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/udf/ReserveNSequence.java,exec,81-81,[            rs = connection.createStatement().executeQuery(sql);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/pig/udf/ReserveNSequenceTestIT.java,doTest,198-198,[        } catch (Exception e) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/pig/udf/ReserveNSequenceTestIT.java,doTest,201-201,[                e.getMessage().contains(props.getErrorMessage());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/pig/udf/ReserveNSequenceTestIT.java,createSequence,221-221,[        conn.createStatement().execute(String.format(CREATE_SEQUENCE_SYNTAX, SEQUENCE_NAME, 1, 1, 1, MAX_VALUE, 1));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/pig/udf/ReserveNSequenceTestIT.java,,52-52,[    public ExpectedException thrown = ExpectedException.none();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/QuerySchemaParserFunction.java,,70-73,[                                                            new Function<ColumnProjector,String>() {,                                                                 @Override,                                                                 public String apply(ColumnProjector column) {,                                                                     return column.getName();],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunction.java,apply,60-60,[            columnInfos = Lists.newArrayListWithCapacity(projectedColumns.size());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunction.java,,61-64,[            columnInfos = Lists.transform(projectedColumns, new Function<ColumnProjector,ColumnInfo>() {,                 @Override,                 public ColumnInfo apply(final ColumnProjector columnProjector) {,                     return new ColumnInfo(columnProjector.getName(), columnProjector.getExpression().getDataType().getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/pig/util/SqlQueryToColumnInfoFunctionTest.java,testValidSelectQuery,61-61,[        final List<ColumnInfo> actualColumnInfos = function.apply(selectQuery);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/pig/util/TypeUtil.java,transformToTuple,296-296,[        } catch (Exception ex) {],,
CORRECTNESS,DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE,org/apache/phoenix/pig/util/TypeUtilTest.java,testTransformToTuple,62-62,[        values.add(new BigDecimal(123123123.123213));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/pig/util/TypeUtilTest.java,testTransformToTuple,46-46,[        values.add("bytearray".getBytes());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/pig/writable/PhoenixPigDBWritable.java,getFieldSchemas,98-98,[        return fieldSchemas;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/pig/writable/PhoenixPigDBWritable.java,setFieldSchemas,102-102,[        this.fieldSchemas = fieldSchemas;],,
MT_CORRECTNESS,LI_LAZY_INIT_UPDATE_STATIC,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,doTeardown,144-149,[        if (driver != null) {,             try {,                 driver.close();,             } finally {,                 PhoenixTestDriver driver = BaseConnectionlessQueryTest.driver;,                 BaseConnectionlessQueryTest.driver = null;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,134-134,[            A_TIME = new ColumnRef(new TableRef(table), table.getColumn("A_TIME").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,135-135,[            A_TIMESTAMP = new ColumnRef(new TableRef(table), table.getColumn("A_TIMESTAMP").getPosition()).newColumnExpression();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/query/BaseConnectionlessQueryTest.java,,128-128,[            ORGANIZATION_ID = new ColumnRef(new TableRef(table), table.getColumn("ORGANIZATION_ID").getPosition()).newColumnExpression();],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/query/BaseTest.java,destroyDriver,571-575,[        if (driver != null) {,             try {,                 assertTrue(destroyDriver(driver));,             } finally {,                 driver = null;],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/query/BaseTest.java,setUpTestDriver,613-614,[        if (driver == null) {,             driver = initAndRegisterDriver(url, clientProps);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/query/BaseTest.java,tearDownMiniCluster,593-600,[                if (utility != null) {,                     utility.shutdownMiniCluster();,                 },             } finally {,                 try {,                     teardownTxManager();,                 } finally {,                     utility = null;],,
MALICIOUS_CODE,MS_CANNOT_BE_FINAL,org/apache/phoenix/query/BaseTest.java,,485-485,[    protected static int NUM_SLAVES_BASE = 1;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/query/BaseTest.java,,495-495,[    protected static boolean clusterInitialized = false;],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/query/BaseTest.java,,219-219,[    public static TemporaryFolder tmpFolder = new TemporaryFolder();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/query/BaseTest.java,createMultiCFTestTable,1863-1863,[            Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,createMultiCFTestTable,1864-1864,[            conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorSequences,921-921,[            conn.createStatement().execute("DROP SEQUENCE " + SchemaUtil.getEscapedTableName(rs.getString(2), rs.getString(3)));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/BaseTest.java,deletePriorTables,884-884,[                    conn.createStatement().executeUpdate(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/BaseTest.java,populateMultiCFTestTable,1880-1880,[            PreparedStatement stmt = conn.prepareStatement(upsert);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/BaseTest.java,populateTestTable,1774-1774,[            PreparedStatement stmt = conn.prepareStatement(upsert);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,46-49,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConfigurationFactory.java,,56-59,[            return PhoenixContextExecutor.callWithoutPropagation(new Callable<Configuration>() {,                 @Override,                 public Configuration call() throws Exception {,                     return HBaseConfiguration.create(conf);],,
STYLE,NS_DANGEROUS_NON_SHORT_CIRCUIT,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,checkClientServerCompatibility,1112-1112,[                hasIndexWALCodec &= hasIndexWALCodec(result.getValue());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearTableFromCache,2825-2825,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,clearCache,2544-2544,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,addColumn,2214-2214,[            metaConnection.createStatement().executeUpdate("ALTER TABLE " + tableName + " ADD " + (addIfNotExists ? " IF NOT EXISTS " : "") + columns );],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,checkAndRetry,896-896,[                        + watch.elapsedMillis()],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,separateAndValidateProperties,2068-2068,[                            props = new HashMap<String, Object>();],,
STYLE,UC_USELESS_OBJECT,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,setTTLForNewCFs,2152-2152,[                    props = new HashMap<String, Object>();],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,separateAndValidateProperties,1873-1873,[            List<Pair<String, Object>> propsList = properties.get(family);],,separateAndValidateProperties,1970-1970,[            Map<String, Object> stmtProps = stmtFamiliesPropsMap.get(f);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,239-243,[            Feature.LOCAL_INDEX, new FeatureSupported(){,                 @Override,                 public boolean isSupported(ConnectionQueryServices services) {,                     int hbaseVersion = services.getLowestClusterHBaseVersion();,                     return hbaseVersion < PhoenixDatabaseMetaData.MIN_LOCAL_SI_VERSION_DISALLOW || hbaseVersion > PhoenixDatabaseMetaData.MAX_LOCAL_SI_VERSION_DISALLOW;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1691-1707,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         AddColumnRequest.Builder builder = AddColumnRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                         instance.addColumn(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,2168-2184,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     DropColumnRequest.Builder builder = DropColumnRequest.newBuilder();,                     for (Mutation m : tableMetaData) {,                         MutationProto mp = ProtobufUtil.toProto(m);,                         builder.addTableMetadataMutations(mp.toByteString());,                     },                     builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                     instance.dropColumn(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,call,2441-2441,[                        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,call,2382-2382,[                                metaConnection.createStatement().executeUpdate(createSequenceTable);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,2509-2521,[                        HConstants.EMPTY_END_ROW, new Batch.Call<MetaDataService, ClearCacheResponse>() {,                     @Override,                     public ClearCacheResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<ClearCacheResponse> rpcCallback =,                                 new BlockingRpcCallback<ClearCacheResponse>();,                         ClearCacheRequest.Builder builder = ClearCacheRequest.newBuilder();,                         builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                         instance.clearCache(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,2580-2596,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,             @Override,             public MetaDataResponse call(MetaDataService instance) throws IOException {,                 ServerRpcController controller = new ServerRpcController();,                 BlockingRpcCallback<MetaDataResponse> rpcCallback =,                         new BlockingRpcCallback<MetaDataResponse>();,                 UpdateIndexStateRequest.Builder builder = UpdateIndexStateRequest.newBuilder();,                 for (Mutation m : tableMetaData) {,                     MutationProto mp = ProtobufUtil.toProto(m);,                     builder.addTableMetadataMutations(mp.toByteString());,                 },                 builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                 instance.updateIndexState(controller, builder.build(), rpcCallback);,                 if(controller.getFailedOn() != null) {,                     throw controller.getFailedOn();,                 },                 return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,2791-2804,[                        new Batch.Call<MetaDataService, ClearTableFromCacheResponse>() {,                             @Override,                             public ClearTableFromCacheResponse call(MetaDataService instance) throws IOException {,                                 ServerRpcController controller = new ServerRpcController();,                                 BlockingRpcCallback<ClearTableFromCacheResponse> rpcCallback = new BlockingRpcCallback<ClearTableFromCacheResponse>();,                                 ClearTableFromCacheRequest.Builder builder = ClearTableFromCacheRequest.newBuilder();,                                 builder.setTenantId(ByteStringer.wrap(tenantId));,                                 builder.setTableName(ByteStringer.wrap(tableName));,                                 builder.setSchemaName(ByteStringer.wrap(schemaName));,                                 builder.setClientTimestamp(clientTS);,                                 builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                                 instance.clearTableFromCache(controller, builder.build(), rpcCallback);,                                 if (controller.getFailedOn() != null) { throw controller.getFailedOn(); },                                 return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,3081-3099,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     GetFunctionsRequest.Builder builder = GetFunctionsRequest.newBuilder();,                     builder.setTenantId(ByteStringer.wrap(tenantIdBytes));,                     for(Pair<byte[], Long> function: functions) {,                         builder.addFunctionNames(ByteStringer.wrap(function.getFirst()));,                         builder.addFunctionTimestamps(function.getSecond().longValue());,                     },                     builder.setClientTimestamp(clientTimestamp);,                     builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                     instance.getFunctions(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,3117-3135,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         CreateFunctionRequest.Builder builder = CreateFunctionRequest.newBuilder();,                         for (Mutation m : functionData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setTemporary(temporary);,                         builder.setReplace(function.isReplace());,                         builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                         instance.createFunction(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,589-596,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.addColumn(tenantId, tableName, columns, tableTimeStamp, tableSeqNum, isImmutableRows, isWalDisabled, isMultitenant, storeNulls, isTransactional, resolvedTime);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,614-621,[        return metaDataMutated(tenantId, tableName, tableSeqNum, new Mutator() {,             @Override,             public PMetaData mutate(PMetaData metaData) throws SQLException {,                 try {,                     return metaData.removeColumn(tenantId, tableName, columnsToRemove, tableTimeStamp, tableSeqNum, resolvedTime);,                 } catch (TableNotFoundException e) {,                     // The DROP TABLE may have been processed first, so just ignore.,                     return metaData;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,841-851,[        checkAndRetry(new RetriableOperation() {, ,             @Override,             public String getOperatioName() {,                 return "UpdateOrNewTableDescriptor";,             }, ,             @Override,             public boolean checkForCompletion() throws TimeoutException, IOException {,                 HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);,                 return newTableDescriptor.equals(tableDesc);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1089-1101,[                    ht.coprocessorService(MetaDataService.class, null, null, new Batch.Call<MetaDataService,Long>() {,                         @Override,                         public Long call(MetaDataService instance) throws IOException {,                             ServerRpcController controller = new ServerRpcController();,                             BlockingRpcCallback<GetVersionResponse> rpcCallback =,                                     new BlockingRpcCallback<GetVersionResponse>();,                             GetVersionRequest.Builder builder = GetVersionRequest.newBuilder();,                             builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                             instance.getVersion(controller, builder.build(), rpcCallback);,                             if(controller.getFailedOn() != null) {,                                 throw controller.getFailedOn();,                             },                             return rpcCallback.get().getVersion();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1384-1401,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,             @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         CreateTableRequest.Builder builder = CreateTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                         CreateTableRequest build = builder.build();, 						instance.createTable(controller, build, rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1413-1430,[            new Batch.Call<MetaDataService, MetaDataResponse>() {,                 @Override,                 public MetaDataResponse call(MetaDataService instance) throws IOException {,                     ServerRpcController controller = new ServerRpcController();,                     BlockingRpcCallback<MetaDataResponse> rpcCallback =,                             new BlockingRpcCallback<MetaDataResponse>();,                     GetTableRequest.Builder builder = GetTableRequest.newBuilder();,                     builder.setTenantId(ByteStringer.wrap(tenantIdBytes));,                     builder.setSchemaName(ByteStringer.wrap(schemaBytes));,                     builder.setTableName(ByteStringer.wrap(tableBytes));,                     builder.setTableTimestamp(tableTimestamp);,                     builder.setClientTimestamp(clientTimestamp);,                     builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                     instance.getTable(controller, builder.build(), rpcCallback);,                     if(controller.getFailedOn() != null) {,                         throw controller.getFailedOn();,                     },                     return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1444-1462,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         DropTableRequest.Builder builder = DropTableRequest.newBuilder();,                         for (Mutation m : tableMetaData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setTableType(tableType.getSerializedValue());,                         builder.setCascade(cascade);,                         builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                         instance.dropTable(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/query/ConnectionQueryServicesImpl.java,,1499-1516,[                new Batch.Call<MetaDataService, MetaDataResponse>() {,                     @Override,                     public MetaDataResponse call(MetaDataService instance) throws IOException {,                         ServerRpcController controller = new ServerRpcController();,                         BlockingRpcCallback<MetaDataResponse> rpcCallback =,                                 new BlockingRpcCallback<MetaDataResponse>();,                         DropFunctionRequest.Builder builder = DropFunctionRequest.newBuilder();,                         for (Mutation m : functionData) {,                             MutationProto mp = ProtobufUtil.toProto(m);,                             builder.addTableMetadataMutations(mp.toByteString());,                         },                         builder.setIfExists(ifExists);,                         builder.setClientVersion(VersionUtil.encodeVersion(PHOENIX_MAJOR_VERSION, PHOENIX_MINOR_VERSION, PHOENIX_PATCH_NUMBER));,                         instance.dropFunction(controller, builder.build(), rpcCallback);,                         if(controller.getFailedOn() != null) {,                             throw controller.getFailedOn();,                         },                         return rpcCallback.get();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/ConnectionlessQueryServicesImpl.java,init,305-305,[                   metaConnection.createStatement().executeUpdate(createTableStatement);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/query/ConnectionlessTest.java,testConnectionlessUpsert,102-102,[        PreparedStatement statement = conn.prepareStatement(dmlStmt);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getLowerRange,291-291,[        return lowerRange;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/query/KeyRange.java,getUpperRange,299-299,[        return upperRange;],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeCoalesceTest.java,,38-158,[    private static final Random RANDOM = new Random(1);,     private final List<KeyRange> expected, input;, ,     public KeyRangeCoalesceTest(List<KeyRange> expected, List<KeyRange> input) {,         this.expected = expected;,         this.input = input;,     }, ,     @Parameters(name="{0} coalesces to {1}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("Z"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("E"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), true),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("D"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("Z"), true),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("A"), true),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), false, toBytes("Z"), false),                 )},,                 {expect(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("Z"), false),                 ),,                 input(,                         PChar.INSTANCE.getKeyRange(toBytes("A"), true, toBytes("B"), false),,                         PChar.INSTANCE.getKeyRange(toBytes("B"), true, toBytes("Z"), false),                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EVERYTHING_RANGE,                 ),,                 input(,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,                 )},,                 {expect(,                     EMPTY_RANGE,                 ),,                 input(,                     EMPTY_RANGE,                 )},         });,     },     @Test,     public void coalesce() {,         assertEquals(expected, KeyRange.coalesce(input));,         List<KeyRange> tmp = new ArrayList<KeyRange>(input);,         Collections.reverse(tmp);,         assertEquals(expected, KeyRange.coalesce(input));,         Collections.shuffle(tmp, RANDOM);,         assertEquals(expected, KeyRange.coalesce(input));,     },     ,     private static final List<KeyRange> expect(KeyRange... kr) {,         return asList(kr);,     },     ,     private static final List<KeyRange> input(KeyRange... kr) {,         return asList(kr);],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeIntersectTest.java,,40-95,[    public KeyRangeIntersectTest(KeyRange a, KeyRange b, KeyRange intersection) {,         this.a = a;,         this.b = b;,         this.intersection = intersection;,     }, ,     @Parameters(name="intersection of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), false, toBytes("E"), false),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,                 {,                     EVERYTHING_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EMPTY_RANGE,                 },,                 {,                     EMPTY_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EMPTY_RANGE,                 },,         });,     },     @Test,     public void intersect() {,         assertEquals(intersection, a.intersect(b));,         assertEquals(intersection, b.intersect(a));,     }],,
CORRECTNESS,IJU_NO_TESTS,org/apache/phoenix/query/KeyRangeUnionTest.java,,40-95,[    public KeyRangeUnionTest(KeyRange a, KeyRange b, KeyRange union) {,         this.a = a;,         this.b = b;,         this.union = union;,     }, ,     @Parameters(name="union of {0} and {1} is {2}"),     public static Collection<?> data() {,         return Arrays.asList(new Object[][] {,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("F"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("F"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("F"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("D"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), false, toBytes("E"), false),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), true),                 },,                 {,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                     EMPTY_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("C"), true, toBytes("E"), false),,                 },,                 {,                     EVERYTHING_RANGE,,                     PChar.INSTANCE.getKeyRange(toBytes("E"), false, toBytes("F"), true),,                     EVERYTHING_RANGE,,                 },,                 {,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,                 {,                     EMPTY_RANGE,,                     EVERYTHING_RANGE,,                     EVERYTHING_RANGE,,                 },,         });,     },     @Test,     public void union() {,         assertEquals(union, a.union(b));,         assertEquals(union, b.union(a));,     }],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,158-158,[    public static final byte[] ARRAY_VALUE_COLUMN_FAMILY = Bytes.toBytes("a");],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,196-196,[    public static final byte[] TABLE_FAMILY_BYTES = QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,171-171,[    public static final byte[] DESC_SEPARATOR_BYTE_ARRAY = new byte[] {DESC_SEPARATOR_BYTE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/coprocessor/MetaDataEndpointImpl.java,,241-241,[    private static final KeyValue EMPTY_KEYVALUE_KV = createFirstOnRow(ByteUtil.EMPTY_BYTE_ARRAY, TABLE_FAMILY_BYTES, QueryConstants.EMPTY_COLUMN_BYTES);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,183-183,[    public final static byte[] EMPTY_COLUMN_VALUE_BYTES = Bytes.toBytes(EMPTY_COLUMN_VALUE);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,134-134,[    public final static byte[] NAME_SEPARATOR_BYTES = Bytes.toBytes(NAME_SEPARATOR);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/KeyRange.java,,64-64,[    public static final KeyRange IS_NOT_NULL_RANGE = new KeyRange(ByteUtil.nextKey(QueryConstants.SEPARATOR_BYTE_ARRAY), true, UNBOUND, false);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,147-147,[    public final static byte[] SINGLE_COLUMN = SINGLE_COLUMN_NAME.getBytes();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixStatement.java,,406-406,[    private static final byte[] EXPLAIN_PLAN_FAMILY = QueryConstants.SINGLE_COLUMN_FAMILY;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/jdbc/PhoenixDatabaseMetaData.java,,93-93,[    public static final byte[] SYSTEM_CATALOG_SCHEMA_BYTES = QueryConstants.SYSTEM_SCHEMA_NAME_BYTES;],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,162-162,[    public static final byte[] TRUE = new byte[] {1};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/query/QueryConstants.java,,154-154,[    public final static byte[] UNGROUPED_AGG_ROW_KEY = Bytes.toBytes("a");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/query/QueryPlanTest.java,testTenantSpecificConnWithLimit,196-196,[        Connection conn = DriverManager.getConnection(getUrl());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/query/QueryPlanTest.java,testExplainPlan,179-179,[                ResultSet rs = statement.executeQuery("EXPLAIN " + query);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/query/QueryServicesOptions.java,,227-227,[    public static final Set<String> DEFAULT_QUERY_SERVER_SKIP_WORDS = new HashSet<String>() {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/query/QueryServicesOptions.java,,134-134,[    public static boolean DEFAULT_GROUPBY_SPILLABLE = true;],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_SUPERCLASS,org/apache/phoenix/queryserver/client/Driver.java,,27-47,[    new Driver().register();,   }, ,   public Driver() {,     super();,   }, ,   @Override,   protected DriverVersion createDriverVersion() {,     return DriverVersion.load(,         Driver.class,,         "org-apache-phoenix-remote-jdbc.properties",,         "Phoenix Remote JDBC Driver",,         "unknown version",,         "Apache Phoenix",,         "unknown version");,   }, ,   @Override,   protected String getConnectStringPrefix() {,     return CONNECT_STRING_PREFIX;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/queryserver/server/Main.java,run,227-227,[    } catch (Exception e) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/queryserver/server/Main.java,logProcessInfo,97-97,[        String key = entry.getKey().toLowerCase();],,logProcessInfo,98-98,[        String value = entry.getValue().toLowerCase();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/queryserver/server/Main.java,<init>,118-118,[    this.argv = argv;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/queryserver/server/Main.java,awaitRunning,154-154,[    runningLatch.await(timeout, unit);],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/rpc/PhoenixServerRpcIT.java,ensureTablesOnDifferentRegionServers,169-169,[		assertEquals("Expected single region for " + table1, tableRegions.size(), 1);],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/phoenix/rpc/PhoenixServerRpcIT.java,ensureTablesOnDifferentRegionServers,175-175,[		assertEquals("Expected single region for " + table2, tableRegions.size(), 1);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/rpc/PhoenixServerRpcIT.java,testIndexQos,119-119,[            conn.createStatement().execute(],,testIndexQos,122-122,[            conn.createStatement().execute(],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/rpc/PhoenixServerRpcIT.java,testIndexQos,126-126,[            stmt = conn.prepareStatement("UPSERT INTO " + INDEX_TABLE_FULL_NAME + " VALUES(?,?,?)");],,testIndexQos,135-135,[            stmt = conn.prepareStatement(selectSql);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/rpc/UpdateCacheIT.java,helpTestUpdateCache,150-150,[            ResultSet rs = conn.createStatement().executeQuery(selectSql);],,helpTestUpdateCache,156-156,[	        rs = conn.createStatement().executeQuery(selectSql);],,helpTestUpdateCache,162-162,[	        rs = conn.createStatement().executeQuery(selectSql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/rpc/UpdateCacheIT.java,helpTestUpdateCache,130-130,[	        PreparedStatement stmt = conn.prepareStatement(upsert);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/parse/PFunction.java,,39-277,[    private PName tenantId = null;,     private final PName functionName;,     private List<FunctionArgument> args;,     private PName className;,     private PName jarPath;,     private PName returnType;,     private PTableKey functionKey;,     private long timeStamp;,     private int estimatedSize;,     private boolean temporary;,     private boolean replace;, ,     public PFunction(long timeStamp) { // For index delete marker,         this.timeStamp = timeStamp;,         this.args = Collections.emptyList();,         this.functionName = null;,     }, ,     public PFunction(String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath) {,         this(functionName,args,returnType,className, jarPath, HConstants.LATEST_TIMESTAMP);,     }, ,     public PFunction(String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath, long timeStamp) {,         this(null, functionName, args, returnType, className, jarPath, timeStamp);,     }    , ,     public PFunction(PName tenantId, String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath, long timeStamp) {,         this(tenantId, functionName, args, returnType, className, jarPath, timeStamp, false);,     },     ,     public PFunction(PFunction function, boolean temporary) {,         this(function.getTenantId(), function.getFunctionName(), function.getFunctionArguments(),,                 function.getReturnType(), function.getClassName(), function.getJarPath(), function,                         .getTimeStamp(), temporary, function.isReplace());,     }, ,     public PFunction(PFunction function, boolean temporary, boolean isReplace) {,         this(function.getTenantId(), function.getFunctionName(), function.getFunctionArguments(),,                 function.getReturnType(), function.getClassName(), function.getJarPath(), function,                         .getTimeStamp(), temporary, isReplace);,     }, ,     public PFunction(PName tenantId, String functionName, List<FunctionArgument> args,,             String returnType, String className, String jarPath, long timeStamp, boolean temporary) {,         this(tenantId, functionName, args, returnType, className, jarPath, timeStamp, temporary,,                 false);,     }, ,     public PFunction(PName tenantId, String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath, long timeStamp, boolean temporary, boolean replace) {,         this.tenantId = tenantId;,         this.functionName = PNameFactory.newName(functionName);,         if (args == null){ ,             this.args = new ArrayList<FunctionArgument>();,         } else {,             this.args = args;,         },         this.className = PNameFactory.newName(className);,         this.jarPath = jarPath == null ? null : PNameFactory.newName(jarPath);,         this.returnType = PNameFactory.newName(returnType);,         this.functionKey = new PTableKey(this.tenantId, this.functionName.getString());,         this.timeStamp = timeStamp;,         int estimatedSize = SizedUtil.OBJECT_SIZE * 2 + 23 * SizedUtil.POINTER_SIZE + 4 * SizedUtil.INT_SIZE + 2 * SizedUtil.LONG_SIZE + 2 * SizedUtil.INT_OBJECT_SIZE +,                 PNameFactory.getEstimatedSize(tenantId) +,                 PNameFactory.getEstimatedSize(this.functionName) +,                 PNameFactory.getEstimatedSize(this.className) +,                  (jarPath==null?0:PNameFactory.getEstimatedSize(this.jarPath));,         this.temporary = temporary;,         this.replace = replace;,     }, ,     public PFunction(PFunction function) {,         this(function, function.isTemporaryFunction());,     }, ,     public String getFunctionName() {,         return functionName == null ? null : functionName.getString();,     }, ,     public List<FunctionArgument> getFunctionArguments() {,         return args;,     }, ,     public String getClassName() {,         return className.getString();,     }, ,     public String getJarPath() {,         return jarPath == null ? null : jarPath.getString();,     }, ,     public String getReturnType() {,         return returnType.getString();,     },     ,     public PTableKey getKey() {,         return this.functionKey;,     },     ,     public long getTimeStamp() {,         return this.timeStamp;,     },     ,     public PName getTenantId() {,         return this.tenantId;,     },     ,     public boolean isTemporaryFunction() {,         return temporary;,     },     ,     public static class FunctionArgument {,         private final PName argumentType;,         private final boolean isArrayType;,         private final boolean isConstant;,         private final LiteralExpression defaultValue;,         private final LiteralExpression minValue;,         private final LiteralExpression maxValue;,         private short argPosition;,         ,         public FunctionArgument(String argumentType, boolean isArrayType, boolean isConstant, LiteralExpression defaultValue,,                 LiteralExpression minValue, LiteralExpression maxValue) {,             this.argumentType = PNameFactory.newName(argumentType);,             this.isArrayType = isArrayType;,             this.isConstant = isConstant;,             this.defaultValue = defaultValue;,             this.minValue = minValue;,             this.maxValue = maxValue;,         },         public FunctionArgument(String argumentType, boolean isArrayType, boolean isConstant, LiteralExpression defaultValue,,                 LiteralExpression minValue, LiteralExpression maxValue, short argPosition) {,             this(argumentType, isArrayType, isConstant, defaultValue, minValue, maxValue);,             this.argPosition = argPosition;,         }, ,         public String getArgumentType() {,             return argumentType.getString();,         }, ,         public boolean isConstant() {,             return isConstant;,         }, ,         public boolean isArrayType() {,             return isArrayType;,         }, ,         public LiteralExpression getDefaultValue() {,             return defaultValue;,         }, ,         public LiteralExpression getMinValue() {,             return minValue;,         }, ,         public LiteralExpression getMaxValue() {,             return maxValue;,         },         ,         public short getArgPosition() {,             return argPosition;,         },     },     ,     public static PFunctionProtos.PFunction toProto(PFunction function) {,         PFunctionProtos.PFunction.Builder builder = PFunctionProtos.PFunction.newBuilder();,         if(function.getTenantId() != null){,           builder.setTenantId(ByteStringer.wrap(function.getTenantId().getBytes()));,         },         builder.setFunctionName(function.getFunctionName());,         builder.setClassname(function.getClassName());,         if (function.getJarPath() != null) {,             builder.setJarPath(function.getJarPath());,         },         builder.setReturnType(function.getReturnType());,         builder.setTimeStamp(function.getTimeStamp());,         for(FunctionArgument arg: function.getFunctionArguments()) {,             PFunctionProtos.PFunctionArg.Builder argBuilder = PFunctionProtos.PFunctionArg.newBuilder();,             argBuilder.setArgumentType(arg.getArgumentType());,             argBuilder.setIsArrayType(arg.isArrayType);,             argBuilder.setIsConstant(arg.isConstant);,             if(arg.getDefaultValue() != null) {,                 argBuilder.setDefaultValue((String)arg.getDefaultValue().getValue());,             },             if(arg.getMinValue() != null) {,                 argBuilder.setMinValue((String)arg.getMinValue().getValue());,             },             if(arg.getMaxValue() != null) {,                 argBuilder.setMaxValue((String)arg.getMaxValue().getValue());,             },             builder.addArguments(argBuilder.build());,         },         if(builder.hasIsReplace()) {,             builder.setIsReplace(function.isReplace());,         },         return builder.build();,       }, ,     public static PFunction createFromProto(,             org.apache.phoenix.coprocessor.generated.PFunctionProtos.PFunction function) {,         PName tenantId = null;,         if(function.hasTenantId()){,           tenantId = PNameFactory.newName(function.getTenantId().toByteArray());,         },         String functionName = function.getFunctionName();,         long timeStamp = function.getTimeStamp();,         String className = function.getClassname();,         String jarPath = function.getJarPath();,         String returnType = function.getReturnType();,         List<FunctionArgument> args = new ArrayList<FunctionArgument>(function.getArgumentsCount());,         for(PFunctionArg arg: function.getArgumentsList()) {,             String argType = arg.getArgumentType();,             boolean isArrayType = arg.hasIsArrayType()?arg.getIsArrayType():false;, 			PDataType dataType = isArrayType ? PDataType.fromTypeId(PDataType, 					.sqlArrayType(SchemaUtil.normalizeIdentifier(SchemaUtil, 							.normalizeIdentifier(argType)))) : PDataType, 					.fromSqlTypeName(SchemaUtil.normalizeIdentifier(argType));,             boolean isConstant = arg.hasIsConstant()?arg.getIsConstant():false;,             String defaultValue = arg.hasDefaultValue()?arg.getDefaultValue():null;,             String minValue = arg.hasMinValue()?arg.getMinValue():null;,             String maxValue = arg.hasMaxValue()?arg.getMaxValue():null;,             args.add(new FunctionArgument(argType, isArrayType, isConstant,,                     defaultValue == null ? null : LiteralExpression.newConstant((new LiteralParseNode(dataType.toObject(defaultValue))).getValue()),,                     minValue == null ? null : LiteralExpression.newConstant((new LiteralParseNode(dataType.toObject(minValue))).getValue()),,                     maxValue == null ? null : LiteralExpression.newConstant((new LiteralParseNode(dataType.toObject(maxValue))).getValue())));,         },         return new PFunction(tenantId, functionName, args, returnType, className, jarPath,,                 timeStamp, false, function.hasIsReplace() ? true : false);,     }, ,     public int getEstimatedSize() {,         return estimatedSize;,     }, ,     public boolean isReplace() {,         return this.replace;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/phoenix/schema/ColumnRef.java,equals,84-90,[        if (this == obj) return true;,         if (obj == null) return false;,         if (getClass() != obj.getClass()) return false;,         ColumnRef other = (ColumnRef)obj;,         if (columnPosition != other.columnPosition) return false;,         if (!tableRef.equals(other.tableRef)) return false;,         return true;],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/phoenix/schema/MetaDataClient.java,updateCache,472-472,[        resolvedTimestamp = resolvedTimestamp==null ? TransactionUtil.getResolvedTimestamp(connection, isTransactional, HConstants.LATEST_TIMESTAMP) : resolvedTimestamp;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/MetaDataClient.java,dropColumn,3141-3141,[                    table = connection.getTable(new PTableKey(tenantId, fullTableName));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/schema/MetaDataClient.java,addColumn,2814-2814,[                byte[] family = families.size() > 0 ? families.iterator().next().getBytes() : null;],,
CORRECTNESS,EC_UNRELATED_CLASS_AND_INTERFACE,org/apache/phoenix/schema/MetaDataClient.java,createTableInternal,2004-2004,[                        if (!familyName.equals(QueryConstants.ALL_FAMILY_PROPERTIES_KEY) && prop.getFirst().equals(TTL)) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/phoenix/schema/MetaDataClient.java,newColumn,2728-2728,[                        PColumn column = newColumn(position++, colDef, PrimaryKeyConstraint.EMPTY, table.getDefaultFamilyName() == null ? null : table.getDefaultFamilyName().getString(), true);],,newColumn,2724-2724,[                        if (colDef != null && colDef.isRowTimestamp()) {],,newColumn,2712-2712,[                        if (colDef != null && !colDef.isNull()) {],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/schema/MetaDataClient.java,deleteFromStatsTable,2429-2429,[        Connection conn = DriverManager.getConnection(connection.getURL(), props);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/MetaDataClient.java,getNewEmptyColumnFamilyOrNull,2973-2973,[        return null;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/phoenix/schema/MetaDataClient.java,createTableInternal,1735-1735,[            if (pkConstraint.getNumColumnsWithRowTimestamp()>0 && transactional) {],,createTableInternal,1905-1905,[                    if (  Boolean.FALSE.equals(colDef.isNull()) &&],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/phoenix/schema/MetaDataClient.java,createFunction,1484-1489,[                    addFunctionToCache(result);,                 },             case NEWER_FUNCTION_FOUND:,                     // Add function to ConnectionQueryServices so it's cached, but don't add,                     // it to this connection as we can't see it.,                     throw new NewerFunctionAlreadyExistsException(function.getFunctionName(), result.getFunctions().get(0));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,deleteFromStatsTable,2439-2439,[            conn.createStatement().execute(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,dropColumnMutations,2931-2931,[        connection.createStatement().execute(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/MetaDataClient.java,updateStatisticsInternal,929-929,[        ResultSet rs = connection.createStatement().executeQuery(query);],,
STYLE,UC_USELESS_CONDITION,org/apache/phoenix/schema/MetaDataClient.java,checkAndValidateRowTimestampCol,1532-1532,[                if (isColumnDeclaredRowTimestamp && !isColumnPartOfPk) { ],,checkAndValidateRowTimestampCol,1539-1539,[                if (isColumnDeclaredRowTimestamp && (dataType != PLong.INSTANCE && dataType != PUnsignedLong.INSTANCE && !dataType.isCoercibleTo(PTimestamp.INSTANCE))) { ],,checkAndValidateRowTimestampCol,1545-1545,[                if (rowTimeStampColAlreadyFound && isColumnDeclaredRowTimestamp) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,893-900,[                    PTable indexLogicalTable = new DelegateTable(table) {,                         @Override,                         public PName getPhysicalName() {,                             return name;,                         },                         @Override,                         public PTableStats getTableStats() {,                             return PTableStats.EMPTY_STATS;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,908-911,[        return new MutationState(1, connection) {,             @Override,             public long getUpdateCount() {,                 return count;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,943-946,[            PTable nonTxnLogicalTable = new DelegateTable(logicalTable) {,                 @Override,                 public boolean isTransactional() {,                     return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,2063-2070,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public byte[] getViewConstant() {,                                 return viewColumnConstants[columnPosition];,                             },                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,2074-2077,[                        columns.set(i, column = new DelegateColumn(column) {,                             @Override,                             public boolean isViewReferenced() {,                                 return isViewColumnReferenced.get(columnPosition);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/MetaDataClient.java,,2933-2936,[        Collections.sort(columnsToDrop,new Comparator<PColumn> () {,             @Override,             public int compare(PColumn left, PColumn right) {,                return Ints.compare(left.getPosition(), right.getPosition());],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/phoenix/parse/PFunction.java,,39-277,[    private PName tenantId = null;,     private final PName functionName;,     private List<FunctionArgument> args;,     private PName className;,     private PName jarPath;,     private PName returnType;,     private PTableKey functionKey;,     private long timeStamp;,     private int estimatedSize;,     private boolean temporary;,     private boolean replace;, ,     public PFunction(long timeStamp) { // For index delete marker,         this.timeStamp = timeStamp;,         this.args = Collections.emptyList();,         this.functionName = null;,     }, ,     public PFunction(String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath) {,         this(functionName,args,returnType,className, jarPath, HConstants.LATEST_TIMESTAMP);,     }, ,     public PFunction(String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath, long timeStamp) {,         this(null, functionName, args, returnType, className, jarPath, timeStamp);,     }    , ,     public PFunction(PName tenantId, String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath, long timeStamp) {,         this(tenantId, functionName, args, returnType, className, jarPath, timeStamp, false);,     },     ,     public PFunction(PFunction function, boolean temporary) {,         this(function.getTenantId(), function.getFunctionName(), function.getFunctionArguments(),,                 function.getReturnType(), function.getClassName(), function.getJarPath(), function,                         .getTimeStamp(), temporary, function.isReplace());,     }, ,     public PFunction(PFunction function, boolean temporary, boolean isReplace) {,         this(function.getTenantId(), function.getFunctionName(), function.getFunctionArguments(),,                 function.getReturnType(), function.getClassName(), function.getJarPath(), function,                         .getTimeStamp(), temporary, isReplace);,     }, ,     public PFunction(PName tenantId, String functionName, List<FunctionArgument> args,,             String returnType, String className, String jarPath, long timeStamp, boolean temporary) {,         this(tenantId, functionName, args, returnType, className, jarPath, timeStamp, temporary,,                 false);,     }, ,     public PFunction(PName tenantId, String functionName, List<FunctionArgument> args, String returnType,,             String className, String jarPath, long timeStamp, boolean temporary, boolean replace) {,         this.tenantId = tenantId;,         this.functionName = PNameFactory.newName(functionName);,         if (args == null){ ,             this.args = new ArrayList<FunctionArgument>();,         } else {,             this.args = args;,         },         this.className = PNameFactory.newName(className);,         this.jarPath = jarPath == null ? null : PNameFactory.newName(jarPath);,         this.returnType = PNameFactory.newName(returnType);,         this.functionKey = new PTableKey(this.tenantId, this.functionName.getString());,         this.timeStamp = timeStamp;,         int estimatedSize = SizedUtil.OBJECT_SIZE * 2 + 23 * SizedUtil.POINTER_SIZE + 4 * SizedUtil.INT_SIZE + 2 * SizedUtil.LONG_SIZE + 2 * SizedUtil.INT_OBJECT_SIZE +,                 PNameFactory.getEstimatedSize(tenantId) +,                 PNameFactory.getEstimatedSize(this.functionName) +,                 PNameFactory.getEstimatedSize(this.className) +,                  (jarPath==null?0:PNameFactory.getEstimatedSize(this.jarPath));,         this.temporary = temporary;,         this.replace = replace;,     }, ,     public PFunction(PFunction function) {,         this(function, function.isTemporaryFunction());,     }, ,     public String getFunctionName() {,         return functionName == null ? null : functionName.getString();,     }, ,     public List<FunctionArgument> getFunctionArguments() {,         return args;,     }, ,     public String getClassName() {,         return className.getString();,     }, ,     public String getJarPath() {,         return jarPath == null ? null : jarPath.getString();,     }, ,     public String getReturnType() {,         return returnType.getString();,     },     ,     public PTableKey getKey() {,         return this.functionKey;,     },     ,     public long getTimeStamp() {,         return this.timeStamp;,     },     ,     public PName getTenantId() {,         return this.tenantId;,     },     ,     public boolean isTemporaryFunction() {,         return temporary;,     },     ,     public static class FunctionArgument {,         private final PName argumentType;,         private final boolean isArrayType;,         private final boolean isConstant;,         private final LiteralExpression defaultValue;,         private final LiteralExpression minValue;,         private final LiteralExpression maxValue;,         private short argPosition;,         ,         public FunctionArgument(String argumentType, boolean isArrayType, boolean isConstant, LiteralExpression defaultValue,,                 LiteralExpression minValue, LiteralExpression maxValue) {,             this.argumentType = PNameFactory.newName(argumentType);,             this.isArrayType = isArrayType;,             this.isConstant = isConstant;,             this.defaultValue = defaultValue;,             this.minValue = minValue;,             this.maxValue = maxValue;,         },         public FunctionArgument(String argumentType, boolean isArrayType, boolean isConstant, LiteralExpression defaultValue,,                 LiteralExpression minValue, LiteralExpression maxValue, short argPosition) {,             this(argumentType, isArrayType, isConstant, defaultValue, minValue, maxValue);,             this.argPosition = argPosition;,         }, ,         public String getArgumentType() {,             return argumentType.getString();,         }, ,         public boolean isConstant() {,             return isConstant;,         }, ,         public boolean isArrayType() {,             return isArrayType;,         }, ,         public LiteralExpression getDefaultValue() {,             return defaultValue;,         }, ,         public LiteralExpression getMinValue() {,             return minValue;,         }, ,         public LiteralExpression getMaxValue() {,             return maxValue;,         },         ,         public short getArgPosition() {,             return argPosition;,         },     },     ,     public static PFunctionProtos.PFunction toProto(PFunction function) {,         PFunctionProtos.PFunction.Builder builder = PFunctionProtos.PFunction.newBuilder();,         if(function.getTenantId() != null){,           builder.setTenantId(ByteStringer.wrap(function.getTenantId().getBytes()));,         },         builder.setFunctionName(function.getFunctionName());,         builder.setClassname(function.getClassName());,         if (function.getJarPath() != null) {,             builder.setJarPath(function.getJarPath());,         },         builder.setReturnType(function.getReturnType());,         builder.setTimeStamp(function.getTimeStamp());,         for(FunctionArgument arg: function.getFunctionArguments()) {,             PFunctionProtos.PFunctionArg.Builder argBuilder = PFunctionProtos.PFunctionArg.newBuilder();,             argBuilder.setArgumentType(arg.getArgumentType());,             argBuilder.setIsArrayType(arg.isArrayType);,             argBuilder.setIsConstant(arg.isConstant);,             if(arg.getDefaultValue() != null) {,                 argBuilder.setDefaultValue((String)arg.getDefaultValue().getValue());,             },             if(arg.getMinValue() != null) {,                 argBuilder.setMinValue((String)arg.getMinValue().getValue());,             },             if(arg.getMaxValue() != null) {,                 argBuilder.setMaxValue((String)arg.getMaxValue().getValue());,             },             builder.addArguments(argBuilder.build());,         },         if(builder.hasIsReplace()) {,             builder.setIsReplace(function.isReplace());,         },         return builder.build();,       }, ,     public static PFunction createFromProto(,             org.apache.phoenix.coprocessor.generated.PFunctionProtos.PFunction function) {,         PName tenantId = null;,         if(function.hasTenantId()){,           tenantId = PNameFactory.newName(function.getTenantId().toByteArray());,         },         String functionName = function.getFunctionName();,         long timeStamp = function.getTimeStamp();,         String className = function.getClassname();,         String jarPath = function.getJarPath();,         String returnType = function.getReturnType();,         List<FunctionArgument> args = new ArrayList<FunctionArgument>(function.getArgumentsCount());,         for(PFunctionArg arg: function.getArgumentsList()) {,             String argType = arg.getArgumentType();,             boolean isArrayType = arg.hasIsArrayType()?arg.getIsArrayType():false;, 			PDataType dataType = isArrayType ? PDataType.fromTypeId(PDataType, 					.sqlArrayType(SchemaUtil.normalizeIdentifier(SchemaUtil, 							.normalizeIdentifier(argType)))) : PDataType, 					.fromSqlTypeName(SchemaUtil.normalizeIdentifier(argType));,             boolean isConstant = arg.hasIsConstant()?arg.getIsConstant():false;,             String defaultValue = arg.hasDefaultValue()?arg.getDefaultValue():null;,             String minValue = arg.hasMinValue()?arg.getMinValue():null;,             String maxValue = arg.hasMaxValue()?arg.getMaxValue():null;,             args.add(new FunctionArgument(argType, isArrayType, isConstant,,                     defaultValue == null ? null : LiteralExpression.newConstant((new LiteralParseNode(dataType.toObject(defaultValue))).getValue()),,                     minValue == null ? null : LiteralExpression.newConstant((new LiteralParseNode(dataType.toObject(minValue))).getValue()),,                     maxValue == null ? null : LiteralExpression.newConstant((new LiteralParseNode(dataType.toObject(maxValue))).getValue())));,         },         return new PFunction(tenantId, functionName, args, returnType, className, jarPath,,                 timeStamp, false, function.hasIsReplace() ? true : false);,     }, ,     public int getEstimatedSize() {,         return estimatedSize;,     }, ,     public boolean isReplace() {,         return this.replace;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PColumnImpl.java,getViewConstant,189-189,[        return viewConstant;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,getSerializedBytes,46-46,[        return serializedBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PIndexState.java,toBytes,50-50,[        return nameBytesValue;],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/phoenix/schema/PMetaDataImpl.java,clone,233-233,[        return new PMetaDataImpl(this.metaData);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/PMetaDataImpl.java,,184-198,[                return new Iterator<PTable>() {, ,                     @Override,                     public boolean hasNext() {,                         return iterator.hasNext();,                     }, ,                     @Override,                     public PTable next() {,                         return iterator.next().getTable();,                     }, ,                     @Override,                     public void remove() {,                         throw new UnsupportedOperationException();],,
MT_CORRECTNESS,DC_DOUBLECHECK,org/apache/phoenix/schema/PNameImpl.java,getBytesPtr,74-76,[        if (data.ptr == null) {,             synchronized (data.bytesName) {,                 if (data.ptr == null) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/schema/PTable.java,fromToken,109-109,[            return IndexType.valueOf(token.trim().toUpperCase());],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,97-97,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,143-143,[            return byteValue;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/PTable.java,getBytes,55-55,[            return byteValue;],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/PTableImpl.java,createFromProto,1011-1011,[            pTableStatsProto.getGuidePostsByteCount();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,57-57,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeySchemaTest.java,assertIteration,66-66,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,53-53,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(" + dataColumns + " CONSTRAINT pk PRIMARY KEY (" + pk + "))  " + (dataProps.isEmpty() ? "" : dataProps) );],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/schema/RowKeyValueAccessorTest.java,assertExpectedRowKeyValue,62-62,[        PreparedStatement stmt = conn.prepareStatement(buf.toString());],,
BAD_PRACTICE,EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS,org/apache/phoenix/schema/SequenceAllocation.java,equals,57-57,[        return sequenceKey.equals(obj);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/SequenceKey.java,getKey,42-42,[        return key;],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getSchemaName,61-61,[            c = this.schemaName == that.getSchemaName() ? 0 : this.schemaName == null ? -1 : that.getSchemaName() == null ? 1 : this.schemaName.compareTo(that.getSchemaName());],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/phoenix/schema/SequenceKey.java,getTenantId,59-59,[        int c = this.tenantId == that.getTenantId() ? 0 : this.tenantId == null ? -1 : that.getTenantId() == null ? 1 : this.tenantId.compareTo(that.getTenantId());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/schema/SortOrderTest.java,descSortOrderTransformsOp,70-90,[	    	switch (op) {, 			case EQUAL:, 				assertSame(CompareOp.EQUAL, oppositeOp);, 				break;, 			case GREATER:, 				assertSame(CompareOp.LESS, oppositeOp);, 				break;, 			case GREATER_OR_EQUAL:, 				assertSame(CompareOp.LESS_OR_EQUAL, oppositeOp);, 				break;, 			case LESS:, 				assertSame(CompareOp.GREATER, oppositeOp);, 				break;, 			case LESS_OR_EQUAL:, 				assertSame(CompareOp.GREATER_OR_EQUAL, oppositeOp);, 				break;, 			case NOT_EQUAL:, 				assertSame(CompareOp.NOT_EQUAL, oppositeOp);, 				break;, 			case NO_OP:, 				assertSame(CompareOp.NO_OP, oppositeOp);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/ValueBitSetTest.java,,37-56,[                PDatum datum = new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return fieldIndex <= nNotNull;,                     },                     @Override,                     public PDataType getDataType() {,                         return PDataType.values()[fieldIndex % PDataType.values().length];,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     }, 					@Override, 					public SortOrder getSortOrder() {, 						return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/ValueBitSetTest.java,,81-105,[            builder.addField(new PDatum() {,                 @Override,                 public boolean isNullable() {,                     // not nullable till index reaches minNullableIndex,                     return fieldIndex < minNullableIndex;,                 }, ,                 @Override,                 public SortOrder getSortOrder() {,                     return SortOrder.getDefault();,                 }, ,                 @Override,                 public Integer getScale() {,                     return null;,                 }, ,                 @Override,                 public Integer getMaxLength() {,                     return null;,                 }, ,                 @Override,                 public PDataType getDataType() {,                     return PDataType.values()[fieldIndex % PDataType.values().length];],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/phoenix/schema/stats/GuidePostsInfo.java,deserializeGuidePostsInfo,164-164,[                            in.read(gp);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/stats/StatisticsCollectionRunTracker.java,,67-72,[        executor = Executors.newFixedThreadPool(poolSize, new ThreadFactory() {,             @Override,             public Thread newThread(Runnable r) {,                 Thread t = Executors.defaultThreadFactory().newThread(r);,                 t.setDaemon(true);,                 return t;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/schema/stats/StatisticsCollector.java,addGuidePost,273-273,[        this.minKey = minKey;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/tuple/SingleKeyValueTuple.java,toString,85-85,[        return "SingleKeyValueTuple[" + cell == null ? keyPtr.get() == UNITIALIZED_KEY_BUFFER ? "null" : Bytes.toStringBinary(keyPtr.get(),keyPtr.getOffset(),keyPtr.getLength()) : cell.toString() + "]";],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/tuple/ValueGetterTuple.java,getValue,93-93,[        if (kv == null)],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PArrayDataType.java,positionAtArrayElement,416-416,[                    count = -count;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/types/PArrayDataType.java,createArrayBytes,535-535,[        return null;],,
CORRECTNESS,RC_REF_COMPARISON,org/apache/phoenix/schema/types/PArrayDataType.java,coerceBytes,300-300,[            if (actualType == desiredType && !pArr.isPrimitiveType() && maxLength != null],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/schema/types/PArrayDataType.java,close,1253-1253,[            } catch (IOException ioe) {}],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/schema/types/PArrayDataType.java,getBytesAndClose,1308-1308,[            return null;],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBinary.java,,33-208,[  public static final PBinary INSTANCE = new PBinary();, ,   private PBinary() {,     super("BINARY", Types.BINARY, byte[].class, null, 23);,   }, ,   @Override,   public byte[] pad(byte[] b, Integer maxLength, SortOrder sortOrder) {,       if (b == null || b.length >= maxLength) {,           return b;,         },         byte[] newBytes = new byte[maxLength];,         System.arraycopy(b, 0, newBytes, 0, b.length);,         if (sortOrder == SortOrder.DESC) {,             Arrays.fill(newBytes, b.length, maxLength, QueryConstants.DESC_SEPARATOR_BYTE);,         },         return newBytes;,   },   ,   @Override,   public void pad(ImmutableBytesWritable ptr, Integer maxLength, SortOrder sortOrder) {,     if (ptr.getLength() >= maxLength) {,       return;,     },     byte[] newBytes = new byte[maxLength];,     System.arraycopy(ptr.get(), ptr.getOffset(), newBytes, 0, ptr.getLength());,     if (sortOrder == SortOrder.DESC) {,         Arrays.fill(newBytes, ptr.getLength(), maxLength, QueryConstants.DESC_SEPARATOR_BYTE);,     },     ptr.set(newBytes);,   }, ,   @Override,   public Object pad(Object object, Integer maxLength) {,     byte[] b = (byte[]) object;,     int length = (b == null ? 0 : b.length);,     if (length == maxLength) {,       return object;,     },     if (length > maxLength) {,       throw new DataExceedsCapacityException(this, maxLength, null);,     },     byte[] newBytes = new byte[maxLength];,     System.arraycopy(b, 0, newBytes, 0, length);, ,     return newBytes;,   }, ,   @Override,   public byte[] toBytes(Object object) { // Delegate to VARBINARY,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return PVarbinary.INSTANCE.toBytes(object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return PVarbinary.INSTANCE.toBytes(object, bytes, offset);, ,   }, ,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     byte[] bytes = toBytes(object);,     if (sortOrder == SortOrder.DESC) {,       return SortOrder.invert(bytes, 0, new byte[bytes.length], 0, bytes.length);,     },     return bytes;,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (!actualType.isCoercibleTo(this)) {,       throwConstraintViolationException(actualType, this);,     },     return PVarbinary.INSTANCE.toObject(bytes, offset, length, actualType, sortOrder);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     return actualType.toBytes(object);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     byte[] value = (byte[]) o;,     return value == null ? 1 : value.length;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PVarbinary.INSTANCE);,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength,,       Integer desiredScale) {,     if (ptr.getLength() != 0 && (,         (srcType.equals(PVarbinary.INSTANCE) && ((String) value).length() != ptr.getLength()) ||,             (maxLength != null && desiredMaxLength != null && maxLength > desiredMaxLength))) {,       return false;,     },     return true;,   }, ,   @Override,   public Integer estimateByteSizeFromLength(Integer length) {,     return length;,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (lhs == null && rhs == null) {,       return 0;,     } else if (lhs == null) {,       return -1;,     } else if (rhs == null) {,       return 1;,     },     if (equalsAny(rhsType, PVarbinary.INSTANCE, PBinary.INSTANCE)) {,       return Bytes.compareTo((byte[]) lhs, (byte[]) rhs);,     } else {,       byte[] rhsBytes = rhsType.toBytes(rhs);,       return Bytes.compareTo((byte[]) lhs, rhsBytes);,     },   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return null;,     },     byte[] value = (byte[]) o;,     return value.length;,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return Base64.decode(value);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     if (length == 1) {,       return Integer.toString(0xFF & b[offset]);,     },     return PVarbinary.INSTANCE.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,     return toStringLiteral((byte[])o, 0, ((byte[]) o).length, formatter);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return PVarbinary.INSTANCE.getSampleValue(maxLength, arrayLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBinaryArray.java,,24-84,[    public static final PBinaryArray INSTANCE = new PBinaryArray();, ,     private PBinaryArray() {,         super("BINARY ARRAY", PDataType.ARRAY_TYPE_BASE + PBinary.INSTANCE.getSqlType(), PhoenixArray.class, null, 28);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PBinary.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length, PDataType actualType, SortOrder sortOrder,,             Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PBinary.INSTANCE, sortOrder, maxLength, scale, PBinary.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) { return true; },         PhoenixArray pArr = (PhoenixArray)value;,         Object[] charArr = (Object[])pArr.array;,         for (Object i : charArr) {,             if (!super.isCoercibleTo(PBinary.INSTANCE, i)) { return false; },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PBinary.INSTANCE, arrayLength, maxLength);],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/types/PBinaryBase.java,octetLength,94-94,[        bytes = new byte[PInteger.INSTANCE.getByteSize()];],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PBoolean.java,toBytes,42-42,[        return ((Boolean) object).booleanValue() ? TRUE_BYTES : FALSE_BYTES;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PBoolean.java,toBytes,61-61,[        return ((Boolean) object).booleanValue() ^ sortOrder == SortOrder.ASC ?],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBoolean.java,,28-146,[public class PBoolean extends PDataType<Boolean> {, ,     public static final PBoolean INSTANCE = new PBoolean();, ,     private PBoolean() {,         super("BOOLEAN", Types.BOOLEAN, Boolean.class, null, 21);,     }, ,     @Override,     public byte[] toBytes(Object object) {,         if (object == null) {,             // TODO: review - return null?,             throw newIllegalDataException(this + " may not be null");,         },         return ((Boolean) object).booleanValue() ? TRUE_BYTES : FALSE_BYTES;,     }, ,     @Override,     public int toBytes(Object object, byte[] bytes, int offset) {,         if (object == null) {,             // TODO: review - return null?,             throw newIllegalDataException(this + " may not be null");,         },         bytes[offset] = ((Boolean) object).booleanValue() ? TRUE_BYTE : FALSE_BYTE;,         return BOOLEAN_LENGTH;,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         if (object == null) {,             // TODO: review - return null?,             throw newIllegalDataException(this + " may not be null");,         },         return ((Boolean) object).booleanValue() ^ sortOrder == SortOrder.ASC ?,                 FALSE_BYTES :,                     TRUE_BYTES;,     }, ,     @Override,     public Boolean toObject(byte[] bytes, int offset, int length, PDataType actualType,,             SortOrder sortOrder, Integer maxLength, Integer scale) {,         Preconditions.checkNotNull(sortOrder);,         if (length == 0) {,             return null;,         },         if (actualType == this) {,             if (length > 1) {,                 throw newIllegalDataException("BOOLEAN may only be a single byte");,             },             return ((bytes[offset] == FALSE_BYTE ^ sortOrder == SortOrder.DESC) ?,                     Boolean.FALSE :,                         Boolean.TRUE);,         } else if (actualType == PDecimal.INSTANCE) {,             // false translated to the ZERO_BYTE,             return sortOrder == SortOrder.DESC ? SortOrder.invert(bytes[offset]) != ZERO_BYTE : bytes[offset] != ZERO_BYTE;,         },         throwConstraintViolationException(actualType, this);,         return null;,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return super.isCoercibleTo(targetType) || targetType.equals(PBinary.INSTANCE);,     }, ,     @Override,     public boolean isCastableTo(PDataType targetType) {,         // Allow cast to BOOLEAN so it can be used in an index or group by,         return super.isCastableTo(targetType) || targetType.equals(PDecimal.INSTANCE);,     }, ,     @Override,     public boolean isFixedWidth() {,         return true;,     }, ,     @Override,     public Integer getByteSize() {,         return BOOLEAN_LENGTH;,     }, ,     @Override,     public int estimateByteSize(Object o) {,         return BOOLEAN_LENGTH;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return Booleans.compare((Boolean) lhs, (Boolean) rhs);,     }, ,     @Override,     public Object toObject(String value) {,         return Boolean.parseBoolean(value);,     }, ,     @Override,     public Object toObject(Object object, PDataType actualType) {,         if (actualType == this || object == null) {,             return object;,         },         if (actualType == PVarbinary.INSTANCE || actualType == PBinary.INSTANCE) {,             byte[] bytes = (byte[]) object;,             return toObject(bytes, 0, bytes.length);,         },         if (actualType == PDecimal.INSTANCE) {,             return ((BigDecimal) object).equals(BigDecimal.ZERO) ? Boolean.FALSE : Boolean.TRUE;,         },         return throwConstraintViolationException(actualType, this);,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return RANDOM.get().nextBoolean();,     }, ,     @Override,     public PhoenixArrayFactory getArrayFactory() {,         return new PhoenixArrayFactory() {],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/phoenix/schema/types/PBoolean.java,toObject,71-71,[            return null;],,toObject,85-85,[        return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PBoolean.java,,146-150,[        return new PhoenixArrayFactory() {, ,             @Override,             public PhoenixArray newArray(PDataType type, Object[] elements) {,                 return new PhoenixArray.PrimitiveBooleanPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PBooleanArray.java,,25-85,[    public static final PBooleanArray INSTANCE = new PBooleanArray();, ,     private PBooleanArray() {,         super("BOOLEAN ARRAY", PDataType.ARRAY_TYPE_BASE + PBoolean.INSTANCE.getSqlType(), PhoenixArray.class, null, 25);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PBoolean.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length, PDataType actualType, SortOrder sortOrder,,             Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PBoolean.INSTANCE, sortOrder, maxLength, scale, PBoolean.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) { return true; },         PrimitiveBooleanPhoenixArray pArr = (PrimitiveBooleanPhoenixArray)value;,         boolean[] booleanArr = (boolean[])pArr.array;,         for (boolean b : booleanArr) {,             if (!super.isCoercibleTo(PInteger.INSTANCE, b)) { return false; },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PBoolean.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PChar.java,,38-216,[  public static final PChar INSTANCE = new PChar();, ,   private PChar() {,     super("CHAR", Types.CHAR, String.class, null, 1);,   }, ,     @Override,     public void pad(ImmutableBytesWritable ptr, Integer maxLength, SortOrder sortOrder) {,       if (ptr.getLength() >= maxLength) {,         return;,       },       byte[] newBytes = new byte[maxLength];,       System.arraycopy(ptr.get(), ptr.getOffset(), newBytes, 0, ptr.getLength());,       Arrays.fill(newBytes, ptr.getLength(), maxLength, sortOrder == SortOrder.ASC ? StringUtil.SPACE_UTF8 : StringUtil.INVERTED_SPACE_UTF8);,       ptr.set(newBytes);,     }, ,     @Override,     public byte[] pad(byte[] b, Integer maxLength, SortOrder sortOrder) {,       if (b == null || b.length >= maxLength) {,         return b;,       },       byte[] newBytes = new byte[maxLength];,       System.arraycopy(b, 0, newBytes, 0, b.length);,       Arrays.fill(newBytes, b.length, maxLength, sortOrder == SortOrder.ASC ? StringUtil.SPACE_UTF8 : StringUtil.INVERTED_SPACE_UTF8);,       return newBytes;,     }, ,     @Override,     public Object pad(Object object, Integer maxLength) {,       String s = (String) object;,       if (s == null) {,         return Strings.padEnd("", maxLength, ' ');,       },       if (s.length() == maxLength) {,         return object;,       },       if (s.length() > maxLength) {,         throw new DataExceedsCapacityException(this,maxLength,null);,       },       return Strings.padEnd(s, maxLength, ' ');,     }, ,     @Override,     public byte[] toBytes(Object object) {,       if (object == null) {,         return ByteUtil.EMPTY_BYTE_ARRAY;,       },       byte[] b = PVarchar.INSTANCE.toBytes(object);,       if (b.length != ((String) object).length()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + object + ")");,       },       return b;,     }, ,     @Override,     public int toBytes(Object object, byte[] bytes, int offset) {,       if (object == null) {,         throw newIllegalDataException(this + " may not be null");,       },       int len = PVarchar.INSTANCE.toBytes(object, bytes, offset);,       if (len != ((String) object).length()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + object + ")");,       },       return len;,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,       if (length == 0) {,         return null;,       },       if (!actualType.isCoercibleTo(this)) {,         throwConstraintViolationException(actualType, this);,       },       length = StringUtil.getUnpaddedCharLength(bytes, offset, length, sortOrder);,       if (sortOrder == SortOrder.DESC) {,         bytes = SortOrder.invert(bytes, offset, length);,         offset = 0;,       },       // TODO: UTF-8 decoder that will invert as it decodes,       String s = Bytes.toString(bytes, offset, length);,       if (length != s.length()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + s + ")");,       },       return s;,     }, ,     @Override,     public Object toObject(Object object, PDataType actualType) {,       if (equalsAny(actualType, PVarchar.INSTANCE, this)) {,         String s = (String) object;,         return s == null || s.length() > 0 ? s : null;,       },       return throwConstraintViolationException(actualType,this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,       return equalsAny(targetType, this, PVarchar.INSTANCE, PBinary.INSTANCE, PVarbinary.INSTANCE);,     }, ,     @Override,     public void coerceBytes(ImmutableBytesWritable ptr, Object o, PDataType actualType,,         Integer actualMaxLength, Integer actualScale, SortOrder actualModifier,,         Integer desiredMaxLength, Integer desiredScale, SortOrder expectedModifier) {,       if (o != null && actualType.equals(PVarchar.INSTANCE) && ((String)o).length() != ptr.getLength()) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + o + ")");,       },       super.coerceBytes(ptr, o, actualType, actualMaxLength, actualScale, actualModifier, desiredMaxLength, desiredScale, expectedModifier);,     }, ,     @Override,     public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,         Integer maxLength, Integer scale, Integer desiredMaxLength, Integer desiredScale) {,       return PVarchar.INSTANCE.isSizeCompatible(ptr, value, srcType, maxLength, scale, desiredMaxLength, desiredScale);,     }, ,     @Override,     public boolean isFixedWidth() {,       return true;,     }, ,     @Override,     public Integer getByteSize() {,       return null;,     }, ,     @Override,     public Integer getMaxLength(Object o) {,       if (o == null) {,         return null;,       },       String value = (String) o;,       return value.length();,     }, ,     @Override,     public int estimateByteSize(Object o) {,       String value = (String) o;,       return value.length();,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,       return PVarchar.INSTANCE.compareTo(lhs, rhs, rhsType);,     }, ,     @Override,     public Object toObject(String value) {,       if (StringUtil.hasMultiByteChars(value)) {,         throw newIllegalDataException("CHAR types may only contain single byte characters (" + value + ")");,       },       return value;,     }, ,     @Override,     public Integer estimateByteSizeFromLength(Integer length) {,       return length;,     }, ,     @Override,     public boolean isBytesComparableWith(PDataType otherType) {,       return super.isBytesComparableWith(otherType) || otherType.equals(PVarchar.INSTANCE);,     }, ,     @Override,     public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,       return PVarchar.INSTANCE.toStringLiteral(b, offset, length, formatter);,     }, ,     @Override,     public String toStringLiteral(Object o, Format formatter) {,       return PVarchar.INSTANCE.toStringLiteral(o, formatter);,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,       return PVarchar.INSTANCE.getSampleValue(maxLength, arrayLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PCharArray.java,,24-90,[    public static final PCharArray INSTANCE = new PCharArray();, ,     private PCharArray() {,         super("CHAR ARRAY", PDataType.ARRAY_TYPE_BASE + PChar.INSTANCE.getSqlType(), PhoenixArray.class,,                 null, 29);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PChar.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PChar.INSTANCE, sortOrder, maxLength, scale,,                 PChar.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] charArr = (Object[]) pArr.array;,         for (Object i : charArr) {,             if (!super.isCoercibleTo(PChar.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PChar.INSTANCE, arrayLength, maxLength);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PDataType.java,compareTo,189-189,[                    lhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PDataType.java,compareTo,169-169,[                    rhsSortOrder = SortOrder.ASC;],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PDataType.java,getDecimalPrecisionAndScale,701-701,[            d /= 10;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PDataType.java,getJavaClassNameBytes,1043-1043,[        return clazzNameBytes;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PDataType.java,getSqlTypeNameBytes,1047-1047,[        return sqlTypeNameBytes;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDataType.java,equals,303-304,[        if (o == null) return false;,         return getClass() == o.getClass();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/types/PDataType.java,,492-492,[    public static final byte[] FALSE_BYTES = new byte[] { FALSE_BYTE };],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/schema/types/PDataType.java,,493-493,[    public static final byte[] TRUE_BYTES = new byte[] { TRUE_BYTE };],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/types/PDataType.java,toStringLiteral,1080-1080,[        } else if (null == o) { return String.valueOf(o); }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PDataTypeFactory.java,getOrderedTypes,112-112,[    return orderedTypes;],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/schema/types/PDataTypeFactory.java,getInstance,38-39,[    if (INSTANCE == null) {,       INSTANCE = new PDataTypeFactory();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PDataTypeFactory.java,,45-48,[    types = new TreeSet<>(new Comparator<PDataType>() {,       @Override,       public int compare(PDataType o1, PDataType o2) {,         return Integer.compare(o1.ordinal(), o2.ordinal());],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForArrayComparisionsForFixedWidth,972-972,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,testForArrayComparisionsForFixedWidth,979-979,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForArrayComparisionsWithInEqualityForFixedWidth,990-990,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,testForArrayComparisionsWithInEqualityForFixedWidth,998-998,[        PUnsignedDoubleArray.INSTANCE.toObject(arr, PUnsignedDoubleArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForBooleanArray,102-102,[		PBooleanArray.INSTANCE.toObject(arr, PBooleanArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForDateArray,853-853,[		PDateArray.INSTANCE.toObject(arr, PDateArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForDecimalArray,780-780,[		PDecimalArray.INSTANCE.toObject(arr, PDecimalArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForDoubleArray,766-766,[		PDoubleArray.INSTANCE.toObject(arr, PDoubleArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForFloatArray,752-752,[		PFloatArray.INSTANCE.toObject(arr, PFloatArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForIntegerArray,88-88,[		PIntegerArray.INSTANCE.toObject(arr, PIntegerArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForLongArray,251-251,[		PLongArray.INSTANCE.toObject(arr, PLongArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForSmallIntArray,265-265,[		PSmallintArray.INSTANCE.toObject(arr, PSmallintArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForTimeArray,823-823,[		PTimeArray.INSTANCE.toObject(arr, PTimeArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForTimeStampArray,794-794,[		PTimestampArray.INSTANCE.toObject(arr, PTimestampArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForTinyIntArray,738-738,[		PTinyintArray.INSTANCE.toObject(arr, PTinyintArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedDateArray,868-868,[		PUnsignedDateArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedDoubleArray,958-958,[		PUnsignedDoubleArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedFloatArray,943-943,[		PUnsignedFloatArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedIntArray,899-899,[				.toObject(arr, PUnsignedIntArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedLongArray,883-883,[		PUnsignedLongArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedSmallIntArray,913-913,[		PUnsignedSmallintArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedTimeStampArray,808-808,[		PUnsignedTimestampArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnSignedTinyIntArray,928-928,[		PUnsignedTinyintArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testForUnsignedTimeArray,837-837,[		PUnsignedTimeArray.INSTANCE.toObject(arr,],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testGetArrayLengthForFixedLengthArray,710-710,[		PLongArray.INSTANCE.toObject(arr, PLongArray.INSTANCE);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testLongArrayWithIndex,688-688,[		PLongArray.INSTANCE.toObject(arr, PLongArray.INSTANCE);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,testVariableLengthArrayWithElementsMoreThanShortMax,360-360,[	            str += "-";],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/schema/types/PDataTypeTest.java,testIllegalUnsignedDateTime,1626-1626,[            SQLException sqlE = (SQLException)e.getCause();],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDate.java,,31-174,[public class PDate extends PDataType<Date> {, ,   public static final PDate INSTANCE = new PDate();, ,   private PDate() {,     super("DATE", Types.DATE, Date.class,,         new DateCodec(), 11); // After TIMESTAMP and DATE to ensure toLiteral finds those first,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,         getCodec().encodeLong(0l, bytes, offset);,         return this.getByteSize();,     },     getCodec().encodeLong(((java.util.Date) object).getTime(), bytes, offset);,     return this.getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PTime.INSTANCE, PUnsignedTime.INSTANCE)) {,       return new Date(((java.sql.Time) object).getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return new Date(((java.sql.Timestamp) object).getTime());,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new Date((Long) object);,     } else if (actualType == PDecimal.INSTANCE) {,       return new Date(((BigDecimal) object).longValueExact());,     } else if (actualType == PVarchar.INSTANCE) {,       return DateUtil.parseDate((String) object);,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Date toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE, PDate.INSTANCE,,         PUnsignedDate.INSTANCE, PTime.INSTANCE, PUnsignedTime.INSTANCE, PLong.INSTANCE,,         PUnsignedLong.INSTANCE)) {,       return new Date(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return new Date(bd.longValueExact());,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return super.isCastableTo(targetType) ||,             equalsAny(targetType, PDecimal.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, PDate.INSTANCE, PTime.INSTANCE, PTimestamp.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       if (equalsAny(targetType, PUnsignedTimestamp.INSTANCE, PUnsignedDate.INSTANCE,,           PUnsignedTime.INSTANCE)) {,         return ((java.util.Date) value).getTime() >= 0;,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PTimestamp.INSTANCE || rhsType == PUnsignedTimestamp.INSTANCE) {,       return -rhsType.compareTo(rhs, lhs, PTime.INSTANCE);,     },     return ((java.util.Date) rhs).compareTo((java.util.Date) lhs);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return DateUtil.parseDate(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType == PTime.INSTANCE;,   }, ,   @Override,     public String toStringLiteral(Object o, Format formatter) {,         if (formatter == null) {,             // If default formatter has not been overridden,,             // use default one.,             formatter = DateUtil.DEFAULT_DATE_FORMATTER;,         },         return null == o ? String.valueOf(o) : "'",                 + StringUtil.escapeStringConstant(super.toStringLiteral(o, formatter)) + "'";,     }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifier, Integer desiredMaxLength, Integer desiredScale,,       SortOrder expectedModifier) {,     if (ptr.getLength() > 0 && actualType == PTimestamp.INSTANCE,         && actualModifier == expectedModifier) {,       ptr.set(ptr.get(), ptr.getOffset(), getByteSize());,       return;,     },     super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,,         desiredScale, expectedModifier);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new Date((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/types/PDate.java,toStringLiteral,155-155,[        return null == o ? String.valueOf(o) : "'"],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PDate.java,compareTo,130-130,[      return -rhsType.compareTo(rhs, lhs, PTime.INSTANCE);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PDate.java,,186-190,[      return new PhoenixArrayFactory() {, ,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDateArray.java,,26-92,[    public static final PDateArray INSTANCE = new PDateArray();, ,     private PDateArray() {,         super("DATE ARRAY", PDataType.ARRAY_TYPE_BASE + PDate.INSTANCE.getSqlType(), PhoenixArray.class,,                 null, 40);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PDate.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PDate.INSTANCE, sortOrder, maxLength, scale,,                 PDate.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] dateArr = (Object[]) pArr.array;,         for (Object i : dateArr) {,             if (!super.isCoercibleTo(PDate.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PDate.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDecimal.java,,36-434,[  public static final PDecimal INSTANCE = new PDecimal();, ,   private static final BigDecimal MIN_DOUBLE_AS_BIG_DECIMAL =,       BigDecimal.valueOf(-Double.MAX_VALUE);,   private static final BigDecimal MAX_DOUBLE_AS_BIG_DECIMAL =,       BigDecimal.valueOf(Double.MAX_VALUE);,   private static final BigDecimal MIN_FLOAT_AS_BIG_DECIMAL =,       BigDecimal.valueOf(-Float.MAX_VALUE);,   private static final BigDecimal MAX_FLOAT_AS_BIG_DECIMAL =,       BigDecimal.valueOf(Float.MAX_VALUE);, ,   private PDecimal() {,     super("DECIMAL", Types.DECIMAL, BigDecimal.class, null, 8);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       return ByteUtil.EMPTY_BYTE_ARRAY;,     },     BigDecimal v = (BigDecimal) object;,     v = NumberUtil.normalize(v);,     int len = getLength(v);,     byte[] result = new byte[Math.min(len, MAX_BIG_DECIMAL_BYTES)];,     PDataType.toBytes(v, result, 0, len);,     return result;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       return 0;,     },     BigDecimal v = (BigDecimal) object;,     v = NumberUtil.normalize(v);,     int len = getLength(v);,     return PDataType.toBytes(v, bytes, offset, len);,   }, ,   private int getLength(BigDecimal v) {,     int signum = v.signum();,     if (signum == 0) { // Special case for zero,       return 1;,     },             /*,              * Size of DECIMAL includes:,              * 1) one byte for exponent,              * 2) one byte for terminal byte if negative,              * 3) one byte for every two digits with the following caveats:,              *    a) add one to round up in the case when there is an odd number of digits,              *    b) add one in the case that the scale is odd to account for 10x of lowest significant digit,              *       (basically done to increase the range of exponents that can be represented),              */,     return (signum < 0 ? 2 : 1) + (v.precision() + 1 + (v.scale() % 2 == 0 ? 0 : 1)) / 2;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     if (o == null) {,       return 1;,     },     BigDecimal v = (BigDecimal) o;,     // TODO: should we strip zeros and round here too?,     return Math.min(getLength(v), MAX_BIG_DECIMAL_BYTES);,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return MAX_PRECISION;,     },     BigDecimal v = (BigDecimal) o;,     return v.precision();,   }, ,   @Override,   public Integer getScale(Object o) {,     return null;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Preconditions.checkNotNull(sortOrder);,     if (l == 0) {,       return null;,     },     if (actualType == PDecimal.INSTANCE) {,       if (sortOrder == SortOrder.DESC) {,         b = SortOrder.invert(b, o, new byte[l], 0, l);,         o = 0;,       },       return toBigDecimal(b, o, l);,     } else if (equalsAny(actualType, PDate.INSTANCE, PTime.INSTANCE, PUnsignedDate.INSTANCE,,         PUnsignedTime.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return BigDecimal.valueOf(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return BigDecimal.valueOf(actualType.getCodec().decodeFloat(b, o, sortOrder));,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       return BigDecimal.valueOf(actualType.getCodec().decodeDouble(b, o, sortOrder));,     } else if (equalsAny(actualType, PTimestamp.INSTANCE,,         PUnsignedTimestamp.INSTANCE)) {,       long millisPart = actualType.getCodec().decodeLong(b, o, sortOrder);,       int nanoPart = PUnsignedInt.INSTANCE.getCodec().decodeInt(b, o + Bytes.SIZEOF_LONG, sortOrder);,       BigDecimal nanosPart = BigDecimal.valueOf(,           (nanoPart % QueryConstants.MILLIS_TO_NANOS_CONVERTOR),               / QueryConstants.MILLIS_TO_NANOS_CONVERTOR);,       return BigDecimal.valueOf(millisPart).add(nanosPart);,     } else if (actualType == PBoolean.INSTANCE) {,       return (Boolean) PBoolean.INSTANCE.toObject(b, o, l, actualType, sortOrder) ?,           BigDecimal.ONE :,           BigDecimal.ZERO;,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PInteger.INSTANCE, PUnsignedInt.INSTANCE)) {,       return BigDecimal.valueOf((Integer) object);,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return BigDecimal.valueOf((Long) object);,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       return BigDecimal.valueOf((Short) object);,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       return BigDecimal.valueOf((Byte) object);,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return BigDecimal.valueOf((Float) object);,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       return BigDecimal.valueOf((Double) object);,     } else if (actualType == PDecimal.INSTANCE) {,       return object;,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE)) {,       java.util.Date d = (java.util.Date) object;,       return BigDecimal.valueOf(d.getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE,,         PUnsignedTimestamp.INSTANCE)) {,       Timestamp ts = (Timestamp) object;,       long millisPart = ts.getTime();,       BigDecimal nanosPart = BigDecimal.valueOf(,           (ts.getNanos() % QueryConstants.MILLIS_TO_NANOS_CONVERTOR),               / QueryConstants.MILLIS_TO_NANOS_CONVERTOR);,       BigDecimal value = BigDecimal.valueOf(millisPart).add(nanosPart);,       return value;,     } else if (actualType == PBoolean.INSTANCE) {,       return ((Boolean) object) ? BigDecimal.ONE : BigDecimal.ZERO;,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public Integer getByteSize() {,     return MAX_BIG_DECIMAL_BYTES;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return ((BigDecimal) lhs).compareTo((BigDecimal) rhs);,     },     return -rhsType.compareTo(rhs, lhs, this);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return super.isCastableTo(targetType) || targetType.isCoercibleTo(,         PTimestamp.INSTANCE) || targetType.equals(PBoolean.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       BigDecimal bd;,       if (equalsAny(targetType, PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE,,           PUnsignedSmallint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,         bd = (BigDecimal) value;,         if (bd.signum() == -1) {,           return false;,         },       } else if (targetType.equals(PLong.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.longValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PInteger.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.intValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PSmallint.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.shortValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PTinyint.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           bd.byteValueExact();,           return true;,         } catch (ArithmeticException e) {,           return false;,         },       } else if (targetType.equals(PUnsignedFloat.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxFloat = MAX_FLOAT_AS_BIG_DECIMAL;,           boolean isNegtive = (bd.signum() == -1);,           return bd.compareTo(maxFloat) <= 0 && !isNegtive;,         } catch (Exception e) {,           return false;,         },       } else if (targetType.equals(PFloat.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxFloat = MAX_FLOAT_AS_BIG_DECIMAL;,           // Float.MIN_VALUE should not be used here, as this is the,           // smallest in terms of closest to zero.,           BigDecimal minFloat = MIN_FLOAT_AS_BIG_DECIMAL;,           return bd.compareTo(maxFloat) <= 0 && bd.compareTo(minFloat) >= 0;,         } catch (Exception e) {,           return false;,         },       } else if (targetType.equals(PUnsignedDouble.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxDouble = MAX_DOUBLE_AS_BIG_DECIMAL;,           boolean isNegtive = (bd.signum() == -1);,           return bd.compareTo(maxDouble) <= 0 && !isNegtive;,         } catch (Exception e) {,           return false;,         },       } else if (targetType.equals(PDouble.INSTANCE)) {,         bd = (BigDecimal) value;,         try {,           BigDecimal maxDouble = MAX_DOUBLE_AS_BIG_DECIMAL;,           BigDecimal minDouble = MIN_DOUBLE_AS_BIG_DECIMAL;,           return bd.compareTo(maxDouble) <= 0 && bd.compareTo(minDouble) >= 0;,         } catch (Exception e) {,           return false;,         },       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength, Integer desiredScale) {,     if (ptr.getLength() == 0) {,       return true;,     },     // Use the scale from the value if provided, as it prevents a deserialization.,     // The maxLength and scale for the underlying expression are ignored, because they,     // are not relevant in this case: for example a DECIMAL(10,2) may be assigned to a,     // DECIMAL(5,0) as long as the value fits.,     if (value != null) {,       BigDecimal v = (BigDecimal) value;,       maxLength = v.precision();,       scale = v.scale();,     } else {,       int[] v = getDecimalPrecisionAndScale(ptr.get(), ptr.getOffset(), ptr.getLength());,       maxLength = v[0];,       scale = v[1];,     },     if (desiredMaxLength != null && desiredScale != null && maxLength != null && scale != null &&,         ((desiredScale == null && desiredMaxLength < maxLength) ||,             (desiredMaxLength - desiredScale) < (maxLength - scale))) {,       return false;,     },     return true;,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifier, Integer desiredMaxLength, Integer desiredScale,,       SortOrder expectedModifier) {,     if (desiredScale == null) {,       // deiredScale not available, or we do not have scale requirement, delegate to parents.,       super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,,           desiredScale, expectedModifier);,       return;,     },     if (ptr.getLength() == 0) {,       return;,     },     if (scale == null) {,       if (object != null) {,         BigDecimal v = (BigDecimal) object;,         scale = v.scale();,       } else {,         int[] v = getDecimalPrecisionAndScale(ptr.get(), ptr.getOffset(), ptr.getLength());,         scale = v[1];,       },     },     if (this == actualType && scale <= desiredScale) {,       // No coerce and rescale necessary,       return;,     } else {,       BigDecimal decimal;,       // Rescale is necessary.,       if (object != null) { // value object is passed in.,         decimal = (BigDecimal) toObject(object, actualType);,       } else { // only value bytes is passed in, need to convert to object first.,         decimal = (BigDecimal) toObject(ptr);,       },       decimal = decimal.setScale(desiredScale, BigDecimal.ROUND_DOWN);,       ptr.set(toBytes(decimal));,     },   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return new BigDecimal(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Integer estimateByteSizeFromLength(Integer length) {,     // No association of runtime byte size from decimal precision.,     return null;,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     if (formatter == null) {,       BigDecimal o = (BigDecimal) toObject(b, offset, length);,       return o.toPlainString();,     },     return super.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,       if (formatter == null) {,           if(o == null) {,               return String.valueOf(o);,           },           return ((BigDecimal)o).toPlainString();,         },         return super.toStringLiteral(o, formatter);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new BigDecimal((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));,   }, ,     // take details from org.apache.phoenix.schema.types.PDataType#toBigDecimal(byte[], int, int),     @Override,     public int signum(byte[] bytes, int offset, int length, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         byte signByte;,         if (sortOrder == SortOrder.DESC) {,             signByte = SortOrder.invert(bytes[offset]);,         } else {,             signByte = bytes[offset];,         },         if (length == 1 && signByte == ZERO_BYTE) {,             return 0;,         },         return ((signByte & 0x80) == 0) ? -1 : 1;,     }, ,     @Override,     public void abs(byte[] bytes, int offset, int length, SortOrder sortOrder,,             ImmutableBytesWritable outPtr) {,         if (sortOrder == SortOrder.DESC) {,             bytes = SortOrder.invert(bytes, offset, new byte[length], 0, length);,             offset = 0;,         },         BigDecimal bigDecimal = toBigDecimal(bytes, offset, length);,         outPtr.set(toBytes(bigDecimal.abs()));,     }],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/types/PDecimal.java,isSizeCompatible,313-313,[      maxLength = v.precision();],,
CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,org/apache/phoenix/schema/types/PDecimal.java,isSizeCompatible,314-314,[      scale = v.scale();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/types/PDecimal.java,coerceBytes,334-334,[      super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/types/PDecimal.java,toStringLiteral,397-397,[              return String.valueOf(o);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PDecimal.java,isSizeCompatible,320-320,[    if (desiredMaxLength != null && desiredScale != null && maxLength != null && scale != null &&],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/schema/types/PDecimal.java,isCoercibleTo,264-264,[        } catch (Exception e) {],,isCoercibleTo,275-275,[        } catch (Exception e) {],,isCoercibleTo,284-284,[        } catch (Exception e) {],,isCoercibleTo,293-293,[        } catch (Exception e) {],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PDecimal.java,compareTo,207-207,[    return -rhsType.compareTo(rhs, lhs, this);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDecimalArray.java,,26-86,[    public static final PDecimalArray INSTANCE = new PDecimalArray();, ,     private PDecimalArray() {,         super("DECIMAL ARRAY", PDataType.ARRAY_TYPE_BASE + PDecimal.INSTANCE.getSqlType(), PhoenixArray.class, null, 35);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PDecimal.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length, PDataType actualType, SortOrder sortOrder,,             Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PDecimal.INSTANCE, sortOrder, maxLength, scale, PDecimal.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) { return true; },         PhoenixArray pArr = (PhoenixArray)value;,         Object[] decimalArr = (Object[])pArr.array;,         for (Object i : decimalArr) {,             if (!super.isCoercibleTo(PDecimal.INSTANCE, i)) { return false; },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PDecimal.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDouble.java,,29-193,[public class PDouble extends PRealNumber<Double> {,   public static final PDouble INSTANCE = new PDouble();, ,   private PDouble() {,     super("DOUBLE", Types.DOUBLE, Double.class, new DoubleCodec(), 7);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));,     },     return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_DOUBLE;,   }, ,   @Override,   public Integer getScale(Object o) {,     if (o == null) {,       return null;,     },     Double v = (Double) o;,     BigDecimal bd = BigDecimal.valueOf(v);,     return bd.scale() == 0 ? null : bd.scale();,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return null;,     },     Double v = (Double) o;,     BigDecimal db = BigDecimal.valueOf(v);,     return db.precision();,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_DOUBLE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeDouble(((Number) object).doubleValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Double.parseDouble(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     double de;,     if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       de = (Float) object;,       return de;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       de = (Long) object;,       return de;,     } else if (equalsAny(actualType, PInteger.INSTANCE, PUnsignedInt.INSTANCE)) {,       de = (Integer) object;,       return de;,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       de = (Byte) object;,       return de;,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       de = (Short) object;,       return de;,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal d = (BigDecimal) object;,       return d.doubleValue();,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Double toObject(byte[] b, int o, int l, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (l <= 0) {,       return null;,     },     if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE, PFloat.INSTANCE,,         PUnsignedFloat.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return actualType.getCodec().decodeDouble(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.doubleValue();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       double d = (Double) value;,       if (targetType.equals(PUnsignedDouble.INSTANCE)) {,         return d >= 0;,       } else if (targetType.equals(PFloat.INSTANCE)) {,         return Double.isNaN(d),             || d == Double.POSITIVE_INFINITY,             || d == Double.NEGATIVE_INFINITY,             || (d >= -Float.MAX_VALUE && d <= Float.MAX_VALUE);,       } else if (targetType.equals(PUnsignedFloat.INSTANCE)) {,         return Double.isNaN(d) || d == Double.POSITIVE_INFINITY,             || (d >= 0 && d <= Float.MAX_VALUE);,       } else if (targetType.equals(PUnsignedLong.INSTANCE)) {,         return (d >= 0 && d <= Long.MAX_VALUE);,       } else if (targetType.equals(PLong.INSTANCE)) {,         return (d >= Long.MIN_VALUE && d <= Long.MAX_VALUE);,       } else if (targetType.equals(PUnsignedInt.INSTANCE)) {,         return (d >= 0 && d <= Integer.MAX_VALUE);,       } else if (targetType.equals(PInteger.INSTANCE)) {,         return (d >= Integer.MIN_VALUE && d <= Integer.MAX_VALUE);,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         return (d >= 0 && d <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         return (d >= Short.MIN_VALUE && d <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         return (d >= Byte.MIN_VALUE && d < Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         return (d >= 0 && d < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PDecimal.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextDouble();],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PDouble.java,compareTo,39-39,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PDouble.java,,309-312,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveDoublePhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PDoubleArray.java,,24-90,[    public static final PDoubleArray INSTANCE = new PDoubleArray();, ,     private PDoubleArray() {,         super("DOUBLE ARRAY", PDataType.ARRAY_TYPE_BASE + PDouble.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 34);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PDouble.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PDouble.INSTANCE, sortOrder, maxLength, scale,,                 PDouble.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveDoublePhoenixArray pArr = (PhoenixArray.PrimitiveDoublePhoenixArray) value;,         double[] doubleArr = (double[]) pArr.array;,         for (double i : doubleArr) {,             if (!super.isCoercibleTo(PDouble.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PDouble.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PFloat.java,,28-191,[public class PFloat extends PRealNumber<Float> {, ,   public static final PFloat INSTANCE = new PFloat();, ,   private PFloat() {,     super("FLOAT", Types.FLOAT, Float.class, new FloatCodec(), 6);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PDouble.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_FLOAT;,   }, ,   @Override,   public Integer getScale(Object o) {,     if (o == null) {,       return null;,     },     Float v = (Float) o;,     BigDecimal bd = BigDecimal.valueOf(v);,     return bd.scale() == 0 ? null : bd.scale();,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     if (o == null) {,       return null;,     },     Float v = (Float) o;,     BigDecimal bd = BigDecimal.valueOf(v);,     return bd.precision();,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_FLOAT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeFloat(((Number) object).floatValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Float.parseFloat(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     float f;,     if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       double d = (Double) object;,       if (Double.isNaN(d),           || d == Double.POSITIVE_INFINITY,           || d == Double.NEGATIVE_INFINITY,           || (d >= -Float.MAX_VALUE && d <= Float.MAX_VALUE)) {,         return (float) d;,       } else {,         throw newIllegalDataException(,             actualType + " value " + d + " cannot be cast to Float without changing its value");,       },     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       f = (Long) object;,       return f;,     } else if (equalsAny(actualType, PInteger.INSTANCE, PUnsignedInt.INSTANCE)) {,       f = (Integer) object;,       return f;,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       f = (Byte) object;,       return f;,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       f = (Short) object;,       return f;,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal dl = (BigDecimal) object;,       return dl.floatValue();,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Float toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l <= 0) {,       return null;,     },     if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE, PDouble.INSTANCE,,         PUnsignedDouble.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return actualType.getCodec().decodeFloat(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.floatValue();,     }, ,     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       float f = (Float) value;,       if (targetType.equals(PUnsignedFloat.INSTANCE)) {,         return f >= 0;,       } else if (targetType.equals(PUnsignedLong.INSTANCE)) {,         return (f >= 0 && f <= Long.MAX_VALUE);,       } else if (targetType.equals(PLong.INSTANCE)) {,         return (f >= Long.MIN_VALUE && f <= Long.MAX_VALUE);,       } else if (targetType.equals(PUnsignedInt.INSTANCE)) {,         return (f >= 0 && f <= Integer.MAX_VALUE);,       } else if (targetType.equals(PInteger.INSTANCE)) {,         return (f >= Integer.MIN_VALUE && f <= Integer.MAX_VALUE);,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         return (f >= 0 && f <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         return (f >= Short.MIN_VALUE && f <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         return (f >= Byte.MIN_VALUE && f < Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         return (f >= 0 && f < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PDouble.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextFloat();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PFloat.java,,305-308,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveFloatPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PFloatArray.java,,24-91,[    public static final PFloatArray INSTANCE = new PFloatArray();, ,     private PFloatArray() {,         super("FLOAT ARRAY", PDataType.ARRAY_TYPE_BASE + PFloat.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 33);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PFloat.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PFloat.INSTANCE, sortOrder, maxLength, scale,,                 PFloat.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveFloatPhoenixArray pArr = (PhoenixArray.PrimitiveFloatPhoenixArray) value;,         float[] floatArr = (float[]) pArr.array;,         for (float i : floatArr) {,             if (!super.isCoercibleTo(PFloat.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PFloat.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PInteger.java,,28-159,[public class PInteger extends PWholeNumber<Integer> {, ,   public static final PInteger INSTANCE = new PInteger();, ,   private PInteger() {,     super("INTEGER", Types.INTEGER, Integer.class, new IntCodec(), 3);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_INT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeInt(((Number) object).intValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Object o = PLong.INSTANCE.toObject(object, actualType);,     if (!(o instanceof Long) || o == null) {,       return o;,     },     long l = (Long) o;,     if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {,       throw newIllegalDataException(,           actualType + " value " + l + " cannot be cast to Integer without changing its value");,     },     int v = (int) l;,     return v;,   }, ,   @Override,   public Integer toObject(byte[] b, int o, int l, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE, PFloat.INSTANCE, PUnsignedFloat.INSTANCE, PDouble.INSTANCE,,         PUnsignedDouble.INSTANCE)) {,       return actualType.getCodec().decodeInt(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.intValueExact();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       int i;,       if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,           PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE)) {,         i = (Integer) value;,         return i >= 0;,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         i = (Integer) value;,         return (i >= 0 && i <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         i = (Integer) value;,         return (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         i = (Integer) value;,         return (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         i = (Integer) value;,         return (i >= 0 && i < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PFloat.INSTANCE) || PLong.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_INT;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return INT_PRECISION;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Integer.parseInt(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextInt();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PInteger.java,toObject,59-59,[    if (!(o instanceof Long) || o == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PInteger.java,,268-271,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveIntPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PIntegerArray.java,,24-91,[    public static final PIntegerArray INSTANCE = new PIntegerArray();, ,     private PIntegerArray() {,         super("INTEGER ARRAY", PDataType.ARRAY_TYPE_BASE + PInteger.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 24);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PInteger.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PInteger.INSTANCE, sortOrder, maxLength, scale,,                 PInteger.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveIntPhoenixArray pArr = (PhoenixArray.PrimitiveIntPhoenixArray) value;,         int[] intArr = (int[]) pArr.array;,         for (int i : intArr) {,             if (!super.isCoercibleTo(PInteger.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PInteger.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PLong.java,,30-211,[public class PLong extends PWholeNumber<Long> {, ,   public static final PLong INSTANCE = new PLong();, ,   private PLong() {,     super("BIGINT", Types.BIGINT, Long.class, new LongCodec(), 2);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_LONG];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeLong(((Number) object).longValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     long s;,     if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PUnsignedInt.INSTANCE,,         PInteger.INSTANCE)) {,       s = (Integer) object;,       return s;,     } else if (equalsAny(actualType, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE)) {,       s = (Byte) object;,       return s;,     } else if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE)) {,       s = (Short) object;,       return s;,     } else if (equalsAny(actualType, PFloat.INSTANCE, PUnsignedFloat.INSTANCE)) {,       Float f = (Float) object;,       if (f > Long.MAX_VALUE || f < Long.MIN_VALUE) {,         throw newIllegalDataException(,             actualType + " value " + f + " cannot be cast to Long without changing its value");,       },       s = f.longValue();,       return s;,     } else if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE)) {,       Double de = (Double) object;,       if (de > Long.MAX_VALUE || de < Long.MIN_VALUE) {,         throw newIllegalDataException(,             actualType + " value " + de + " cannot be cast to Long without changing its value");,       },       s = de.longValue();,       return s;,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal d = (BigDecimal) object;,       return d.longValueExact();,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE)) {,       java.util.Date date = (java.util.Date) object;,       return date.getTime();,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public Long toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE,,         PInteger.INSTANCE, PUnsignedInt.INSTANCE, PSmallint.INSTANCE,,         PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE, PUnsignedTinyint.INSTANCE, PFloat.INSTANCE,,         PUnsignedFloat.INSTANCE, PDouble.INSTANCE, PUnsignedDouble.INSTANCE, PDate.INSTANCE,,         PUnsignedDate.INSTANCE, PTime.INSTANCE, PUnsignedTime.INSTANCE)) {,       return actualType.getCodec().decodeLong(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.longValueExact();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     // In general, don't allow conversion of LONG to INTEGER. There are times when,     // we check isComparableTo for a more relaxed check and then throw a runtime,     // exception if we overflow,     return equalsAny(targetType, this, PDecimal.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE, PDouble.INSTANCE);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       long l;,       if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,           PUnsignedLong.INSTANCE)) {,         l = (Long) value;,         return l >= 0;,       } else if (targetType.equals(PUnsignedInt.INSTANCE)) {,         l = (Long) value;,         return (l >= 0 && l <= Integer.MAX_VALUE);,       } else if (targetType.equals(PInteger.INSTANCE)) {,         l = (Long) value;,         return (l >= Integer.MIN_VALUE && l <= Integer.MAX_VALUE);,       } else if (targetType.equals(PUnsignedSmallint.INSTANCE)) {,         l = (Long) value;,         return (l >= 0 && l <= Short.MAX_VALUE);,       } else if (targetType.equals(PSmallint.INSTANCE)) {,         l = (Long) value;,         return (l >= Short.MIN_VALUE && l <= Short.MAX_VALUE);,       } else if (targetType.equals(PTinyint.INSTANCE)) {,         l = (Long) value;,         return (l >= Byte.MIN_VALUE && l < Byte.MAX_VALUE);,       } else if (targetType.equals(PUnsignedTinyint.INSTANCE)) {,         l = (Long) value;,         return (l >= 0 && l < Byte.MAX_VALUE);,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return super.isCastableTo(targetType) || targetType.isCoercibleTo(PTimestamp.INSTANCE);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return LONG_PRECISION;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));,     } else if (equalsAny(rhsType, PDouble.INSTANCE, PFloat.INSTANCE, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE)) {,       return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,     },     return Longs.compare(((Number) lhs).longValue(), ((Number) rhs).longValue());,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       return Long.parseLong(value);,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return RANDOM.get().nextLong();],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PLong.java,compareTo,190-190,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PLong.java,,324-327,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveLongPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PLongArray.java,,24-91,[    public static final PLongArray INSTANCE = new PLongArray();, ,     private PLongArray() {,         super("BIGINT ARRAY", PDataType.ARRAY_TYPE_BASE + PLong.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 30);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PLong.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PLong.INSTANCE, sortOrder, maxLength, scale,,                 PLong.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveLongPhoenixArray pArr = (PhoenixArray.PrimitiveLongPhoenixArray) value;,         long[] longArr = (long[]) pArr.array;,         for (long i : longArr) {,             if (!super.isCoercibleTo(PLong.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PLong.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PSmallint.java,,28-151,[public class PSmallint extends PWholeNumber<Short> {, ,   public static final PSmallint INSTANCE = new PSmallint();, ,   private PSmallint() {,     super("SMALLINT", Types.SMALLINT, Short.class, new ShortCodec(), 4);,   }, ,   @Override,     public Integer getScale(Object o) {,       return ZERO;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,       return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,     }, ,     @Override,     public boolean isComparableTo(PDataType targetType) {,       return PDecimal.INSTANCE.isComparableTo(targetType);,     }, ,     @Override,     public boolean isFixedWidth() {,       return true;,     }, ,     @Override,     public Integer getByteSize() {,       return Bytes.SIZEOF_SHORT;,     }, ,     @Override,     public Integer getMaxLength(Object o) {,       return SHORT_PRECISION;,     }, ,     @Override,     public byte[] toBytes(Object object) {,       byte[] b = new byte[Bytes.SIZEOF_SHORT];,       toBytes(object, b, 0);,       return b;,     }, ,     @Override,     public int toBytes(Object object, byte[] bytes, int offset) {,       if (object == null) {,         throw newIllegalDataException(this + " may not be null");,       },       return this.getCodec().encodeShort(((Number)object).shortValue(), bytes, offset);,     }, ,     @Override,     public Object toObject(Object object, PDataType actualType) {,       Object o = PLong.INSTANCE.toObject(object, actualType);,       if (!(o instanceof Long) || o == null) {,         return o;,       },       long l = (Long)o;,       if (l < Short.MIN_VALUE || l > Short.MAX_VALUE) {,         throw newIllegalDataException(actualType + " value " + l + " cannot be cast to Short without changing its value");,       },       short s = (short)l;,       return s;,     }, ,     @Override,     public Short toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,       if (l == 0) {,         return null;,       },       if (equalsAny(actualType, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,           PUnsignedTinyint.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,           PUnsignedInt.INSTANCE, PFloat.INSTANCE, PUnsignedFloat.INSTANCE, PDouble.INSTANCE,,           PUnsignedDouble.INSTANCE)) {,         return actualType.getCodec().decodeShort(b, o, sortOrder);,       } else if (actualType == PDecimal.INSTANCE) {,         BigDecimal bd = (BigDecimal)actualType.toObject(b, o, l, actualType, sortOrder);,         return bd.shortValueExact();,       },       throwConstraintViolationException(actualType,this);,       return null;,     }, ,     @Override,     public Object toObject(String value) {,       if (value == null || value.length() == 0) {,         return null;,       },       try {,         return Short.parseShort(value);,       } catch (NumberFormatException e) {,         throw newIllegalDataException(e);,       },     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,       if (value != null) {,         short i;,         if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,             PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE, PUnsignedSmallint.INSTANCE)) {,           i = (Short) value;,           return i >= 0;,         } else if (targetType == PUnsignedTinyint.INSTANCE) {,           i = (Short) value;,           return (i >= 0 && i <= Byte.MAX_VALUE);,         } else if (targetType == PTinyint.INSTANCE) {,           i = (Short) value;,           return (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE);,         },       },       return super.isCoercibleTo(targetType, value);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,       return this.equals(targetType) || PInteger.INSTANCE.isCoercibleTo(targetType);,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,       return ((Integer) PInteger.INSTANCE.getSampleValue(maxLength, arrayLength)).shortValue();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PSmallint.java,toObject,84-84,[      if (!(o instanceof Long) || o == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PSmallint.java,,252-255,[          return new PhoenixArrayFactory() {,               @Override,               public PhoenixArray newArray(PDataType type, Object[] elements) {,                   return new PhoenixArray.PrimitiveShortPhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PSmallintArray.java,,24-91,[    public static final PSmallintArray INSTANCE = new PSmallintArray();, ,     private PSmallintArray() {,         super("SMALLINT ARRAY", PDataType.ARRAY_TYPE_BASE + PSmallint.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 31);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PSmallint.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PSmallint.INSTANCE, sortOrder, maxLength, scale,,                 PSmallint.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveShortPhoenixArray pArr = (PhoenixArray.PrimitiveShortPhoenixArray) value;,         short[] shortArr = (short[]) pArr.array;,         for (short i : shortArr) {,             if (!super.isCoercibleTo(PSmallint.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PSmallint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTime.java,,29-139,[public class PTime extends PDataType<Time> {, ,   public static final PTime INSTANCE = new PTime();, ,   private PTime() {,     super("TIME", Types.TIME, java.sql.Time.class, new PDate.DateCodec(), 10);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return PDate.INSTANCE.toBytes(object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     return PDate.INSTANCE.toBytes(object, bytes, offset);,   }, ,   @Override,   public java.sql.Time toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE, PDate.INSTANCE,,         PUnsignedDate.INSTANCE, PTime.INSTANCE, PUnsignedTime.INSTANCE, PLong.INSTANCE,,         PUnsignedLong.INSTANCE)) {,       return new java.sql.Time(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return new java.sql.Time(bd.longValueExact());,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE)) {,       return new java.sql.Time(((java.util.Date) object).getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return new java.sql.Time(((java.sql.Timestamp) object).getTime());,     } else if (equalsAny(actualType, PTime.INSTANCE, PUnsignedTime.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new java.sql.Time((Long) object);,     } else if (actualType == PDecimal.INSTANCE) {,       return new java.sql.Time(((BigDecimal) object).longValueExact());,     } else if (actualType == PVarchar.INSTANCE) {,       return DateUtil.parseTime((String) object);,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return PDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return PDate.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PDate.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return DateUtil.parseTime(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType.equals(PDate.INSTANCE);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,       if (formatter == null) {,           formatter = DateUtil.DEFAULT_TIME_FORMATTER;,         },         return "'" + super.toStringLiteral(o, formatter) + "'";,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Time((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTimeArray.java,,26-93,[    public static final PTimeArray INSTANCE = new PTimeArray();, ,     private PTimeArray() {,         super("TIME ARRAY", PDataType.ARRAY_TYPE_BASE + PTime.INSTANCE.getSqlType(), PhoenixArray.class,,                 null, 38);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PTime.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PTime.INSTANCE, sortOrder, maxLength, scale,,                 PTime.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] timeArr = (Object[]) pArr.array;,         for (Object i : timeArr) {,             if (!super.isCoercibleTo(PTime.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PTime.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTimestamp.java,,32-211,[public class PTimestamp extends PDataType<Timestamp> {, ,   public static final PTimestamp INSTANCE = new PTimestamp();, ,   private PTimestamp() {,     super("TIMESTAMP", Types.TIMESTAMP, java.sql.Timestamp.class,,         new PDate.DateCodec(), 9);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       // Create the byte[] of size MAX_TIMESTAMP_BYTES,       if(bytes.length != getByteSize()) {,           bytes = Bytes.padTail(bytes, (getByteSize() - bytes.length));,       },       PDate.INSTANCE.getCodec().encodeLong(0l, bytes, offset);,       Bytes.putInt(bytes, offset + Bytes.SIZEOF_LONG, 0);,       return getByteSize();,     },     java.sql.Timestamp value = (java.sql.Timestamp) object;,     PDate.INSTANCE.getCodec().encodeLong(value.getTime(), bytes, offset);, ,     /*,      * By not getting the stuff that got spilled over from the millis part,,      * it leaves the timestamp's byte representation saner - 8 bytes of millis | 4 bytes of nanos.,      * Also, it enables timestamp bytes to be directly compared with date/time bytes.,      */,     Bytes.putInt(bytes, offset + Bytes.SIZEOF_LONG, value.getNanos() % 1000000);,     return getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (object == null) {,       return null;,     },     if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE)) {,       return new java.sql.Timestamp(((java.util.Date) object).getTime());,     } else if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return object;,     } else if (equalsAny(actualType, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new java.sql.Timestamp((Long) object);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) object;,       long ms = bd.longValue();,       int nanos =,           (bd.remainder(BigDecimal.ONE).multiply(QueryConstants.BD_MILLIS_NANOS_CONVERSION)),               .intValue();,       return DateUtil.getTimestamp(ms, nanos);,     } else if (actualType == PVarchar.INSTANCE) {,       return DateUtil.parseTimestamp((String) object);,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public java.sql.Timestamp toObject(byte[] b, int o, int l, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (actualType == null || l == 0) {,       return null;,     },     java.sql.Timestamp v;,     if (equalsAny(actualType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       long millisDeserialized =,           (actualType == PTimestamp.INSTANCE ? PDate.INSTANCE : PUnsignedDate.INSTANCE).getCodec(),               .decodeLong(b, o, sortOrder);,       v = new java.sql.Timestamp(millisDeserialized);,       int nanosDeserialized =,           PUnsignedInt.INSTANCE.getCodec().decodeInt(b, o + Bytes.SIZEOF_LONG, sortOrder);,                 /*,                  * There was a bug in serialization of timestamps which was causing the sub-second millis part,                  * of time stamp to be present both in the LONG and INT bytes. Having the <100000 check,                  * makes this serialization fix backward compatible.,                  */,       v.setNanos(,           nanosDeserialized < 1000000 ? v.getNanos() + nanosDeserialized : nanosDeserialized);,       return v;,     } else if (equalsAny(actualType, PDate.INSTANCE, PUnsignedDate.INSTANCE, PTime.INSTANCE,,         PUnsignedTime.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE)) {,       return new java.sql.Timestamp(actualType.getCodec().decodeLong(b, o, sortOrder));,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       long ms = bd.longValue();,       int nanos = (bd.remainder(BigDecimal.ONE).multiply(QueryConstants.BD_MILLIS_NANOS_CONVERSION)),           .intValue();,       v = DateUtil.getTimestamp(ms, nanos);,       return v;,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       if (targetType.equals(PUnsignedTimestamp.INSTANCE)) {,         return ((java.util.Date) value).getTime() >= 0;,       } else if (equalsAny(targetType, PUnsignedDate.INSTANCE, PUnsignedTime.INSTANCE)) {,         return ((java.util.Date) value).getTime() >= 0,             && ((java.sql.Timestamp) value).getNanos() == 0;,       } else if (equalsAny(targetType, PDate.INSTANCE, PTime.INSTANCE)) {,         return ((java.sql.Timestamp) value).getNanos() == 0;,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return MAX_TIMESTAMP_BYTES;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (equalsAny(rhsType, PTimestamp.INSTANCE, PUnsignedTimestamp.INSTANCE)) {,       return ((java.sql.Timestamp) lhs).compareTo((java.sql.Timestamp) rhs);,     },     int c = ((java.util.Date) rhs).compareTo((java.util.Date) lhs);,     if (c != 0) return c;,     return ((java.sql.Timestamp) lhs).getNanos();,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return DateUtil.parseTimestamp(value);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,       if (formatter == null) {,           formatter = DateUtil.DEFAULT_TIMESTAMP_FORMATTER;,         },         return "'" + super.toStringLiteral(o, formatter) + "'";,   }, , ,   @Override,   public int getNanos(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     int nanos = PUnsignedInt.INSTANCE.getCodec(),         .decodeInt(ptr.get(), ptr.getOffset() + PLong.INSTANCE.getByteSize(), sortOrder);,     return nanos;,   }, ,   @Override,   public long getMillis(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     long millis = PLong.INSTANCE.getCodec().decodeLong(ptr.get(), ptr.getOffset(), sortOrder);,     return millis;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Timestamp(,         (Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTimestampArray.java,,26-93,[    public static final PTimestampArray INSTANCE = new PTimestampArray();, ,     private PTimestampArray() {,         super("TIMESTAMP ARRAY", PDataType.ARRAY_TYPE_BASE + PTimestamp.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 36);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PTimestamp.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PTimestamp.INSTANCE, sortOrder, maxLength, scale,,                 PTimestamp.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] timeStampArr = (Object[]) pArr.array;,         for (Object i : timeStampArr) {,             if (!super.isCoercibleTo(PTimestamp.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PTimestamp.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTinyint.java,,28-148,[public class PTinyint extends PWholeNumber<Byte> {, ,   public static final PTinyint INSTANCE = new PTinyint();, ,   private PTinyint() {,     super("TINYINT", Types.TINYINT, Byte.class, new ByteCodec(), 5);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_BYTE;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return BYTE_PRECISION;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_BYTE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeByte(((Number) object).byteValue(), bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Byte b = Byte.parseByte(value);,       return b;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Object o = PLong.INSTANCE.toObject(object, actualType);,     if (!(o instanceof Long) || o == null) {,       return o;,     },     long l = (Long) o;,     if (l < Byte.MIN_VALUE || l > Byte.MAX_VALUE) {,       throw newIllegalDataException(,           actualType + " value " + l + " cannot be cast to Byte without changing its value");,     },     return (byte) l;,   }, ,   @Override,   public Byte toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     if (l == 0) {,       return null;,     },     if (equalsAny(actualType, PDouble.INSTANCE, PUnsignedDouble.INSTANCE, PFloat.INSTANCE,,         PUnsignedFloat.INSTANCE, PLong.INSTANCE, PUnsignedLong.INSTANCE, PInteger.INSTANCE,,         PUnsignedInt.INSTANCE, PSmallint.INSTANCE, PUnsignedSmallint.INSTANCE, PTinyint.INSTANCE,,         PUnsignedTinyint.INSTANCE)) {,       return actualType.getCodec().decodeByte(b, o, sortOrder);,     } else if (actualType == PDecimal.INSTANCE) {,       BigDecimal bd = (BigDecimal) actualType.toObject(b, o, l, actualType, sortOrder);,       return bd.byteValueExact();,     },     throwConstraintViolationException(actualType, this);,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (value != null) {,       if (equalsAny(targetType, PUnsignedDouble.INSTANCE, PUnsignedFloat.INSTANCE,,           PUnsignedLong.INSTANCE, PUnsignedInt.INSTANCE, PUnsignedSmallint.INSTANCE,,           PUnsignedTinyint.INSTANCE)) {,         byte i = (Byte) value;,         return i >= 0;,       },     },     return super.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PSmallint.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return ((Integer) PInteger.INSTANCE.getSampleValue(maxLength, arrayLength)),         .byteValue();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/schema/types/PTinyint.java,toObject,97-97,[    if (!(o instanceof Long) || o == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PTinyint.java,,246-249,[      return new PhoenixArrayFactory() {,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray.PrimitiveBytePhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PTinyintArray.java,,24-91,[    public static final PTinyintArray INSTANCE = new PTinyintArray();, ,     private PTinyintArray() {,         super("TINYINT ARRAY", PDataType.ARRAY_TYPE_BASE + PTinyint.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 32);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PTinyint.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PTinyint.INSTANCE, sortOrder, maxLength, scale,,                 PTinyint.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveBytePhoenixArray pArr = (PhoenixArray.PrimitiveBytePhoenixArray) value;,         byte[] byteArr = (byte[]) pArr.array;,         for (byte i : byteArr) {,             if (!super.isCoercibleTo(PTinyint.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PTinyint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDate.java,,30-143,[  public static final PUnsignedDate INSTANCE = new PUnsignedDate();, ,   private PUnsignedDate() {,     super("UNSIGNED_DATE", 19, Date.class,,         new UnsignedDateCodec(), 14); // After TIMESTAMP and DATE to ensure toLiteral finds those first,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     getCodec().encodeLong(((java.util.Date) object).getTime(), bytes, offset);,     return this.getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Date d = (Date) PDate.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeDate(d);,     return d;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale) {,     Date d = (Date) PDate.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeDate(d);,     return d;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PUnsignedTime.INSTANCE, PUnsignedTimestamp.INSTANCE),         || PDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PDate.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return PDate.INSTANCE.getByteSize();,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PDate.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     return PDate.INSTANCE.toObject(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType.equals(PUnsignedTime.INSTANCE);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,     // Can't delegate, as the super.toStringLiteral calls this.toBytes,     if (formatter == null || formatter == DateUtil.DEFAULT_DATE_FORMATTER) {,       // If default formatter has not been overridden,,       // use one that displays milliseconds.,       formatter = DateUtil.DEFAULT_MS_DATE_FORMATTER;,     },     return "'" + super.toStringLiteral(o, formatter) + "'";,   }, ,   @Override,   public void coerceBytes(ImmutableBytesWritable ptr, Object object, PDataType actualType,,       Integer maxLength, Integer scale, SortOrder actualModifier,,       Integer desiredMaxLength, Integer desiredScale,,       SortOrder expectedModifier) {,     if (ptr.getLength() > 0 && actualType == PUnsignedTimestamp.INSTANCE,         && actualModifier == expectedModifier) {,       ptr.set(ptr.get(), ptr.getOffset(), getByteSize());,       return;,     },     super.coerceBytes(ptr, object, actualType, maxLength, scale, actualModifier, desiredMaxLength,,         desiredScale, expectedModifier);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.DATE;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new Date((Long) PUnsignedLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/schema/types/PUnsignedDate.java,,155-159,[      return new PhoenixArrayFactory() {, ,         @Override,         public PhoenixArray newArray(PDataType type, Object[] elements) {,           return new PhoenixArray(type, elements);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDateArray.java,,26-88,[    public static final PUnsignedDateArray INSTANCE = new PUnsignedDateArray();, ,     private PUnsignedDateArray() {,         super("UNSIGNED_DATE ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedDate.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 41);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedDate.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length, PDataType actualType, SortOrder sortOrder,,             Integer maxLength, Integer scale) {,         return toObject(bytes, offset, length, PUnsignedDate.INSTANCE, sortOrder, maxLength, scale,,                 PUnsignedDate.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) { return true; },         PhoenixArray pArr = (PhoenixArray)value;,         Object[] dateArr = (Object[])pArr.array;,         for (Object i : dateArr) {,             if (!super.isCoercibleTo(PUnsignedDate.INSTANCE, i)) { return false; },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedDate.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDouble.java,,30-130,[  public static final PUnsignedDouble INSTANCE = new PUnsignedDouble();, ,   private PUnsignedDouble() {,     super("UNSIGNED_DOUBLE", 15, Double.class, new UnsignedDoubleCodec(), 20);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));,     },     return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_DOUBLE;,   }, ,   @Override,   public Integer getScale(Object o) {,     return PDouble.INSTANCE.getScale(o);,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return PDouble.INSTANCE.getMaxLength(o);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_DOUBLE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeDouble(((Number) object).doubleValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Double d = Double.parseDouble(value);,       if (d.doubleValue() < 0) {,         throw newIllegalDataException("Value may not be negative(",             + d + ")");,       },       return d;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Double v = (Double) PDouble.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Double v = (Double) PDouble.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PDouble.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PDouble.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PDouble.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Double) PDouble.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PUnsignedDouble.java,compareTo,39-39,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).doubleValue()));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedDoubleArray.java,,24-94,[    public static final PUnsignedDoubleArray INSTANCE = new PUnsignedDoubleArray();, ,     private PUnsignedDoubleArray() {,         super("UNSIGNED_DOUBLE ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedDouble.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 47);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedDouble.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedDouble.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedDouble.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveDoublePhoenixArray pArr = (PhoenixArray.PrimitiveDoublePhoenixArray) value;,         double[] doubleArr = (double[]) pArr.array;,         for (Object i : doubleArr) {,             if (!super.isCoercibleTo(PUnsignedDouble.INSTANCE, i) && (!super.isCoercibleTo(,                     PUnsignedTimestamp.INSTANCE, i)),                     && (!super.isCoercibleTo(PUnsignedTime.INSTANCE, i)) && (!super,                             .isCoercibleTo(PUnsignedDate.INSTANCE, i))) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedDouble.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedFloat.java,,27-124,[  public static final PUnsignedFloat INSTANCE = new PUnsignedFloat();, ,   private PUnsignedFloat() {,     super("UNSIGNED_FLOAT", 14, Float.class, new UnsignedFloatCodec(), 19);,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PFloat.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_FLOAT;,   }, ,   @Override,   public Integer getScale(Object o) {,     return PFloat.INSTANCE.getScale(o);,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return PFloat.INSTANCE.getMaxLength(o);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_FLOAT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeFloat(((Number) object).floatValue(),,         bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Float f = Float.parseFloat(value);,       if (f.floatValue() < 0) {,         throw newIllegalDataException("Value may not be negative(",             + f + ")");,       },       return f;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Float v = (Float) PFloat.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Float v = (Float) PFloat.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType) || PFloat.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return this.equals(targetType) || PUnsignedDouble.INSTANCE.isCoercibleTo(targetType) || PFloat.INSTANCE,         .isCoercibleTo(targetType);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PFloat.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Float) PFloat.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedFloatArray.java,,24-91,[    public static final PUnsignedFloatArray INSTANCE = new PUnsignedFloatArray();, ,     private PUnsignedFloatArray() {,         super("UNSIGNED_FLOAT ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedFloat.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 46);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedFloat.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedFloat.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedFloat.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveFloatPhoenixArray pArr = (PhoenixArray.PrimitiveFloatPhoenixArray) value;,         float[] floatArr = (float[]) pArr.array;,         for (Object i : floatArr) {,             if (!super.isCoercibleTo(PUnsignedFloat.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedFloat.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedInt.java,,36-150,[  public static final PUnsignedInt INSTANCE = new PUnsignedInt();, ,   private PUnsignedInt() {,     super("UNSIGNED_INT", 9 /* no constant available in Types */, Integer.class,,         new UnsignedIntCodec(), 16);,   }, ,   @Override,   public boolean isOrderPreserving() {,     return true;,   }, ,   @Override,   public Order getOrder() {,     return Order.ASCENDING;,   }, ,   @Override,   public boolean isSkippable() {,     return true;,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_INT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeInt(((Number) object).intValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Integer v = (Integer) PInteger.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Integer v =,         (Integer) PInteger.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || targetType.equals(PUnsignedFloat.INSTANCE),         || PUnsignedLong.INSTANCE.isCoercibleTo(targetType),         || PInteger.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PInteger.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_INT;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Integer i = Integer.parseInt(value);,       if (i.intValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + i + ")");,       },       return i;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public int getResultSetSqlType() {,     return PInteger.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Integer) PInteger.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedIntArray.java,,24-91,[    public static final PUnsignedIntArray INSTANCE = new PUnsignedIntArray();, ,     private PUnsignedIntArray() {,         super("UNSIGNED_INT ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedInt.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 43);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedInt.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedInt.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedInt.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveIntPhoenixArray pArr = (PhoenixArray.PrimitiveIntPhoenixArray) value;,         int[] intArr = (int[]) pArr.array;,         for (Object i : intArr) {,             if (!super.isCoercibleTo(PUnsignedInt.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedInt.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedLong.java,,40-162,[  public static final PUnsignedLong INSTANCE = new PUnsignedLong();, ,   private PUnsignedLong() {,     super("UNSIGNED_LONG", 10 /* no constant available in Types */, Long.class,,         new UnsignedLongCodec(), 15);,   }, ,   @Override,   public boolean isOrderPreserving() {,     return true;,   }, ,   @Override,   public Order getOrder() {,     return Order.ASCENDING;,   }, ,   @Override,   public boolean isSkippable() {,     return true;,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_LONG];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] b, int o) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeLong(((Number) object).longValue(), b, o);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Long v = (Long) PLong.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Long v = (Long) PLong.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,     public boolean isCastableTo(PDataType targetType) {,       return super.isCastableTo(targetType) || targetType.isCoercibleTo(PTimestamp.INSTANCE);,     }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType == this || targetType == PUnsignedDouble.INSTANCE || PLong.INSTANCE,         .isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PLong.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (rhsType == PDecimal.INSTANCE) {,       return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));,     } else if (equalsAny(rhsType, PDouble.INSTANCE, PFloat.INSTANCE, PUnsignedDouble.INSTANCE,,         PUnsignedFloat.INSTANCE)) {,       return Doubles.compare(((Number) lhs).doubleValue(), ((Number) rhs).doubleValue());,     },     return Longs.compare(((Number) lhs).longValue(), ((Number) rhs).longValue());,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Long l = Long.parseLong(value);,       if (l.longValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + l + ")");,       },       return l;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public int getResultSetSqlType() {,     return PLong.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return Math.abs((Long) PLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/phoenix/schema/types/PUnsignedLong.java,compareTo,126-126,[      return -((BigDecimal) rhs).compareTo(BigDecimal.valueOf(((Number) lhs).longValue()));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedLongArray.java,,24-91,[    public static final PUnsignedLongArray INSTANCE = new PUnsignedLongArray();, ,     private PUnsignedLongArray() {,         super("UNSIGNED_LONG ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedLong.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 42);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedLong.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedLong.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedLong.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveLongPhoenixArray pArr = (PhoenixArray.PrimitiveLongPhoenixArray) value;,         long[] longArr = (long[]) pArr.array;,         for (Object i : longArr) {,             if (!super.isCoercibleTo(PUnsignedLong.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedLong.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedSmallint.java,,27-131,[  public static final PUnsignedSmallint INSTANCE = new PUnsignedSmallint();, ,   private PUnsignedSmallint() {,     super("UNSIGNED_SMALLINT", 13, Short.class, new UnsignedShortCodec(), 17);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_SHORT;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return SHORT_PRECISION;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] b = new byte[Bytes.SIZEOF_SHORT];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeShort(((Number) object).shortValue(), bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Short b = Short.parseShort(value);,       if (b.shortValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + b + ")");,       },       return b;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Short v = (Short) PSmallint.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Short v = (Short) PSmallint.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || PUnsignedInt.INSTANCE.isCoercibleTo(targetType) || PSmallint.INSTANCE,         .isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PSmallint.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PSmallint.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return ((Integer) RANDOM.get().nextInt(Short.MAX_VALUE)).shortValue();],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedSmallintArray.java,,24-92,[    public static final PUnsignedSmallintArray INSTANCE = new PUnsignedSmallintArray();, ,     private PUnsignedSmallintArray() {,         super("UNSIGNED_SMALLINT ARRAY",,                 PDataType.ARRAY_TYPE_BASE + PUnsignedSmallint.INSTANCE.getSqlType(), PhoenixArray.class,,                 null, 44);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedSmallint.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedSmallint.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedSmallint.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveShortPhoenixArray pArr = (PhoenixArray.PrimitiveShortPhoenixArray) value;,         short[] shortArr = (short[]) pArr.array;,         for (Object i : shortArr) {,             if (!super.isCoercibleTo(PUnsignedSmallint.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedSmallint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTime.java,,29-118,[  public static final PUnsignedTime INSTANCE = new PUnsignedTime();, ,   private PUnsignedTime() {,     super("UNSIGNED_TIME", 18, java.sql.Time.class, new PUnsignedDate.UnsignedDateCodec(), 13);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     return PUnsignedDate.INSTANCE.toBytes(object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     return PUnsignedDate.INSTANCE.toBytes(object, bytes, offset);,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     java.sql.Time t = (java.sql.Time) PTime.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeDate(t);,     return t;,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     java.sql.Time t = (java.sql.Time) PTime.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeDate(t);,     return t;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PUnsignedDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return PUnsignedDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PTime.INSTANCE.isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_LONG;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PTime.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     return PTime.INSTANCE.toObject(value);,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType == PUnsignedDate.INSTANCE;,   }, ,   @Override,   public String toStringLiteral(byte[] b, int offset, int length, Format formatter) {,     return PUnsignedDate.INSTANCE.toStringLiteral(b, offset, length, formatter);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,     return PUnsignedDate.INSTANCE.toStringLiteral(o, formatter);,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.TIME;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Time(,         (Long) PUnsignedLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTimeArray.java,,26-93,[    public static final PUnsignedTimeArray INSTANCE = new PUnsignedTimeArray();, ,     private PUnsignedTimeArray() {,         super("UNSIGNED_TIME ARRAY", PDataType.ARRAY_TYPE_BASE + PUnsignedTime.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 39);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedTime.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedTime.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedTime.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] timeArr = (Object[]) pArr.array;,         for (Object i : timeArr) {,             if (!super.isCoercibleTo(PUnsignedTime.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedTime.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTimestamp.java,,31-146,[  public static final PUnsignedTimestamp INSTANCE = new PUnsignedTimestamp();, ,   private PUnsignedTimestamp() {,     super("UNSIGNED_TIMESTAMP", 20, java.sql.Timestamp.class, new PUnsignedDate.UnsignedDateCodec(), 12);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     byte[] bytes = new byte[getByteSize()];,     toBytes(object, bytes, 0);,     return bytes;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     java.sql.Timestamp value = (java.sql.Timestamp) object;,     PUnsignedDate.INSTANCE.getCodec().encodeLong(value.getTime(), bytes, offset);, ,             /*,              * By not getting the stuff that got spilled over from the millis part,,              * it leaves the timestamp's byte representation saner - 8 bytes of millis | 4 bytes of nanos.,              * Also, it enables timestamp bytes to be directly compared with date/time bytes.,              */,     Bytes.putInt(bytes, offset + Bytes.SIZEOF_LONG, value.getNanos() % 1000000);,     return getByteSize();,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     java.sql.Timestamp ts = (java.sql.Timestamp) PTimestamp.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeDate(ts);,     return ts;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     java.sql.Timestamp ts =,         (java.sql.Timestamp) PTimestamp.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeDate(ts);,     return ts;,   }, ,   @Override,   public boolean isCastableTo(PDataType targetType) {,     return PUnsignedDate.INSTANCE.isCastableTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || PUnsignedDate.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PTimestamp.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return PTimestamp.INSTANCE.getByteSize();,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PTimestamp.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public Object toObject(String value) {,     return PTimestamp.INSTANCE.toObject(value);,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,     if (formatter == null) {,       formatter = DateUtil.DEFAULT_TIMESTAMP_FORMATTER;,     },     return "'" + super.toStringLiteral(o, formatter) + "'";,   }, ,   @Override,   public int getNanos(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     int nanos = PUnsignedInt.INSTANCE.getCodec(),         .decodeInt(ptr.get(), ptr.getOffset() + PLong.INSTANCE.getByteSize(), sortOrder);,     return nanos;,   }, ,   @Override,   public long getMillis(ImmutableBytesWritable ptr, SortOrder sortOrder) {,     long millis =,         PUnsignedLong.INSTANCE.getCodec().decodeLong(ptr.get(), ptr.getOffset(), sortOrder);,     return millis;,   }, ,   @Override,   public int getResultSetSqlType() {,     return Types.TIMESTAMP;,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return new java.sql.Timestamp(,         (Long) PUnsignedLong.INSTANCE.getSampleValue(maxLength, arrayLength));],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTimestampArray.java,,26-94,[    public static final PUnsignedTimestampArray INSTANCE = new PUnsignedTimestampArray();, ,     private PUnsignedTimestampArray() {,         super("UNSIGNED_TIMESTAMP ARRAY",,                 PDataType.ARRAY_TYPE_BASE + PUnsignedTimestamp.INSTANCE.getSqlType(), PhoenixArray.class,,                 null, 37);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedTimestamp.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedTimestamp.INSTANCE, sortOrder,,                 maxLength, scale, PUnsignedTimestamp.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] timeStampArr = (Object[]) pArr.array;,         for (Object i : timeStampArr) {,             if (!super.isCoercibleTo(PUnsignedTimestamp.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedTimestamp.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTinyint.java,,27-128,[  public static final PUnsignedTinyint INSTANCE = new PUnsignedTinyint();, ,   private PUnsignedTinyint() {,     super("UNSIGNED_TINYINT", 11, Byte.class, new UnsignedByteCodec(), 18);,   }, ,   @Override,   public Integer getScale(Object o) {,     return ZERO;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return PLong.INSTANCE.compareTo(lhs, rhs, rhsType);,   }, ,   @Override,   public boolean isFixedWidth() {,     return true;,   }, ,   @Override,   public Integer getByteSize() {,     return Bytes.SIZEOF_BYTE;,   }, ,   @Override,   public Integer getMaxLength(Object o) {,     return BYTE_PRECISION;,   }, ,   @Override,   public byte[] toBytes(Object object) {,     byte[] b = new byte[Bytes.SIZEOF_BYTE];,     toBytes(object, b, 0);,     return b;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       throw newIllegalDataException(this + " may not be null");,     },     return this.getCodec().encodeByte(((Number) object).byteValue(), bytes, offset);,   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     try {,       Byte b = Byte.parseByte(value);,       if (b.byteValue() < 0) {,         throw newIllegalDataException("Value may not be negative(" + b + ")");,       },       return b;,     } catch (NumberFormatException e) {,       throw newIllegalDataException(e);,     },   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     Byte v = (Byte) PTinyint.INSTANCE.toObject(object, actualType);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public Object toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder,,       Integer maxLength, Integer scale) {,     Byte v = (Byte) PTinyint.INSTANCE.toObject(b, o, l, actualType, sortOrder);,     throwIfNonNegativeNumber(v);,     return v;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return targetType.equals(this) || PUnsignedSmallint.INSTANCE.isCoercibleTo(targetType),         || PTinyint.INSTANCE.isCoercibleTo(targetType);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     return super.isCoercibleTo(targetType, value) || PTinyint.INSTANCE,         .isCoercibleTo(targetType, value);,   }, ,   @Override,   public boolean isComparableTo(PDataType targetType) {,     return PDecimal.INSTANCE.isComparableTo(targetType);,   }, ,   @Override,   public int getResultSetSqlType() {,     return PTinyint.INSTANCE.getResultSetSqlType();,   }, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     return ((Integer) RANDOM.get().nextInt(Byte.MAX_VALUE)).byteValue();],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PUnsignedTinyintArray.java,,24-92,[    public static final PUnsignedTinyintArray INSTANCE = new PUnsignedTinyintArray();, ,     private PUnsignedTinyintArray() {,         super("UNSIGNED_TINYINT ARRAY",,                 PDataType.ARRAY_TYPE_BASE + PUnsignedTinyint.INSTANCE.getSqlType(), PhoenixArray.class,,                 null, 45);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PUnsignedTinyint.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PUnsignedTinyint.INSTANCE, sortOrder, maxLength,,                 scale, PUnsignedTinyint.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray.PrimitiveBytePhoenixArray pArr = (PhoenixArray.PrimitiveBytePhoenixArray) value;,         byte[] byteArr = (byte[]) pArr.array;,         for (Object i : byteArr) {,             if (!super.isCoercibleTo(PUnsignedTinyint.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PUnsignedTinyint.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarbinary.java,,31-174,[  public static final PVarbinary INSTANCE = new PVarbinary();, ,   private PVarbinary() {,     super("VARBINARY", Types.VARBINARY, byte[].class, null, 22);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     if (object == null) {,       return ByteUtil.EMPTY_BYTE_ARRAY;,     },     return (byte[]) object;,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       return 0;,     },     byte[] o = (byte[]) object;,     // assumes there's enough room,     System.arraycopy(bytes, offset, o, 0, o.length);,     return o.length;,   }, ,   /**,    * Override because we must always create a new byte array,    */,   @Override,   public byte[] toBytes(Object object, SortOrder sortOrder) {,     byte[] bytes = toBytes(object);,     // Override because we need to allocate a new buffer in this case,     if (sortOrder == SortOrder.DESC) {,       return SortOrder.invert(bytes, 0, new byte[bytes.length], 0, bytes.length);,     },     return bytes;,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (length == 0) {,       return null;,     },     if (offset == 0 && bytes.length == length && sortOrder == SortOrder.ASC) {,       return bytes;,     },     byte[] bytesCopy = new byte[length];,     System.arraycopy(bytes, offset, bytesCopy, 0, length);,     if (sortOrder == SortOrder.DESC) {,       bytesCopy = SortOrder.invert(bytes, offset, bytesCopy, 0, length);,       offset = 0;,     },     return bytesCopy;,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     return actualType.toBytes(object);,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     byte[] value = (byte[]) o;,     return value == null ? 1 : value.length;,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength,,       Integer desiredScale) {,     if (ptr.getLength() != 0 && srcType.equals(PBinary.INSTANCE) && maxLength != null,         && desiredMaxLength != null) {,       return maxLength <= desiredMaxLength;,     },     return true;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     if (lhs == null && rhs == null) {,       return 0;,     } else if (lhs == null) {,       return -1;,     } else if (rhs == null) {,       return 1;,     },     if (equalsAny(rhsType, this, PBinary.INSTANCE)) {,       return Bytes.compareTo((byte[]) lhs, (byte[]) rhs);,     } else {,       byte[] rhsBytes = rhsType.toBytes(rhs);,       return Bytes.compareTo((byte[]) lhs, rhsBytes);,     },   }, ,   @Override,   public Object toObject(String value) {,     if (value == null || value.length() == 0) {,       return null;,     },     return Base64.decode(value);,   }, ,   @Override,   public String toStringLiteral(byte[] b, int o, int length, Format formatter) {,     StringBuilder buf = new StringBuilder();,     buf.append('[');,     if (length > 0) {,         for (int i = o; i < length; i++) {,           buf.append(0xFF & b[i]);,           buf.append(',');,         },         buf.setLength(buf.length()-1);,     },     buf.append(']');,     return buf.toString();,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,       return toStringLiteral((byte[])o, 0, ((byte[]) o).length, formatter);,   },   ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     int length = maxLength != null && maxLength > 0 ? maxLength : 1;,     byte[] b = new byte[length];,     RANDOM.get().nextBytes(b);,     return b;],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarbinaryArray.java,,24-91,[    public static final PVarbinaryArray INSTANCE = new PVarbinaryArray();, ,     private PVarbinaryArray() {,         super("VARBINARY ARRAY", PDataType.ARRAY_TYPE_BASE + PVarbinary.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 27);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PVarbinary.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PVarbinary.INSTANCE, sortOrder, maxLength, scale,,                 PVarbinary.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] charArr = (Object[]) pArr.array;,         for (Object i : charArr) {,             if (!super.isCoercibleTo(PVarbinary.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PVarbinary.INSTANCE, arrayLength, maxLength);],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarchar.java,,33-161,[  public static final PVarchar INSTANCE = new PVarchar();, ,   private PVarchar() {,     super("VARCHAR", Types.VARCHAR, String.class, null, 0);,   }, ,   @Override,   public byte[] toBytes(Object object) {,     // TODO: consider using avro UTF8 object instead of String,     // so that we get get the size easily,     if (object == null) {,       return ByteUtil.EMPTY_BYTE_ARRAY;,     },     return Bytes.toBytes((String) object);,   }, ,   @Override,   public int toBytes(Object object, byte[] bytes, int offset) {,     if (object == null) {,       return 0;,     },     byte[] b = toBytes(object); // TODO: no byte[] allocation: use CharsetEncoder,     System.arraycopy(b, 0, bytes, offset, b.length);,     return b.length;,   }, ,   @Override,   public Object toObject(byte[] bytes, int offset, int length, PDataType actualType,,       SortOrder sortOrder, Integer maxLength, Integer scale) {,     if (length == 0) {,       return null;,     },     if (!actualType.isCoercibleTo(this)) {,       throwConstraintViolationException(actualType, this);,     },     if (sortOrder == SortOrder.DESC) {,       bytes = SortOrder.invert(bytes, offset, length);,       offset = 0;,     },     return Bytes.toString(bytes, offset, length);,   }, ,   @Override,   public Object toObject(Object object, PDataType actualType) {,     if (equalsAny(actualType, this, PChar.INSTANCE)) {,       String s = (String) object;,       return s == null || s.length() > 0 ? s : null;,     },     return throwConstraintViolationException(actualType, this);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType) {,     return equalsAny(targetType, this, PChar.INSTANCE, PVarbinary.INSTANCE, PBinary.INSTANCE);,   }, ,   @Override,   public boolean isCoercibleTo(PDataType targetType, Object value) {,     if (isCoercibleTo(targetType)) {,       if (targetType.equals(PChar.INSTANCE)) {,         return value != null;,       },       return true;,     },     return false;,   }, ,   @Override,   public boolean isSizeCompatible(ImmutableBytesWritable ptr, Object value, PDataType srcType,,       Integer maxLength, Integer scale, Integer desiredMaxLength,,       Integer desiredScale) {,     if (ptr.getLength() != 0 && maxLength != null && desiredMaxLength != null) {,       return maxLength <= desiredMaxLength;,     },     return true;,   }, ,   @Override,   public boolean isFixedWidth() {,     return false;,   }, ,   @Override,   public int estimateByteSize(Object o) {,     String value = (String) o;,     return value == null ? 1 : value.length();,   }, ,   @Override,   public Integer getByteSize() {,     return null;,   }, ,   @Override,   public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,     return ((String) lhs).compareTo((String) rhs);,   }, ,   @Override,   public Object toObject(String value) {,     return value;,   }, ,   @Override,   public boolean isBytesComparableWith(PDataType otherType) {,     return super.isBytesComparableWith(otherType) || otherType == PChar.INSTANCE;,   }, ,   @Override,   public String toStringLiteral(Object o, Format formatter) {,     if (formatter != null) {,       return "'" + formatter.format(o) + "'";,     },     return null == o ? String.valueOf(o) : "'" + StringUtil.escapeStringConstant(o.toString()) + "'";,   }, ,   private char[] sampleChars = new char[1];, ,   @Override,   public Object getSampleValue(Integer maxLength, Integer arrayLength) {,     Preconditions.checkArgument(maxLength == null || maxLength >= 0);,     int length = maxLength != null ? maxLength : 1;,     if (length != sampleChars.length) {,       sampleChars = new char[length];,     },     for (int i = 0; i < length; i++) {,       sampleChars[i] = (char) RANDOM.get().nextInt(Byte.MAX_VALUE);,     },     return new String(sampleChars);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/phoenix/schema/types/PVarchar.java,toStringLiteral,146-146,[    return null == o ? String.valueOf(o) : "'" + StringUtil.escapeStringConstant(o.toString()) + "'";],,
BAD_PRACTICE,HE_INHERITS_EQUALS_USE_HASHCODE,org/apache/phoenix/schema/types/PVarcharArray.java,,24-91,[    public static final PVarcharArray INSTANCE = new PVarcharArray();, ,     private PVarcharArray() {,         super("VARCHAR ARRAY", PDataType.ARRAY_TYPE_BASE + PVarchar.INSTANCE.getSqlType(),,                 PhoenixArray.class, null, 26);,     }, ,     @Override,     public boolean isArrayType() {,         return true;,     }, ,     @Override,     public boolean isFixedWidth() {,         return false;,     }, ,     @Override,     public int compareTo(Object lhs, Object rhs, PDataType rhsType) {,         return compareTo(lhs, rhs);,     }, ,     @Override,     public Integer getByteSize() {,         return null;,     }, ,     @Override,     public byte[] toBytes(Object object) {,         return toBytes(object, SortOrder.ASC);,     }, ,     @Override,     public byte[] toBytes(Object object, SortOrder sortOrder) {,         return toBytes(object, PVarchar.INSTANCE, sortOrder);,     }, ,     @Override,     public Object toObject(byte[] bytes, int offset, int length,,             PDataType actualType, SortOrder sortOrder, Integer maxLength,,             Integer scale) {,         return toObject(bytes, offset, length, PVarchar.INSTANCE, sortOrder, maxLength, scale,,                 PVarchar.INSTANCE);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType) {,         return isCoercibleTo(targetType, this);,     }, ,     @Override,     public boolean isCoercibleTo(PDataType targetType, Object value) {,         if (value == null) {,             return true;,         },         PhoenixArray pArr = (PhoenixArray) value;,         Object[] charArr = (Object[]) pArr.array;,         for (Object i : charArr) {,             if (!super.isCoercibleTo(PVarchar.INSTANCE, i)) {,                 return false;,             },         },         return true;,     }, ,     @Override,     public Object getSampleValue(Integer maxLength, Integer arrayLength) {,         return getSampleValue(PVarchar.INSTANCE, arrayLength, maxLength);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/schema/types/PhoenixArray.java,boundaryCheck,175-175,[		if ((--index) + count > arr.length) {],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/phoenix/schema/types/PhoenixArray.java,<init>,117-117,[		this.numElements = elements.length;],,<init>,106-106,[    		    if (elements != null && elements.length > 0) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,648-648,[            return booleanArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,653-653,[			return this.baseType.estimateByteSize(booleanArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,658-658,[			return this.baseType.toBytes(booleanArr[pos]);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,586-586,[      return byteArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,591-591,[			return this.baseType.estimateByteSize(byteArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,596-596,[			return this.baseType.toBytes(byteArr[pos]);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,476-476,[      return doubleArr;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,531-531,[      return floatArr;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,312-312,[            return intArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,317-317,[			return this.baseType.estimateByteSize(intArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,322-322,[			return this.baseType.toBytes(intArr[pos]);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,422-422,[      return longArr;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/schema/types/PhoenixArray.java,convertObjectArrayToPrimitiveArray,367-367,[      return shortArr;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,estimateByteSize,372-372,[			return this.baseType.estimateByteSize(shortArr[pos]);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/schema/types/PhoenixArray.java,toBytes,377-377,[			return this.baseType.toBytes(shortArr[pos]);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/spark/ConfigurationUtil.scala,<init>,22-22,[object ConfigurationUtil extends Serializable {],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/spark/DataFrameFunctions.scala,<init>,41-41,[    val phxRDD = data.mapPartitions{ rows =>],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/spark/PhoenixRDD.scala,<init>,33-33,[class PhoenixRDD(sc: SparkContext, table: String, columns: Seq[String],],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/spark/PhoenixRecordWritable.scala,apply,65-65,[          (finalObj, finalType) match {],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/spark/PhoenixRelation.scala,<init>,27-27,[case class PhoenixRelation(tableName: String, zkUrl: String)(@transient val sqlContext: SQLContext)],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/spark/PhoenixSparkIT.scala,apply$mcV$sp,272-272,[    val sqlContext = new SQLContext(sc)],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/spark/PhoenixSparkIT.scala,apply$mcV$sp,369-369,[    val stmt = conn.createStatement()],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/spark/PhoenixSparkIT.scala,apply$mcV$sp,384-384,[    var stmt = conn.createStatement()],,apply$mcV$sp,397-397,[    stmt = conn.createStatement()],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/spark/PhoenixSparkIT.scala,apply$mcV$sp,195-195,[      val count = sqlRdd.count()],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/spark/PhoenixSparkIT.scala,apply,83-83,[      stmt.execute(sql)],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/spark/PhoenixSparkIT.scala,<init>,39-39,[object PhoenixSparkITHelper extends BaseHBaseManagedTimeIT {],,
BAD_PRACTICE,NM_CLASS_NAMING_CONVENTION,org/apache/phoenix/spark/package.scala,,20-34,[package object spark {,   implicit def toProductRDDFunctions[A <: Product](rdd: RDD[A]): ProductRDDFunctions[A] = {,     new ProductRDDFunctions[A](rdd),   }, ,   implicit def toSparkContextFunctions(sc: SparkContext): SparkContextFunctions = {,     new SparkContextFunctions(sc),   }, ,   implicit def toSparkSqlContextFunctions(sqlContext: SQLContext): SparkSqlContextFunctions = {,     new SparkSqlContextFunctions(sqlContext),   }, ,   implicit def toDataFrameFunctions(data: DataFrame): DataFrameFunctions = {,     new DataFrameFunctions(data)],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/spark/package.scala,<init>,20-20,[package object spark {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegateConnection.java,prepareStatement,61-61,[    return conn.prepareStatement(sql);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegateConnection.java,prepareStatement,226-226,[    return conn.prepareStatement(sql, autoGeneratedKeys);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegateConnection.java,prepareStatement,157-157,[    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegateConnection.java,prepareStatement,215-215,[    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegateConnection.java,prepareStatement,231-231,[    return conn.prepareStatement(sql, columnIndexes);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/DelegateConnection.java,prepareStatement,236-236,[    return conn.prepareStatement(sql, columnNames);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/trace/PhoenixMetricsSink.java,lazyInitialize,131-131,[            } catch (Exception e) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/PhoenixMetricsSink.java,createTable,186-186,[        PreparedStatement stmt = conn.prepareStatement(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/PhoenixMetricsSink.java,putMetrics,278-278,[            PreparedStatement ps = conn.prepareStatement(stmt);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/phoenix/trace/PhoenixTableMetricsWriterIT.java,testCreatesTable,54-54,[        } catch (Exception e) {],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/phoenix/trace/PhoenixTracingEndToEndIT.java,testClientServerIndexingTracing,203-203,[        updated.await(200, TimeUnit.SECONDS);// should be way more than GC pauses],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/phoenix/trace/TraceMetricSource.java,,130-130,[    marker.add(new MetricsTag(new MetricsInfoImpl("stat", "num spans"), Integer],,,120-120,[      spans.add(builder);],,,135-135,[      for (Metric span : spans) {],,,147-147,[      spans = new ArrayList<Metric>();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/trace/TraceReader.java,getDynamicCountColumns,219-219,[        ResultSet results = conn.createStatement().executeQuery(request);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/trace/TraceReader.java,readAll,94-94,[        ResultSet results = conn.prepareStatement(query).executeQuery();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/trace/TraceReader.java,hashCode,318-318,[            return new Long(id).hashCode();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/phoenix/trace/TraceReader.java,hashCode,251-251,[            return new Long(traceid).hashCode();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/PhoenixTableMetricsWriterIT.java,writeMetrics,104-104,[        assertEquals("Didn't get expected orphaned spans!" + trace.orphans, 1, trace.orphans.size());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/TraceReader.java,toString,282-282,[            if (orphans.size() > 0) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/trace/TracingUtils.java,addAnnotation,37-37,[        span.addKVAnnotation(message.getBytes(), Bytes.toBytes(Integer.toString(value)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/trace/TracingUtils.java,readAnnotation,41-41,[        return new Pair<String, String>(new String(key), Bytes.toString(value));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/trace/util/NullSpan.java,,34-34,[  public static Span INSTANCE = new NullSpan();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/trace/util/Tracing.java,after,253-253,[            scope.close();],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/phoenix/tracingwebapp/http/ConnectionFactory.java,getConnection,37-39,[    if (con == null || con.isClosed()) {,       Class.forName("org.apache.phoenix.jdbc.PhoenixDriver");,       con = DriverManager.getConnection("jdbc:phoenix:"+PHOENIX_HOST+":"+PHOENIX_PORT);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/tracingwebapp/http/ConnectionFactory.java,,33-33,[  protected static String PHOENIX_HOST = "localhost";],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/tracingwebapp/http/ConnectionFactory.java,,34-34,[  protected static int PHOENIX_PORT = 2181;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/tracingwebapp/http/EntityFactory.java,getEntityFromResultSet,94-94,[      String columnName = metaData.getColumnName(i).toLowerCase();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/phoenix/tracingwebapp/http/EntityFactory.java,findMultiple,60-60,[      ps = this.connection.prepareStatement(this.queryString);],,findMultiple,61-61,[      for (int i = 0; i < params.length; ++i) {],,findMultiple,65-65,[      rs = ps.executeQuery();],,findMultiple,66-66,[      return getEntitiesFromResultSet(rs);],,findMultiple,70-70,[      if (rs != null) {],,findMultiple,71-71,[        rs.close();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/tracingwebapp/http/EntityFactory.java,findMultiple,60-60,[      ps = this.connection.prepareStatement(this.queryString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/tracingwebapp/http/EntityFactory.java,findMultiple,60-60,[      ps = this.connection.prepareStatement(this.queryString);],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/phoenix/tracingwebapp/http/TraceServlet.java,getJson,118-118,[    String output = json.toString().replace("_id\":", "_id\":\"")],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/tracingwebapp/http/TraceServlet.java,getResults,138-138,[    } catch (Exception e) {],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/phoenix/tracingwebapp/http/TraceServlet.java,getResults,132-132,[      con = ConnectionFactory.getConnection();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/tracingwebapp/http/TraceServlet.java,,45-45,[  protected String LOGIC_AND = "AND";],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/tx/TransactionIT.java,testCheckpointAndRollback,734-734,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/tx/TransactionIT.java,testExternalTxContext,656-656,[        Connection connWithConflict = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TransactionIT.java,testCheckpointAndRollback,739-739,[            stmt.execute("CREATE TABLE " + fullTableName + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR) TRANSACTIONAL=true");],,testCheckpointAndRollback,740-740,[            stmt.executeUpdate("upsert into " + fullTableName + " values('x', 'a', 'a')");],,testCheckpointAndRollback,743-743,[            stmt.executeUpdate("upsert into " + fullTableName + "(k,v1) SELECT k,v1||'a' FROM " + fullTableName);],,testCheckpointAndRollback,744-744,[            ResultSet rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName);],,testCheckpointAndRollback,751-751,[            stmt.executeUpdate("upsert into " + fullTableName + "(k,v1) SELECT k,v1||'a' FROM " + fullTableName);],,testCheckpointAndRollback,753-753,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName);],,testCheckpointAndRollback,763-763,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TransactionIT.java,testCreateTableToBeTransactional,509-509,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TransactionIT.java,testExternalTxContext,622-622,[        stmt.execute("CREATE TABLE " + fullTableName + "(K VARCHAR PRIMARY KEY, V1 VARCHAR, V2 VARCHAR) TRANSACTIONAL=true");],,testExternalTxContext,624-624,[        stmt.executeUpdate("upsert into " + fullTableName + " values('x', 'a', 'a')");],,testExternalTxContext,628-628,[            rs = newConn.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,646-646,[        conn.createStatement().executeUpdate("upsert into " + fullTableName + " values('y', 'c', 'c')");],,testExternalTxContext,650-650,[            rs = newConn.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,657-657,[        connWithConflict.createStatement().execute("upsert into " + fullTableName + " values('z', 'd', 'd')");],,testExternalTxContext,660-660,[        rs = conn.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,679-679,[            rs = newConn.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,696-696,[        conn.createStatement().executeUpdate("upsert into " + fullTableName + " values('k', 'f', 'f')");],,testExternalTxContext,699-699,[        rs = conn.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,703-703,[        connWithConflict.createStatement().execute("upsert into " + fullTableName + " values('k', 'g', 'g')");],,testExternalTxContext,704-704,[        rs = connWithConflict.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,711-711,[        rs = conn.createStatement().executeQuery("select count(*) from " + fullTableName);],,testExternalTxContext,720-720,[            rs = newConn.createStatement().executeQuery("select count(*) from " + fullTableName);],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/phoenix/tx/TxCheckpointIT.java,upsertRows,276-276,[		wp = state.getWritePointer();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/tx/TxCheckpointIT.java,testRollbackOfUncommittedDelete,114-114,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/tx/TxCheckpointIT.java,testUpsertSelectDoesntSeeUpsertedData,96-96,[        Connection conn = DriverManager.getConnection(getUrl(), props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,testUpsertSelectDoesntSeeUpsertedData,102-102,[        conn.createStatement().execute("UPSERT INTO " + fullTableName + " VALUES (NEXT VALUE FOR " + seqName + ",1)");],,testUpsertSelectDoesntSeeUpsertedData,105-105,[            int upsertCount = stmt.executeUpdate("UPSERT INTO " + fullTableName + " SELECT NEXT VALUE FOR " + seqName + ", val FROM " + fullTableName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,testCheckpointForDeleteAndUpsert,291-291,[			stmt.execute("CREATE TABLE " + fullTableName + "1(ID1 BIGINT NOT NULL PRIMARY KEY, FK1A INTEGER, FK1B INTEGER)"],,testCheckpointForDeleteAndUpsert,293-293,[			stmt.execute("CREATE TABLE " + fullTableName + "2(ID2 BIGINT NOT NULL PRIMARY KEY, FK2 INTEGER)"],,testCheckpointForDeleteAndUpsert,295-295,[			stmt.execute("CREATE " + (localIndex ? "LOCAL " : "")],,testCheckpointForDeleteAndUpsert,298-298,[			stmt.executeUpdate("upsert into " + fullTableName + "1 values (1, 3, 3)");],,testCheckpointForDeleteAndUpsert,299-299,[			stmt.executeUpdate("upsert into " + fullTableName + "1 values (2, 2, 2)");],,testCheckpointForDeleteAndUpsert,300-300,[			stmt.executeUpdate("upsert into " + fullTableName + "1 values (3, 1, 1)");],,testCheckpointForDeleteAndUpsert,301-301,[			stmt.executeUpdate("upsert into " + fullTableName + "2 values (1, 1)");],,testCheckpointForDeleteAndUpsert,307-307,[	        conn.createStatement().execute("delete from " + fullTableName + "1 where id1=fk1b AND fk1b=id1");],,testCheckpointForDeleteAndUpsert,311-311,[	        rs = conn.createStatement().executeQuery("select /*+ NO_INDEX */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,318-318,[	        rs = conn.createStatement().executeQuery("select /*+ INDEX(DEMO IDX) */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,325-325,[	        conn.createStatement().execute("delete from " + fullTableName + "1 where id1 in (select fk1a from " + fullTableName + "1 join " + fullTableName + "2 on (fk2=id1))");],,testCheckpointForDeleteAndUpsert,329-329,[	        rs = conn.createStatement().executeQuery("select /*+ NO_INDEX */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,334-334,[            rs = conn.createStatement().executeQuery("select /*+ INDEX(DEMO IDX) */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,339-339,[            stmt.executeUpdate("upsert into " + fullTableName + "1 SELECT id1 + 3, id1, id1 FROM " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,340-340,[            stmt.executeUpdate("upsert into " + fullTableName + "2 values (2, 4)");],,testCheckpointForDeleteAndUpsert,342-342,[            conn.createStatement().execute("delete from " + fullTableName + "1 where id1 in (select fk1a from " + fullTableName + "1 join " + fullTableName + "2 on (fk2=id1))");],,testCheckpointForDeleteAndUpsert,346-346,[            rs = conn.createStatement().executeQuery("select /*+ NO_INDEX */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,351-351,[            rs = conn.createStatement().executeQuery("select /*+ INDEX(DEMO IDX) */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,358-358,[	        rs = conn.createStatement().executeQuery("select /*+ NO_INDEX */ id1 from " + fullTableName + "1");],,testCheckpointForDeleteAndUpsert,367-367,[	        rs = conn.createStatement().executeQuery("select /*+ INDEX(DEMO IDX) */ id1 from " + fullTableName + "1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,testCheckpointForUpsertSelect,204-204,[			stmt.execute("CREATE TABLE " + fullTableName + "(ID BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"],,testCheckpointForUpsertSelect,206-206,[			stmt.execute("CREATE " + (localIndex ? "LOCAL " : "")],,testCheckpointForUpsertSelect,209-209,[            stmt.executeUpdate("upsert into " + fullTableName + " values(1, 'a2', 'b1')");],,testCheckpointForUpsertSelect,210-210,[            stmt.executeUpdate("upsert into " + fullTableName + " values(2, 'a2', 'b2')");],,testCheckpointForUpsertSelect,211-211,[            stmt.executeUpdate("upsert into " + fullTableName + " values(3, 'a3', 'b3')");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,testRollbackOfUncommittedDelete,118-118,[            stmt.execute("CREATE TABLE " + fullTableName + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"+(!mutable? " IMMUTABLE_ROWS=true" : ""));],,testRollbackOfUncommittedDelete,119-119,[            stmt.execute("CREATE "+(localIndex? "LOCAL " : "")+"INDEX " + indexName + " ON " + fullTableName + " (v1) INCLUDE(v2)");],,testRollbackOfUncommittedDelete,121-121,[            stmt.executeUpdate("upsert into " + fullTableName + " values('x1', 'y1', 'a1')");],,testRollbackOfUncommittedDelete,122-122,[            stmt.executeUpdate("upsert into " + fullTableName + " values('x2', 'y2', 'a2')");],,testRollbackOfUncommittedDelete,125-125,[            ResultSet rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName + " ORDER BY k");],,testRollbackOfUncommittedDelete,137-137,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName + " ORDER BY v1");],,testRollbackOfUncommittedDelete,150-150,[            stmt.executeUpdate("DELETE FROM " + fullTableName + " WHERE k='x1' AND v1='y1' AND v2='a1'");],,testRollbackOfUncommittedDelete,152-152,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName + " ORDER BY k");],,testRollbackOfUncommittedDelete,160-160,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName + " ORDER BY v1");],,testRollbackOfUncommittedDelete,170-170,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName + " ORDER BY k");],,testRollbackOfUncommittedDelete,182-182,[            rs = stmt.executeQuery("select k, v1, v2 from " + fullTableName + " ORDER BY v1");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,testUpsertSelectDoesntSeeUpsertedData,98-98,[        conn.createStatement().execute("CREATE SEQUENCE "+seqName);],,testUpsertSelectDoesntSeeUpsertedData,99-99,[        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(pk INTEGER PRIMARY KEY, val INTEGER)"+(!mutable? " IMMUTABLE_ROWS=true" : ""));],,testUpsertSelectDoesntSeeUpsertedData,100-100,[        conn.createStatement().execute("CREATE "+(localIndex? "LOCAL " : "")+"INDEX " + indexName + " ON " + fullTableName + "(val)");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,upsertRows,245-245,[		conn.createStatement().execute(],,upsertRows,251-251,[		rs = conn.createStatement().executeQuery("select max(id) from " + fullTableName + "");],,upsertRows,257-257,[		conn.createStatement().execute(],,upsertRows,264-264,[		rs = conn.createStatement().executeQuery("select max(id) from " + fullTableName + "");],,upsertRows,270-270,[		conn.createStatement().execute(],,upsertRows,277-277,[		rs = conn.createStatement().executeQuery("select max(id) from " + fullTableName + "");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/tx/TxCheckpointIT.java,verifyRows,227-227,[		rs = conn.createStatement().executeQuery("select /*+ NO_INDEX */ max(id) from " + fullTableName + "");],,verifyRows,233-233,[		rs = conn.createStatement().executeQuery("select /*+ INDEX(DEMO IDX) */ max(id) from " + fullTableName + "");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/AbstractUpsertExecutorTest.java,testExecute_NullField,128-128,[        verify(preparedStatement).setNull(3, columnInfoList.get(2).getSqlType());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/json/JsonUpsertExecutorTest.java,createRecord,41-41,[        int min = Math.min(columnInfoList.size(), columnValues.length);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/AbstractUpsertExecutorTest.java,tearDown,71-71,[        conn.close();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/Base62Encoder.java,,25-25,[    public static final char[] digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/BitSet.java,<init>,110-110,[        this.bits = bits;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,nextKey,396-396,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/ByteUtil.java,previousKey,437-437,[            return null;],,
CORRECTNESS,RC_REF_COMPARISON,org/apache/phoenix/util/ColumnInfo.java,equals,113-113,[        if (precision != that.precision) return false;],,
CORRECTNESS,RC_REF_COMPARISON,org/apache/phoenix/util/ColumnInfo.java,equals,114-114,[        if (scale != that.scale) return false;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ColumnInfoTest.java,testFromString_InvalidDataType,49-49,[            SQLException sqlE = (SQLException)e.getCause();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/phoenix/util/DateUtil.java,<clinit>,104-105,[                defaultPattern[type.ordinal()] = DateUtil.DEFAULT_TIMESTAMP_FORMAT;,                 break;],,<clinit>,107-108,[                defaultPattern[type.ordinal()] = DateUtil.DEFAULT_TIME_FORMAT;,                 break;],,<clinit>,110-110,[                defaultPattern[type.ordinal()] = DateUtil.DEFAULT_DATE_FORMAT;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/phoenix/util/DateUtil.java,<clinit>,102-110,[            switch (type.getResultSetSqlType()) {,             case Types.TIMESTAMP:,                 defaultPattern[type.ordinal()] = DateUtil.DEFAULT_TIMESTAMP_FORMAT;,                 break;,             case Types.TIME:,                 defaultPattern[type.ordinal()] = DateUtil.DEFAULT_TIME_FORMAT;,                 break;,             case Types.DATE:,                 defaultPattern[type.ordinal()] = DateUtil.DEFAULT_DATE_FORMAT;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/DateUtil.java,,223-227,[            parser = new SimpleDateFormat(pattern) {,                 @Override,                 public java.util.Date parseObject(String source) throws ParseException {,                     java.util.Date date = super.parse(source);,                     return new java.sql.Date(date.getTime());],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/phoenix/util/FirstLastNthValueDataContainer.java,,58-58,[        this.offset = offset;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/FirstLastNthValueDataContainer.java,getPayload,135-135,[        Entry<byte[], LinkedList<byte[]>> firstEntry = data.firstEntry();],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/GeneratePerformanceData.java,main,54-54,[                        "\n").getBytes());],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/phoenix/util/GeneratePerformanceData.java,main,60-60,[            fostream.close();],,main,42-42,[        FileOutputStream fostream = null;],,main,44-44,[            fostream = new FileOutputStream(dataFile);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/IndexUtil.java,,95-95,[    public static final byte[] INDEX_COLUMN_NAME_SEP_BYTES = Bytes.toBytes(INDEX_COLUMN_NAME_SEP);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/IndexUtil.java,deserializeDataTableColumnsToJoin,382-382,[        if (columnsBytes == null) return null;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/JDBCUtil.java,findProperty,58-58,[        String urlPropName = PhoenixRuntime.JDBC_PROTOCOL_TERMINATOR + propName.toUpperCase() + "=";],,findProperty,59-59,[        String upperCaseURL = url.toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/JDBCUtil.java,removeProperty,77-77,[        String urlPropName = PhoenixRuntime.JDBC_PROTOCOL_TERMINATOR + propName.toUpperCase() + "=";],,removeProperty,78-78,[        String upperCaseURL = url.toUpperCase();],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/phoenix/util/KeyValueUtil.java,,142-162,[	private static class SearchComparator implements Comparator<Cell> {, 	  private final KeyValueBuilder kvBuilder;,     private final byte[] family;,     private final byte[] qualifier;, ,     public SearchComparator(KeyValueBuilder kvBuilder, byte[] f, byte[] q) {,       this.kvBuilder = kvBuilder;,       family = f;,       qualifier = q;,     }, ,     @Override,     public int compare(final Cell l, final Cell ignored) {, 			assert ignored == null;, 			// family, 			int val = kvBuilder.compareFamily(l, family, 0, family.length);, 			if (val != 0) {, 				return val;, 			}, 			// qualifier, 			return kvBuilder.compareQualifier(l, qualifier, 0, qualifier.length);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,437-437,[    public static final byte[] IS_LOCAL_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_LOCAL_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,434-434,[    public static final byte[] IS_VIEW_INDEX_TABLE_PROP_BYTES = Bytes.toBytes(IS_VIEW_INDEX_TABLE_PROP_NAME);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,76-76,[    public static final byte[] LOCAL_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(LOCAL_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/MetaDataUtil.java,,74-74,[    public static final byte[] VIEW_INDEX_TABLE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_TABLE_PREFIX);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,79-79,[    public static final byte[] VIEW_INDEX_SEQUENCE_PREFIX_BYTES = Bytes.toBytes(VIEW_INDEX_SEQUENCE_PREFIX);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/MetaDataUtil.java,,82-82,[    public static final byte[] PARENT_TABLE_KEY_BYTES = Bytes.toBytes("PARENT_TABLE");],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/phoenix/util/MetaDataUtil.java,getParentTableName,158-158,[            return null;],,getParentTableName,168-168,[            return null;],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/MetaDataUtil.java,deleteViewIndexSequences,378-378,[        connection.createStatement().executeUpdate("DELETE FROM " + PhoenixDatabaseMetaData.SEQUENCE_FULLNAME_ESCAPED + ],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/PhoenixContextExecutorTest.java,,35-41,[            PhoenixContextExecutor.callWithoutPropagation(new Callable<Object>() {,                 @Override,                 public Object call() {,                     assertEquals(,                             PhoenixContextExecutor.class.getClassLoader(),,                             Thread.currentThread().getContextClassLoader());,                     return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/PhoenixRuntime.java,main,235-235,[                        PhoenixRuntime.executeStatements(conn,],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/PhoenixRuntime.java,,160-160,[    public final static String[] CONNECTION_PROPERTIES = {],,
BAD_PRACTICE,DM_EXIT,org/apache/phoenix/util/PhoenixRuntime.java,usageError,652-652,[            System.exit(-1);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/PhoenixRuntimeTest.java,testCaseSensitiveTableNameWithSchema,248-248,[        String fullNameNormalized = schemaName.toUpperCase() + "." + caseSensitiveTableName;],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/PhoenixRuntimeTest.java,testTableNameWithSchema,232-232,[        String fullNameNormalized = fullName.toUpperCase(); ],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/PhoenixRuntimeTest.java,testTableNameWithoutSchema,222-222,[        String tableNameNormalized = tableName.toUpperCase(); ],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/util/PhoenixRuntimeTest.java,getTableTester,282-282,[                conn.createStatement().execute("DROP TABLE IF EXISTS " + sqlStatementName);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/phoenix/util/PhoenixRuntimeTest.java,getTableTester,281-281,[            if (null != conn) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/util/PhoenixRuntimeTest.java,testGetPkColsDataTypes,161-161,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/PhoenixRuntimeTest.java,getTableTester,277-277,[            conn.createStatement().execute("CREATE TABLE " + sqlStatementName + " (k VARCHAR PRIMARY KEY)");],,getTableTester,282-282,[                conn.createStatement().execute("DROP TABLE IF EXISTS " + sqlStatementName);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/PhoenixRuntimeTest.java,testGetPkColsDataTypes,135-135,[                conn.createStatement().execute(sb.toString());],,testGetPkColsDataTypes,159-159,[                conn.createStatement().execute(sb.toString());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/PhoenixRuntimeTest.java,testGetPkColsDataTypes,138-138,[                PreparedStatement stmt = conn.prepareStatement("SELECT * FROM " + tableName + " WHERE " + columnName  + " = ?");],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/phoenix/util/PropertiesUtilTest.java,verifyValidCopy,71-71,[        copy.containsKey(PhoenixRuntime.TENANT_ID_ATTRIB); //This checks the map and NOT the defaults in java.util.Properties],,
STYLE,NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE,org/apache/phoenix/util/QueryUtil.java,apply,162-162,[                                        return getEscapedFullColumnName(columnName);],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ScanUtil.java,newScan,129-129,[            TreeMap<byte [], NavigableSet<byte []>> existingMap = (TreeMap<byte[], NavigableSet<byte[]>>)scan.getFamilyMap();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/compile/ScanRanges.java,,58-58,[    public static final ScanRanges EVERYTHING = new ScanRanges(null,ScanUtil.SINGLE_COLUMN_SLOT_SPAN,EVERYTHING_RANGES, KeyRange.EVERYTHING_RANGE, KeyRange.EVERYTHING_RANGE, false, false, null, null);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/ScanUtilTest.java,<init>,109-109,[        this.expectedKey = expectedKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,60-79,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PChar.INSTANCE;,                     },                     @Override,                     public Integer getMaxLength() {,                         return width;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/phoenix/util/ScanUtilTest.java,,83-102,[                builder.addField(new PDatum() {,                     @Override,                     public boolean isNullable() {,                         return false;,                     },                     @Override,                     public PDataType getDataType() {,                         return PVarchar.INSTANCE;,                     },                     @Override,                     public Integer getMaxLength() {,                         return null;,                     },                     @Override,                     public Integer getScale() {,                         return null;,                     },                     @Override,                     public SortOrder getSortOrder() {,                         return SortOrder.getDefault();],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/SchemaUtil.java,normalizeIdentifier,183-183,[        return name.toUpperCase();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/SchemaUtil.java,addMetaDataColumn,542-542,[                stmt.executeUpdate("ALTER TABLE SYSTEM.\"TABLE\" ADD IF NOT EXISTS " + columnDef);],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/phoenix/util/ServerUtil.java,getTableFromSingletonPool,154-154,[                throw (IOException)t.getCause();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,45-45,[    public final static String[] LIKE_ESCAPE_SEQS = new String[]{"\\"+SINGLE_CHAR_LIKE, "\\"+MULTI_CHAR_LIKE};],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/phoenix/util/StringUtil.java,,46-46,[    public final static String[] LIKE_UNESCAPED_SEQS = new String[]{""+SINGLE_CHAR_LIKE, ""+MULTI_CHAR_LIKE};],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/StringUtilTest.java,testCalculateUTF8Offset,57-57,[        byte[] bytes = (padding + data + trailing).getBytes();],,testCalculateUTF8Offset,58-58,[        int ret, offset = padding.getBytes().length, length = data.getBytes().length;],,testCalculateUTF8Offset,63-63,[            assertEquals(tmp.getBytes().length, ret);],,testCalculateUTF8Offset,78-78,[            assertEquals("i=" + i, tmp.getBytes().length, ret);],,
I18N,DM_DEFAULT_ENCODING,org/apache/phoenix/util/StringUtilTest.java,testLpad,28-28,[        byte[] input = inputString.getBytes();],,testLpad,29-29,[        byte[] fill = fillString.getBytes();],,testLpad,31-31,[        assertArrayEquals("Incorrect output of lpad", expectedOutput.getBytes(), output);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/phoenix/util/StringUtilTest.java,testCalculateUTF8Offset,64-64,[            tmp = tmp + data.charAt(i);],,
PERFORMANCE,DM_STRING_CTOR,org/apache/phoenix/util/TenantIdByteConversionTest.java,data,204-204,[        String byteString = new String( Base64.encodeBytes(bytes) );],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/phoenix/util/TenantIdByteConversionTest.java,<init>,58-58,[        this.expectedTenantIdBytes = expectedTenantIdBytes;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/util/TestUtil.java,setRowKeyColumns,603-603,[        Date date = new Date(DateUtil.parseDate("2015-01-01 00:00:00").getTime() + (i - 1) * TestUtil.NUM_MILLIS_IN_DAY);],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/phoenix/util/TestUtil.java,validateRowKeyColumns,614-614,[		Date date = new Date(DateUtil.parseDate("2015-01-01 00:00:00").getTime() + (i - 1) * TestUtil.NUM_MILLIS_IN_DAY);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,156-156,[    public final static List<String> ENTITYHISTIDS = Lists.newArrayList(ENTITYHISTID1, ENTITYHISTID2, ENTITYHISTID3, ENTITYHISTID4, ENTITYHISTID5, ENTITYHISTID6, ENTITYHISTID7, ENTITYHISTID8, ENTITYHISTID9);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/phoenix/util/TestUtil.java,,144-144,[    public final static List<String> PARENTIDS = Lists.newArrayList(PARENTID1, PARENTID2, PARENTID3, PARENTID4, PARENTID5, PARENTID6, PARENTID7, PARENTID8, PARENTID9);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,114-114,[    public final static byte[] A = Bytes.toBytes(A_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,116-116,[    public final static byte[] B = Bytes.toBytes(B_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,118-118,[    public final static byte[] C = Bytes.toBytes(C_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,109-109,[    public static final byte[] CF = Bytes.toBytes(CF_NAME);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,120-120,[    public final static byte[] D = Bytes.toBytes(D_VALUE);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/phoenix/util/TestUtil.java,,122-122,[    public final static byte[] E = Bytes.toBytes(E_VALUE);],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/phoenix/util/TestUtil.java,analyzeTable,591-591,[        Connection conn = DriverManager.getConnection(url, props);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,analyzeTable,564-564,[        conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,analyzeTableIndex,571-571,[        conn.createStatement().execute(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/TestUtil.java,createTable,468-468,[        conn.createStatement().execute(ddl);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,getGuidePostsList,537-537,[        PhoenixPreparedStatement pstmt = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,getSplits,507-507,[        PhoenixPreparedStatement pstmt = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/TestUtil.java,upsertRow,443-443,[        PreparedStatement stmt = conn.prepareStatement(dml);],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,getBuffer,36-36,[        return buf;],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/phoenix/util/TrustedByteArrayOutputStream.java,toByteArray,41-41,[            return buf;],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/util/UpgradeUtil.java,,109-109,[    public static String SELECT_BASE_COLUMN_COUNT_FROM_HEADER_ROW = "SELECT "],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/phoenix/util/UpgradeUtil.java,,104-104,[    public static String UPSERT_BASE_COLUMN_COUNT_IN_HEADER_ROW = "UPSERT "],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/util/UpgradeUtil.java,upgradeDescVarLengthRowKeys,1064-1064,[        } catch (Exception e) {],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/UpgradeUtil.java,addPhysicalTables,872-872,[        rs = conn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/UpgradeUtil.java,upgradeDescVarLengthRowKeys,1027-1027,[                rs = globalConn.createStatement().executeQuery(query);],,upgradeDescVarLengthRowKeys,1039-1039,[                globalConn.createStatement().execute("UPSERT INTO " + PhoenixDatabaseMetaData.SYSTEM_CATALOG_NAME + ],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/UpgradeUtil.java,upgradeSharedIndex,1178-1178,[        ResultSet rs = globalConn.createStatement().executeQuery(query);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/UpgradeUtil.java,getPhysicalTablesWithDescRowKey,948-948,[        ResultSet rs = conn.createStatement().executeQuery(query);],,getPhysicalTablesWithDescRowKey,958-958,[             rs = conn.createStatement().executeQuery(indexLinkQuery);],,getPhysicalTablesWithDescRowKey,970-970,[                 rs = conn.createStatement().executeQuery(physicalLinkQuery);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/UpgradeUtil.java,getPhysicalTablesWithDescRowKey,939-939,[        return getPhysicalTablesWithDescRowKey(query, conn);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/phoenix/util/UpgradeUtil.java,upgradeDescVarLengthRowKeys,1012-1012,[                rs = upgradeConn.createStatement().executeQuery("SELECT /*+ NO_INDEX */ count(*) FROM " + escapedTableName);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/phoenix/util/UpsertExecutor.java,createStatement,81-81,[            preparedStatement = conn.prepareStatement(upsertSql);],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/csv/CsvUpsertExecutor.java,apply,159-159,[                switch (input.toLowerCase()) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/CsvUpsertExecutorTest.java,testExecute_InvalidBoolean,75-75,[        upsertExecutor.execute(ImmutableList.of(csvRecordWithInvalidType));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,tearDown,48-48,[        conn.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_EmptyString,53-53,[        Array emptyArray = converter.toArray("");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_MultipleElements,68-68,[        Array multiElementArray = converter.toArray("one:two");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/phoenix/util/csv/StringToArrayConverterTest.java,testToArray_SingleElement,60-60,[        Array singleElementArray = converter.toArray("value");],,
STYLE,REC_CATCH_EXCEPTION,org/apache/phoenix/util/json/JsonUpsertExecutor.java,execute,100-100,[        } catch (Exception e) {],,
I18N,DM_CONVERT_CASE,org/apache/phoenix/util/json/JsonUpsertExecutorTest.java,createRecord,43-43,[            ret.put(columnInfoList.get(i).getColumnName().replace("\"", "").toLowerCase(), columnValues[i]);],,

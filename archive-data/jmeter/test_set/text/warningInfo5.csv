MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/commons/cli/avalon/CLArgsParser.java,getUnparsedArgs,107-107,[        return m_unparsedArgs;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/commons/cli/avalon/CLArgsParser.java,<init>,227-227,[        m_args = args;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/commons/cli/avalon/CLArgsParser.java,<init>,224-224,[        m_optionDescriptors = optionDescriptors;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/commons/jexl/bsf/JexlEngine.java,call,145-145,[        } catch (Exception e) {],,
BAD_PRACTICE,DM_EXIT,org/apache/jmeter/JMeter.java,start,406-406,[            System.exit(1); // TODO - could this be return?],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/JMeter.java,getIconMappings,1046-1046,[            return DEFAULT_ICONS;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/JMeter.java,runNonGui,816-816,[        } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/JMeter.java,,311-318,[            Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {                ,                 @Override,                 public void uncaughtException(Thread t, Throwable e) {,                     if (!(e instanceof ThreadDeath)) {,                         log.error("Uncaught exception: ", e);,                         System.err.println("Uncaught Exception " + e + ". See log file for details.");,                     },                 }],,
STYLE,UC_USELESS_CONDITION,org/apache/jmeter/JMeter.java,checkForRemainingThreads,1007-1007,[            } else if(REMAIN_THREAD_PAUSE<=0) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/JMeter.java,,990-1002,[                Thread daemon = new Thread(){,                     @Override,                     public void run(){,                         try {,                             TimeUnit.MILLISECONDS.sleep(REMAIN_THREAD_PAUSE); // Allow enough time for JVM to exit,                         } catch (InterruptedException ignored) {,                         },                         // This is a daemon thread, which should only reach here if there are other,                         // non-daemon threads still active,                         System.out.println("The JVM should have exitted but did not.");,                         System.out.println("The following non-daemon threads are still running (DestroyJavaVM is OK):");,                         JOrphanUtils.displayThreads(false);,                     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/BSFAssertion.java,,29-55,[public class BSFAssertion extends BSFTestElement implements Cloneable, Assertion, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 234L;, ,     @Override,     public AssertionResult getResult(SampleResult response) {,         AssertionResult result = new AssertionResult(getName());,         BSFManager mgr =null;,         try {,             mgr = getManager();,             mgr.declareBean("SampleResult", response, SampleResult.class);,             mgr.declareBean("AssertionResult", result, AssertionResult.class);,             processFileOrScript(mgr);,             result.setError(false);,         } catch (BSFException e) {,             log.warn("Problem in BSF script "+e);,             result.setFailure(true);,             result.setError(true);,             result.setFailureMessage(e.toString());,         } finally {,             if(mgr != null) {,                 mgr.terminate();,             },         },         return result;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/assertions/BeanShellAssertion.java,getFilename,59-59,[        return getPropertyAsString(FILENAME);],,getFileName,178-178,[        return fileName;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/CompareAssertion.java,,42-210,[    private transient final StringSubstitution emptySub = new StringSubstitution(""); //$NON-NLS-1$, ,     private boolean compareContent = true;, ,     private long compareTime = -1;, ,     private Collection<SubstitutionElement> stringsToSkip;, ,     public CompareAssertion() {,         super();,     }, ,     @Override,     public AssertionResult getResult(SampleResult response) {,         responses.add(response);,         if (responses.size() > 1) {,             CompareAssertionResult result = new CompareAssertionResult(getName());,             compareContent(result);,             compareTime(result);,             return result;,         } else {,             return new AssertionResult(getName());,         },     }, ,     private void compareTime(CompareAssertionResult result) {,         if (compareTime >= 0) {,             long prevTime = -1;,             SampleResult prevResult = null;,             boolean success = true;,             StringBuilder buf = new StringBuilder();,             for(SampleResult sResult : responses) {,                 long currentTime = sResult.getTime();,                 if (prevTime != -1) {,                     success = Math.abs(prevTime - currentTime) <= compareTime;,                     prevResult = sResult;,                 },                 if (!success) {,                     result.setFailure(true);,                     buf.setLength(0);,                     appendResultDetails(buf, prevResult);,                     buf.append(JMeterUtils.getResString("comparison_response_time")).append(prevTime); //$NON-NLS-1$,                     result.addToBaseResult(buf.toString());,                     buf.setLength(0);,                     appendResultDetails(buf, sResult);,                     buf.append(JMeterUtils.getResString("comparison_response_time")).append(currentTime); //$NON-NLS-1$,                     result.addToSecondaryResult(buf.toString());,                    result.setFailureMessage(,                            JMeterUtils.getResString("comparison_differ_time")+ //$NON-NLS-1$,                            compareTime+,                            JMeterUtils.getResString("comparison_unit")); //$NON-NLS-1$,                     break;,                 },                 prevResult = sResult;,                 prevTime = currentTime;,             },         },     }, ,     private void compareContent(CompareAssertionResult result) {,         if (compareContent) {,             String prevContent = null;,             SampleResult prevResult = null;,             boolean success = true;,             StringBuilder buf = new StringBuilder();,             for (SampleResult sResult : responses) {,                 String currentContent = sResult.getResponseDataAsString();,                 currentContent = filterString(currentContent);,                 if (prevContent != null) {,                     success = prevContent.equals(currentContent);,                 },                 if (!success) {,                     result.setFailure(true);,                     buf.setLength(0);,                     appendResultDetails(buf, prevResult);,                     buf.append(prevContent);,                     result.addToBaseResult(buf.toString());,                     buf.setLength(0);                    ,                     appendResultDetails(buf, sResult);,                     buf.append(currentContent);,                     result.addToSecondaryResult(buf.toString());,                     result.setFailureMessage(JMeterUtils.getResString("comparison_differ_content")); //$NON-NLS-1$,                     break;,                 },                 prevResult = sResult;,                 prevContent = currentContent;,             },         },     }, ,     private void appendResultDetails(StringBuilder buf, SampleResult result) {,         final String samplerData = result.getSamplerData();,         if (samplerData != null){,             buf.append(samplerData.trim());,         },         buf.append("\n"); //$NON-NLS-1$,         final String requestHeaders = result.getRequestHeaders();,         if (requestHeaders != null){,             buf.append(requestHeaders);,         },         buf.append("\n\n"); //$NON-NLS-1$,     }, ,     private String filterString(String content) {,         if (stringsToSkip == null || stringsToSkip.size() == 0) {,             return content;,         } else {,             for (SubstitutionElement regex : stringsToSkip) {,                 emptySub.setSubstitution(regex.getSubstitute());,                 content = Util.substitute(JMeterUtils.getMatcher(), JMeterUtils.getPatternCache().getPattern(regex.getRegex()),,                         emptySub, content, Util.SUBSTITUTE_ALL);,             },         },         return content;,     }, ,     @Override,     public void iterationStart(LoopIterationEvent iterEvent) {,         responses = new LinkedList<>();,     }, ,     public void iterationEnd(LoopIterationEvent iterEvent) {,         responses = null;,     }, ,     /**,      * @return Returns the compareContent.,      */,     public boolean isCompareContent() {,         return compareContent;,     }, ,     /**,      * @param compareContent,      *            The compareContent to set.,      */,     public void setCompareContent(boolean compareContent) {,         this.compareContent = compareContent;,     }, ,     /**,      * @return Returns the compareTime.,      */,     public long getCompareTime() {,         return compareTime;,     }, ,     /**,      * @param compareTime,      *            The compareTime to set.,      */,     public void setCompareTime(long compareTime) {,         this.compareTime = compareTime;,     }, ,     /**,      * @return Returns the stringsToSkip.,      */,     public Collection<SubstitutionElement> getStringsToSkip() {,         return stringsToSkip;,     }, ,     /**,      * @param stringsToSkip,      *            The stringsToSkip to set.,      */,     public void setStringsToSkip(Collection<SubstitutionElement> stringsToSkip) {,         this.stringsToSkip = stringsToSkip;,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/DurationAssertion.java,,33-70,[public class DurationAssertion extends AbstractScopedAssertion implements Serializable, Assertion {,     private static final long serialVersionUID = 240L;, ,     /** Key for storing assertion-information in the jmx-file. */,     public static final String DURATION_KEY = "DurationAssertion.duration"; // $NON-NLS-1$, ,     /**,      * Returns the result of the Assertion. Here it checks whether the Sample,      * took to long to be considered successful. If so an AssertionResult,      * containing a FailureMessage will be returned. Otherwise the returned,      * AssertionResult will reflect the success of the Sample.,      */,     @Override,     public AssertionResult getResult(SampleResult response) {,         AssertionResult result = new AssertionResult(getName());,         result.setFailure(false);,         long duration=getAllowedDuration();,         if (duration > 0) {,             long responseTime=response.getTime();,         // has the Sample lasted too long?,             if ( responseTime > duration) {,                 result.setFailure(true);,                 Object[] arguments = { Long.valueOf(responseTime), Long.valueOf(duration) };,                 String message = MessageFormat.format(,                         JMeterUtils.getResString("duration_assertion_failure") // $NON-NLS-1$,                         , arguments);,                 result.setFailureMessage(message);,             },         },         return result;,     }, ,     /**,      * Returns the duration to be asserted. A duration of 0 indicates this,      * assertion is to be ignored.,      */,     private long getAllowedDuration() {,         return getPropertyAsLong(DURATION_KEY);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/assertions/HTMLAssertion.java,getResult,148-148,[                log.debug("Output: " + os.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/assertions/HTMLAssertion.java,writeOutput,200-200,[                lOutputWriter = new FileWriter(lFilename, false);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/assertions/HTMLAssertion.java,setFilename,383-384,[        setProperty(FILENAME_KEY, inName);,     }],,setFileName,55-56,[        fileName = relativeFileName;,     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/assertions/HTMLAssertion.java,getResult,123-123,[        } catch (Exception e) {//TODO replace with proper Exception],,getResult,177-177,[        } catch (Exception e) {//TODO replace with proper Exception],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/HTMLAssertion.java,,49-384,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     public static final String DEFAULT_DOCTYPE = "omit"; //$NON-NLS-1$, ,     public static final String DOCTYPE_KEY = "html_assertion_doctype"; //$NON-NLS-1$, ,     public static final String ERRORS_ONLY_KEY = "html_assertion_errorsonly"; //$NON-NLS-1$, ,     public static final String ERROR_THRESHOLD_KEY = "html_assertion_error_threshold"; //$NON-NLS-1$, ,     public static final String WARNING_THRESHOLD_KEY = "html_assertion_warning_threshold"; //$NON-NLS-1$, ,     public static final String FORMAT_KEY = "html_assertion_format"; //$NON-NLS-1$, ,     public static final String FILENAME_KEY = "html_assertion_filename"; //$NON-NLS-1$, ,     /**,      * ,      */,     public HTMLAssertion() {,         log.debug("HTMLAssertion(): called");,     }, ,     /**,      * Returns the result of the Assertion. If so an AssertionResult containing,      * a FailureMessage will be returned. Otherwise the returned AssertionResult,      * will reflect the success of the Sample.,      */,     @Override,     public AssertionResult getResult(SampleResult inResponse) {,         log.debug("HTMLAssertions.getResult() called");, ,         // no error as default,         AssertionResult result = new AssertionResult(getName());, ,         if (inResponse.getResponseData().length == 0) {,             return result.setResultForNull();,         }, ,         result.setFailure(false);, ,         // create parser,         Tidy tidy = null;,         try {,             if (log.isDebugEnabled()){,                 log.debug("HTMLAssertions.getResult(): Setup tidy ...");,                 log.debug("doctype: " + getDoctype());,                 log.debug("errors only: " + isErrorsOnly());,                 log.debug("error threshold: " + getErrorThreshold());,                 log.debug("warning threshold: " + getWarningThreshold());,                 log.debug("html mode: " + isHTML());,                 log.debug("xhtml mode: " + isXHTML());,                 log.debug("xml mode: " + isXML());,             },             tidy = new Tidy();,             tidy.setInputEncoding("UTF8");,             tidy.setOutputEncoding("UTF8");,             tidy.setQuiet(false);,             tidy.setShowWarnings(true);,             tidy.setOnlyErrors(isErrorsOnly());,             tidy.setDocType(getDoctype());,             if (isXHTML()) {,                 tidy.setXHTML(true);,             } else if (isXML()) {,                 tidy.setXmlTags(true);,             },             tidy.setErrfile(getFilename());, ,             if (log.isDebugEnabled()) {,                 log.debug("err file: " + getFilename());,                 log.debug("getParser : tidy parser created - " + tidy);,                 log.debug("HTMLAssertions.getResult(): Tidy instance created!");,             }, ,         } catch (Exception e) {//TODO replace with proper Exception,             log.error("Unable to instantiate tidy parser", e);,             result.setFailure(true);,             result.setFailureMessage("Unable to instantiate tidy parser");,             // return with an error,             return result;,         }, ,         /*,          * Run tidy.,          */,         try {,             log.debug("HTMLAssertions.getResult(): start parsing with tidy ...");, ,             StringWriter errbuf = new StringWriter();,             tidy.setErrout(new PrintWriter(errbuf));,             // Node node = tidy.parseDOM(new,             // ByteArrayInputStream(response.getResponseData()), null);,             ByteArrayOutputStream os = new ByteArrayOutputStream();,             log.debug("Start : parse");,             Node node = tidy.parse(new ByteArrayInputStream(inResponse.getResponseData()), os);,             if (log.isDebugEnabled()) {,                 log.debug("node : " + node);,                 log.debug("End   : parse");,                 log.debug("HTMLAssertions.getResult(): parsing with tidy done!");,                 log.debug("Output: " + os.toString());,             }, ,             // write output to file,             writeOutput(errbuf.toString());, ,             // evaluate result,             if ((tidy.getParseErrors() > getErrorThreshold()),                     || (!isErrorsOnly() && (tidy.getParseWarnings() > getWarningThreshold()))) {,                 if (log.isDebugEnabled()) {,                     log.debug("HTMLAssertions.getResult(): errors/warnings detected:");,                     log.debug(errbuf.toString());,                 },                 result.setFailure(true);,                 result.setFailureMessage(MessageFormat.format("Tidy Parser errors:   " + tidy.getParseErrors(),                         + " (allowed " + getErrorThreshold() + ") " + "Tidy Parser warnings: ",                         + tidy.getParseWarnings() + " (allowed " + getWarningThreshold() + ")", new Object[0]));,                 // return with an error, ,             } else if ((tidy.getParseErrors() > 0) || (tidy.getParseWarnings() > 0)) {,                 // return with no error,                 log.debug("HTMLAssertions.getResult(): there were errors/warnings but threshold to high");,                 result.setFailure(false);,             } else {,                 // return with no error,                 log.debug("HTMLAssertions.getResult(): no errors/warnings detected:");,                 result.setFailure(false);,             }, ,         } catch (Exception e) {//TODO replace with proper Exception,             // return with an error,             log.warn("Cannot parse result content", e);,             result.setFailure(true);,             result.setFailureMessage(e.getMessage());,         },         return result;,     }, ,     /**,      * Writes the output of tidy to file.,      * ,      * @param inOutput,      */,     private void writeOutput(String inOutput) {,         String lFilename = getFilename();, ,         // check if filename defined,         if ((lFilename != null) && (!"".equals(lFilename.trim()))) {,             FileWriter lOutputWriter = null;,             try {, ,                 // open file,                 lOutputWriter = new FileWriter(lFilename, false);, ,                 // write to file,                 lOutputWriter.write(inOutput);, ,                 // flush,                 lOutputWriter.flush();, ,                 if (log.isDebugEnabled()) {,                     log.debug("writeOutput() -> output successfully written to file " + lFilename);,                 }, ,             } catch (IOException ex) {,                 log.warn("writeOutput() -> could not write output to file " + lFilename, ex);,             } finally {,                 // close file,                 IOUtils.closeQuietly(lOutputWriter);,             },         },     }, ,     /**,      * Gets the doctype,      * ,      * @return the document type,      */,     public String getDoctype() {,         return getPropertyAsString(DOCTYPE_KEY);,     }, ,     /**,      * Check if errors will be reported only,      * ,      * @return boolean - report errors only?,      */,     public boolean isErrorsOnly() {,         return getPropertyAsBoolean(ERRORS_ONLY_KEY);,     }, ,     /**,      * Gets the threshold setting for errors,      * ,      * @return long error threshold,      */,     public long getErrorThreshold() {,         return getPropertyAsLong(ERROR_THRESHOLD_KEY);,     }, ,     /**,      * Gets the threshold setting for warnings,      * ,      * @return long warning threshold,      */,     public long getWarningThreshold() {,         return getPropertyAsLong(WARNING_THRESHOLD_KEY);,     }, ,     /**,      * Sets the doctype setting,      * ,      * @param inDoctype,      *            The doctype to be set. If <code>doctype</code> is,      *            <code>null</code> or a blank string, {@link HTMLAssertion#DEFAULT_DOCTYPE} will be,      *            used,      */,     public void setDoctype(String inDoctype) {,         if ((inDoctype == null) || (inDoctype.trim().equals(""))) {,             setProperty(new StringProperty(DOCTYPE_KEY, DEFAULT_DOCTYPE));,         } else {,             setProperty(new StringProperty(DOCTYPE_KEY, inDoctype));,         },     }, ,     /**,      * Sets if errors should be tracked only,      * ,      * @param inErrorsOnly Flag whether only errors should be tracked,      */,     public void setErrorsOnly(boolean inErrorsOnly) {,         setProperty(new BooleanProperty(ERRORS_ONLY_KEY, inErrorsOnly));,     }, ,     /**,      * Sets the threshold on error level,      * ,      * @param inErrorThreshold,      *            The max number of parse errors which are to be tolerated,      * @throws IllegalArgumentException,      *             if <code>inErrorThreshold</code> is less or equals zero,      */,     public void setErrorThreshold(long inErrorThreshold) {,         if (inErrorThreshold < 0L) {,             throw new IllegalArgumentException(JMeterUtils.getResString("argument_must_not_be_negative")); //$NON-NLS-1$,         },         if (inErrorThreshold == Long.MAX_VALUE) {,             setProperty(new LongProperty(ERROR_THRESHOLD_KEY, 0));,         } else {,             setProperty(new LongProperty(ERROR_THRESHOLD_KEY, inErrorThreshold));,         },     }, ,     /**,      * Sets the threshold on warning level,      * ,      * @param inWarningThreshold,      *            The max number of warnings which are to be tolerated,      * @throws IllegalArgumentException,      *             if <code>inWarningThreshold</code> is less or equal zero,      */,     public void setWarningThreshold(long inWarningThreshold) {,         if (inWarningThreshold < 0L) {,             throw new IllegalArgumentException(JMeterUtils.getResString("argument_must_not_be_negative")); //$NON-NLS-1$,         },         if (inWarningThreshold == Long.MAX_VALUE) {,             setProperty(new LongProperty(WARNING_THRESHOLD_KEY, 0));,         } else {,             setProperty(new LongProperty(WARNING_THRESHOLD_KEY, inWarningThreshold));,         },     }, ,     /**,      * Enables html validation mode,      */,     public void setHTML() {,         setProperty(new LongProperty(FORMAT_KEY, 0));,     }, ,     /**,      * Check if html validation mode is set,      * ,      * @return boolean,      */,     public boolean isHTML() {,         return getPropertyAsLong(FORMAT_KEY) == 0;,     }, ,     /**,      * Enables xhtml validation mode,      */,     public void setXHTML() {,         setProperty(new LongProperty(FORMAT_KEY, 1));,     }, ,     /**,      * Check if xhtml validation mode is set,      * ,      * @return boolean,      */,     public boolean isXHTML() {,         return getPropertyAsLong(FORMAT_KEY) == 1;,     }, ,     /**,      * Enables xml validation mode,      */,     public void setXML() {,         setProperty(new LongProperty(FORMAT_KEY, 2));,     }, ,     /**,      * Check if xml validation mode is set,      * ,      * @return boolean,      */,     public boolean isXML() {,         return getPropertyAsLong(FORMAT_KEY) == 2;,     }, ,     /**,      * Sets the name of the file where tidy writes the output to,      * ,      * @return name of file,      */,     public String getFilename() {,         return getPropertyAsString(FILENAME_KEY);,     }, ,     /**,      * Sets the name of the tidy output file,      * ,      * @param inName The name of the file tidy will put its output to,      */,     public void setFilename(String inName) {,         setProperty(FILENAME_KEY, inName);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/JSR223Assertion.java,,33-54,[public class JSR223Assertion extends JSR223TestElement implements Cloneable, Assertion, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 234L;, ,     @Override,     public AssertionResult getResult(SampleResult response) {,         AssertionResult result = new AssertionResult(getName());,         try {,             ScriptEngine scriptEngine = getScriptEngine();,             Bindings bindings = scriptEngine.createBindings();,             bindings.put("SampleResult", response);,             bindings.put("AssertionResult", result);,             processFileOrScript(scriptEngine, bindings);,             result.setError(false);,         } catch (IOException | ScriptException e) {,             log.error("Problem in JSR223 script "+getName(), e);,             result.setError(true);,             result.setFailureMessage(e.toString());,         },         return result;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/MD5HexAssertion.java,,41-110,[public class MD5HexAssertion extends AbstractTestElement implements Serializable, Assertion {, ,     private static final long serialVersionUID = 240L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     /** Key for storing assertion-information in the jmx-file. */,     private static final String MD5HEX_KEY = "MD5HexAssertion.size";, ,     /*,      * @param response @return,      */,     @Override,     public AssertionResult getResult(SampleResult response) {, ,         AssertionResult result = new AssertionResult(getName());,         result.setFailure(false);,         byte[] resultData = response.getResponseData();, ,         if (resultData.length == 0) {,             result.setError(false);,             result.setFailure(true);,             result.setFailureMessage("Response was null");,             return result;,         }, ,         // no point in checking if we don't have anything to compare against,         if (getAllowedMD5Hex().equals("")) {,             result.setError(false);,             result.setFailure(true);,             result.setFailureMessage("MD5Hex to test against is empty");,             return result;,         }, ,         String md5Result = baMD5Hex(resultData);, ,         // String md5Result = DigestUtils.md5Hex(resultData);, ,         if (!md5Result.equalsIgnoreCase(getAllowedMD5Hex())) {,             result.setFailure(true);, ,             Object[] arguments = { md5Result, getAllowedMD5Hex() };,             String message = MessageFormat.format(JMeterUtils.getResString("md5hex_assertion_failure"), arguments); // $NON-NLS-1$,             result.setFailureMessage(message);, ,         }, ,         return result;,     }, ,     public void setAllowedMD5Hex(String hex) {,         setProperty(new StringProperty(MD5HexAssertion.MD5HEX_KEY, hex));,     }, ,     public String getAllowedMD5Hex() {,         return getPropertyAsString(MD5HexAssertion.MD5HEX_KEY);,     }, ,     // package protected so can be accessed by test class,     static String baMD5Hex(byte ba[]) {,         byte[] md5Result = {};, ,         try {,             MessageDigest md;,             md = MessageDigest.getInstance("MD5");,             md5Result = md.digest(ba);,         } catch (NoSuchAlgorithmException e) {,             log.error("", e);,         },         return JOrphanUtils.baToHexString(md5Result);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/ResponseAssertion.java,,49-545,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private static final String TEST_FIELD = "Assertion.test_field";  // $NON-NLS-1$, ,     // Values for TEST_FIELD,     // N.B. we cannot change the text value as it is in test plans,     private static final String SAMPLE_URL = "Assertion.sample_label"; // $NON-NLS-1$, ,     private static final String RESPONSE_DATA = "Assertion.response_data"; // $NON-NLS-1$, ,     private static final String RESPONSE_DATA_AS_DOCUMENT = "Assertion.response_data_as_document"; // $NON-NLS-1$, ,     private static final String RESPONSE_CODE = "Assertion.response_code"; // $NON-NLS-1$, ,     private static final String RESPONSE_MESSAGE = "Assertion.response_message"; // $NON-NLS-1$, ,     private static final String RESPONSE_HEADERS = "Assertion.response_headers"; // $NON-NLS-1$, ,     private static final String ASSUME_SUCCESS = "Assertion.assume_success"; // $NON-NLS-1$, ,     private static final String TEST_STRINGS = "Asserion.test_strings"; // $NON-NLS-1$, ,     private static final String TEST_TYPE = "Assertion.test_type"; // $NON-NLS-1$, ,     /*,      * Mask values for TEST_TYPE TODO: remove either MATCH or CONTAINS - they,      * are mutually exclusive,      */,     private static final int MATCH = 1 << 0;, ,     private static final int CONTAINS = 1 << 1;, ,     private static final int NOT = 1 << 2;, ,     private static final int EQUALS = 1 << 3;, ,     private static final int SUBSTRING = 1 << 4;, ,     // Mask should contain all types (but not NOT),     private static final int TYPE_MASK = CONTAINS | EQUALS | MATCH | SUBSTRING;, ,     private static final int  EQUALS_SECTION_DIFF_LEN,             = JMeterUtils.getPropDefault("assertion.equals_section_diff_len", 100);, ,     /** Signifies truncated text in diff display. */,     private static final String EQUALS_DIFF_TRUNC = "...";, ,     private static final String RECEIVED_STR = "****** received  : ";,     private static final String COMPARISON_STR = "****** comparison: ";,     private static final String DIFF_DELTA_START,             = JMeterUtils.getPropDefault("assertion.equals_diff_delta_start", "[[[");,     private static final String DIFF_DELTA_END,             = JMeterUtils.getPropDefault("assertion.equals_diff_delta_end", "]]]");, ,     public ResponseAssertion() {,         setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList<String>()));,     }, ,     @Override,     public void clear() {,         super.clear();,         setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList<String>()));,     }, ,     private void setTestField(String testField) {,         setProperty(TEST_FIELD, testField);,     }, ,     public void setTestFieldURL(){,         setTestField(SAMPLE_URL);,     }, ,     public void setTestFieldResponseCode(){,         setTestField(RESPONSE_CODE);,     }, ,     public void setTestFieldResponseData(){,         setTestField(RESPONSE_DATA);,     }, ,     public void setTestFieldResponseDataAsDocument(){,         setTestField(RESPONSE_DATA_AS_DOCUMENT);,     }, ,     public void setTestFieldResponseMessage(){,         setTestField(RESPONSE_MESSAGE);,     }, ,     public void setTestFieldResponseHeaders(){,         setTestField(RESPONSE_HEADERS);,     }, ,     public boolean isTestFieldURL(){,         return SAMPLE_URL.equals(getTestField());,     }, ,     public boolean isTestFieldResponseCode(){,         return RESPONSE_CODE.equals(getTestField());,     }, ,     public boolean isTestFieldResponseData(){,         return RESPONSE_DATA.equals(getTestField());,     }, ,     public boolean isTestFieldResponseDataAsDocument() {,         return RESPONSE_DATA_AS_DOCUMENT.equals(getTestField());,     }, ,     public boolean isTestFieldResponseMessage(){,         return RESPONSE_MESSAGE.equals(getTestField());,     }, ,     public boolean isTestFieldResponseHeaders(){,         return RESPONSE_HEADERS.equals(getTestField());,     }, ,     private void setTestType(int testType) {,         setProperty(new IntegerProperty(TEST_TYPE, testType));,     }, ,     private void setTestTypeMasked(int testType) {,         int value = getTestType() & ~(TYPE_MASK) | testType;,         setProperty(new IntegerProperty(TEST_TYPE, value));,     }, ,     public void addTestString(String testString) {,         getTestStrings().addProperty(new StringProperty(String.valueOf(testString.hashCode()), testString));,     }, ,     public void clearTestStrings() {,         getTestStrings().clear();,     }, ,     @Override,     public AssertionResult getResult(SampleResult response) {,         AssertionResult result;, ,         // None of the other Assertions check the response status, so remove,         // this check,         // for the time being, at least...,         // if (!response.isSuccessful()),         // {,         // result = new AssertionResult();,         // result.setError(true);,         // byte [] ba = response.getResponseData();,         // result.setFailureMessage(,         // ba == null ? "Unknown Error (responseData is empty)" : new String(ba),         // );,         // return result;,         // }, ,         result = evaluateResponse(response);,         return result;,     }, ,     /***************************************************************************,      * !ToDoo (Method description),      *,      * @return !ToDo (Return description),      **************************************************************************/,     public String getTestField() {,         return getPropertyAsString(TEST_FIELD);,     }, ,     /***************************************************************************,      * !ToDoo (Method description),      *,      * @return !ToDo (Return description),      **************************************************************************/,     public int getTestType() {,         JMeterProperty type = getProperty(TEST_TYPE);,         if (type instanceof NullProperty) {,             return CONTAINS;,         },         return type.getIntValue();,     }, ,     /***************************************************************************,      * !ToDoo (Method description),      *,      * @return !ToDo (Return description),      **************************************************************************/,     public CollectionProperty getTestStrings() {,         return (CollectionProperty) getProperty(TEST_STRINGS);,     }, ,     public boolean isEqualsType() {,         return (getTestType() & EQUALS) != 0;,     }, ,     public boolean isSubstringType() {,         return (getTestType() & SUBSTRING) != 0;,     }, ,     public boolean isContainsType() {,         return (getTestType() & CONTAINS) != 0;,     }, ,     public boolean isMatchType() {,         return (getTestType() & MATCH) != 0;,     }, ,     public boolean isNotType() {,         return (getTestType() & NOT) != 0;,     }, ,     public void setToContainsType() {,         setTestTypeMasked(CONTAINS);,     }, ,     public void setToMatchType() {,         setTestTypeMasked(MATCH);,     }, ,     public void setToEqualsType() {,         setTestTypeMasked(EQUALS);,     }, ,     public void setToSubstringType() {,         setTestTypeMasked(SUBSTRING);,     }, ,     public void setToNotType() {,         setTestType((getTestType() | NOT));,     }, ,     public void unsetNotType() {,         setTestType(getTestType() & ~NOT);,     }, ,     public boolean getAssumeSuccess() {,         return getPropertyAsBoolean(ASSUME_SUCCESS, false);,     }, ,     public void setAssumeSuccess(boolean b) {,         setProperty(ASSUME_SUCCESS, b);,     }, ,     /**,      * Make sure the response satisfies the specified assertion requirements.,      *,      * @param response,      *            an instance of SampleResult,      * @return an instance of AssertionResult,      */,     private AssertionResult evaluateResponse(SampleResult response) {,         AssertionResult result = new AssertionResult(getName());,         String toCheck = ""; // The string to check (Url or data), ,         if (getAssumeSuccess()) {,             response.setSuccessful(true);// Allow testing of failure codes,         }, ,         // What are we testing against?,         if (isScopeVariable()){,             toCheck = getThreadContext().getVariables().get(getVariableName());,         } else if (isTestFieldResponseData()) {,             toCheck = response.getResponseDataAsString(); // (bug25052),         } else if (isTestFieldResponseDataAsDocument()) {,             toCheck = Document.getTextFromDocument(response.getResponseData()); ,         } else if (isTestFieldResponseCode()) {,             toCheck = response.getResponseCode();,         } else if (isTestFieldResponseMessage()) {,             toCheck = response.getResponseMessage();,         } else if (isTestFieldResponseHeaders()) {,             toCheck = response.getResponseHeaders();,         } else { // Assume it is the URL,             toCheck = "";,             final URL url = response.getURL();,             if (url != null){,                 toCheck = url.toString();,             },         }, ,         result.setFailure(false);,         result.setError(false);, ,         boolean notTest = (NOT & getTestType()) > 0;,         boolean contains = isContainsType(); // do it once outside loop,         boolean equals = isEqualsType();,         boolean substring = isSubstringType();,         boolean matches = isMatchType();,         boolean debugEnabled = log.isDebugEnabled();,         if (debugEnabled){,             log.debug("Type:" + (contains?"Contains" : "Match") + (notTest? "(not)" : ""));,         }, ,         if (StringUtils.isEmpty(toCheck)) {,             if (notTest) { // Not should always succeed against an empty result,                 return result;,             },             if (debugEnabled){,                 log.debug("Not checking empty response field in: "+response.getSampleLabel());,             },             return result.setResultForNull();,         }, ,         boolean pass = true;,         try {,             // Get the Matcher for this thread,             Perl5Matcher localMatcher = JMeterUtils.getMatcher();,             PropertyIterator iter = getTestStrings().iterator();,             while (iter.hasNext()) {,                 String stringPattern = iter.next().getStringValue();,                 Pattern pattern = null;,                 if (contains || matches) {,                     pattern = JMeterUtils.getPatternCache().getPattern(stringPattern, Perl5Compiler.READ_ONLY_MASK);,                 },                 boolean found;,                 if (contains) {,                     found = localMatcher.contains(toCheck, pattern);,                 } else if (equals) {,                     found = toCheck.equals(stringPattern);,                 } else if (substring) {,                     found = toCheck.indexOf(stringPattern) != -1;,                 } else {,                     found = localMatcher.matches(toCheck, pattern);,                 },                 pass = notTest ? !found : found;,                 if (!pass) {,                     if (debugEnabled){log.debug("Failed: "+stringPattern);},                     result.setFailure(true);,                     result.setFailureMessage(getFailText(stringPattern,toCheck));,                     break;,                 },                 if (debugEnabled){log.debug("Passed: "+stringPattern);},             },         } catch (MalformedCachePatternException e) {,             result.setError(true);,             result.setFailure(false);,             result.setFailureMessage("Bad test configuration " + e);,         },         return result;,     }, ,     /**,      * Generate the failure reason from the TestType,      *,      * @param stringPattern,      * @return the message for the assertion report,      */,     // TODO strings should be resources,     private String getFailText(String stringPattern, String toCheck) {, ,         StringBuilder sb = new StringBuilder(200);,         sb.append("Test failed: ");, ,         if (isScopeVariable()){,             sb.append("variable(").append(getVariableName()).append(')');,         } else if (isTestFieldResponseData()) {,             sb.append("text");,         } else if (isTestFieldResponseCode()) {,             sb.append("code");,         } else if (isTestFieldResponseMessage()) {,             sb.append("message");,         } else if (isTestFieldResponseHeaders()) {,             sb.append("headers");,         } else if (isTestFieldResponseDataAsDocument()) {,             sb.append("document");,         } else // Assume it is the URL,         {,             sb.append("URL");,         }, ,         switch (getTestType()) {,         case CONTAINS:,         case SUBSTRING:,             sb.append(" expected to contain ");,             break;,         case NOT | CONTAINS:,         case NOT | SUBSTRING:,             sb.append(" expected not to contain ");,             break;,         case MATCH:,             sb.append(" expected to match ");,             break;,         case NOT | MATCH:,             sb.append(" expected not to match ");,             break;,         case EQUALS:,             sb.append(" expected to equal ");,             break;,         case NOT | EQUALS:,             sb.append(" expected not to equal ");,             break;,         default:// should never happen...,             sb.append(" expected something using ");,         }, ,         sb.append("/");, ,         if (isEqualsType()){,             sb.append(equalsComparisonText(toCheck, stringPattern));,         } else {,             sb.append(stringPattern);,         }, ,         sb.append("/");, ,         return sb.toString();,     }, , ,     private static String trunc(final boolean right, final String str),     {,         if (str.length() <= EQUALS_SECTION_DIFF_LEN) {,             return str;,         } else if (right) {,             return str.substring(0, EQUALS_SECTION_DIFF_LEN) + EQUALS_DIFF_TRUNC;,         } else {,             return EQUALS_DIFF_TRUNC + str.substring(str.length() - EQUALS_SECTION_DIFF_LEN, str.length());,         },     }, ,     /**,      *   Returns some helpful logging text to determine where equality between two strings,      * is broken, with one pointer working from the front of the strings and another working,      * backwards from the end.,      *,      * @param received      String received from sampler.,      * @param comparison    String specified for "equals" response assertion.,      * @return  Two lines of text separated by newlines, and then forward and backward pointers,      *      denoting first position of difference.,      */,     private static StringBuilder equalsComparisonText(final String received, final String comparison),     {,         int                     firstDiff;,         int                     lastRecDiff = -1;,         int                     lastCompDiff = -1;,         final int               recLength = received.length();,         final int               compLength = comparison.length();,         final int               minLength = Math.min(recLength, compLength);,         final String            startingEqSeq;,         String                  recDeltaSeq = "";,         String                  compDeltaSeq = "";,         String                  endingEqSeq = "";, ,         final StringBuilder text = new StringBuilder(Math.max(recLength, compLength) * 2);,         for (firstDiff = 0; firstDiff < minLength; firstDiff++) {,             if (received.charAt(firstDiff) != comparison.charAt(firstDiff)){,                 break;,             },         },         if (firstDiff == 0) {,             startingEqSeq = "";,         } else {,             startingEqSeq = trunc(false, received.substring(0, firstDiff));,         }, ,         lastRecDiff = recLength - 1;,         lastCompDiff = compLength - 1;, ,         while ((lastRecDiff > firstDiff) && (lastCompDiff > firstDiff),                 && received.charAt(lastRecDiff) == comparison.charAt(lastCompDiff)),         {,             lastRecDiff--;,             lastCompDiff--;,         },         endingEqSeq = trunc(true, received.substring(lastRecDiff + 1, recLength));,         if (endingEqSeq.length() == 0),         {,             recDeltaSeq = trunc(true, received.substring(firstDiff, recLength));,             compDeltaSeq = trunc(true, comparison.substring(firstDiff, compLength));,         },         else,         {,             recDeltaSeq = trunc(true, received.substring(firstDiff, lastRecDiff + 1));,             compDeltaSeq = trunc(true, comparison.substring(firstDiff, lastCompDiff + 1));,         },         final StringBuilder pad = new StringBuilder(Math.abs(recDeltaSeq.length() - compDeltaSeq.length()));,         for (int i = 0; i < pad.capacity(); i++){,             pad.append(' ');,         },         if (recDeltaSeq.length() > compDeltaSeq.length()){,             compDeltaSeq += pad.toString();,         } else {,             recDeltaSeq += pad.toString();,         }, ,         text.append("\n\n");,         text.append(RECEIVED_STR);,         text.append(startingEqSeq);,         text.append(DIFF_DELTA_START);,         text.append(recDeltaSeq);,         text.append(DIFF_DELTA_END);,         text.append(endingEqSeq);,         text.append("\n\n");,         text.append(COMPARISON_STR);,         text.append(startingEqSeq);,         text.append(DIFF_DELTA_START);,         text.append(compDeltaSeq);,         text.append(DIFF_DELTA_END);,         text.append(endingEqSeq);,         text.append("\n\n");,         return text;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/SMIMEAssertionTestElement.java,,47-153,[        super();,     }, ,     @Override,     public AssertionResult getResult(SampleResult response) {,         try {,             return SMIMEAssertion.getResult(this, response, getName());,         } catch (NoClassDefFoundError e) {,             AssertionResult assertionResult = new AssertionResult(getName());,             assertionResult.setError(true);,             assertionResult.setResultForFailure(JMeterUtils,                 .getResString("bouncy_castle_unavailable_message")); //$NON-NLS-1$,             return assertionResult;,         },     }, ,     public boolean isVerifySignature() {,         return getPropertyAsBoolean(VERIFY_SIGNATURE_KEY);,     }, ,     public void setVerifySignature(boolean verifySignature) {,         setProperty(VERIFY_SIGNATURE_KEY, verifySignature);,     }, ,     public String getIssuerDn() {,         return getPropertyAsString(ISSUER_DN_KEY);,     }, ,     public void setIssuerDn(String issuerDn) {,         setProperty(ISSUER_DN_KEY, issuerDn);,     }, ,     public boolean isSignerCheckByFile() {,         return getPropertyAsBoolean(SIGNER_CHECK_BY_FILE_KEY);,     }, ,     public void setSignerCheckByFile(boolean signerCheckByFile) {,         setProperty(SIGNER_CHECK_BY_FILE_KEY, signerCheckByFile);,     }, ,     public boolean isSignerCheckConstraints() {,         return getPropertyAsBoolean(SINGER_CHECK_CONSTRAINTS_KEY);,     }, ,     public void setSignerCheckConstraints(boolean signerCheckConstraints) {,         setProperty(SINGER_CHECK_CONSTRAINTS_KEY, signerCheckConstraints);,     }, ,     public boolean isSignerNoCheck() {,         return getPropertyAsBoolean(SIGNER_NO_CHECK_KEY);,     }, ,     public void setSignerNoCheck(boolean signerNoCheck) {,         setProperty(SIGNER_NO_CHECK_KEY, signerNoCheck);,     }, ,     public String getSignerCertFile() {,         return getPropertyAsString(SIGNER_CERT_FILE_KEY);,     }, ,     public void setSignerCertFile(String signerCertFile) {,         setProperty(SIGNER_CERT_FILE_KEY, signerCertFile);,     }, ,     public String getSignerDn() {,         return getPropertyAsString(SIGNER_DN_KEY);,     }, ,     public void setSignerDn(String signerDn) {,         setProperty(SIGNER_DN_KEY, signerDn);,     }, ,     public String getSignerSerial() {,         return getPropertyAsString(SIGNER_SERIAL_KEY);,     }, ,     public void setSignerSerial(String signerSerial) {,         setProperty(SIGNER_SERIAL_KEY, signerSerial);,     }, ,     public String getSignerEmail() {,         return getPropertyAsString(SIGNER_EMAIL_KEY);,     }, ,     public void setSignerEmail(String signerEmail) {,         setProperty(SIGNER_EMAIL_KEY, signerEmail);,     }, ,     public boolean isNotSigned() {,         return getPropertyAsBoolean(NOT_SIGNED_KEY);,     }, ,     public void setNotSigned(boolean notSigned) {,         setProperty(NOT_SIGNED_KEY, notSigned);,     }, ,     public String getSpecificMessagePosition() {,         return getPropertyAsString(MESSAGE_POSITION);,     },     ,     public int getSpecificMessagePositionAsInt() {,         return getPropertyAsInt(MESSAGE_POSITION, 0);,     },     ,     public void setSpecificMessagePosition(String position) {,         setProperty(MESSAGE_POSITION, position);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/SizeAssertion.java,,35-260,[public class SizeAssertion extends AbstractScopedAssertion implements Serializable, Assertion {, ,     private static final long serialVersionUID = 241L;, ,     // Static int to signify the type of logical comparator to assert,     public static final int EQUAL = 1;, ,     public static final int NOTEQUAL = 2;, ,     public static final int GREATERTHAN = 3;, ,     public static final int LESSTHAN = 4;, ,     public static final int GREATERTHANEQUAL = 5;, ,     public static final int LESSTHANEQUAL = 6;, ,     /** Key for storing assertion-information in the jmx-file. */,     private static final String SIZE_KEY = "SizeAssertion.size"; // $NON-NLS-1$, ,     private static final String OPERATOR_KEY = "SizeAssertion.operator"; // $NON-NLS-1$,     ,     private static final String TEST_FIELD = "Assertion.test_field";  // $NON-NLS-1$, ,     private static final String RESPONSE_NETWORK_SIZE = "SizeAssertion.response_network_size"; // $NON-NLS-1$, ,     private static final String RESPONSE_HEADERS = "SizeAssertion.response_headers"; // $NON-NLS-1$, ,     private static final String RESPONSE_BODY = "SizeAssertion.response_data"; // $NON-NLS-1$, ,     private static final String RESPONSE_CODE = "SizeAssertion.response_code"; // $NON-NLS-1$, ,     private static final String RESPONSE_MESSAGE = "SizeAssertion.response_message"; // $NON-NLS-1$, ,     /**,      * Returns the result of the Assertion. ,      * Here it checks the Sample responseData length.,      */,     @Override,     public AssertionResult getResult(SampleResult response) {,         AssertionResult result = new AssertionResult(getName());,         result.setFailure(false);,         long resultSize=0;,         if (isScopeVariable()){,             String variableName = getVariableName();,             String value = getThreadContext().getVariables().get(variableName);,             try {,                 resultSize = Integer.parseInt(value);,             } catch (NumberFormatException e) {,                 result.setFailure(true);,                 result.setFailureMessage("Error parsing variable name: "+variableName+" value: "+value);,                 return result;,             },         } else if (isTestFieldResponseHeaders()) {,             resultSize = response.getHeadersSize();,         }  else if (isTestFieldResponseBody()) {,             resultSize = response.getBodySize();,         } else if (isTestFieldResponseCode()) {,             resultSize = response.getResponseCode().length();,         } else if (isTestFieldResponseMessage()) {,             resultSize = response.getResponseMessage().length();,         } else {,             resultSize = response.getBytes();,         },         // is the Sample the correct size?,         final String msg = compareSize(resultSize);,         if (msg.length() > 0) {,             result.setFailure(true);,             Object[] arguments = { Long.valueOf(resultSize), msg, Long.valueOf(getAllowedSize()) };,             String message = MessageFormat.format(JMeterUtils.getResString("size_assertion_failure"), arguments); //$NON-NLS-1$,             result.setFailureMessage(message);,         },         return result;,     }, ,     /**,      * Returns the size in bytes to be asserted.,      * @return The allowed size,      */,     public String getAllowedSize() {,         return getPropertyAsString(SIZE_KEY);,     }, ,     /**,      Set the operator used for the assertion. Has to be one of,      <dl>,      * <dt>EQUAL</dt><dd>1</dd>,      * <dt>NOTEQUAL</dt><dd>2</dd>,      * <dt>GREATERTHAN</dt><dd>3</dd>,      * <dt>LESSTHAN</dt><dd>4</dd>,      * <dt>GREATERTHANEQUAL</dt><dd>5</dd>,      * <dt>LESSTHANEQUAL</dt><dd>6</dd>,      * </dl>,      * @param operator The operator to be used in the assertion,      */,     public void setCompOper(int operator) {,         setProperty(new IntegerProperty(OPERATOR_KEY, operator));, ,     }, ,     /**,      * Returns the operator to be asserted. ,      * <dl>,      * <dt>EQUAL</dt><dd>1</dd>,      * <dt>NOTEQUAL</dt><dd>2</dd>,      * <dt>GREATERTHAN</dt><dd>3</dd>,      * <dt>LESSTHAN</dt><dd>4</dd>,      * <dt>GREATERTHANEQUAL</dt><dd>5</dd>,      * <dt>LESSTHANEQUAL</dt><dd>6</dd>,      * </dl>,      * @return The operator used for the assertion,      */, ,     public int getCompOper() {,         return getPropertyAsInt(OPERATOR_KEY);,     }, ,     /**,      * Set the size that shall be asserted.,      * ,      * @param size a number of bytes. ,      */,     public void setAllowedSize(String size) {,             setProperty(SIZE_KEY, size);,     }, ,     /**,      * Set the size that should be used in the assertion,      * @param size The number of bytes,      */,     public void setAllowedSize(long size) {,         setProperty(SIZE_KEY, Long.toString(size));,     }, ,     /**,      * Compares the the size of a return result to the set allowed size using a,      * logical comparator set in setLogicalComparator().,      * ,      * Possible values are: equal, not equal, greater than, less than, greater,      * than equal, less than equal.,      * ,      */,     private String compareSize(long resultSize) {,         String comparatorErrorMessage;,         long allowedSize = Long.parseLong(getAllowedSize());,         boolean result = false;,         int comp = getCompOper();,         switch (comp) {,         case EQUAL:,             result = (resultSize == allowedSize);,             comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_equal"); //$NON-NLS-1$,             break;,         case NOTEQUAL:,             result = (resultSize != allowedSize);,             comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_notequal"); //$NON-NLS-1$,             break;,         case GREATERTHAN:,             result = (resultSize > allowedSize);,             comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_greater"); //$NON-NLS-1$,             break;,         case LESSTHAN:,             result = (resultSize < allowedSize);,             comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_less"); //$NON-NLS-1$,             break;,         case GREATERTHANEQUAL:,             result = (resultSize >= allowedSize);,             comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_greaterequal"); //$NON-NLS-1$,             break;,         case LESSTHANEQUAL:,             result = (resultSize <= allowedSize);,             comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_lessequal"); //$NON-NLS-1$,             break;,         default:,             result = false;,             comparatorErrorMessage = "ERROR - invalid condition";,             break;,         },         return result ? "" : comparatorErrorMessage;,     },     ,     private void setTestField(String testField) {,         setProperty(TEST_FIELD, testField);,     }, ,     public void setTestFieldNetworkSize(){,         setTestField(RESPONSE_NETWORK_SIZE);,     },     ,     public void setTestFieldResponseHeaders(){,         setTestField(RESPONSE_HEADERS);,     },     ,     public void setTestFieldResponseBody(){,         setTestField(RESPONSE_BODY);,     },     ,     public void setTestFieldResponseCode(){,         setTestField(RESPONSE_CODE);,     },     ,     public void setTestFieldResponseMessage(){,         setTestField(RESPONSE_MESSAGE);,     }, ,     public String getTestField() {,         return getPropertyAsString(TEST_FIELD);,     }, ,     public boolean isTestFieldNetworkSize(){,         return RESPONSE_NETWORK_SIZE.equals(getTestField());,     }, ,     public boolean isTestFieldResponseHeaders(){,         return RESPONSE_HEADERS.equals(getTestField());,     },     ,     public boolean isTestFieldResponseBody(){,         return RESPONSE_BODY.equals(getTestField());,     }, ,     public boolean isTestFieldResponseCode(){,         return RESPONSE_CODE.equals(getTestField());,     }, ,     public boolean isTestFieldResponseMessage(){,         return RESPONSE_MESSAGE.equals(getTestField());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/XMLAssertion.java,,37-89,[public class XMLAssertion extends AbstractTestElement implements Serializable, Assertion, ThreadListener {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     // one builder for all requests in a thread,     private static final ThreadLocal<SAXBuilder> myBuilder = new ThreadLocal<SAXBuilder>() {,         @Override,         protected SAXBuilder initialValue() {,             return new SAXBuilder();,         },     };, ,     /**,      * Returns the result of the Assertion. Here it checks whether the Sample,      * took to long to be considered successful. If so an AssertionResult,      * containing a FailureMessage will be returned. Otherwise the returned,      * AssertionResult will reflect the success of the Sample.,      */,     @Override,     public AssertionResult getResult(SampleResult response) {,         // no error as default,         AssertionResult result = new AssertionResult(getName());,         String resultData = response.getResponseDataAsString();,         if (resultData.length() == 0) {,             return result.setResultForNull();,         },         result.setFailure(false);,         SAXBuilder builder = myBuilder.get();, ,         try {,             builder.build(new StringReader(resultData));,         } catch (JDOMException e) {,             log.debug("Cannot parse result content", e); // may well happen,             result.setFailure(true);,             result.setFailureMessage(e.getMessage());,         } catch (IOException e) {,             log.error("Cannot read result content", e); // should never happen,             result.setError(true);,             result.setFailureMessage(e.getMessage());,         }, ,         return result;,     }, ,     @Override,     public void threadStarted() {,     }, ,     @Override,     public void threadFinished() {,         myBuilder.set(null);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/XMLSchemaAssertion.java,,44-160,[public class XMLSchemaAssertion extends AbstractTestElement implements Serializable, Assertion {, ,     private static final long serialVersionUID = 233L;, ,     public static final String FILE_NAME_IS_REQUIRED = "FileName is required";, ,     public static final String JAXP_SCHEMA_LANGUAGE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";, ,     public static final String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema";, ,     public static final String JAXP_SCHEMA_SOURCE = "http://java.sun.com/xml/jaxp/properties/schemaSource";, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     public static final String XSD_FILENAME_KEY = "xmlschema_assertion_filename";, ,     /**,      * getResult,      * ,      */,     @Override,     public AssertionResult getResult(SampleResult response) {,         AssertionResult result = new AssertionResult(getName());,         // Note: initialised with error = failure = false, ,         String resultData = response.getResponseDataAsString();,         if (resultData.length() == 0) {,             return result.setResultForNull();,         }, ,         String xsdFileName = getXsdFileName();,         if (log.isDebugEnabled()) {,             log.debug("xmlString: " + resultData);,             log.debug("xsdFileName: " + xsdFileName);,         },         if (xsdFileName == null || xsdFileName.length() == 0) {,             result.setResultForFailure(FILE_NAME_IS_REQUIRED);,         } else {,             setSchemaResult(result, resultData, xsdFileName);,         },         return result;,     }, ,     public void setXsdFileName(String xmlSchemaFileName) throws IllegalArgumentException {,         setProperty(XSD_FILENAME_KEY, xmlSchemaFileName);,     }, ,     public String getXsdFileName() {,         return getPropertyAsString(XSD_FILENAME_KEY);,     }, ,     /**,      * set Schema result,      * ,      * @param result,      * @param xmlStr,      * @param xsdFileName,      */,     private void setSchemaResult(AssertionResult result, String xmlStr, String xsdFileName) {,         try {,             // boolean toReturn = true;, ,             // Document doc = null;,             DocumentBuilderFactory parserFactory = DocumentBuilderFactory.newInstance();,             parserFactory.setValidating(true);,             parserFactory.setNamespaceAware(true);,             parserFactory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);,             parserFactory.setAttribute(JAXP_SCHEMA_SOURCE, xsdFileName);, ,             // create a parser:,             DocumentBuilder parser = parserFactory.newDocumentBuilder();,             parser.setErrorHandler(new SAXErrorHandler(result));, ,             // doc =,             parser.parse(new InputSource(new StringReader(xmlStr)));,             // if everything went fine then xml schema validation is valid,         } catch (SAXParseException e) {, ,             // Only set message if error not yet flagged,             if (!result.isError() && !result.isFailure()) {,                 result.setError(true);,                 result.setFailureMessage(errorDetails(e));,             }, ,         } catch (SAXException e) {, ,             log.warn(e.toString());,             result.setResultForFailure(e.getMessage());, ,         } catch (IOException e) {, ,             log.warn("IO error", e);,             result.setResultForFailure(e.getMessage());, ,         } catch (ParserConfigurationException e) {, ,             log.warn("Problem with Parser Config", e);,             result.setResultForFailure(e.getMessage());, ,         }, ,     }, ,     // Helper method to construct SAX error details,     private static String errorDetails(SAXParseException spe) {,         StringBuilder str = new StringBuilder(80);,         int i;,         i = spe.getLineNumber();,         if (i != -1) {,             str.append("line=");,             str.append(i);,             str.append(" col=");,             str.append(spe.getColumnNumber());,             str.append(" ");,         },         str.append(spe.getLocalizedMessage());,         return str.toString();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/assertions/XPathAssertion.java,setNamespace,180-181,[        setProperty(new BooleanProperty(NAMESPACE_KEY, namespace));,     }],,setNameSpace,234-235,[        setProperty(new BooleanProperty(NAMESPACE, val));,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/assertions/XPathAssertion.java,,45-271,[public class XPathAssertion extends AbstractScopedAssertion implements Serializable, Assertion {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     //+ JMX file attributes,     private static final String XPATH_KEY         = "XPath.xpath"; // $NON-NLS-1$,     private static final String WHITESPACE_KEY    = "XPath.whitespace"; // $NON-NLS-1$,     private static final String VALIDATE_KEY      = "XPath.validate"; // $NON-NLS-1$,     private static final String TOLERANT_KEY      = "XPath.tolerant"; // $NON-NLS-1$,     private static final String NEGATE_KEY        = "XPath.negate"; // $NON-NLS-1$,     private static final String NAMESPACE_KEY     = "XPath.namespace"; // $NON-NLS-1$,     private static final String QUIET_KEY         = "XPath.quiet"; // $NON-NLS-1$,     private static final String REPORT_ERRORS_KEY = "XPath.report_errors"; // $NON-NLS-1$,     private static final String SHOW_WARNINGS_KEY = "XPath.show_warnings"; // $NON-NLS-1$,     private static final String DOWNLOAD_DTDS     = "XPath.download_dtds"; // $NON-NLS-1$,     //- JMX file attributes, ,     public static final String DEFAULT_XPATH = "/";, ,     /**,      * Returns the result of the Assertion. Checks if the result is well-formed,      * XML, and that the XPath expression is matched (or not, as the case may,      * be),      */,     @Override,     public AssertionResult getResult(SampleResult response) {,         // no error as default,         AssertionResult result = new AssertionResult(getName());,         result.setFailure(false);,         result.setFailureMessage("");, ,         byte[] responseData = null;,         Document doc = null;, ,         try {,             if (isScopeVariable()){,                 String inputString=getThreadContext().getVariables().get(getVariableName());,                 if(!StringUtils.isEmpty(inputString)) {,                     responseData = inputString.getBytes("UTF-8");,                 } ,             } else {,                 responseData = response.getResponseData();,             },             ,             if (responseData == null || responseData.length == 0) {,                 return result.setResultForNull();,             },     ,             if (log.isDebugEnabled()) {,                 log.debug(new StringBuilder("Validation is set to ").append(isValidating()).toString());,                 log.debug(new StringBuilder("Whitespace is set to ").append(isWhitespace()).toString());,                 log.debug(new StringBuilder("Tolerant is set to ").append(isTolerant()).toString());,             },     ,     ,             boolean isXML = JOrphanUtils.isXML(responseData);, ,             doc = XPathUtil.makeDocument(new ByteArrayInputStream(responseData), isValidating(),,                     isWhitespace(), isNamespace(), isTolerant(), isQuiet(), showWarnings() , reportErrors(), isXML,                     , isDownloadDTDs());,         } catch (SAXException e) {,             log.debug("Caught sax exception: " + e);,             result.setError(true);,             result.setFailureMessage(new StringBuilder("SAXException: ").append(e.getMessage()).toString());,             return result;,         } catch (IOException e) {,             log.warn("Cannot parse result content", e);,             result.setError(true);,             result.setFailureMessage(new StringBuilder("IOException: ").append(e.getMessage()).toString());,             return result;,         } catch (ParserConfigurationException e) {,             log.warn("Cannot parse result content", e);,             result.setError(true);,             result.setFailureMessage(new StringBuilder("ParserConfigurationException: ").append(e.getMessage()),                     .toString());,             return result;,         } catch (TidyException e) {,             result.setError(true);,             result.setFailureMessage(e.getMessage());,             return result;,         }, ,         if (doc == null || doc.getDocumentElement() == null) {,             result.setError(true);,             result.setFailureMessage("Document is null, probably not parsable");,             return result;,         },         XPathUtil.computeAssertionResult(result, doc, getXPathString(), isNegated());,         return result;,     }, ,     /**,      * Get The XPath String that will be used in matching the document,      *,      * @return String xpath String,      */,     public String getXPathString() {,         return getPropertyAsString(XPATH_KEY, DEFAULT_XPATH);,     }, ,     /**,      * Set the XPath String this will be used as an xpath,      *,      * @param xpath,      *            String,      */,     public void setXPathString(String xpath) {,         setProperty(new StringProperty(XPATH_KEY, xpath));,     }, ,     /**,      * Set whether to ignore element whitespace,      *,      * @param whitespace Flag whether whitespace elements should be ignored,      */,     public void setWhitespace(boolean whitespace) {,         setProperty(new BooleanProperty(WHITESPACE_KEY, whitespace));,     }, ,     /**,      * Set use validation,      *,      * @param validate Flag whether validation should be used,      */,     public void setValidating(boolean validate) {,         setProperty(new BooleanProperty(VALIDATE_KEY, validate));,     }, ,     /**,      * Set whether this is namespace aware,      *,      * @param namespace Flag whether namespace should be used,      */,     public void setNamespace(boolean namespace) {,         setProperty(new BooleanProperty(NAMESPACE_KEY, namespace));,     }, ,     /**,      * Set tolerant mode if required,      *,      * @param tolerant,      *            true/false,      */,     public void setTolerant(boolean tolerant) {,         setProperty(new BooleanProperty(TOLERANT_KEY, tolerant));,     }, ,     public void setNegated(boolean negate) {,         setProperty(new BooleanProperty(NEGATE_KEY, negate));,     }, ,     /**,      * Is this whitespace ignored.,      *,      * @return boolean,      */,     public boolean isWhitespace() {,         return getPropertyAsBoolean(WHITESPACE_KEY, false);,     }, ,     /**,      * Is this validating,      *,      * @return boolean,      */,     public boolean isValidating() {,         return getPropertyAsBoolean(VALIDATE_KEY, false);,     }, ,     /**,      * Is this namespace aware?,      *,      * @return boolean,      */,     public boolean isNamespace() {,         return getPropertyAsBoolean(NAMESPACE_KEY, false);,     }, ,     /**,      * Is this using tolerant mode?,      *,      * @return boolean,      */,     public boolean isTolerant() {,         return getPropertyAsBoolean(TOLERANT_KEY, false);,     }, ,     /**,      * Negate the XPath test, that is return true if something is not found.,      *,      * @return boolean negated,      */,     public boolean isNegated() {,         return getPropertyAsBoolean(NEGATE_KEY, false);,     }, ,     public void setReportErrors(boolean val) {,         setProperty(REPORT_ERRORS_KEY, val, false);,     }, ,     public boolean reportErrors() {,         return getPropertyAsBoolean(REPORT_ERRORS_KEY, false);,     }, ,     public void setShowWarnings(boolean val) {,         setProperty(SHOW_WARNINGS_KEY, val, false);,     }, ,     public boolean showWarnings() {,         return getPropertyAsBoolean(SHOW_WARNINGS_KEY, false);,     }, ,     public void setQuiet(boolean val) {,         setProperty(QUIET_KEY, val, true);,     }, ,     public boolean isQuiet() {,         return getPropertyAsBoolean(QUIET_KEY, true);,     }, ,     public void setDownloadDTDs(boolean val) {,         setProperty(DOWNLOAD_DTDS, val, false);,     }, ,     public boolean isDownloadDTDs() {,         return getPropertyAsBoolean(DOWNLOAD_DTDS, false);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/AssertionGui.java,configure,219-219,[        ResponseAssertion model = (ResponseAssertion) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/HTMLAssertionGui.java,configure,175-175,[        HTMLAssertion lAssertion = (HTMLAssertion) inElement;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/HTMLAssertionGui.java,modifyTestElement,123-123,[        ((HTMLAssertion) inElement).setErrorThreshold(errorThreshold);],,modifyTestElement,132-132,[        ((HTMLAssertion) inElement).setWarningThreshold(warningThreshold);],,modifyTestElement,135-135,[        ((HTMLAssertion) inElement).setDoctype(docTypeString);],,modifyTestElement,138-138,[        ((HTMLAssertion) inElement).setErrorsOnly(trackErrorsOnly);],,modifyTestElement,141-141,[            ((HTMLAssertion) inElement).setHTML();],,modifyTestElement,145-145,[            ((HTMLAssertion) inElement).setXML();],,modifyTestElement,143-143,[            ((HTMLAssertion) inElement).setXHTML();],,modifyTestElement,147-147,[        ((HTMLAssertion) inElement).setFilename(filePanel.getFilename());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/MD5HexAssertionGUI.java,configure,75-75,[        MD5HexAssertion assertion = (MD5HexAssertion) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/MD5HexAssertionGUI.java,modifyTestElement,107-107,[        ((MD5HexAssertion) element).setAllowedMD5Hex(md5HexString);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/SMIMEAssertionGui.java,configure,200-200,[        SMIMEAssertionTestElement smimeAssertion = (SMIMEAssertionTestElement) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/SMIMEAssertionGui.java,modifyTestElement,226-226,[        SMIMEAssertionTestElement smimeAssertion = (SMIMEAssertionTestElement) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/SizeAssertionGui.java,configure,137-137,[        SizeAssertion assertion = (SizeAssertion) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/SizeAssertionGui.java,modifyTestElement,93-93,[        SizeAssertion assertion = (SizeAssertion) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/XMLSchemaAssertionGUI.java,configure,108-108,[        XMLSchemaAssertion assertion = (XMLSchemaAssertion) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/XMLSchemaAssertionGUI.java,modifyTestElement,86-86,[        ((XMLSchemaAssertion) inElement).setXsdFileName(xmlSchema.getText());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/assertions/gui/XPathAssertionGui.java,configure,70-70,[        XPathAssertion assertion = (XPathAssertion) el;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/config/Argument.java,,53-207,[        this(null, null, null, null);,     }, ,     /**,      * Create a new Argument with the specified name and value, and no metadata.,      *,      * @param name,      *            the argument name,      * @param value,      *            the argument value,      */,     public Argument(String name, String value) {,         this(name, value, null, null);,     }, ,     /**,      * Create a new Argument with the specified name, value, and metadata.,      *,      * @param name,      *            the argument name,      * @param value,      *            the argument value,      * @param metadata,      *            the argument metadata,      */,     public Argument(String name, String value, String metadata) {,         this(name, value, metadata, null);,     }, ,     /**,      * Create a new Argument with the specified name, value, and metadata.,      *,      * @param name,      *            the argument name,      * @param value,      *            the argument value,      * @param metadata,      *            the argument metadata,      * @param description ,      *            the argument description,      */,     public Argument(String name, String value, String metadata, String description) {,         if(name != null) {,             setProperty(new StringProperty(ARG_NAME, name));,         },         if(value != null) {,             setProperty(new StringProperty(VALUE, value));,         },         if(metadata != null) {,             setProperty(new StringProperty(METADATA, metadata));,         },         if(description != null) {,             setProperty(DESCRIPTION, description, DFLT_DESCRIPTION);,         },     },     ,     /**,      * Set the name of the Argument.,      *,      * @param newName,      *            the new name,      */,     @Override,     public void setName(String newName) {,         setProperty(new StringProperty(ARG_NAME, newName));,     }, ,     /**,      * Get the name of the Argument.,      *,      * @return the attribute's name,      */,     @Override,     public String getName() {,         return getPropertyAsString(ARG_NAME);,     }, ,     /**,      * Sets the value of the Argument.,      *,      * @param newValue,      *            the new value,      */,     public void setValue(String newValue) {,         setProperty(new StringProperty(VALUE, newValue));,     }, ,     /**,      * Gets the value of the Argument object.,      *,      * @return the attribute's value,      */,     public String getValue() {,         return getPropertyAsString(VALUE);,     }, ,     /**,      * Sets the Description attribute of the Argument.,      *,      * @param description,      *            the new description,      */,     public void setDescription(String description) {,         setProperty(DESCRIPTION, description, DFLT_DESCRIPTION);,     }, ,     /**,      * Gets the Meta Data attribute of the Argument.,      *,      * @return the MetaData value,      */,     public String getDescription() {,         return getPropertyAsString(DESCRIPTION, DFLT_DESCRIPTION);,     },     ,     /**,      * Sets the Meta Data attribute of the Argument.,      *,      * @param newMetaData,      *            the new metadata,      */,     public void setMetaData(String newMetaData) {,         setProperty(new StringProperty(METADATA, newMetaData));,     }, ,     /**,      * Gets the Meta Data attribute of the Argument.,      *,      * @return the MetaData value,      */,     public String getMetaData() {,         return getPropertyAsString(METADATA);,     }, ,     @Override,     public String toString() {,         return getName() + getMetaData() + getValue();,     }, ,     /**,      * Is this parameter skippable, i.e. empty/blank string,      * or it looks like an unrecognised variable.,      *,      * @param parameterName - parameter name,      * @return true if parameter should be skipped,      */,     public boolean isSkippable(String parameterName) {,         if (JOrphanUtils.isBlank(parameterName)){,             return true; // Skip parameters with a blank name (allows use of optional variables in parameter lists),         },         // TODO: improve this test,         if (parameterName.trim().startsWith("${") && parameterName.endsWith("}")){// $NON-NLS-1$ $NON-NLS-2$,             return true; // Missing variable name,         },         return false;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/config/Arguments.java,,44-257,[    public Arguments() {,         setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Argument>()));,     }, ,     /**,      * Get the arguments.,      *,      * @return the arguments,      */,     public CollectionProperty getArguments() {,         return (CollectionProperty) getProperty(ARGUMENTS);,     }, ,     /**,      * Clear the arguments.,      */,     @Override,     public void clear() {,         super.clear();,         setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Argument>()));,     }, ,     /**,      * Set the list of arguments. Any existing arguments will be lost.,      *,      * @param arguments,      *            the new arguments,      */,     public void setArguments(List<Argument> arguments) {,         setProperty(new CollectionProperty(ARGUMENTS, arguments));,     }, ,     /**,      * Get the arguments as a Map. Each argument name is used as the key, and,      * its value as the value.,      *,      * @return a new Map with String keys and values containing the arguments,      */,     public Map<String, String> getArgumentsAsMap() {,         PropertyIterator iter = getArguments().iterator();,         Map<String, String> argMap = new LinkedHashMap<>();,         while (iter.hasNext()) {,             Argument arg = (Argument) iter.next().getObjectValue();,             // Because CollectionProperty.mergeIn will not prevent adding two,             // properties of the same name, we need to select the first value so,             // that this element's values prevail over defaults provided by,             // configuration,             // elements:,             if (!argMap.containsKey(arg.getName())) {,                 argMap.put(arg.getName(), arg.getValue());,             },         },         return argMap;,     }, ,     /**,      * Add a new argument with the given name and value.,      *,      * @param name,      *            the name of the argument,      * @param value,      *            the value of the argument,      */,     public void addArgument(String name, String value) {,         addArgument(new Argument(name, value, null));,     }, ,     /**,      * Add a new argument.,      *,      * @param arg,      *            the new argument,      */,     public void addArgument(Argument arg) {,         TestElementProperty newArg = new TestElementProperty(arg.getName(), arg);,         if (isRunningVersion()) {,             this.setTemporary(newArg);,         },         getArguments().addItem(newArg);,     }, ,     /**,      * Add a new argument with the given name, value, and metadata.,      *,      * @param name,      *            the name of the argument,      * @param value,      *            the value of the argument,      * @param metadata,      *            the metadata for the argument,      */,     public void addArgument(String name, String value, String metadata) {,         addArgument(new Argument(name, value, metadata));,     }, ,     /**,      * Get a PropertyIterator of the arguments.,      *,      * @return an iteration of the arguments,      */,     public PropertyIterator iterator() {,         return getArguments().iterator();,     }, ,     /**,      * Create a string representation of the arguments.,      *,      * @return the string representation of the arguments,      */,     @Override,     public String toString() {,         StringBuilder str = new StringBuilder();,         PropertyIterator iter = getArguments().iterator();,         while (iter.hasNext()) {,             Argument arg = (Argument) iter.next().getObjectValue();,             final String metaData = arg.getMetaData();,             str.append(arg.getName());,             if (metaData == null) {,                 str.append("="); //$NON-NLS-1$,             } else {,                 str.append(metaData);,             },             str.append(arg.getValue());,             if (iter.hasNext()) {,                 str.append("&"); //$NON-NLS-1$,             },         },         return str.toString();,     }, ,     /**,      * Remove the specified argument from the list.,      *,      * @param row,      *            the index of the argument to remove,      */,     public void removeArgument(int row) {,         if (row < getArguments().size()) {,             getArguments().remove(row);,         },     }, ,     /**,      * Remove the specified argument from the list.,      *,      * @param arg,      *            the argument to remove,      */,     public void removeArgument(Argument arg) {,         PropertyIterator iter = getArguments().iterator();,         while (iter.hasNext()) {,             Argument item = (Argument) iter.next().getObjectValue();,             if (arg.equals(item)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove the argument with the specified name.,      *,      * @param argName,      *            the name of the argument to remove,      */,     public void removeArgument(String argName) {,         PropertyIterator iter = getArguments().iterator();,         while (iter.hasNext()) {,             Argument arg = (Argument) iter.next().getObjectValue();,             if (arg.getName().equals(argName)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove all arguments from the list.,      */,     public void removeAllArguments() {,         getArguments().clear();,     }, ,     /**,      * Add a new empty argument to the list. The new argument will have the,      * empty string as its name and value, and null metadata.,      */,     public void addEmptyArgument() {,         addArgument(new Argument("", "", null));,     }, ,     /**,      * Get the number of arguments in the list.,      *,      * @return the number of arguments,      */,     public int getArgumentCount() {,         return getArguments().size();,     }, ,     /**,      * Get a single argument.,      *,      * @param row,      *            the index of the argument to return.,      * @return the argument at the specified index, or null if no argument,      *         exists at that index.,      */,     public Argument getArgument(int row) {,         Argument argument = null;, ,         if (row < getArguments().size()) {,             argument = (Argument) getArguments().get(row).getObjectValue();,         }, ,         return argument;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/jmeter/config/CSVDataSet.java,iterationStart,201-201,[            for (int a = 0; a < vars.length && a < lineValues.length; a++) {],,iterationStart,158-158,[        if (vars == null) {],,iterationStart,182-182,[                } catch (IOException e) {],,iterationStart,183-183,[                    log.warn("Could not split CSV header line",e);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/config/ConfigTestElement.java,,33-56,[    public ConfigTestElement() {,     }, ,     @Override,     public void addTestElement(TestElement parm1) {,         if (parm1 instanceof ConfigTestElement) {,             mergeIn(parm1);,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void addConfigElement(ConfigElement config) {,         mergeIn((TestElement) config);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public boolean expectsModification() {,         return false;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/config/LoginConfig.java,getUsername,63-63,[        return getPropertyAsString(ConfigTestElement.USERNAME);],,getUserName,452-452,[        return getPropertyAsString(USERNAME);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/config/LoginConfig.java,setUsername,44-45,[        setProperty(new StringProperty(ConfigTestElement.USERNAME, username));,     }],,setUserName,445-446,[        setProperty(USERNAME, username);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/config/LoginConfig.java,,34-77,[    public LoginConfig() {,     }, ,     /**,      * Sets the Username attribute of the LoginConfig object.,      *,      * @param username,      *            the new Username value,      */,     public void setUsername(String username) {,         setProperty(new StringProperty(ConfigTestElement.USERNAME, username));,     }, ,     /**,      * Sets the Password attribute of the LoginConfig object.,      *,      * @param password,      *            the new Password value,      */,     public void setPassword(String password) {,         setProperty(new StringProperty(ConfigTestElement.PASSWORD, password));,     }, ,     /**,      * Gets the Username attribute of the LoginConfig object.,      *,      * @return the Username value,      */,     public String getUsername() {,         return getPropertyAsString(ConfigTestElement.USERNAME);,     }, ,     /**,      * Gets the Password attribute of the LoginConfig object.,      *,      * @return the Password value,      */,     public String getPassword() {,         return getPropertyAsString(ConfigTestElement.PASSWORD);,     }, ,     @Override,     public String toString() {,         return getUsername() + "=" + getPassword(); //$NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/ForeachController.java,,39-283,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private static final String INPUTVAL = "ForeachController.inputVal";// $NON-NLS-1$, ,     private static final String START_INDEX = "ForeachController.startIndex";// $NON-NLS-1$, ,     private static final String END_INDEX = "ForeachController.endIndex";// $NON-NLS-1$, ,     private static final String RETURNVAL = "ForeachController.returnVal";// $NON-NLS-1$, ,     private static final String USE_SEPARATOR = "ForeachController.useSeparator";// $NON-NLS-1$, ,     private static final String INDEX_DEFAULT_VALUE = ""; // start/end index default value for string getters and setters, ,     private int loopCount = 0;, ,     private static final String DEFAULT_SEPARATOR = "_";// $NON-NLS-1$, ,     public ForeachController() {,     },     , ,     /**,      * @param startIndex Start index  of loop,      */,     public void setStartIndex(String startIndex) {,         setProperty(START_INDEX, startIndex, INDEX_DEFAULT_VALUE);,     }, ,     /**,      * @return start index of loop,      */,     private int getStartIndex() {,         // Although the default is not the same as for the string value, it is only used internally,         return getPropertyAsInt(START_INDEX, 0);,     }, , ,     /**,      * @return start index of loop as String,      */,     public String getStartIndexAsString() {,         return getPropertyAsString(START_INDEX, INDEX_DEFAULT_VALUE);,     },     ,     /**,      * @param endIndex End index  of loop,      */,     public void setEndIndex(String endIndex) {,         setProperty(END_INDEX, endIndex, INDEX_DEFAULT_VALUE);,     }, ,     /**,      * @return end index of loop,      */,     private int getEndIndex() {,         // Although the default is not the same as for the string value, it is only used internally,         return getPropertyAsInt(END_INDEX, Integer.MAX_VALUE);,     },     ,     /**,      * @return end index of loop,      */,     public String getEndIndexAsString() {,         return getPropertyAsString(END_INDEX, INDEX_DEFAULT_VALUE);,     },     ,     public void setInputVal(String inputValue) {,         setProperty(new StringProperty(INPUTVAL, inputValue));,     }, ,     private String getInputVal() {,         getProperty(INPUTVAL).recoverRunningVersion(null);,         return getInputValString();,     }, ,     public String getInputValString() {,         return getPropertyAsString(INPUTVAL);,     }, ,     public void setReturnVal(String inputValue) {,         setProperty(new StringProperty(RETURNVAL, inputValue));,     }, ,     private String getReturnVal() {,         getProperty(RETURNVAL).recoverRunningVersion(null);,         return getReturnValString();,     }, ,     public String getReturnValString() {,         return getPropertyAsString(RETURNVAL);,     }, ,     private String getSeparator() {,         return getUseSeparator() ? DEFAULT_SEPARATOR : "";// $NON-NLS-1$,     }, ,     public void setUseSeparator(boolean b) {,         setProperty(new BooleanProperty(USE_SEPARATOR, b));,     }, ,     public boolean getUseSeparator() {,         return getPropertyAsBoolean(USE_SEPARATOR, true);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public boolean isDone() {,         if (loopCount >= getEndIndex()) {,             return true;,         },         JMeterContext context = getThreadContext();,         StringBuilder builder = new StringBuilder(,                 getInputVal().length()+getSeparator().length()+3);,         String inputVariable = ,                 builder.append(getInputVal()),                 .append(getSeparator()),                 .append(Integer.toString(loopCount+1)).toString();,         final JMeterVariables variables = context.getVariables();,         final Object currentVariable = variables.getObject(inputVariable);,         if (currentVariable != null) {,             variables.putObject(getReturnVal(), currentVariable);,             if (log.isDebugEnabled()) {,                 log.debug("ForEach resultstring isDone=" + variables.get(getReturnVal()));,             },             return false;,         },         return super.isDone();,     }, ,     /**,      * Tests that JMeterVariables contain inputVal_<count>, if not we can stop iterating,      */,     private boolean endOfArguments() {,         JMeterContext context = getThreadContext();,         String inputVariable = getInputVal() + getSeparator() + (loopCount + 1);,         if (context.getVariables().getObject(inputVariable) != null) {,             log.debug("ForEach resultstring eofArgs= false");,             return false;,         },         log.debug("ForEach resultstring eofArgs= true");,         return true;,     }, ,     // Prevent entry if nothing to do,     @Override,     public Sampler next() {,         if (emptyList()) {,             reInitialize();,             resetLoopCount();,             return null;,         },         return super.next();,     }, ,     /**,      * Check if there are any matching entries,      *,      * @return whether any entries in the list,      */,     private boolean emptyList() {,         JMeterContext context = getThreadContext();, ,         StringBuilder builder = new StringBuilder(,                 getInputVal().length()+getSeparator().length()+3);,         String inputVariable = ,                 builder.append(getInputVal()),                 .append(getSeparator()),                 .append(Integer.toString(loopCount+1)).toString();,         if (context.getVariables().getObject(inputVariable) != null) {,             return false;,         },         if (log.isDebugEnabled()) {,             log.debug("No entries found - null first entry: " + inputVariable);,         },         return true;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsNull() throws NextIsNullException {,         reInitialize();,         // Conditions to reset the loop count,         if (endOfArguments() // no more variables to iterate,                 ||loopCount >= getEndIndex() // we reached end index,                 ) {,             // setDone(true);,             resetLoopCount();,             return null;,         },         return next();,     }, ,     protected void incrementLoopCount() {,         loopCount++;,     }, ,     protected void resetLoopCount() {,         loopCount = getStartIndex();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected int getIterCount() {,         return loopCount + 1;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected void reInitialize() {,         setFirst(true);,         resetCurrent();,         incrementLoopCount();,         recoverRunningVersion();,     },     ,     /**,      * {@inheritDoc},      */,     @Override,     public void triggerEndOfLoop() {,         super.triggerEndOfLoop();,         resetLoopCount();,     }, , ,     /**,      * Reset loopCount to Start index,      * @see org.apache.jmeter.control.GenericController#initialize(),      */,     @Override,     public void initialize() {,         super.initialize();,         loopCount = getStartIndex();,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/GenericController.java,,55-427,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private transient LinkedList<LoopIterationListener> iterationListeners = new LinkedList<>();, ,     // Only create the map if it is required,     private transient ConcurrentMap<TestElement, Object> children = ,             TestCompiler.IS_USE_STATIC_SET ? null : new ConcurrentHashMap<TestElement, Object>();, ,     private static final Object DUMMY = new Object();, ,     // May be replaced by RandomOrderController,     protected transient List<TestElement> subControllersAndSamplers = new ArrayList<>();, ,     /**,      * Index of current sub controller or sampler,      */,     protected transient int current;, ,     /**,      * TODO document this,      */,     private transient int iterCount;,     ,     /**,      * Controller has ended,      */,     private transient boolean done;,     ,     /**,      * First sampler or sub-controller,      */,     private transient boolean first;, ,     /**,      * Creates a Generic Controller,      */,     public GenericController() {,     }, ,     @Override,     public void initialize() {,         resetCurrent();,         resetIterCount();,         done = false; // TODO should this use setDone()?,         first = true; // TODO should this use setFirst()?        ,         initializeSubControllers();,     }, ,     /**,      * (re)Initializes sub controllers,      * See Bug 50032,      */,     protected void initializeSubControllers() {,         for (TestElement te : subControllersAndSamplers) {,             if(te instanceof GenericController) {,                 ((Controller) te).initialize();,             },         },     }, ,     /**,      * Resets the controller (called after execution of last child of controller):,      * <ul>,      * <li>resetCurrent() (i.e. current=0)</li>,      * <li>increment iteration count</li>,      * <li>sets first=true</li>,      * <li>recoverRunningVersion() to set the controller back to the initial state</li>,      * </ul>,      *,      */,     protected void reInitialize() {,         resetCurrent();,         incrementIterCount();,         setFirst(true);,         recoverRunningVersion();,     }, ,     /**,      * <p>,      * Determines the next sampler to be processed.,      * </p>,      *,      * <p>,      * If {@link #isDone()} is <code>true</code>, returns null.,      * </p>,      *,      * <p>,      * Gets the list element using current pointer.,      * If this is <code>null</code>, calls {@link #nextIsNull()}.,      * </p>,      *,      * <p>,      * If the list element is a {@link Sampler}, calls {@link #nextIsASampler(Sampler)},,      * otherwise calls {@link #nextIsAController(Controller)},      * </p>,      *,      * <p>,      * If any of the called methods throws {@link NextIsNullException}, returns <code>null</code>,,      * otherwise the value obtained above is returned.,      * </p>,      *,      * @return the next sampler or <code>null</code>,      */,     @Override,     public Sampler next() {,         fireIterEvents();,         if (log.isDebugEnabled()) {,             log.debug("Calling next on: " + this.getClass().getName());,         },         if (isDone()) {,             return null;,         },         Sampler returnValue = null;,         try {,             TestElement currentElement = getCurrentElement();,             setCurrentElement(currentElement);,             if (currentElement == null) {,                 // incrementCurrent();,                 returnValue = nextIsNull();,             } else {,                 if (currentElement instanceof Sampler) {,                     returnValue = nextIsASampler((Sampler) currentElement);,                 } else { // must be a controller,                     returnValue = nextIsAController((Controller) currentElement);,                 },             },         } catch (NextIsNullException e) {,             // NOOP,         },         return returnValue;,     }, ,     /**,      * @see org.apache.jmeter.control.Controller#isDone(),      */,     @Override,     public boolean isDone() {,         return done;,     }, ,     protected void setDone(boolean done) {,         this.done = done;,     }, ,     /**,      * @return true if it's the controller is returning the first of its children,      */,     protected boolean isFirst() {,         return first;,     }, ,     /**,      * If b is true, it means first is reset which means Controller has executed all its children ,      * @param b The flag, whether first is reseted,      */,     public void setFirst(boolean b) {,         first = b;,     }, ,     /**,      * Called by {@link #next()} if the element is a Controller, and returns the,      * next sampler from the controller. If this is <code>null</code>, then,      * updates the current pointer and makes recursive call to {@link #next()}.,      * ,      * @param controller the current <em>next</em> element,      * @return the next sampler,      * @throws NextIsNullException when the end of the list has already been reached,      */,     protected Sampler nextIsAController(Controller controller) throws NextIsNullException {,         Sampler sampler = controller.next();,         if (sampler == null) {,             currentReturnedNull(controller);,             sampler = next();,         },         return sampler;,     }, ,     /**,      * Increment the current pointer and return the element. Called by,      * {@link #next()} if the element is a sampler. (May be overriden by,      * sub-classes).,      *,      * @param element,      *            the current <em>next</em> element,      * @return input element,      * @throws NextIsNullException when the end of the list has already been reached,      */,     protected Sampler nextIsASampler(Sampler element) throws NextIsNullException {,         incrementCurrent();,         return element;,     }, ,     /**,      * Called by {@link #next()} when {@link #getCurrentElement()} returns <code>null</code>.,      * Reinitialises the controller.,      *,      * @return null (always, for this class),      * @throws NextIsNullException when the end of the list has already been reached,      */,     protected Sampler nextIsNull() throws NextIsNullException {,         reInitialize();,         return null;,     },     ,     /**,      * {@inheritDoc},      */,     @Override,     public void triggerEndOfLoop() {,         reInitialize();,     }, ,     /**,      * Called to re-initialize a index of controller's elements (Bug 50032),      * @deprecated replaced by GeneriController#initializeSubControllers,      */,     protected void reInitializeSubController() {,         initializeSubControllers();,     },     ,     /**,      * If the controller is done, remove it from the list,,      * otherwise increment to next entry in list.,      *,      * @param c controller,      */,     protected void currentReturnedNull(Controller c) {,         if (c.isDone()) {,             removeCurrentElement();,         } else {,             incrementCurrent();,         },     }, ,     /**,      * Gets the SubControllers attribute of the GenericController object,      *,      * @return the SubControllers value,      */,     protected List<TestElement> getSubControllers() {,         return subControllersAndSamplers;,     }, ,     private void addElement(TestElement child) {,         subControllersAndSamplers.add(child);,     }, ,     /**,      * Empty implementation - does nothing.,      *,      * @param currentElement,      *            the current element,      * @throws NextIsNullException,      *             when the list has been completed already,      */,     protected void setCurrentElement(TestElement currentElement) throws NextIsNullException {,     }, ,     /**,      * <p>,      * Gets the element indicated by the <code>current</code> index, if one exists,,      * from the <code>subControllersAndSamplers</code> list.,      * </p>,      * <p>,      * If the <code>subControllersAndSamplers</code> list is empty,,      * then set done = true, and throw NextIsNullException.,      * </p>,      * @return the current element - or null if current index too large,      * @throws NextIsNullException if list is empty,      */,     protected TestElement getCurrentElement() throws NextIsNullException {,         if (current < subControllersAndSamplers.size()) {,             return subControllersAndSamplers.get(current);,         },         if (subControllersAndSamplers.size() == 0) {,             setDone(true);,             throw new NextIsNullException();,         },         return null;,     }, ,     protected void removeCurrentElement() {,         subControllersAndSamplers.remove(current);,     }, ,     /**,      * Increments the current pointer; called by currentReturnedNull to move the,      * controller on to its next child.,      */,     protected void incrementCurrent() {,         current++;,     }, ,     protected void resetCurrent() {,         current = 0;,     }, ,     @Override,     public void addTestElement(TestElement child) {,         if (child instanceof Controller || child instanceof Sampler) {,             addElement(child);,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public final boolean addTestElementOnce(TestElement child){,         if (children.putIfAbsent(child, DUMMY) == null) {,             addTestElement(child);,             return true;,         },         return false;,     }, ,     @Override,     public void addIterationListener(LoopIterationListener lis) {,         /*,          * A little hack - add each listener to the start of the list - this,          * ensures that the thread running the show is the first listener and,          * can modify certain values before other listeners are called.,          */,         iterationListeners.addFirst(lis);,     },     ,     /**,      * Remove listener,      */,     @Override,     public void removeIterationListener(LoopIterationListener iterationListener) {,         for (Iterator<LoopIterationListener> iterator = iterationListeners.iterator(); iterator.hasNext();) {,             LoopIterationListener listener = iterator.next();,             if(listener == iterationListener),             {,                 iterator.remove();,                 break; // can only match once,             },         },     }, ,     protected void fireIterEvents() {,         if (isFirst()) {,             fireIterationStart();,             first = false; // TODO - should this use setFirst() ?,         },     }, ,     protected void fireIterationStart() {,         LoopIterationEvent event = new LoopIterationEvent(this, getIterCount());,         for (LoopIterationListener item : iterationListeners) {,             item.iterationStart(event);,         },     }, ,     protected int getIterCount() {,         return iterCount;,     }, ,     protected void incrementIterCount() {,         iterCount++;,     }, ,     protected void resetIterCount() {,         iterCount = 0;,     },     ,     protected Object readResolve(){,         iterationListeners = new LinkedList<>();,         children = TestCompiler.IS_USE_STATIC_SET ? null : new ConcurrentHashMap<TestElement, Object>();,         subControllersAndSamplers = new ArrayList<>();, ,         return this;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/IfController.java,,63-301,[public class IfController extends GenericController implements Serializable, ThreadListener {, ,     private static final Logger logger = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 241L;, ,     private static final String NASHORN_ENGINE_NAME = "nashorn"; //$NON-NLS-1$, ,     private static final String CONDITION = "IfController.condition"; //$NON-NLS-1$, ,     private static final String EVALUATE_ALL = "IfController.evaluateAll"; //$NON-NLS-1$, ,     private static final String USE_EXPRESSION = "IfController.useExpression"; //$NON-NLS-1$,     ,     private static final String USE_RHINO_ENGINE_PROPERTY = "javascript.use_rhino"; //$NON-NLS-1$, ,     private static final boolean USE_RHINO_ENGINE = ,             JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, true) ||,             getInstance().getEngineByName(NASHORN_ENGINE_NAME) == null;, ,     ,     private static final ThreadLocal<ScriptEngine> NASHORN_ENGINE = new ThreadLocal<ScriptEngine>() {, ,         /* (non-Javadoc),          * @see java.lang.ThreadLocal#initialValue(),          */,         @Override,         protected ScriptEngine initialValue() {,             return getInstance().getEngineByName("nashorn");//$NON-NLS-N$,         },     ,     };, ,     private interface JsEvaluator {,         boolean evaluate(String testElementName, String condition);,     },     ,     private static class RhinoJsEngine implements JsEvaluator {,         @Override,         public boolean evaluate(String testElementName, String condition) {,             boolean result = false;,             // now evaluate the condition using JavaScript,             Context cx = Context.enter();,             try {,                 Scriptable scope = cx.initStandardObjects(null);,                 Object cxResultObject = cx.evaluateString(scope, condition,                 /** * conditionString ** */,                 , "<cmd>", 1, null);,                 result = computeResultFromString(condition, Context.toString(cxResultObject));,             } catch (Exception e) {,                 logger.error(testElementName+": error while processing "+ "[" + condition + "]\n", e);,             } finally {,                 Context.exit();,             },             return result;,         },     },     ,     private static class NashornJsEngine implements JsEvaluator {,         @Override,         public boolean evaluate(String testElementName, String condition) {,             try {,                 ScriptContext newContext = new SimpleScriptContext();,                 newContext.setBindings(NASHORN_ENGINE.get().createBindings(), ScriptContext.ENGINE_SCOPE);,                 Object o = NASHORN_ENGINE.get().eval(condition, newContext);,                 return computeResultFromString(condition, o.toString());,             } catch (Exception ex) {,                 logger.error(testElementName+": error while processing "+ "[" + condition + "]\n", ex);,             },             return false;,         },     },         ,     private static JsEvaluator JAVASCRIPT_EVALUATOR = USE_RHINO_ENGINE ? new RhinoJsEngine() : new NashornJsEngine();,     ,     /**,      * Initialization On Demand Holder pattern,      */,     private static class LazyHolder {,         public static final ScriptEngineManager INSTANCE = new ScriptEngineManager();,     },  ,     /**,      * @return ScriptEngineManager singleton,      */,     private static ScriptEngineManager getInstance() {,             return LazyHolder.INSTANCE;,     },     /**,      * constructor,      */,     public IfController() {,         super();,     }, ,     /**,      * constructor,      * @param condition The condition for this controller,      */,     public IfController(String condition) {,         super();,         this.setCondition(condition);,     }, ,     /**,      * Condition Accessor - this is gonna be like <code>${count} &lt; 10</code>,      * @param condition The condition for this controller,      */,     public void setCondition(String condition) {,         setProperty(new StringProperty(CONDITION, condition));,     }, ,     /**,      * Condition Accessor - this is gonna be like <code>${count} &lt; 10</code>,      * @return the condition associated with this controller,      */,     public String getCondition() {,         return getPropertyAsString(CONDITION);,     }, ,     /**,      * evaluate the condition clause log error if bad condition,      */,     private boolean evaluateCondition(String cond) {,         if(logger.isDebugEnabled()) {,             logger.debug("    getCondition() : [" + cond + "]");,         },         return JAVASCRIPT_EVALUATOR.evaluate(getName(), cond);,     }, ,     /**,      * @param condition,      * @param resultStr,      * @return boolean,      * @throws Exception,      */,     private static final boolean computeResultFromString(String condition, String resultStr) throws Exception {,         boolean result;,         switch(resultStr) {,             case "false":,                 result=false;,                 break;,             case "true":,                 result=true;,                 break;,             default:,                 throw new Exception(" BAD CONDITION :: " + condition + " :: expected true or false");,         },         if(logger.isDebugEnabled()) {,             logger.debug("    >> evaluate Condition -  [ " + condition + "] results is  [" + result + "]");,         },         return result;,     },     ,     ,     private static boolean evaluateExpression(String cond) {,         return cond.equalsIgnoreCase("true"); // $NON-NLS-1$,     }, ,     /**,      * This is overriding the parent method. IsDone indicates whether the,      * termination condition is reached. I.e. if the condition evaluates to,      * False - then isDone() returns TRUE,      */,     @Override,     public boolean isDone() {,         // boolean result = true;,         // try {,         // result = !evaluateCondition();,         // } catch (Exception e) {,         // logger.error(e.getMessage(), e);,         // },         // setDone(true);,         // return result;,         // setDone(false);,         return false;,     }, ,     /**,      * @see org.apache.jmeter.control.Controller#next(),      */,     @Override,     public Sampler next() {,         // We should only evalute the condition if it is the first,         // time ( first "iteration" ) we are called.,         // For subsequent calls, we are inside the IfControllerGroup,,         // so then we just pass the control to the next item inside the if control,         boolean result = true;,         if(isEvaluateAll() || isFirst()) {,             result = isUseExpression() ? ,                     evaluateExpression(getCondition()),                     :,                     evaluateCondition(getCondition());,         }, ,         if (result) {,             return super.next();,         },         // If-test is false, need to re-initialize indexes,         try {,             initializeSubControllers();,             return nextIsNull();,         } catch (NextIsNullException e1) {,             return null;,         },     },     ,     /**,      * {@inheritDoc},      */,     @Override,     public void triggerEndOfLoop() {,         super.initializeSubControllers();,         super.triggerEndOfLoop();,     }, ,     public boolean isEvaluateAll() {,         return getPropertyAsBoolean(EVALUATE_ALL,false);,     }, ,     public void setEvaluateAll(boolean b) {,         setProperty(EVALUATE_ALL,b);,     }, ,     public boolean isUseExpression() {,         return getPropertyAsBoolean(USE_EXPRESSION, false);,     }, ,     public void setUseExpression(boolean selected) {,         setProperty(USE_EXPRESSION, selected, false);,     },     @Override,     public void threadStarted() {,         ,     },     @Override,     public void threadFinished() {,        NASHORN_ENGINE.remove();,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/InterleaveControl.java,,41-176,[    private transient TestElement searchStart = null;, ,     private boolean currentReturnedAtLeastOne;, ,     private boolean stillSame = true;, ,     /***************************************************************************,      * Constructor for the InterleaveControl object,      **************************************************************************/,     public InterleaveControl() {,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void reInitialize() {,         setFirst(true);,         currentReturnedAtLeastOne = false;,         searchStart = null;,         stillSame = true;,         skipNext = false;,         incrementIterCount();,         recoverRunningVersion();,     }, ,     public void setStyle(int style) {,         setProperty(new IntegerProperty(STYLE, style));,     }, ,     public int getStyle() {,         return getPropertyAsInt(STYLE);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public Sampler next() {,         if (isSkipNext()) {,             reInitialize();,             return null;,         },         return super.next();,     }, ,    /**,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsAController(Controller controller) throws NextIsNullException {,         Sampler sampler = controller.next();,         if (sampler == null) {,             currentReturnedNull(controller);,             return next();,         },         currentReturnedAtLeastOne = true;,         if (getStyle() == IGNORE_SUB_CONTROLLERS) {,             incrementCurrent();,             skipNext = true;,         } else {,             searchStart = null;,         },         return sampler;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsASampler(Sampler element) throws NextIsNullException {,         skipNext = true;,         incrementCurrent();,         return element;,     }, ,     /**,      * If the current is null, reset and continue searching. The searchStart,      * attribute will break us off when we start a repeat.,      * <p>,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsNull() {,         resetCurrent();,         return next();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected void setCurrentElement(TestElement currentElement) throws NextIsNullException {,         // Set the position when next is first called, and don't overwrite,         // until reInitialize is called.,         if (searchStart == null) {,             searchStart = currentElement;,         } else if (searchStart == currentElement && !stillSame) {,             // We've gone through the whole list and are now back at the start,             // point of our search.,             reInitialize();,             throw new NextIsNullException();,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected void currentReturnedNull(Controller c) {,         if (c.isDone()) {,             removeCurrentElement();,         } else if (getStyle() == USE_SUB_CONTROLLERS) {,             incrementCurrent();,         },     }, ,     protected boolean isSkipNext() {,         return skipNext;,     }, ,     protected void setSkipNext(boolean skipNext) {,         this.skipNext = skipNext;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected void incrementCurrent() {,         if (currentReturnedAtLeastOne) {,             skipNext = true;,         },         stillSame = false;,         super.incrementCurrent();,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/LoopController.java,,54-196,[    private transient int loopCount = 0;, ,     // Cache loop value, see Bug 54467,     private transient Integer nbLoops;, ,     public LoopController() {,         setContinueForever_private(true);,     }, ,     public void setLoops(int loops) {,         setProperty(new IntegerProperty(LOOPS, loops));,     }, ,     public void setLoops(String loopValue) {,         setProperty(new StringProperty(LOOPS, loopValue));,     }, ,     public int getLoops() {,         // Evaluation occurs when nbLoops is not yet evaluated ,         // or when nbLoops is equal to special value INFINITE_LOOP_COUNT,         if(nbLoops==null || // No evaluated yet,                 nbLoops.intValue()==0 || // Last iteration led to nbLoops == 0, ,                                          // in this case as resetLoopCount will not be called, ,                                          // it leads to no further evaluations if we don't evaluate, see BUG 56276,                 nbLoops.intValue()==INFINITE_LOOP_COUNT // Number of iteration is set to infinite,                 ) {,             try {,                 JMeterProperty prop = getProperty(LOOPS);,                 nbLoops = Integer.valueOf(prop.getStringValue());,             } catch (NumberFormatException e) {,                 nbLoops = Integer.valueOf(0);,             },         },         return nbLoops.intValue();,     }, ,     public String getLoopString() {,         return getPropertyAsString(LOOPS);,     }, ,     /**,      * Determines whether the loop will return any samples if it is rerun.,      *,      * @param forever,      *            true if the loop must be reset after ending a run,      */,     public void setContinueForever(boolean forever) {,         setContinueForever_private(forever);,     }, ,     private void setContinueForever_private(boolean forever) {,         setProperty(new BooleanProperty(CONTINUE_FOREVER, forever));,     }, ,     private boolean getContinueForever() {,         return getPropertyAsBoolean(CONTINUE_FOREVER);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public Sampler next() {,         if(endOfLoop()) {,             if (!getContinueForever()) {,                 setDone(true);,             },             return null;,         },         return super.next();,     }, ,     private boolean endOfLoop() {,         final int loops = getLoops();,         return (loops > INFINITE_LOOP_COUNT) && (loopCount >= loops);,     }, ,     @Override,     protected void setDone(boolean done) {,         nbLoops = null;,         super.setDone(done);,     },     ,     /**,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsNull() throws NextIsNullException {,         reInitialize();,         if (endOfLoop()) {,             if (!getContinueForever()) {,                 setDone(true);,             } else {,                 resetLoopCount();,             },             return null;,         },         return next();,     },     ,     /**,      * {@inheritDoc},      */,     @Override,     public void triggerEndOfLoop() {,         super.triggerEndOfLoop();,         resetLoopCount();,     },     ,     protected void incrementLoopCount() {,         loopCount++;,     }, ,     protected void resetLoopCount() {,         loopCount = 0;,         nbLoops = null;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected int getIterCount() {,         return loopCount + 1;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected void reInitialize() {,         setFirst(true);,         resetCurrent();,         incrementLoopCount();,         recoverRunningVersion();,     },     ,     /**,      * Start next iteration,      */,     public void startNextLoop() {,         reInitialize();,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/OnceOnlyController.java,,37-57,[    public OnceOnlyController() {,     }, ,     /**,      * @see LoopIterationListener#iterationStart(LoopIterationEvent),      */,     @Override,     public void iterationStart(LoopIterationEvent event) {,         int numIteration = 1;,         // Bug 39509: iteration to 0 for all controller which not LoopController (and TG),         if (!(event.getSource() instanceof LoopController)) {,             numIteration = 0;,         },         if (event.getIteration() == numIteration) {,             reInitialize();,         },     }, ,     @Override,     protected Sampler nextIsNull() throws NextIsNullException {,         return null;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/RandomController.java,,30-52,[    public RandomController() {,     }, ,     /**,      * @see org.apache.jmeter.control.GenericController#resetCurrent(),      */,     @Override,     protected void resetCurrent() {,         if (getSubControllers().size() > 0) {,             current = ThreadLocalRandom.current().nextInt(this.getSubControllers().size());,         } else {,             current = 0;,         },     }, ,     /**,      * @see org.apache.jmeter.control.GenericController#incrementCurrent(),      */,     @Override,     protected void incrementCurrent() {,         super.incrementCurrent();,         current = ThreadLocalRandom.current().nextInt(this.getSubControllers().size());,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/RandomOrderController.java,,33-59,[    public RandomOrderController() {,     }, ,     /**,      * @see GenericController#initialize(),      */,     @Override,     public void initialize() {,         super.initialize();,         this.reorder();,     }, ,     /**,      * @see GenericController#reInitialize(),      */,     @Override,     protected void reInitialize() {,         super.reInitialize();,         this.reorder();,     }, ,     /**,      * Replace the subControllersAndSamplers list with a reordered ArrayList.,      */,     private void reorder() {,         Collections.shuffle(subControllersAndSamplers);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/RunTime.java,,36-136,[    private long startTime = 0;, ,     private int loopCount = 0; // for getIterCount, ,     public RunTime() {,     }, ,     public void setRuntime(long seconds) {,         setProperty(new LongProperty(SECONDS, seconds));,     }, ,     public void setRuntime(String seconds) {,         setProperty(new StringProperty(SECONDS, seconds));,     }, ,     public long getRuntime() {,         try {,             return Long.parseLong(getPropertyAsString(SECONDS));,         } catch (NumberFormatException e) {,             return 0L;,         },     }, ,     public String getRuntimeString() {,         return getPropertyAsString(SECONDS);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public boolean isDone() {,         if (getRuntime() > 0 && getSubControllers().size() > 0) {,             return super.isDone();,         },         return true; // Runtime is zero - no point staying around,     }, ,     private boolean endOfLoop() {,         return ((System.nanoTime() - startTime)/1000000000L) >= getRuntime();,     }, ,     @Override,     public Sampler next() {,         if (startTime == 0) {,             startTime = System.nanoTime();,         },         if (endOfLoop()) {,             reInitialize();// ??,             resetLoopCount();,             return null;,         },         return super.next();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsNull() throws NextIsNullException {,         reInitialize();,         if (endOfLoop()) {,             resetLoopCount();,             return null;,         },         return next();,     }, ,     protected void incrementLoopCount() {,         loopCount++;,     }, ,     protected void resetLoopCount() {,         loopCount = 0;,         startTime = 0;,     }, ,     /*,      * This is needed for OnceOnly to work like other Loop Controllers,      */,     @Override,     protected int getIterCount() {,         return loopCount + 1;,     }, ,     @Override,     protected void reInitialize() {,         setFirst(true);,         resetCurrent();,         incrementLoopCount();,         recoverRunningVersion();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void triggerEndOfLoop() {,         super.triggerEndOfLoop();,         resetLoopCount();,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/SwitchController.java,,55-124,[        super();,     }, ,     @Override,     public Sampler next() {,         if (isFirst()) { // Set the selection once per iteration,             current = getSelectionAsInt();,         },         return super.next();,     }, ,     /**,      * incrementCurrent is called when the current child (whether sampler or controller),      * has been processed.,      * <p>,      * Setting it to int.max marks the controller as having processed all its,      * children. Thus the controller processes one child per iteration.,      * <p>,      * {@inheritDoc},      */,     @Override,     protected void incrementCurrent() {,         current=Integer.MAX_VALUE;,     }, ,     public void setSelection(String inputValue) {,         setProperty(new StringProperty(SWITCH_VALUE, inputValue));,     }, ,     /*,      * Returns the selection value as a int,,      * with the value set to zero if it is out of range.,      */,     private int getSelectionAsInt() {,         int ret;,         getProperty(SWITCH_VALUE).recoverRunningVersion(null);,         String sel = getSelection();,         try {,             ret = Integer.parseInt(sel);,             if (ret < 0 || ret >= getSubControllers().size()) {,                 ret = 0;,             },         } catch (NumberFormatException e) {,             if (sel.length()==0) {,                 ret = 0;,             } else {,                 ret = scanControllerNames(sel);,             },         },         return ret;,     }, ,     private int scanControllerNames(String sel){,         int i = 0;,         int default_pos = Integer.MAX_VALUE;,         for(TestElement el : getSubControllers()) {,             String name=el.getName();,             if (name.equals(sel)) {,                 return i;,             },              if (name.equalsIgnoreCase("default")) {  //$NON-NLS-1$,                  default_pos = i;,              },             i++;,         },         return default_pos;,     }, ,     public String getSelection() {,         return getPropertyAsString(SWITCH_VALUE);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/TestFragmentController.java,,23-23,[public class TestFragmentController extends GenericController implements Serializable {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/ThroughputController.java,,49-280,[    private static final Logger log = LoggingManager.getLoggerForClass();,     public static final int BYNUMBER = 0;, ,     public static final int BYPERCENT = 1;, ,     private static final String STYLE = "ThroughputController.style";// $NON-NLS-1$, ,     private static final String PERTHREAD = "ThroughputController.perThread";// $NON-NLS-1$, ,     private static final String MAXTHROUGHPUT = "ThroughputController.maxThroughput";// $NON-NLS-1$, ,     private static final String PERCENTTHROUGHPUT = "ThroughputController.percentThroughput";// $NON-NLS-1$, ,     private static class MutableInteger{,         private int integer;,         MutableInteger(int value){,             integer=value;,         },         int incr(){,             return ++integer;,         },         public int intValue() {,             return integer;,         },     }, ,     // These items are shared between threads in a group by the clone() method,     // They are initialised by testStarted() so don't need to be serialised,     private transient MutableInteger globalNumExecutions;, ,     private transient MutableInteger globalIteration;, ,     private transient Object counterLock = new Object(); // ensure counts are updated correctly, ,     /**,      * Number of iterations on which we've chosen to deliver samplers.,      */,     private int numExecutions = 0;, ,     /**,      * Index of the current iteration. 0-based.,      */,     private int iteration = -1;, ,     /**,      * Whether to deliver samplers on this iteration.,      */,     private boolean runThisTime;, ,     public ThroughputController() {,         setStyle(BYNUMBER);,         setPerThread(true);,         setMaxThroughput(1);,         setPercentThroughput(100);,         runThisTime = false;,     }, ,     public void setStyle(int style) {,         setProperty(new IntegerProperty(STYLE, style));,     }, ,     public int getStyle() {,         return getPropertyAsInt(STYLE);,     }, ,     public void setPerThread(boolean perThread) {,         setProperty(new BooleanProperty(PERTHREAD, perThread));,     }, ,     public boolean isPerThread() {,         return getPropertyAsBoolean(PERTHREAD);,     }, ,     public void setMaxThroughput(int maxThroughput) {,         setProperty(new IntegerProperty(MAXTHROUGHPUT, maxThroughput));,     }, ,     public void setMaxThroughput(String maxThroughput) {,         setProperty(new StringProperty(MAXTHROUGHPUT, maxThroughput));,     }, ,     public String getMaxThroughput() {,         return getPropertyAsString(MAXTHROUGHPUT);,     }, ,     protected int getMaxThroughputAsInt() {,         JMeterProperty prop = getProperty(MAXTHROUGHPUT);,         int retVal = 1;,         if (prop instanceof IntegerProperty) {,             retVal = ((IntegerProperty) prop).getIntValue();,         } else {,             try {,                 retVal = Integer.parseInt(prop.getStringValue());,             } catch (NumberFormatException e) {,                 log.warn("Error parsing "+prop.getStringValue(),e);,             },         },         return retVal;,     }, ,     public void setPercentThroughput(float percentThroughput) {,         setProperty(new FloatProperty(PERCENTTHROUGHPUT, percentThroughput));,     }, ,     public void setPercentThroughput(String percentThroughput) {,         setProperty(new StringProperty(PERCENTTHROUGHPUT, percentThroughput));,     }, ,     public String getPercentThroughput() {,         return getPropertyAsString(PERCENTTHROUGHPUT);,     }, ,     protected float getPercentThroughputAsFloat() {,         JMeterProperty prop = getProperty(PERCENTTHROUGHPUT);,         float retVal = 100;,         if (prop instanceof FloatProperty) {,             retVal = ((FloatProperty) prop).getFloatValue();,         } else {,             try {,                 retVal = Float.parseFloat(prop.getStringValue());,             } catch (NumberFormatException e) {,                 log.warn("Error parsing "+prop.getStringValue(),e);,             },         },         return retVal;,     }, ,     private int getExecutions() {,         if (!isPerThread()) {,             synchronized (counterLock) {,                 return globalNumExecutions.intValue();,             },         },         return numExecutions;,     }, ,     /**,      * @see org.apache.jmeter.control.Controller#next(),      */,     @Override,     public Sampler next() {,         if (runThisTime) {,             return super.next();,         },         return null;,     }, ,     /**,      * Decide whether to return any samplers on this iteration.,      */,     private boolean decide(int executions, int iterations) {,         if (getStyle() == BYNUMBER) {,             return executions < getMaxThroughputAsInt();,         },         return (100.0 * executions + 50.0) / (iterations + 1) < getPercentThroughputAsFloat();,     }, ,     /**,      * @see org.apache.jmeter.control.Controller#isDone(),      */,     @Override,     public boolean isDone() {,         if (subControllersAndSamplers.size() == 0) {,             return true;,         } else if (getStyle() == BYNUMBER && getExecutions() >= getMaxThroughputAsInt(),                 && current >= getSubControllers().size()) {,             return true;,         } else {,             return false;,         },     }, ,     @Override,     public Object clone() {,         ThroughputController clone = (ThroughputController) super.clone();,         clone.numExecutions = numExecutions;,         clone.iteration = iteration;,         clone.runThisTime = false;,         // Ensure global counters and lock are shared across threads in the group,         clone.globalIteration = globalIteration;,         clone.globalNumExecutions = globalNumExecutions;,         clone.counterLock = counterLock;,         return clone;,     }, ,     @Override,     public void iterationStart(LoopIterationEvent iterEvent) {,         if (!isPerThread()) {,             synchronized (counterLock) {,                 globalIteration.incr();,                 runThisTime = decide(globalNumExecutions.intValue(), globalIteration.intValue());,                 if (runThisTime) {,                     globalNumExecutions.incr();,                 },             },         } else {,             iteration++;,             runThisTime = decide(numExecutions, iteration);,             if (runThisTime) {,                 numExecutions++;,             },         },     }, ,     @Override,     public void testStarted() {,         synchronized (counterLock) {,             globalNumExecutions = new MutableInteger(0);,             globalIteration = new MutableInteger(-1);,         },     }, ,     @Override,     public void testStarted(String host) {,         testStarted();,     }, ,     @Override,     public void testEnded() {,         // NOOP,     }, ,     @Override,     public void testEnded(String host) {,         // NOOP,     },     ,     @Override,     protected Object readResolve(){,         super.readResolve();,         counterLock = new Object();,         return this;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/TransactionController.java,,53-335,[    private static final String TRUE = Boolean.toString(true); // i.e. "true", ,     private static final String PARENT = "TransactionController.parent";// $NON-NLS-1$, ,     private static final String INCLUDE_TIMERS = "TransactionController.includeTimers";// $NON-NLS-1$,     ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final boolean DEFAULT_VALUE_FOR_INCLUDE_TIMERS = true; // default true for compatibility, ,     /**,      * Only used in parent Mode,      */,     private transient TransactionSampler transactionSampler;,     ,     /**,      * Only used in NON parent Mode,      */,     private transient ListenerNotifier lnf;, ,     /**,      * Only used in NON parent Mode,      */,     private transient SampleResult res;,     ,     /**,      * Only used in NON parent Mode,      */,     private transient int calls;,     ,     /**,      * Only used in NON parent Mode,      */,     private transient int noFailingSamples;, ,     /**,      * Cumulated pause time to excluse timer and post/pre processor times,      * Only used in NON parent Mode,      */,     private transient long pauseTime;, ,     /**,      * Previous end time,      * Only used in NON parent Mode,      */,     private transient long prevEndTime;, ,     /**,      * Creates a Transaction Controller,      */,     public TransactionController() {,         lnf = new ListenerNotifier();,     }, ,     @Override,     protected Object readResolve(){,         super.readResolve();,         lnf = new ListenerNotifier();,         return this;,     }, ,     public void setParent(boolean _parent){,         setProperty(new BooleanProperty(PARENT, _parent));,     }, ,     public boolean isParent(){,         return getPropertyAsBoolean(PARENT);,     }, ,     /**,      * @see org.apache.jmeter.control.Controller#next(),      */,     @Override,     public Sampler next(){,         if (isParent()){,             return next1();,         },         return next2();,     }, , ///////////////// Transaction Controller - parent ////////////////, ,     private Sampler next1() {,         // Check if transaction is done,         if(transactionSampler != null && transactionSampler.isTransactionDone()) {,             if (log.isDebugEnabled()) {,                 log.debug("End of transaction " + getName());,             },             // This transaction is done,             transactionSampler = null;,             return null;,         }, ,         // Check if it is the start of a new transaction,         if (isFirst()) // must be the start of the subtree,         {,             if (log.isDebugEnabled()) {,                 log.debug("Start of transaction " + getName());,             },             transactionSampler = new TransactionSampler(this, getName());,         }, ,         // Sample the children of the transaction,         Sampler subSampler = super.next();,         transactionSampler.setSubSampler(subSampler);,         // If we do not get any sub samplers, the transaction is done,         if (subSampler == null) {,             transactionSampler.setTransactionDone();,         },         return transactionSampler;,     }, ,     @Override,     protected Sampler nextIsAController(Controller controller) throws NextIsNullException {,         if (!isParent()) {,             return super.nextIsAController(controller);,         },         Sampler returnValue;,         Sampler sampler = controller.next();,         if (sampler == null) {,             currentReturnedNull(controller);,             // We need to call the super.next, instead of this.next, which is done in GenericController,,             // because if we call this.next(), it will return the TransactionSampler, and we do not want that.,             // We need to get the next real sampler or controller,             returnValue = super.next();,         } else {,             returnValue = sampler;,         },         return returnValue;,     }, , ////////////////////// Transaction Controller - additional sample //////////////////////////////, ,     private Sampler next2() {,         if (isFirst()) // must be the start of the subtree,         {,             calls = 0;,             noFailingSamples = 0;,             res = new SampleResult();,             res.setSampleLabel(getName());,             // Assume success,             res.setSuccessful(true);,             res.sampleStart();,             prevEndTime = res.getStartTime();//???,             pauseTime = 0;,         },         boolean isLast = current==super.subControllersAndSamplers.size();,         Sampler returnValue = super.next();,         if (returnValue == null && isLast) // Must be the end of the controller,         {,             if (res != null) {,                 // See BUG 55816,                 if (!isIncludeTimers()) {,                     long processingTimeOfLastChild = res.currentTimeInMillis() - prevEndTime;,                     pauseTime += processingTimeOfLastChild;,                 },                 res.setIdleTime(pauseTime+res.getIdleTime());,                 res.sampleEnd();,                 res.setResponseMessage(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX + calls + ", number of failing samples : " + noFailingSamples);,                 if(res.isSuccessful()) {,                     res.setResponseCodeOK();,                 },                 notifyListeners();,             },         },         else {,             // We have sampled one of our children,             calls++;,         }, ,         return returnValue;,     },     ,     /**,      * @param res {@link SampleResult},      * @return true if res is the ParentSampler transactions,      */,     public static final boolean isFromTransactionController(SampleResult res) {,         return res.getResponseMessage() != null && ,                 res.getResponseMessage().startsWith(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX);,     }, ,     /**,      * @see org.apache.jmeter.control.GenericController#triggerEndOfLoop(),      */,     @Override,     public void triggerEndOfLoop() {,         if(!isParent()) {,             if (res != null) {,                 res.setIdleTime(pauseTime+res.getIdleTime());,                 res.sampleEnd();,                 res.setSuccessful(TRUE.equals(JMeterContextService.getContext().getVariables().get(JMeterThread.LAST_SAMPLE_OK)));,                 res.setResponseMessage(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX + calls + ", number of failing samples : " + noFailingSamples);,                 notifyListeners();,             },         } else {,             Sampler subSampler = transactionSampler.getSubSampler();,             // See Bug 56811,             // triggerEndOfLoop is called when error occurs to end Main Loop,             // in this case normal workflow doesn't happen, so we need ,             // to notify the childs of TransactionController and ,             // update them with SubSamplerResult,             if(subSampler instanceof TransactionSampler) {,                 TransactionSampler tc = (TransactionSampler) subSampler;,                 tc.getTransactionController().triggerEndOfLoop();,                 transactionSampler.addSubSamplerResult(tc.getTransactionResult());,             },             transactionSampler.setTransactionDone();,             // This transaction is done,             transactionSampler = null;,         },         super.triggerEndOfLoop();,     }, ,     /**,      * Create additional SampleEvent in NON Parent Mode,      */,     protected void notifyListeners() {,         // TODO could these be done earlier (or just once?),         JMeterContext threadContext = getThreadContext();,         JMeterVariables threadVars = threadContext.getVariables();,         SamplePackage pack = (SamplePackage) threadVars.getObject(JMeterThread.PACKAGE_OBJECT);,         if (pack == null) {,             // If child of TransactionController is a ThroughputController and TPC does,             // not sample its children, then we will have this,             // TODO Should this be at warn level ?,             log.warn("Could not fetch SamplePackage");,         } else {,             SampleEvent event = new SampleEvent(res, threadContext.getThreadGroup().getName(),threadVars, true);,             // We must set res to null now, before sending the event for the transaction,,             // so that we can ignore that event in our sampleOccured method,             res = null;,             lnf.notifyListeners(event, pack.getSampleListeners());,         },     }, ,     @Override,     public void sampleOccurred(SampleEvent se) {,         if (!isParent()) {,             // Check if we are still sampling our children,             if(res != null && !se.isTransactionSampleEvent()) {,                 SampleResult sampleResult = se.getResult();,                 res.setThreadName(sampleResult.getThreadName());,                 res.setBytes(res.getBytes() + sampleResult.getBytes());,                 if (!isIncludeTimers()) {// Accumulate waiting time for later,                     pauseTime += sampleResult.getEndTime() - sampleResult.getTime() - prevEndTime;,                     prevEndTime = sampleResult.getEndTime();,                 },                 if(!sampleResult.isSuccessful()) {,                     res.setSuccessful(false);,                     noFailingSamples++;,                 },                 res.setAllThreads(sampleResult.getAllThreads());,                 res.setGroupThreads(sampleResult.getGroupThreads());,                 res.setLatency(res.getLatency() + sampleResult.getLatency());,                 res.setConnectTime(res.getConnectTime() + sampleResult.getConnectTime());,             },         },     }, ,     @Override,     public void sampleStarted(SampleEvent e) {,     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,     }, ,     /**,      * Whether to include timers and pre/post processor time in overall sample.,      * @param includeTimers Flag whether timers and pre/post processor should be included in overall sample,      */,     public void setIncludeTimers(boolean includeTimers) {,         setProperty(INCLUDE_TIMERS, includeTimers, DEFAULT_VALUE_FOR_INCLUDE_TIMERS);,     }, ,     /**,      * Whether to include timer and pre/post processor time in overall sample.,      *,      * @return boolean (defaults to true for backwards compatibility),      */,     public boolean isIncludeTimers() {,         return getPropertyAsBoolean(INCLUDE_TIMERS, DEFAULT_VALUE_FOR_INCLUDE_TIMERS);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/control/WhileController.java,,35-130,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L;, ,     private static final String CONDITION = "WhileController.condition"; // $NON-NLS-1$, ,     public WhileController() {,     }, ,     /*,      * Evaluate the condition, which can be:,      * blank or LAST = was the last sampler OK?,      * otherwise, evaluate the condition to see if it is not "false",      * If blank, only evaluate at the end of the loop,      *,      * Must only be called at start and end of loop,      *,      * @param loopEnd - are we at loop end?,      * @return true means OK to continue,      */,     private boolean endOfLoop(boolean loopEnd) {,         String cnd = getCondition().trim();,         if(log.isDebugEnabled()) {,             log.debug("Condition string:" + cnd+".");,         },         boolean res;,         // If blank, only check previous sample when at end of loop,         if ((loopEnd && cnd.length() == 0) || "LAST".equalsIgnoreCase(cnd)) {// $NON-NLS-1$,             JMeterVariables threadVars = JMeterContextService.getContext().getVariables();,             res = "false".equalsIgnoreCase(threadVars.get(JMeterThread.LAST_SAMPLE_OK));// $NON-NLS-1$,         } else {,             // cnd may be null if next() called us,             res = "false".equalsIgnoreCase(cnd);// $NON-NLS-1$,         },         if(log.isDebugEnabled()) {,             log.debug("Condition value: " + res);,         },         return res;,     }, ,     /**,      * Only called at End of Loop,      * <p>,      * {@inheritDoc},      */,     @Override,     protected Sampler nextIsNull() throws NextIsNullException {,         reInitialize();,         if (endOfLoop(true)){,             return null;,         },         return next();,     },     ,     /**,      * {@inheritDoc},      */,     @Override,     public void triggerEndOfLoop() {,         super.triggerEndOfLoop();,         endOfLoop(true);,     }, ,     /**,      * This skips controller entirely if the condition is false on first entry.,      * <p>,      * {@inheritDoc},      */,     @Override,     public Sampler next(){,         if (isFirst()){,             if (endOfLoop(false)){,                 return null;,             },         },         return super.next();,     }, ,     /**,      * @param string,      *            the condition to save,      */,     public void setCondition(String string) {,         if(log.isDebugEnabled()) {,             log.debug("setCondition(" + string + ")");,         },         setProperty(new StringProperty(CONDITION, string));,     }, ,     /**,      * @return the condition,      */,     public String getCondition() {,         JMeterProperty prop=getProperty(CONDITION);,         prop.recoverRunningVersion(this);,         return prop.getStringValue();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/ForeachControlPanel.java,configure,120-120,[        inputVal.setText(((ForeachController) element).getInputValString());],,configure,121-121,[        startIndex.setText(((ForeachController) element).getStartIndexAsString());],,configure,122-122,[        endIndex.setText(((ForeachController) element).getEndIndexAsString());],,configure,123-123,[        returnVal.setText(((ForeachController) element).getReturnValString());],,configure,124-124,[        useSeparator.setSelected(((ForeachController) element).getUseSeparator());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/IncludeControllerGui.java,configure,59-59,[        IncludeController controller = (IncludeController) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/IncludeControllerGui.java,modifyTestElement,79-79,[        IncludeController controller = (IncludeController)element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/InterleaveControlGui.java,configure,40-40,[        if (((InterleaveControl) el).getStyle() == InterleaveControl.IGNORE_SUB_CONTROLLERS) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/InterleaveControlGui.java,modifyTestElement,65-65,[            ((InterleaveControl) ic).setStyle(InterleaveControl.USE_SUB_CONTROLLERS);],,modifyTestElement,63-63,[            ((InterleaveControl) ic).setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/ModuleControllerGui.java,configure,143-143,[        ModuleController controller = (ModuleController) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/ModuleControllerGui.java,modifyTestElement,199-199,[                ((ModuleController) element).setSelectedNode(selected);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/control/gui/ModuleControllerGui.java,modifyTestElement,196-196,[            if (selected != null ],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/RandomControlGui.java,configure,72-72,[        if (((RandomController) el).getStyle() == InterleaveControl.IGNORE_SUB_CONTROLLERS) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/RandomControlGui.java,modifyTestElement,56-56,[            ((RandomController) ic).setStyle(InterleaveControl.USE_SUB_CONTROLLERS);],,modifyTestElement,54-54,[            ((RandomController) ic).setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/SwitchControllerGui.java,configure,72-72,[        switchValue.setText(((SwitchController) el).getSelection());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/SwitchControllerGui.java,modifyTestElement,57-57,[        ((SwitchController) ic).setSelection(switchValue.getText());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/control/gui/TestPlanGui.java,configure,165-165,[            if (udv != null) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/ThroughputControllerGui.java,configure,111-111,[        if (((ThroughputController) el).getStyle() == ThroughputController.BYNUMBER) {],,configure,116-116,[            throughput.setText(((ThroughputController) el).getPercentThroughput());],,configure,113-113,[            throughput.setText(((ThroughputController) el).getMaxThroughput());],,configure,118-118,[        perthread.setSelected(((ThroughputController) el).isPerThread());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/ThroughputControllerGui.java,modifyTestElement,79-79,[        ((ThroughputController) tc).setStyle(style);],,modifyTestElement,80-80,[        ((ThroughputController) tc).setPerThread(isPerThread);],,modifyTestElement,90-90,[                ((ThroughputController) tc).setPercentThroughput(Float.parseFloat(throughput.getText().trim()));],,modifyTestElement,83-83,[                ((ThroughputController) tc).setMaxThroughput(Integer.parseInt(throughput.getText().trim()));],,modifyTestElement,92-92,[                ((ThroughputController) tc).setPercentThroughput(throughput.getText());],,modifyTestElement,86-86,[                ((ThroughputController) tc).setMaxThroughput(throughput.getText().trim().split("\\.")[0]); // $NON-NLS-1$],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/TransactionControllerGui.java,configure,59-59,[        parent.setSelected(((TransactionController) el).isParent());],,configure,60-60,[        includeTimers.setSelected(((TransactionController) el).isIncludeTimers());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/TransactionControllerGui.java,modifyTestElement,67-67,[        ((TransactionController) el).setParent(parent.isSelected());],,modifyTestElement,68-68,[        TransactionController tc = ((TransactionController) el);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/control/gui/WorkBenchGui.java,modifyTestElement,79-79,[        ((WorkBench)wb).setSaveWorkBench(saveWorkBench.isSelected());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/engine/ClientJMeterEngine.java,reset,101-101,[        } catch (Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/engine/DistributedRunner.java,<init>,58-58,[    private PrintStream stdout = new PrintStream(new SilentOutputStream());],,<init>,59-59,[    private PrintStream stderr = new PrintStream(new SilentOutputStream());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/engine/DistributedRunner.java,getClientEngine,219-219,[        } catch (Exception ex) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/engine/JMeterEngineException.java,,30-43,[        super();,     }, ,     public JMeterEngineException(String msg) {,         super(msg);,     }, ,     public JMeterEngineException(Throwable t) {,         super(t);,     }, ,     public JMeterEngineException(String msg, Throwable t) {,         super(msg, t);,     }],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/engine/StandardJMeterEngine.java,startThreadGroup,489-489,[        ListedHashTree threadGroupTree = (ListedHashTree) searcher.getSubTree(group);],,
BAD_PRACTICE,DM_EXIT,org/apache/jmeter/engine/StandardJMeterEngine.java,run,452-452,[            System.exit(0);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/engine/StandardJMeterEngine.java,<init>,161-161,[        engine = this;],,
BAD_PRACTICE,DM_EXIT,org/apache/jmeter/engine/StandardJMeterEngine.java,run,564-564,[                    System.exit(0);],,
BAD_PRACTICE,DM_EXIT,org/apache/jmeter/engine/StandardJMeterEngine.java,run,286-286,[                            System.exit(1);],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/jmeter/engine/StandardJMeterEngine.java,run,277-277,[                pause(10 * countStillActiveThreads());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/engine/util/CompoundVariable.java,<clinit>,91-91,[        } catch (Exception err) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/BSFPostProcessor.java,,29-48,[public class BSFPostProcessor extends BSFTestElement implements Cloneable, PostProcessor, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L;, ,     @Override,     public void process(){,         BSFManager mgr =null;,         try {,             mgr = getManager();,             processFileOrScript(mgr);,         } catch (BSFException e) {,             log.warn("Problem in BSF script "+e);,         } finally {,             if (mgr != null) {,                 mgr.terminate();,             },         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/BeanShellPostProcessor.java,,32-68,[public class BeanShellPostProcessor extends BeanShellTestElement,     implements Cloneable, PostProcessor, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     // can be specified in jmeter.properties,     private static final String INIT_FILE = "beanshell.postprocessor.init"; //$NON-NLS-1$, ,     @Override,     protected String getInitFileProperty() {,         return INIT_FILE;,     }, ,      @Override,     public void process() {,         JMeterContext jmctx = JMeterContextService.getContext();, ,         SampleResult prev = jmctx.getPreviousResult();,         if (prev == null) {,             return; // TODO - should we skip processing here?,         },         final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();,         if (bshInterpreter == null) {,             log.error("BeanShell not found");,             return;,         }, ,         try {,             // Add variables for access to context and variables,             bshInterpreter.set("data", prev.getResponseData());//$NON-NLS-1$,             processFileOrScript(bshInterpreter);,         } catch (JMeterException e) {,             log.warn("Problem in BeanShell script "+e);,         },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/extractor/DebugPostProcessor.java,,109-115,[        Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){,             @Override,             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {,                 String m1,m2;,                 m1=(String)o1.getKey();,                 m2=(String)o2.getKey();,                 return m1.compareTo(m2);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/HtmlExtractor.java,,40-314,[public class HtmlExtractor extends AbstractScopedTestElement implements PostProcessor, Serializable {, ,     public static final String EXTRACTOR_JSOUP = "JSOUP"; //$NON-NLS-1$, ,     public static final String EXTRACTOR_JODD = "JODD"; //$NON-NLS-1$, ,     /**,      * Get the possible extractor implementations,      * @return Array containing the names of the possible extractors.,      */,     public static String[] getImplementations(){,         return new String[]{EXTRACTOR_JSOUP,EXTRACTOR_JODD};,     }, ,     public static final String DEFAULT_EXTRACTOR = ""; // $NON-NLS-1$, ,     /**,      * ,      */,     private static final long serialVersionUID = 3978073849365558131L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String EXPRESSION = "HtmlExtractor.expr"; // $NON-NLS-1$, ,     private static final String ATTRIBUTE = "HtmlExtractor.attribute"; // $NON-NLS-1$, ,     private static final String REFNAME = "HtmlExtractor.refname"; // $NON-NLS-1$, ,     private static final String MATCH_NUMBER = "HtmlExtractor.match_number"; // $NON-NLS-1$, ,     private static final String DEFAULT = "HtmlExtractor.default"; // $NON-NLS-1$, ,     private static final String EXTRACTOR_IMPL = "HtmlExtractor.extractor_impl"; // $NON-NLS-1$, ,     private static final String REF_MATCH_NR = "_matchNr"; // $NON-NLS-1$,     ,     private static final String UNDERSCORE = "_";  // $NON-NLS-1$,     ,     private Extractor extractor;, ,     /**,      * Parses the response data using CSS/JQuery expressions and saving the results,      * into variables for use later in the test.,      *,      * @see org.apache.jmeter.processor.PostProcessor#process(),      */,     @Override,     public void process() {,         JMeterContext context = getThreadContext();,         SampleResult previousResult = context.getPreviousResult();,         if (previousResult == null) {,             return;,         },         log.debug("HtmlExtractor "+getName()+":processing result");, ,         // Fetch some variables,         JMeterVariables vars = context.getVariables();,         ,         String refName = getRefName();,         String expression = getExpression();,         String attribute = getAttribute();,         int matchNumber = getMatchNumber();,         final String defaultValue = getDefaultValue();,         ,         if (defaultValue.length() > 0){// Only replace default if it is provided,             vars.put(refName, defaultValue);,         },         ,         try {            ,             List<String> matches = ,                     extractMatchingStrings(vars, expression, attribute, matchNumber, previousResult);,             int prevCount = 0;,             String prevString = vars.get(refName + REF_MATCH_NR);,             if (prevString != null) {,                 vars.remove(refName + REF_MATCH_NR);// ensure old value is not left defined,                 try {,                     prevCount = Integer.parseInt(prevString);,                 } catch (NumberFormatException e1) {,                     log.warn(getName()+":Could not parse "+prevString+" "+e1);,                 },             },             int matchCount=0;// Number of refName_n variable sets to keep,             String match;,             if (matchNumber >= 0) {// Original match behaviour,                 match = getCorrectMatch(matches, matchNumber);,                 if (match != null) {,                     vars.put(refName, match);,                 } ,             } else // < 0 means we save all the matches,             {,                 matchCount = matches.size();,                 vars.put(refName + REF_MATCH_NR, Integer.toString(matchCount));// Save the count,                 for (int i = 1; i <= matchCount; i++) {,                     match = getCorrectMatch(matches, i);,                     if (match != null) {,                         final String refName_n = new StringBuilder(refName).append(UNDERSCORE).append(i).toString();,                         vars.put(refName_n, match);,                     },                 },             },             // Remove any left-over variables,             for (int i = matchCount + 1; i <= prevCount; i++) {,                 final String refName_n = new StringBuilder(refName).append(UNDERSCORE).append(i).toString();,                 vars.remove(refName_n);,             },         } catch (RuntimeException e) {,             log.warn(getName()+":Error while generating result " + e);,         }, ,     }, ,     /**,      * Grab the appropriate result from the list.,      *,      * @param matches,      *            list of matches,      * @param entry,      *            the entry number in the list,      * @return MatchResult,      */,     private String getCorrectMatch(List<String> matches, int entry) {,         int matchSize = matches.size();, ,         if (matchSize <= 0 || entry > matchSize){,             return null;,         }, ,         if (entry == 0) // Random match,         {,             return matches.get(JMeterUtils.getRandomInt(matchSize));,         }, ,         return matches.get(entry - 1);,     }, ,     private List<String> extractMatchingStrings(JMeterVariables vars,,             String expression, String attribute, int matchNumber,,             SampleResult previousResult) {,         int found = 0;,         List<String> result = new ArrayList<>();,         if (isScopeVariable()){,             String inputString=vars.get(getVariableName());,             if(!StringUtils.isEmpty(inputString)) {,                 getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, "-1");,             } else {,                 if(inputString==null) {,                     log.warn("No variable '"+getVariableName()+"' found to process by Css/JQuery Extractor '"+getName()+"', skipping processing");,                 },                 return Collections.emptyList();,             } ,         } else {,             List<SampleResult> sampleList = getSampleList(previousResult);,             int i=0;,             for (SampleResult sr : sampleList) {,                 String inputString = sr.getResponseDataAsString();,                 found = getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found,,                         i>0 ? null : Integer.toString(i));,                 i++;,                 if (matchNumber > 0 && found == matchNumber){// no need to process further,                     break;,                 },             },         },         return result;,     },     ,     /**,      * @param impl Extractor implementation,      * @return Extractor,      */,     public static final Extractor getExtractorImpl(String impl) {,         boolean useDefaultExtractor = DEFAULT_EXTRACTOR.equals(impl);,         if (useDefaultExtractor || EXTRACTOR_JSOUP.equals(impl)) {,             return new JSoupExtractor();,         } else if (EXTRACTOR_JODD.equals(impl)) {,             return new JoddExtractor();,         } else {,             throw new IllegalArgumentException("Extractor implementation:"+ impl+" is unknown");,         },     },     ,     /**,      * ,      * @return Extractor,      */,     private Extractor getExtractorImpl() {,         if (extractor == null) {,             extractor = getExtractorImpl(getExtractor());,         },         return extractor;,     },     , ,     /**,      * Set the extractor. Has to be one of the list that can be obtained by,      * {@link HtmlExtractor#getImplementations()},      * ,      * @param attribute,      *            The name of the extractor to be used,      */,     public void setExtractor(String attribute) {,         setProperty(EXTRACTOR_IMPL, attribute);,     }, ,     /**,      * Get the name of the currently configured extractor,      * @return The name of the extractor currently used,      */,     public String getExtractor() {,         return getPropertyAsString(EXTRACTOR_IMPL); // $NON-NLS-1$,     }, ,     ,     public void setAttribute(String attribute) {,         setProperty(ATTRIBUTE, attribute);,     }, ,     public String getAttribute() {,         return getPropertyAsString(ATTRIBUTE, ""); // $NON-NLS-1$,     }, ,     public void setExpression(String regex) {,         setProperty(EXPRESSION, regex);,     }, ,     public String getExpression() {,         return getPropertyAsString(EXPRESSION);,     }, ,     public void setRefName(String refName) {,         setProperty(REFNAME, refName);,     }, ,     public String getRefName() {,         return getPropertyAsString(REFNAME);,     }, ,     /**,      * Set which Match to use. This can be any positive number, indicating the,      * exact match to use, or <code>0</code>, which is interpreted as meaning random.,      *,      * @param matchNumber The number of the match to be used,      */,     public void setMatchNumber(int matchNumber) {,         setProperty(new IntegerProperty(MATCH_NUMBER, matchNumber));,     }, ,     public void setMatchNumber(String matchNumber) {,         setProperty(MATCH_NUMBER, matchNumber);,     }, ,     public int getMatchNumber() {,         return getPropertyAsInt(MATCH_NUMBER);,     }, ,     public String getMatchNumberAsString() {,         return getPropertyAsString(MATCH_NUMBER);,     }, ,     /**,      * Sets the value of the variable if no matches are found,      *,      * @param defaultValue The default value for the variable,      */,     public void setDefaultValue(String defaultValue) {,         setProperty(DEFAULT, defaultValue);,     }, ,     /**,      * Get the default value for the variable if no matches are found,      * @return The default value for the variable,      */,     public String getDefaultValue() {,         return getPropertyAsString(DEFAULT);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/JSR223PostProcessor.java,,32-46,[public class JSR223PostProcessor extends JSR223TestElement implements Cloneable, PostProcessor, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L;, ,     @Override,     public void process() {,         try {,             ScriptEngine scriptEngine = getScriptEngine();,             processFileOrScript(scriptEngine, null);,         } catch (ScriptException | IOException e) {,             log.error("Problem in JSR223 script "+getName(), e);,         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/RegexExtractor.java,,47-502,[public class RegexExtractor extends AbstractScopedTestElement implements PostProcessor, Serializable {, ,     private static final long serialVersionUID = 240L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     // What to match against. N.B. do not change the string value or test plans will break!,     private static final String MATCH_AGAINST = "RegexExtractor.useHeaders"; // $NON-NLS-1$,     /*,      * Permissible values:,      *  true - match against headers,      *  false or absent - match against body (this was the original default),      *  URL - match against URL,      *  These are passed to the setUseField() method,      *,      *  Do not change these values!,     */,     public static final String USE_HDRS = "true"; // $NON-NLS-1$,     public static final String USE_REQUEST_HDRS = "request_headers"; // $NON-NLS-1$,     public static final String USE_BODY = "false"; // $NON-NLS-1$,     public static final String USE_BODY_UNESCAPED = "unescaped"; // $NON-NLS-1$,     public static final String USE_BODY_AS_DOCUMENT = "as_document"; // $NON-NLS-1$,     public static final String USE_URL = "URL"; // $NON-NLS-1$,     public static final String USE_CODE = "code"; // $NON-NLS-1$,     public static final String USE_MESSAGE = "message"; // $NON-NLS-1$, , ,     private static final String REGEX = "RegexExtractor.regex"; // $NON-NLS-1$, ,     private static final String REFNAME = "RegexExtractor.refname"; // $NON-NLS-1$, ,     private static final String MATCH_NUMBER = "RegexExtractor.match_number"; // $NON-NLS-1$, ,     private static final String DEFAULT = "RegexExtractor.default"; // $NON-NLS-1$, ,     private static final String TEMPLATE = "RegexExtractor.template"; // $NON-NLS-1$, ,     private static final String REF_MATCH_NR = "_matchNr"; // $NON-NLS-1$, ,     private static final String UNDERSCORE = "_";  // $NON-NLS-1$, ,     private transient List<Object> template;, ,     /**,      * Parses the response data using regular expressions and saving the results,      * into variables for use later in the test.,      *,      * @see org.apache.jmeter.processor.PostProcessor#process(),      */,     @Override,     public void process() {,         initTemplate();,         JMeterContext context = getThreadContext();,         SampleResult previousResult = context.getPreviousResult();,         if (previousResult == null) {,             return;,         },         log.debug("RegexExtractor processing result");, ,         // Fetch some variables,         JMeterVariables vars = context.getVariables();,         String refName = getRefName();,         int matchNumber = getMatchNumber();, ,         final String defaultValue = getDefaultValue();,         if (defaultValue.length() > 0){// Only replace default if it is provided,             vars.put(refName, defaultValue);,         },         Perl5Matcher matcher = JMeterUtils.getMatcher();,         String regex = getRegex();,         Pattern pattern = null;,         try {,             pattern = JMeterUtils.getPatternCache().getPattern(regex, Perl5Compiler.READ_ONLY_MASK);,             List<MatchResult> matches = processMatches(pattern, regex, previousResult, matchNumber, vars);,             int prevCount = 0;,             String prevString = vars.get(refName + REF_MATCH_NR);,             if (prevString != null) {,                 vars.remove(refName + REF_MATCH_NR);// ensure old value is not left defined,                 try {,                     prevCount = Integer.parseInt(prevString);,                 } catch (NumberFormatException e1) {,                     log.warn("Could not parse "+prevString+" "+e1);,                 },             },             int matchCount=0;// Number of refName_n variable sets to keep,             try {,                 MatchResult match;,                 if (matchNumber >= 0) {// Original match behaviour,                     match = getCorrectMatch(matches, matchNumber);,                     if (match != null) {,                         vars.put(refName, generateResult(match));,                         saveGroups(vars, refName, match);,                     } else {,                         // refname has already been set to the default (if present),                         removeGroups(vars, refName);,                     },                 } else // < 0 means we save all the matches,                 {,                     removeGroups(vars, refName); // remove any single matches,                     matchCount = matches.size();,                     vars.put(refName + REF_MATCH_NR, Integer.toString(matchCount));// Save the count,                     for (int i = 1; i <= matchCount; i++) {,                         match = getCorrectMatch(matches, i);,                         if (match != null) {,                             final String refName_n = new StringBuilder(refName).append(UNDERSCORE).append(i).toString();,                             vars.put(refName_n, generateResult(match));,                             saveGroups(vars, refName_n, match);,                         },                     },                 },                 // Remove any left-over variables,                 for (int i = matchCount + 1; i <= prevCount; i++) {,                     final String refName_n = new StringBuilder(refName).append(UNDERSCORE).append(i).toString();,                     vars.remove(refName_n);,                     removeGroups(vars, refName_n);,                 },             } catch (RuntimeException e) {,                 log.warn("Error while generating result");,             },         } catch (MalformedCachePatternException e) {,             log.error("Error in pattern: " + regex);,         } finally {,             JMeterUtils.clearMatcherMemory(matcher, pattern);,         },     }, ,     private String getInputString(SampleResult result) {,         String inputString = useUrl() ? result.getUrlAsString() // Bug 39707,                 : useHeaders() ? result.getResponseHeaders(),                 : useRequestHeaders() ? result.getRequestHeaders(),                 : useCode() ? result.getResponseCode() // Bug 43451,                 : useMessage() ? result.getResponseMessage() // Bug 43451,                 : useUnescapedBody() ? StringEscapeUtils.unescapeHtml4(result.getResponseDataAsString()),                 : useBodyAsDocument() ? Document.getTextFromDocument(result.getResponseData()),                 : result.getResponseDataAsString() // Bug 36898,                 ;,        if (log.isDebugEnabled()) {,            log.debug("Input = " + inputString);,        },        return inputString;,     }, ,     private List<MatchResult> processMatches(Pattern pattern, String regex, SampleResult result, int matchNumber, JMeterVariables vars) {,         if (log.isDebugEnabled()) {,             log.debug("Regex = " + regex);,         }, ,         Perl5Matcher matcher = JMeterUtils.getMatcher();,         List<MatchResult> matches = new ArrayList<>();,         int found = 0;, ,         if (isScopeVariable()){,             String inputString=vars.get(getVariableName());,             if(inputString == null) {,                 log.warn("No variable '"+getVariableName()+"' found to process by RegexExtractor '"+getName()+"', skipping processing");,                 return Collections.emptyList();,             },             matchStrings(matchNumber, matcher, pattern, matches, found,,                     inputString);,         } else {,             List<SampleResult> sampleList = getSampleList(result);,             for (SampleResult sr : sampleList) {,                 String inputString = getInputString(sr);,                 found = matchStrings(matchNumber, matcher, pattern, matches, found,,                         inputString);,                 if (matchNumber > 0 && found == matchNumber){// no need to process further,                     break;,                 },             },         },         return matches;,     }, ,     private int matchStrings(int matchNumber, Perl5Matcher matcher,,             Pattern pattern, List<MatchResult> matches, int found,,             String inputString) {,         PatternMatcherInput input = new PatternMatcherInput(inputString);,         while (matchNumber <=0 || found != matchNumber) {,             if (matcher.contains(input, pattern)) {,                 log.debug("RegexExtractor: Match found!");,                 matches.add(matcher.getMatch());,                 found++;,             } else {,                 break;,             },         },         return found;,     }, ,     /**,      * Creates the variables:<br/>,      * basename_gn, where n=0...# of groups<br/>,      * basename_g = number of groups (apart from g0),      */,     private void saveGroups(JMeterVariables vars, String basename, MatchResult match) {,         StringBuilder buf = new StringBuilder();,         buf.append(basename);,         buf.append("_g"); // $NON-NLS-1$,         int pfxlen=buf.length();,         String prevString=vars.get(buf.toString());,         int previous=0;,         if (prevString!=null){,             try {,                 previous=Integer.parseInt(prevString);,             } catch (NumberFormatException e) {,                 log.warn("Could not parse "+prevString+" "+e);,             },         },         //Note: match.groups() includes group 0,         final int groups = match.groups();,         for (int x = 0; x < groups; x++) {,             buf.append(x);,             vars.put(buf.toString(), match.group(x));,             buf.setLength(pfxlen);,         },         vars.put(buf.toString(), Integer.toString(groups-1));,         for (int i = groups; i <= previous; i++){,             buf.append(i);,             vars.remove(buf.toString());// remove the remaining _gn vars,             buf.setLength(pfxlen);,         },     }, ,     /**,      * Removes the variables:<br/>,      * basename_gn, where n=0...# of groups<br/>,      * basename_g = number of groups (apart from g0),      */,     private void removeGroups(JMeterVariables vars, String basename) {,         StringBuilder buf = new StringBuilder();,         buf.append(basename);,         buf.append("_g"); // $NON-NLS-1$,         int pfxlen=buf.length();,         // How many groups are there?,         int groups;,         try {,             groups=Integer.parseInt(vars.get(buf.toString()));,         } catch (NumberFormatException e) {,             groups=0;,         },         vars.remove(buf.toString());// Remove the group count,         for (int i = 0; i <= groups; i++) {,             buf.append(i);,             vars.remove(buf.toString());// remove the g0,g1...gn vars,             buf.setLength(pfxlen);,         },     }, ,     private String generateResult(MatchResult match) {,         StringBuilder result = new StringBuilder();,         for (Object obj : template) {,             if (log.isDebugEnabled()) {,                 log.debug("RegexExtractor: Template piece " + obj + " (" + obj.getClass().getSimpleName() + ")");,             },             if (obj instanceof Integer) {,                 result.append(match.group(((Integer) obj).intValue()));,             } else {,                 result.append(obj);,             },         },         if (log.isDebugEnabled()) {,             log.debug("Regex Extractor result = " + result.toString());,         },         return result.toString();,     }, ,     private void initTemplate() {,         if (template != null) {,             return;,         },         // Contains Strings and Integers,         List<Object> combined = new ArrayList<>();,         String rawTemplate = getTemplate();,         PatternMatcher matcher = JMeterUtils.getMatcher();,         Pattern templatePattern = JMeterUtils.getPatternCache().getPattern("\\$(\\d+)\\$"  // $NON-NLS-1$,                 , Perl5Compiler.READ_ONLY_MASK,                 & Perl5Compiler.SINGLELINE_MASK);,         if (log.isDebugEnabled()) {,             log.debug("Pattern = " + templatePattern.getPattern());,             log.debug("template = " + rawTemplate);,         },         int beginOffset = 0;,         MatchResult currentResult;,         PatternMatcherInput pinput = new PatternMatcherInput(rawTemplate);,         while(matcher.contains(pinput, templatePattern)) {,             currentResult = matcher.getMatch();,             final int beginMatch = currentResult.beginOffset(0);,             if (beginMatch > beginOffset) { // string is not empty,                 combined.add(rawTemplate.substring(beginOffset, beginMatch));,             },             combined.add(Integer.valueOf(currentResult.group(1)));// add match as Integer,             beginOffset = currentResult.endOffset(0);,         }, ,         if (beginOffset < rawTemplate.length()) { // trailing string is not empty,             combined.add(rawTemplate.substring(beginOffset, rawTemplate.length()));,         },         if (log.isDebugEnabled()){,             log.debug("Template item count: "+combined.size());,             for(Object o : combined){,                 log.debug(o.getClass().getSimpleName()+" '"+o.toString()+"'");,             },         },         template = combined;,     }, ,     /**,      * Grab the appropriate result from the list.,      *,      * @param matches,      *            list of matches,      * @param entry,      *            the entry number in the list,      * @return MatchResult,      */,     private MatchResult getCorrectMatch(List<MatchResult> matches, int entry) {,         int matchSize = matches.size();, ,         if (matchSize <= 0 || entry > matchSize){,             return null;,         }, ,         if (entry == 0) // Random match,         {,             return matches.get(JMeterUtils.getRandomInt(matchSize));,         }, ,         return matches.get(entry - 1);,     }, ,     /**,      * Set the regex to be used,      * @param regex The string representation of the regex,      */,     public void setRegex(String regex) {,         setProperty(REGEX, regex);,     }, ,     /**,      * Get the regex which is to be used,      * @return string representing the regex,      */,     public String getRegex() {,         return getPropertyAsString(REGEX);,     }, ,     /**,      * Set the prefix name of the variable to be used to store the regex matches,      * @param refName prefix of the variables to be used,      */,     public void setRefName(String refName) {,         setProperty(REFNAME, refName);,     }, ,     /**,      * Get the prefix name of the variable to be used to store the regex matches,      * @return The prefix of the variables to be used,      */,     public String getRefName() {,         return getPropertyAsString(REFNAME);,     }, ,     /**,      * Set which Match to use. This can be any positive number, indicating the,      * exact match to use, or <code>0</code>, which is interpreted as meaning,      * random.,      *,      * @param matchNumber,      *            The number of the match to be used, or <code>0</code> if a,      *            random match should be used.,      */,     public void setMatchNumber(int matchNumber) {,         setProperty(new IntegerProperty(MATCH_NUMBER, matchNumber));,     }, ,     public void setMatchNumber(String matchNumber) {,         setProperty(MATCH_NUMBER, matchNumber);,     }, ,     public int getMatchNumber() {,         return getPropertyAsInt(MATCH_NUMBER);,     }, ,     public String getMatchNumberAsString() {,         return getPropertyAsString(MATCH_NUMBER);,     }, ,     /**,      * Sets the value of the variable if no matches are found,      *,      * @param defaultValue The default value for the variable,      */,     public void setDefaultValue(String defaultValue) {,         setProperty(DEFAULT, defaultValue);,     }, ,     /**,      * Get the default value for the variable, which should be used, if no,      * matches are found,      * ,      * @return The default value for the variable,      */,     public String getDefaultValue() {,         return getPropertyAsString(DEFAULT);,     }, ,     public void setTemplate(String template) {,         setProperty(TEMPLATE, template);,     }, ,     public String getTemplate() {,         return getPropertyAsString(TEMPLATE);,     }, ,     public boolean useHeaders() {,         return USE_HDRS.equalsIgnoreCase( getPropertyAsString(MATCH_AGAINST));,     }, ,     public boolean useRequestHeaders() {,         return USE_REQUEST_HDRS.equalsIgnoreCase(getPropertyAsString(MATCH_AGAINST));,     }, ,     // Allow for property not yet being set (probably only applies to Test cases),     public boolean useBody() {,         String prop = getPropertyAsString(MATCH_AGAINST);,         return prop.length()==0 || USE_BODY.equalsIgnoreCase(prop);// $NON-NLS-1$,     }, ,     public boolean useUnescapedBody() {,         String prop = getPropertyAsString(MATCH_AGAINST);,         return USE_BODY_UNESCAPED.equalsIgnoreCase(prop);// $NON-NLS-1$,     }, ,     public boolean useBodyAsDocument() {,         String prop = getPropertyAsString(MATCH_AGAINST);,         return USE_BODY_AS_DOCUMENT.equalsIgnoreCase(prop);// $NON-NLS-1$,     }, ,     public boolean useUrl() {,         String prop = getPropertyAsString(MATCH_AGAINST);,         return USE_URL.equalsIgnoreCase(prop);,     }, ,     public boolean useCode() {,         String prop = getPropertyAsString(MATCH_AGAINST);,         return USE_CODE.equalsIgnoreCase(prop);,     }, ,     public boolean useMessage() {,         String prop = getPropertyAsString(MATCH_AGAINST);,         return USE_MESSAGE.equalsIgnoreCase(prop);,     }, ,     public void setUseField(String actionCommand) {,         setProperty(MATCH_AGAINST,actionCommand);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/XPathExtractor.java,,70-340,[public class XPathExtractor extends AbstractScopedTestElement implements,         PostProcessor, Serializable {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private static final String MATCH_NR = "matchNr"; // $NON-NLS-1$, ,     //+ JMX file attributes,     private static final String XPATH_QUERY     = "XPathExtractor.xpathQuery"; // $NON-NLS-1$,     private static final String REFNAME         = "XPathExtractor.refname"; // $NON-NLS-1$,     private static final String DEFAULT         = "XPathExtractor.default"; // $NON-NLS-1$,     private static final String TOLERANT        = "XPathExtractor.tolerant"; // $NON-NLS-1$,     private static final String NAMESPACE       = "XPathExtractor.namespace"; // $NON-NLS-1$,     private static final String QUIET           = "XPathExtractor.quiet"; // $NON-NLS-1$,     private static final String REPORT_ERRORS   = "XPathExtractor.report_errors"; // $NON-NLS-1$,     private static final String SHOW_WARNINGS   = "XPathExtractor.show_warnings"; // $NON-NLS-1$,     private static final String DOWNLOAD_DTDS   = "XPathExtractor.download_dtds"; // $NON-NLS-1$,     private static final String WHITESPACE      = "XPathExtractor.whitespace"; // $NON-NLS-1$,     private static final String VALIDATE        = "XPathExtractor.validate"; // $NON-NLS-1$,     private static final String FRAGMENT        = "XPathExtractor.fragment"; // $NON-NLS-1$,     //- JMX file attributes, , ,     private String concat(String s1,String s2){,         return new StringBuilder(s1).append("_").append(s2).toString(); // $NON-NLS-1$,     }, ,     private String concat(String s1, int i){,         return new StringBuilder(s1).append("_").append(i).toString(); // $NON-NLS-1$,     }, ,     /**,      * Do the job - extract value from (X)HTML response using XPath Query.,      * Return value as variable defined by REFNAME. Returns DEFAULT value,      * if not found.,      */,     @Override,     public void process() {,         JMeterContext context = getThreadContext();,         final SampleResult previousResult = context.getPreviousResult();,         if (previousResult == null){,             return;,         },         JMeterVariables vars = context.getVariables();,         String refName = getRefName();,         vars.put(refName, getDefaultValue());,         final String matchNR = concat(refName,MATCH_NR);,         int prevCount=0; // number of previous matches,         try {,             prevCount=Integer.parseInt(vars.get(matchNR));,         } catch (NumberFormatException e) {,             // ignored,         },         vars.put(matchNR, "0"); // In case parse fails // $NON-NLS-1$,         vars.remove(concat(refName,"1")); // In case parse fails // $NON-NLS-1$, ,         List<String> matches = new ArrayList<>();,         try{,             if (isScopeVariable()){,                 String inputString=vars.get(getVariableName());,                 if(inputString != null) {,                     if(inputString.length()>0) {,                         Document d =  parseResponse(inputString);,                         getValuesForXPath(d,getXPathQuery(),matches);,                     },                 } else {,                     log.warn("No variable '"+getVariableName()+"' found to process by XPathExtractor '"+getName()+"', skipping processing");,                 },             } else {,                 List<SampleResult> samples = getSampleList(previousResult);,                 for (SampleResult res : samples) {,                     Document d = parseResponse(res.getResponseDataAsString());,                     getValuesForXPath(d,getXPathQuery(),matches);,                 },             },             final int matchCount = matches.size();,             vars.put(matchNR, String.valueOf(matchCount));,             if (matchCount > 0){,                 String value = matches.get(0);,                 if (value != null) {,                     vars.put(refName, value);,                 },                 for(int i=0; i < matchCount; i++){,                     value = matches.get(i);,                     if (value != null) {,                         vars.put(concat(refName,i+1),matches.get(i));,                     },                 },             },             vars.remove(concat(refName,matchCount+1)); // Just in case,             // Clear any other remaining variables,             for(int i=matchCount+2; i <= prevCount; i++) {,                 vars.remove(concat(refName,i));,             },         }catch(IOException e){// e.g. DTD not reachable,             final String errorMessage = "IOException on ("+getXPathQuery()+")";,             log.error(errorMessage,e);,             AssertionResult ass = new AssertionResult(getName());,             ass.setError(true);,             ass.setFailureMessage(new StringBuilder("IOException: ").append(e.getLocalizedMessage()).toString());,             previousResult.addAssertionResult(ass);,             previousResult.setSuccessful(false);,         } catch (ParserConfigurationException e) {// Should not happen,             final String errrorMessage = "ParserConfigurationException while processing ("+getXPathQuery()+")";,             log.error(errrorMessage,e);,             throw new JMeterError(errrorMessage,e);,         } catch (SAXException e) {// Can happen for bad input document,             log.warn("SAXException while processing ("+getXPathQuery()+") "+e.getLocalizedMessage());,             addAssertionFailure(previousResult, e, false); // Should this also fail the sample?,         } catch (TransformerException e) {// Can happen for incorrect XPath expression,             log.warn("TransformerException while processing ("+getXPathQuery()+") "+e.getLocalizedMessage());,             addAssertionFailure(previousResult, e, false);,         } catch (TidyException e) {,             // Will already have been logged by XPathUtil,             addAssertionFailure(previousResult, e, true); // fail the sample,         },     }, ,     private void addAssertionFailure(final SampleResult previousResult,,             final Throwable thrown, final boolean setFailed) {,         AssertionResult ass = new AssertionResult(thrown.getClass().getSimpleName()); // $NON-NLS-1$,         ass.setFailure(true);,         ass.setFailureMessage(thrown.getLocalizedMessage()+"\nSee log file for further details.");,         previousResult.addAssertionResult(ass);,         if (setFailed){,             previousResult.setSuccessful(false);,         },     }, ,     /*============= object properties ================*/,     public void setXPathQuery(String val){,         setProperty(XPATH_QUERY,val);,     }, ,     public String getXPathQuery(){,         return getPropertyAsString(XPATH_QUERY);,     }, ,     public void setRefName(String refName) {,         setProperty(REFNAME, refName);,     }, ,     public String getRefName() {,         return getPropertyAsString(REFNAME);,     }, ,     public void setDefaultValue(String val) {,         setProperty(DEFAULT, val);,     }, ,     public String getDefaultValue() {,         return getPropertyAsString(DEFAULT);,     }, ,     public void setTolerant(boolean val) {,         setProperty(new BooleanProperty(TOLERANT, val));,     }, ,     public boolean isTolerant() {,         return getPropertyAsBoolean(TOLERANT);,     }, ,     public void setNameSpace(boolean val) {,         setProperty(new BooleanProperty(NAMESPACE, val));,     }, ,     public boolean useNameSpace() {,         return getPropertyAsBoolean(NAMESPACE);,     }, ,     public void setReportErrors(boolean val) {,             setProperty(REPORT_ERRORS, val, false);,     }, ,     public boolean reportErrors() {,         return getPropertyAsBoolean(REPORT_ERRORS, false);,     }, ,     public void setShowWarnings(boolean val) {,         setProperty(SHOW_WARNINGS, val, false);,     }, ,     public boolean showWarnings() {,         return getPropertyAsBoolean(SHOW_WARNINGS, false);,     }, ,     public void setQuiet(boolean val) {,         setProperty(QUIET, val, true);,     }, ,     public boolean isQuiet() {,         return getPropertyAsBoolean(QUIET, true);,     }, ,     /**,      * Should we return fragment as text, rather than text of fragment?,      * @return true if we should return fragment rather than text,      */,     public boolean getFragment() {,         return getPropertyAsBoolean(FRAGMENT, false);,     }, ,     /**,      * Should we return fragment as text, rather than text of fragment?,      * @param selected true to return fragment.,      */,     public void setFragment(boolean selected) {,         setProperty(FRAGMENT, selected, false);,     }, ,     /*================= internal business =================*/,     /**,      * Converts (X)HTML response to DOM object Tree.,      * This version cares of charset of response.,      * @param unicodeData,      * @return the parsed document,      *,      */,     private Document parseResponse(String unicodeData),       throws UnsupportedEncodingException, IOException, ParserConfigurationException,SAXException,TidyException,     {,       //TODO: validate contentType for reasonable types?, ,       // NOTE: responseData encoding is server specific,       //       Therefore we do byte -> unicode -> byte conversion,       //       to ensure UTF-8 encoding as required by XPathUtil,       // convert unicode String -> UTF-8 bytes,       byte[] utf8data = unicodeData.getBytes("UTF-8"); // $NON-NLS-1$,       ByteArrayInputStream in = new ByteArrayInputStream(utf8data);,       boolean isXML = JOrphanUtils.isXML(utf8data);,       // this method assumes UTF-8 input data,       return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),               ,isXML, isDownloadDTDs());,     }, ,     /**,      * Extract value from Document d by XPath query.,      * @param d the document,      * @param query the query to execute,      * @param matchStrings list of matched strings (may include nulls),      *,      * @throws TransformerException,      */,     private void getValuesForXPath(Document d,String query, List<String> matchStrings),         throws TransformerException {,         XPathUtil.putValuesForXPathInList(d, query, matchStrings, getFragment());,     }, ,     public void setWhitespace(boolean selected) {,         setProperty(WHITESPACE, selected, false);,     }, ,     public boolean isWhitespace() {,         return getPropertyAsBoolean(WHITESPACE, false);,     }, ,     public void setValidating(boolean selected) {,         setProperty(VALIDATE, selected);,     }, ,     public boolean isValidating() {,         return getPropertyAsBoolean(VALIDATE, false);,     }, ,     public void setDownloadDTDs(boolean selected) {,         setProperty(DOWNLOAD_DTDS, selected, false);,     }, ,     public boolean isDownloadDTDs() {,         return getPropertyAsBoolean(DOWNLOAD_DTDS, false);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/extractor/gui/XPathExtractorGui.java,configure,75-75,[        XPathExtractor xpe = (XPathExtractor) el;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java,process,159-159,[                } catch (Exception e) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java,,40-240,[public class JSONPostProcessor extends AbstractScopedTestElement implements Serializable, PostProcessor, ThreadListener{, ,     private static final long serialVersionUID = 1320798545214331506L;,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String JSON_PATH_EXPRESSIONS = "JSONPostProcessor.jsonPathExprs"; // $NON-NLS-1$,     private static final String REFERENCE_NAMES = "JSONPostProcessor.referenceNames"; // $NON-NLS-1$,     private static final String DEFAULT_VALUES = "JSONPostProcessor.defaultValues"; // $NON-NLS-1$,     private static final String MATCH_NUMBERS = "JSONPostProcessor.match_numbers"; // $NON-NLS-1$,     private static final String COMPUTE_CONCATENATION = "JSONPostProcessor.compute_concat"; // $NON-NLS-1$,     private static final String REF_MATCH_NR = "_matchNr"; // $NON-NLS-1$,     private static final String ALL_SUFFIX = "_ALL"; // $NON-NLS-1$, ,     private static final String JSON_CONCATENATION_SEPARATOR = ","; //$NON-NLS-1$,     private static final String SEPARATOR = ";"; // $NON-NLS-1$,     public static final boolean COMPUTE_CONCATENATION_DEFAULT_VALUE = false;,     ,     private static final ThreadLocal<JSONManager> localMatcher = new ThreadLocal<JSONManager>() {,         @Override,         protected JSONManager initialValue() {,             return new JSONManager();,         },     };, ,     @Override,     public void process() {,         JMeterContext context = getThreadContext();,         JMeterVariables vars = context.getVariables();,         String jsonResponse = "";,         if (isScopeVariable()){ ,             jsonResponse = vars.get(getVariableName());,             if(log.isDebugEnabled()) {,                 log.debug("JSON Extractor is using variable:"+getVariableName()+" which content is:"+jsonResponse);,             },         } else {,             SampleResult previousResult = context.getPreviousResult();,             if (previousResult == null) {,                 return;,             },             jsonResponse = previousResult.getResponseDataAsString();,             if(log.isDebugEnabled()) {,                 log.debug("JSON Extractor "+getName()+" working on Response:"+jsonResponse);,             },         },         String[] refNames = getRefNames().split(SEPARATOR);,         String[] jsonPathExpressions = getJsonPathExpressions().split(SEPARATOR); ,         String[] defaultValues = getDefaultValues().split(SEPARATOR);,         int[] matchNumbers = getMatchNumbersAsInt(defaultValues.length);, ,         //jsonResponse = jsonResponse.replaceAll("'", "\""); // $NON-NLS-1$  $NON-NLS-2$, ,         if (refNames.length != jsonPathExpressions.length || ,                 refNames.length != defaultValues.length) {,             log.error("Number of JSON Path variables must match number of default values and json-path expressions, check you use separator ';' if you have many values"); // $NON-NLS-1$,             throw new IllegalArgumentException(JMeterUtils.getResString("jsonpp_error_number_arguments_mismatch_error")); // $NON-NLS-1$,         } else {,             for (int i = 0; i < jsonPathExpressions.length; i++) {,                 int matchNumber = matchNumbers[i];,                 String currentRefName = refNames[i].trim();,                 String currentJsonPath = jsonPathExpressions[i].trim();,                 try {,                     if(jsonResponse.isEmpty()) {,                         vars.put(currentRefName, defaultValues[i]);,                     } else {,                         ,                         List<String> extractedValues = localMatcher.get().extractWithJsonPath(jsonResponse, currentJsonPath);,                         // if no values extracted, default value added,                         if (extractedValues.isEmpty()) {,                             vars.put(currentRefName, defaultValues[i]);,                             vars.put(currentRefName+REF_MATCH_NR, "0"); //$NON-NLS-1$,                             if(matchNumber<0 && getComputeConcatenation()) {,                                 log.debug("No value extracted, storing empty in :"+currentRefName + ALL_SUFFIX); //$NON-NLS-1$,                                 vars.put(currentRefName + ALL_SUFFIX, "");,                             },                         } else {,                             // if more than one value extracted, suffix with,                             // "_index",                             if (extractedValues.size() > 1) {,                                 if(matchNumber<0) {,                                     // Extract all,                                     int index = 1;,                                     StringBuilder concat = new StringBuilder(getComputeConcatenation()?extractedValues.size()*20:1);,                                     for (String stringExtracted : extractedValues) {,                                         vars.put(currentRefName + "_" + index, stringExtracted);,                                         if(getComputeConcatenation()) {,                                             concat.append(stringExtracted).append(JSONPostProcessor.JSON_CONCATENATION_SEPARATOR);,                                         },                                         index++;,                                     },                                     if(getComputeConcatenation()) {,                                         concat.setLength(concat.length()-1);,                                         vars.put(currentRefName + ALL_SUFFIX, concat.toString());,                                     },                                 } else if (matchNumber == 0) {,                                     // Random extraction,                                     int matchSize = extractedValues.size();,                                     vars.put(currentRefName, extractedValues.get(JMeterUtils.getRandomInt(matchSize)));,                                 } else {,                                     // extract at position,                                     if(matchNumber>extractedValues.size()) {,                                         if(log.isDebugEnabled()) {,                                             log.debug("matchNumber("+matchNumber + ") exceeds number of items found("+extractedValues.size()+"), default value will be used");,                                         },                                         vars.put(currentRefName, defaultValues[i]);,                                     } else {,                                         vars.put(currentRefName, extractedValues.get(matchNumber-1));,                                     },                                 },                             },                             else {,                                 // else just one value extracted,                                 vars.put(currentRefName, extractedValues.get(0));,                                 if(matchNumber<0 && getComputeConcatenation()) {,                                     vars.put(currentRefName + ALL_SUFFIX, extractedValues.get(0)); ,                                 },                             },                             vars.put(currentRefName+REF_MATCH_NR, Integer.toString(extractedValues.size()));,                         },                     },                 } catch (Exception e) {,                     // if something wrong, default value added,                     if (log.isDebugEnabled()) {,                         log.error("Error processing JSON content in "+ getName()+", message:"+e.getLocalizedMessage(),e);,                     } else {,                         log.error("Error processing JSON content in "+ getName()+", message:"+e.getLocalizedMessage());,                         ,                     },                     vars.put(currentRefName, defaultValues[i]);,                     continue;,                 },             },         },     }, ,     ,     public String getJsonPathExpressions() {,         return getPropertyAsString(JSON_PATH_EXPRESSIONS);,     }, ,     public void setJsonPathExpressions(String jsonPath) {,         setProperty(JSON_PATH_EXPRESSIONS, jsonPath);,     }, ,     public String getRefNames() {,         return getPropertyAsString(REFERENCE_NAMES);,     }, ,     public void setRefNames(String refName) {,         setProperty(REFERENCE_NAMES, refName);,     }, ,     public String getDefaultValues() {,         return getPropertyAsString(DEFAULT_VALUES);,     }, ,     public void setDefaultValues(String defaultValue) {,         setProperty(DEFAULT_VALUES, defaultValue, ""); // $NON-NLS-1$,     }, , ,     public boolean getComputeConcatenation() {,         return getPropertyAsBoolean(COMPUTE_CONCATENATION, COMPUTE_CONCATENATION_DEFAULT_VALUE);,     }, ,     public void setComputeConcatenation(boolean computeConcatenation) {,         setProperty(COMPUTE_CONCATENATION, computeConcatenation, COMPUTE_CONCATENATION_DEFAULT_VALUE); ,     },     ,     @Override,     public void threadStarted() {,         // NOOP,     }, ,     @Override,     public void threadFinished() {,         localMatcher.get().reset();,     }, , ,     public void setMatchNumbers(String matchNumber) {,         setProperty(MATCH_NUMBERS, matchNumber);,     }, ,     public String getMatchNumbers() {,         return getPropertyAsString(MATCH_NUMBERS);,     }, ,     public int[] getMatchNumbersAsInt(int arraySize) {,         ,         String matchNumbersAsString = getMatchNumbers();,         int[] result = new int[arraySize];,         if(JOrphanUtils.isBlank(matchNumbersAsString)) {,             Arrays.fill(result, 0);,         } else {,             String[] matchNumbersAsStringArray = ,                     matchNumbersAsString.split(SEPARATOR);,             for (int i = 0; i < matchNumbersAsStringArray.length; i++) {,                 result[i] = Integer.parseInt(matchNumbersAsStringArray[i].trim());,             },         },         return result;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/extractor/json/jsonpath/gui/JSONPostProcessorGui.java,configure,66-66,[        JSONPostProcessor config = (JSONPostProcessor) element;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/extractor/json/render/RenderAsJsonRenderer.java,setupTabPane,172-172,[        if (rightSide.indexOfTab(JMeterUtils.getResString("jsonpath_tester_title")) < 0) { // $NON-NLS-1$],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/AbstractHostIPName.java,execute,57-57,[        if (values.length >= 1){// we have a variable name],,execute,60-60,[                String varName = ((CompoundVariable) values[0]).execute().trim();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/BeanShell.java,execute,75-75,[        String script = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/CSVRead.java,execute,76-76,[        String fileName = ((org.apache.jmeter.engine.util.CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/CharFunction.java,execute,58-58,[        StringBuilder sb = new StringBuilder(values.length);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/EscapeHtml.java,execute,70-70,[        String rawString = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/EscapeOroRegexpChars.java,execute,70-70,[        String valueToEscape = values[0].execute();       ],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/EvalFunction.java,execute,63-63,[        String parameter = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/EvalVarFunction.java,execute,68-68,[        String variableName = ((CompoundVariable) values[0]).execute();],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/functions/FileRowColContainer.java,load,78-78,[            FileReader fis = new FileReader(fileName);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/FileToString.java,execute,84-84,[        String fileName = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/IntSum.java,execute,64-64,[        String varName = ((CompoundVariable) values[values.length - 1]).execute().trim(); // trim() see bug 55871],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/functions/IterationCounter.java,,52-55,[       perThreadInt = new ThreadLocal<Integer>(){,             @Override,             protected Integer initialValue() {,                 return Integer.valueOf(0);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/JavaScript.java,execute,94-94,[        String script = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/Jexl2Function.java,execute,68-68,[        CompoundVariable var = (CompoundVariable) values[0];],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/JexlFunction.java,execute,66-66,[        CompoundVariable var = (CompoundVariable) values[0];],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/LogFunction.java,execute,81-81,[        String stringToLog = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/LogFunction2.java,execute,75-75,[        String stringToLog = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/LongSum.java,execute,64-64,[        String varName = ((CompoundVariable) values[values.length - 1]).execute().trim();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/Property.java,execute,70-70,[        String propertyName = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/Property2.java,execute,74-74,[        String propertyName = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/Random.java,execute,63-63,[        long max = Long.parseLong(maximum.execute().trim());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/Random.java,execute,62-62,[        long min = Long.parseLong(minimum.execute().trim());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/RandomString.java,execute,75-75,[        int length = Integer.parseInt(values[0].execute());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/SamplerName.java,execute,57-57,[        if (values.length > 0){],,execute,60-60,[                String varName = ((CompoundVariable) values[0]).execute().trim();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/SetProperty.java,execute,69-69,[        String propertyName = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/SplitFunction.java,execute,85-85,[        String stringToSplit = ((CompoundVariable) values[0]).execute();],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/functions/StringFromFile.java,openFile,201-201,[            myBread = new BufferedReader(new FileReader(fileName));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/StringFromFile.java,execute,214-214,[        if (values.length >= PARAM_NAME) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/StringFromFile.java,openFile,140-140,[        fileName = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/UnEscape.java,execute,60-60,[        String rawString = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/UnEscapeHtml.java,execute,66-66,[        String escapedString = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/UrlDecode.java,execute,61-61,[            String rawString = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/UrlEncode.java,execute,61-61,[            String encodedString = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/Variable.java,execute,65-65,[        String variableName = ((CompoundVariable) values[0]).execute();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/functions/XPath.java,execute,75-75,[        String fileName = ((CompoundVariable) values[0]).execute();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/functions/gui/FunctionHelper.java,,118-121,[        Arrays.sort(functionNames, new Comparator<String>() {,             @Override,             public int compare(String o1, String o2) {,                 return o1.compareToIgnoreCase(o2);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/gui/GuiPackage.java,notifyChangeInHistory,858-858,[        ((JMeterToolBar)toolbar).updateUndoRedoIcons(history.canUndo(), history.canRedo());],,
MT_CORRECTNESS,LI_LAZY_INIT_UPDATE_STATIC,org/apache/jmeter/gui/GuiPackage.java,getInstance,179-180,[        if (guiPack == null) {,             guiPack = new GuiPackage(treeModel, listener);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/gui/GuiPackage.java,createTestElement,315-315,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/gui/GuiPackage.java,getGui,248-248,[        } catch (Exception e) {],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/gui/JMeterFileFilter.java,accept,75-75,[        return (allowDirs && f.isDirectory()) || accept(f.getName().toLowerCase());],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/gui/JMeterFileFilter.java,<init>,58-58,[        exts = extensions;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/gui/MainFrame.java,closeMenu,331-331,[            if (menuElement != null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/gui/MainFrame.java,,622-640,[        JTree treevar = new JTree(treeModel) {,             private static final long serialVersionUID = 240L;, ,             @Override,             public String getToolTipText(MouseEvent event) {,                 TreePath path = this.getPathForLocation(event.getX(), event.getY());,                 if (path != null) {,                     Object treeNode = path.getLastPathComponent();,                     if (treeNode instanceof DefaultMutableTreeNode) {,                         Object testElement = ((DefaultMutableTreeNode) treeNode).getUserObject();,                         if (testElement instanceof TestElement) {,                             String comment = ((TestElement) testElement).getComment();,                             if (comment != null && comment.length() > 0) {,                                 return comment;,                                 },                             },                         },                     },                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/gui/MainFrame.java,,664-695,[        Action quickComponent = new AbstractAction("Quick Component") {,             private static final long serialVersionUID = 1L;, ,             @Override,             public void actionPerformed(ActionEvent actionEvent) {,                 String propname = "gui.quick_" + actionEvent.getActionCommand();,                 String comp = JMeterUtils.getProperty(propname);,                 log.debug("Event " + propname + ": " + comp);, ,                 if (comp == null) {,                     log.warn("No component set through property: " + propname);,                     return;,                 }, ,                 GuiPackage guiPackage = GuiPackage.getInstance();,                 try {,                     guiPackage.updateCurrentNode();,                     TestElement testElement = guiPackage.createTestElement(SaveService.aliasToClass(comp));,                     JMeterTreeNode parentNode = guiPackage.getCurrentNode();,                     while (!MenuFactory.canAddTo(parentNode, testElement)) {,                         parentNode = (JMeterTreeNode) parentNode.getParent();,                     },                     if (parentNode.getParent() == null) {,                         log.debug("Cannot add element on very top level");,                     } else {,                         JMeterTreeNode node = guiPackage.getTreeModel().addComponent(testElement, parentNode);,                         guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(node.getPath()));,                     },                 } catch (Exception err) {,                     log.warn("Failed to perform quick component add: " + comp, err); // $NON-NLS-1$,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/gui/action/AboutCommand.java,,90-94,[            about.addMouseListener(new MouseAdapter() {,                 @Override,                 public void mouseClicked(MouseEvent e) {,                     about.setVisible(false);,                 }],,
MT_CORRECTNESS,DC_PARTIALLY_CONSTRUCTED,org/apache/jmeter/gui/action/ActionRouter.java,getInstance,332-332,[                    router.populateCommandMap();],,getInstance,331-331,[                    router = new ActionRouter();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jmeter/gui/action/Copy.java,getCopiedNodes,81-81,[        return null;],,
BAD_PRACTICE,DM_EXIT,org/apache/jmeter/gui/action/ExitCommand.java,doAction,69-69,[                System.exit(0);],,doAction,73-73,[                    System.exit(0);],,doAction,77-77,[            System.exit(0);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/gui/action/Help.java,doAction,77-77,[                    JMeterUtils.getResString("help"),//$NON-NLS-1$],,
STYLE,UC_USELESS_CONDITION,org/apache/jmeter/gui/action/LoadRecentProject.java,updateMenuItems,170-170,[                if (i<9) {],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java,doAction,67-67,[        JSplitPane splitPane = ((JSplitPane)guiInstance.getLoggerPanel().getParent());],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/gui/action/RawTextSearcher.java,<init>,44-44,[            this.textToSearch = textToSearch.toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/gui/action/RawTextSearcher.java,search,59-59,[                    result = searchableToken.toLowerCase().indexOf(textToSearch)>=0;],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/gui/action/RawTextSearcher.java,testField,77-77,[            return value.toLowerCase().indexOf(searchedTextLowerCase)>=0;],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/gui/action/RegexpSearcher.java,<init>,47-47,[            pattern = Pattern.compile(newRegexp.toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/gui/action/RegexpSearcher.java,search,63-63,[                    matcher = pattern.matcher(searchableToken.toLowerCase());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/jmeter/gui/action/Save.java,createBackupFile,327-327,[        backupDir.mkdirs();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/gui/action/Save.java,,364-370,[        Collections.sort(backupFiles, new Comparator<File>() {,             @Override,             public int compare(File o1, File o2) {,                 long diff = o1.lastModified() - o2.lastModified();,                 // convert the long to an int in order to comply with the method,                 // contract,                 return diff < 0 ? -1 : diff > 0 ? 1 : 0;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/gui/action/SelectTemplatesDialog.java,hyperlinkUpdate,236-236,[                } catch (Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/gui/tree/JMeterTreeListener.java,valueChanged,160-160,[        actionHandler.actionPerformed(new ActionEvent(this, 3333, ActionNames.EDIT)); // $NON-NLS-1$],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/gui/tree/JMeterTreeListener.java,removedSelectedNode,147-147,[        currentPath = currentPath.getParentPath();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/gui/tree/JMeterTreeListener.java,getSelectedNodes,134-134,[        TreePath[] paths = tree.getSelectionPaths();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/gui/tree/JMeterTreeListener.java,mousePressed,182-182,[        int selRow = tree.getRowForLocation(e.getX(), e.getY());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/gui/tree/JMeterTreeListener.java,valueChanged,159-159,[        tree.requestFocusInWindow();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java,canImport,170-170,[        JTree.DropLocation dl = (JTree.DropLocation) support.getDropLocation();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java,importData,233-233,[        JTree.DropLocation dl = (JTree.DropLocation) support.getDropLocation();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/gui/util/FileListPanel.java,actionPerformed,209-209,[            if (cfiles != null) {],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/gui/util/HeaderAsPropertyRenderer.java,<init>,52-52,[        this.columnsMsgParameters = columnsMsgParameters;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/gui/util/IconToolbarBean.java,getActionNameResolve,68-68,[        } catch (Exception e) {],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/jmeter/gui/util/JMeterMenuBar.java,getAllLAFs,688-688,[        lafsAll[i++]=new UIManager.LookAndFeelInfo(SYSTEM_LAF,UIManager.getSystemLookAndFeelClassName());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/gui/util/JMeterMenuBar.java,createMenuBar,259-259,[                } catch (Exception e) {],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/gui/util/MenuInfo.java,getClassName,54-54,[        return className;],,getClassname,69-69,[        return getPropertyAsString(JavaSampler.CLASSNAME);],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/gui/util/PowerTableModel.java,<init>,45-45,[        columnClasses = classes;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/gui/util/PowerTableModel.java,createDefaultValue,140-140,[        } catch (Exception e) {],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/gui/util/TextBoxDialoger.java,createDialogBox,106-106,[        JPanel content = (JPanel) dialog.getContentPane();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/gui/util/TristateCheckBox.java,paintIcon,309-309,[            JCheckBox cb = (JCheckBox) c;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/modifiers/BSFPreProcessor.java,,29-49,[public class BSFPreProcessor extends BSFTestElement implements Cloneable, PreProcessor, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L;, ,     @Override,     public void process(){,         BSFManager mgr =null;,         try {,             mgr = getManager();,             if (mgr == null) { return; },             processFileOrScript(mgr);,         } catch (BSFException e) {,             log.warn("Problem in BSF script "+e);,         } finally {,             if (mgr != null) {,                 mgr.terminate();,             },         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/modifiers/BeanShellPreProcessor.java,,32-63,[public class BeanShellPreProcessor extends BeanShellTestElement,     implements Cloneable, PreProcessor, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     // can be specified in jmeter.properties,     private static final String INIT_FILE = "beanshell.preprocessor.init"; //$NON-NLS-1$, ,     @Override,     protected String getInitFileProperty() {,         return INIT_FILE;,     }, ,     @Override,     public void process(){,         final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();,         if (bshInterpreter == null) {,             log.error("BeanShell not found");,             return;,         },         JMeterContext jmctx = JMeterContextService.getContext();,         Sampler sam = jmctx.getCurrentSampler();,         try {,             // Add variables for access to context and variables,             bshInterpreter.set("sampler", sam);//$NON-NLS-1$,             processFileOrScript(bshInterpreter);,         } catch (JMeterException e) {,             log.warn("Problem in BeanShell script "+e);,         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/modifiers/CounterConfig.java,,61-239,[    private long globalCounter = Long.MIN_VALUE;, ,     // Used for per-thread/user numbers,     private transient ThreadLocal<Long> perTheadNumber;, ,     // Used for per-thread/user storage of increment in Thread Group Main loop,     private transient ThreadLocal<Long> perTheadLastIterationNumber;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private void init() {,         perTheadNumber = new ThreadLocal<Long>() {,             @Override,             protected Long initialValue() {,                 return Long.valueOf(getStart());,             },         };,         perTheadLastIterationNumber = new ThreadLocal<Long>() {,             @Override,             protected Long initialValue() {,                 return Long.valueOf(1);,             },         };,     }, , ,     public CounterConfig() {,         super();,         init();,     }, ,     private Object readResolve(){,         init();,         return this;,     },     /**,      * @see LoopIterationListener#iterationStart(LoopIterationEvent),      */,     @Override,     public void iterationStart(LoopIterationEvent event) {,         // Cannot use getThreadContext() as not cloned per thread,         JMeterVariables variables = JMeterContextService.getContext().getVariables();,         long start = getStart();,         long end = getEnd();,         long increment = getIncrement();,         if (!isPerUser()) {,             synchronized (this) {,                 if (globalCounter == Long.MIN_VALUE || globalCounter > end) {,                     globalCounter = start;,                 },                 variables.put(getVarName(), formatNumber(globalCounter));,                 globalCounter += increment;,             },         } else {,             long current = perTheadNumber.get().longValue();,             if(isResetOnThreadGroupIteration()) {,                 int iteration = variables.getIteration();,                 Long lastIterationNumber = perTheadLastIterationNumber.get();,                 if(iteration != lastIterationNumber.longValue()) {,                     // reset,                     current = getStart();,                 },                 perTheadLastIterationNumber.set(Long.valueOf(iteration));,             },             variables.put(getVarName(), formatNumber(current));,             current += increment;,             if (current > end) {,                 current = start;,             },             perTheadNumber.set(Long.valueOf(current));,         },     }, ,     // Use format to create number; if it fails, use the default,     private String formatNumber(long value){,         String format = getFormat();,         if (format != null && format.length() > 0) {,             try {,                 DecimalFormat myFormatter = new DecimalFormat(format);,                 return myFormatter.format(value);,             } catch (IllegalArgumentException ignored) {,                 log.warn("Error formating "+value + " at format:"+format+", using default");,             },         },         return Long.toString(value);,     }, ,     public void setStart(long start) {,         setProperty(new LongProperty(START, start));,     }, ,     public void setStart(String start) {,         setProperty(START, start);,     }, ,     public long getStart() {,         return getPropertyAsLong(START);,     }, ,     public String getStartAsString() {,         return getPropertyAsString(START);,     }, ,     public void setEnd(long end) {,         setProperty(new LongProperty(END, end));,     }, ,     public void setEnd(String end) {,         setProperty(END, end);,     }, ,     /**,      * @param value boolean indicating if counter must be reset on Thread Group Iteration,      */,     public void setResetOnThreadGroupIteration(boolean value) {,         setProperty(RESET_ON_THREAD_GROUP_ITERATION, value, RESET_ON_THREAD_GROUP_ITERATION_DEFAULT);,     }, ,     /**,      * @return true if counter must be reset on Thread Group Iteration,      */,     public boolean isResetOnThreadGroupIteration() {,         return getPropertyAsBoolean(RESET_ON_THREAD_GROUP_ITERATION, RESET_ON_THREAD_GROUP_ITERATION_DEFAULT);,     }, ,     /**,      *,      * @return counter upper limit (default Long.MAX_VALUE),      */,     public long getEnd() {,        long propertyAsLong = getPropertyAsLong(END);,        if (propertyAsLong == 0 && "".equals(getProperty(END).getStringValue())) {,           propertyAsLong = Long.MAX_VALUE;,        },        return propertyAsLong;,     }, ,     public String getEndAsString(){,         return getPropertyAsString(END);,     }, ,     public void setIncrement(long inc) {,         setProperty(new LongProperty(INCREMENT, inc));,     }, ,     public void setIncrement(String incr) {,         setProperty(INCREMENT, incr);,     }, ,     public long getIncrement() {,         return getPropertyAsLong(INCREMENT);,     }, ,     public String getIncrementAsString() {,         return getPropertyAsString(INCREMENT);,     }, ,     public void setIsPerUser(boolean isPer) {,         setProperty(new BooleanProperty(PER_USER, isPer));,     }, ,     public boolean isPerUser() {,         return getPropertyAsBoolean(PER_USER);,     }, ,     public void setVarName(String name) {,         setProperty(VAR_NAME, name);,     }, ,     public String getVarName() {,         return getPropertyAsString(VAR_NAME);,     }, ,     public void setFormat(String format) {,         setProperty(FORMAT, format);,     }, ,     public String getFormat() {,         return getPropertyAsString(FORMAT);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/modifiers/CounterConfig.java,,78-81,[        perTheadLastIterationNumber = new ThreadLocal<Long>() {,             @Override,             protected Long initialValue() {,                 return Long.valueOf(1);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/modifiers/JSR223PreProcessor.java,,32-46,[public class JSR223PreProcessor extends JSR223TestElement implements Cloneable, PreProcessor, TestBean, {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L;, ,     @Override,     public void process() {,         try {,             ScriptEngine scriptEngine = getScriptEngine();,             processFileOrScript(scriptEngine, null);,         } catch (ScriptException | IOException e) {,             log.error("Problem in JSR223 script "+getName(), e);,         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/modifiers/UserParameters.java,,37-201,[public class UserParameters extends AbstractTestElement implements Serializable, PreProcessor, LoopIterationListener {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 233L;, ,     public static final String NAMES = "UserParameters.names";// $NON-NLS-1$, ,     public static final String THREAD_VALUES = "UserParameters.thread_values";// $NON-NLS-1$, ,     public static final String PER_ITERATION = "UserParameters.per_iteration";// $NON-NLS-1$, ,     /*,      * Although the lock appears to be an instance lock, in fact the lock is,      * shared between all threads in a thread group, but different thread groups,      * have different locks - see the clone() method below,      *,      * The lock ensures that all the variables are processed together, which is,      * important for functions such as __CSVRead and _StringFromFile.,      */,     private transient Object lock = new Object();, ,     private Object readResolve(){ // Lock object must exist,         lock = new Object();,         return this;,     }, ,     public CollectionProperty getNames() {,         return (CollectionProperty) getProperty(NAMES);,     }, ,     public CollectionProperty getThreadLists() {,         return (CollectionProperty) getProperty(THREAD_VALUES);,     }, ,     /**,      * The list of names of the variables to hold values. This list must come in,      * the same order as the sub lists that are given to,      * {@link #setThreadLists(Collection)}.,      * ,      * @param list,      *            The ordered list of names,      */,     public void setNames(Collection<?> list) {,         setProperty(new CollectionProperty(NAMES, list));,     }, ,     /**,      * The list of names of the variables to hold values. This list must come in,      * the same order as the sub lists that are given to,      * {@link #setThreadLists(CollectionProperty)}.,      * ,      * @param list,      *            The ordered list of names,      */,     public void setNames(CollectionProperty list) {,         setProperty(list);,     }, ,     /**,      * The thread list is a list of lists. Each list within the parent list is a,      * collection of values for a simulated user. As many different sets of,      * values can be supplied in this fashion to cause JMeter to set different,      * values to variables for different test threads.,      * ,      * @param threadLists,      *            The list of lists of values for each user thread,      */,     public void setThreadLists(Collection<?> threadLists) {,         setProperty(new CollectionProperty(THREAD_VALUES, threadLists));,     }, ,     /**,      * The thread list is a list of lists. Each list within the parent list is a,      * collection of values for a simulated user. As many different sets of,      * values can be supplied in this fashion to cause JMeter to set different,      * values to variables for different test threads.,      * ,      * @param threadLists,      *            The list of lists of values for each user thread,      */,     public void setThreadLists(CollectionProperty threadLists) {,         setProperty(threadLists);,     }, ,     private CollectionProperty getValues() {,         CollectionProperty threadValues = (CollectionProperty) getProperty(THREAD_VALUES);,         if (threadValues.size() > 0) {,             return (CollectionProperty) threadValues.get(getThreadContext().getThreadNum() % threadValues.size());,         },         return new CollectionProperty("noname", new LinkedList<>());,     }, ,     public boolean isPerIteration() {,         return getPropertyAsBoolean(PER_ITERATION);,     }, ,     public void setPerIteration(boolean perIter) {,         setProperty(new BooleanProperty(PER_ITERATION, perIter));,     }, ,     @Override,     public void process() {,         if (log.isDebugEnabled()) {,             log.debug(Thread.currentThread().getName() + " process " + isPerIteration());//$NON-NLS-1$,         },         if (!isPerIteration()) {,             setValues();,         },     }, ,     private void setValues() {,         synchronized (lock) {,             if (log.isDebugEnabled()) {,                 log.debug(Thread.currentThread().getName() + " Running up named: " + getName());//$NON-NLS-1$,             },             PropertyIterator namesIter = getNames().iterator();,             PropertyIterator valueIter = getValues().iterator();,             JMeterVariables jmvars = getThreadContext().getVariables();,             while (namesIter.hasNext() && valueIter.hasNext()) {,                 String name = namesIter.next().getStringValue();,                 String value = valueIter.next().getStringValue();,                 if (log.isDebugEnabled()) {,                     log.debug(Thread.currentThread().getName() + " saving variable: " + name + "=" + value);//$NON-NLS-1$,                 },                 jmvars.put(name, value);,             },         },     }, ,     /**,      * @see LoopIterationListener#iterationStart(LoopIterationEvent),      */,     @Override,     public void iterationStart(LoopIterationEvent event) {,         if (log.isDebugEnabled()) {,             log.debug(Thread.currentThread().getName() + " iteration start " + isPerIteration());//$NON-NLS-1$,         },         if (isPerIteration()) {,             setValues();,         },     }, ,     /*,      * (non-Javadoc) A new instance is created for each thread group, and the,      * clone() method is then called to create copies for each thread in a,      * thread group. This means that the lock object is common to a thread,      * group; separate thread groups have separate locks. If this is not,      * intended, the lock object could be made static.,      *,      * @see java.lang.Object#clone(),      */,     @Override,     public Object clone() {,         UserParameters up = (UserParameters) super.clone();,         up.lock = lock; // ensure that clones share the same lock object,         return up;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     protected void mergeIn(TestElement element) {,         // super.mergeIn(element);,     }],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/modifiers/gui/CounterConfigGui.java,configure,108-108,[        CounterConfig config = (CounterConfig) element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/modifiers/gui/UserParametersGui.java,configure,94-94,[        UserParameters params = (UserParameters) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/modifiers/gui/UserParametersGui.java,modifyTestElement,132-132,[        UserParameters userParams = ((UserParameters) params);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/modifiers/gui/UserParametersGui.java,,160-171,[        HeaderAsPropertyRenderer defaultRenderer = new HeaderAsPropertyRenderer(){,             private static final long serialVersionUID = 240L;, ,             @Override,             protected String getText(Object value, int row, int column) {,                 if (column >= 1){ // Don't process the NAME column,                     String val = value.toString();,                     if (val.startsWith(USER_COL_RESOURCE+UNDERSCORE)){,                         return JMeterUtils.getResString(USER_COL_RESOURCE)+val.substring(val.indexOf(UNDERSCORE));,                     },                 },                 return super.getText(value, row, column);],,
STYLE,UC_USELESS_OBJECT,org/apache/jmeter/monitor/util/MemoryBenchmark.java,main,47-47,[            List objs = new LinkedList();],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java,sample,211-211,[                            byte bytes[] = contents.getBytes(); // TODO - charset?],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java,parseArguments,141-141,[                    if (path != null && path.length() > 0) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java,modifyTestElement,84-84,[        ConfigTestElement cfg = (ConfigTestElement ) config;],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/control/AuthManager.java,addFile,375-375,[            reader = new BufferedReader(new FileReader(file));],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/control/AuthManager.java,save,342-342,[            writer = new PrintWriter(new FileWriter(file));],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/AuthManager.java,,70-537,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String CLEAR = "AuthManager.clearEachIteration";// $NON-NLS-1$, ,     private static final String AUTH_LIST = "AuthManager.auth_list"; //$NON-NLS-1$, ,     private static final String[] COLUMN_RESOURCE_NAMES = {,         "auth_base_url", //$NON-NLS-1$,         "username",      //$NON-NLS-1$,         "password",      //$NON-NLS-1$,         "domain",        //$NON-NLS-1$,         "realm",         //$NON-NLS-1$,         "mechanism",     //$NON-NLS-1$,         };, ,     // Column numbers - must agree with order above,     public static final int COL_URL = 0;,     public static final int COL_USERNAME = 1;,     public static final int COL_PASSWORD = 2;,     public static final int COL_DOMAIN = 3;,     public static final int COL_REALM = 4;,     public static final int COL_MECHANISM = 5;, ,     private static final int COLUMN_COUNT = COLUMN_RESOURCE_NAMES.length;, ,     private static final Credentials USE_JAAS_CREDENTIALS = new NullCredentials();, ,     private static final boolean DEFAULT_CLEAR_VALUE = false;, ,     /** Decides whether port should be omitted from SPN for kerberos spnego authentication */,     private static final boolean STRIP_PORT = JMeterUtils.getPropDefault("kerberos.spnego.strip_port", true);, ,     public enum Mechanism {,         BASIC_DIGEST, KERBEROS;,     }, ,     private static final class NullCredentials implements Credentials {,         @Override,         public String getPassword() {,             return null;,         }, ,         @Override,         public Principal getUserPrincipal() {,             return null;,         },     },     ,     private KerberosManager kerberosManager = new KerberosManager();, ,     /**,      * Default Constructor.,      */,     public AuthManager() {,         setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));,     }, ,     /** {@inheritDoc} */,     @Override,     public void clear() {,         super.clear();,         kerberosManager.clearSubjects();,         setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));,     }, ,     /**,      * Update an authentication record.,      *,      * @param index,      *            index at which position the record should be set,      * @param url,      *            url for which the authentication record should be used,      * @param user,      *            name of the user,      * @param pass,      *            password of the user,      * @param domain,      *            domain of the user,      * @param realm,      *            realm of the site,      * @param mechanism,      *            authentication {@link Mechanism} to use,      */,     public void set(int index, String url, String user, String pass, String domain, String realm, Mechanism mechanism) {,         Authorization auth = new Authorization(url, user, pass, domain, realm, mechanism);,         if (index >= 0) {,             getAuthObjects().set(index, new TestElementProperty(auth.getName(), auth));,         } else {,             getAuthObjects().addItem(auth);,         },     }, ,     public CollectionProperty getAuthObjects() {,         return (CollectionProperty) getProperty(AUTH_LIST);,     }, ,     public int getColumnCount() {,         return COLUMN_COUNT;,     }, ,     public String getColumnName(int column) {,         return COLUMN_RESOURCE_NAMES[column];,     }, ,     public Class<?> getColumnClass(int column) {,         return COLUMN_RESOURCE_NAMES[column].getClass();,     }, ,     public Authorization getAuthObjectAt(int row) {,         return (Authorization) getAuthObjects().get(row).getObjectValue();,     }, ,     public boolean isEditable() {,         return true;,     }, ,     /**,      * Return the record at index i,      *,      * @param i,      *            index of the record to get,      * @return authorization record at index <code>i</code>,      */,     public Authorization get(int i) {,         return (Authorization) getAuthObjects().get(i).getObjectValue();,     }, ,     public String getAuthHeaderForURL(URL url) {,         Authorization auth = getAuthForURL(url);,         if (auth == null) {,             return null;,         },         return auth.toBasicHeader();,     }, ,     public Authorization getAuthForURL(URL url) {,         if (!isSupportedProtocol(url)) {,             return null;,         }, ,         // TODO: replace all this url2 mess with a proper method,         // "areEquivalent(url1, url2)" that,         // would also ignore case in protocol and host names, etc. -- use that,         // method in the CookieManager too., ,         URL url2 = null;, ,         try {,             if (url.getPort() == -1) {,                 // Obtain another URL with an explicit port:,                 int port = url.getProtocol().equalsIgnoreCase("http") ? HTTPConstants.DEFAULT_HTTP_PORT : HTTPConstants.DEFAULT_HTTPS_PORT;,                 // only http and https are supported,                 url2 = new URL(url.getProtocol(), url.getHost(), port, url.getPath());,             } else if ((url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT && url.getProtocol().equalsIgnoreCase("http")),                     || (url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT && url.getProtocol().equalsIgnoreCase("https"))) {,                 url2 = new URL(url.getProtocol(), url.getHost(), url.getPath());,             },         } catch (MalformedURLException e) {,             log.error("Internal error!", e); // this should never happen,             // anyway, we'll continue with url2 set to null.,         }, ,         String s1 = url.toString();,         String s2 = null;,         if (url2 != null) {,             s2 = url2.toString();,         }, ,             log.debug("Target URL strings to match against: "+s1+" and "+s2);,         // TODO should really return most specific (i.e. longest) match.,         for (PropertyIterator iter = getAuthObjects().iterator(); iter.hasNext();) {,             Authorization auth = (Authorization) iter.next().getObjectValue();, ,             String uRL = auth.getURL();,             log.debug("Checking match against auth'n entry: "+uRL);,             if (s1.startsWith(uRL) || s2 != null && s2.startsWith(uRL)) {,                 log.debug("Matched");,                 return auth;,             },             log.debug("Did not match");,         },         return null;,     }, ,     /**,      * Tests whether an authorization record is available for a given URL,      *,      * @param url,      *            {@link URL} for which an authorization record should be,      *            available,      * @return <code>true</code> if an authorization is setup for url,,      *         <code>false</code> otherwise,      */,     public boolean hasAuthForURL(URL url) {,         return getAuthForURL(url) != null;,     },     ,     /**,      * Get a {@link Subject} for a given URL, if available,      *,      * @param url,      *            {@link URL} for which the subject was asked,      * @return Subject if Auth Scheme uses Subject and an authorization is setup,      *         for <code>url</code>, <code>null</code> otherwise,      */,     public Subject getSubjectForUrl(URL url) {,         Authorization authorization = getAuthForURL(url);,         if (authorization != null && Mechanism.KERBEROS.equals(authorization.getMechanism())) {,             return kerberosManager.getSubjectForUser(,                     authorization.getUser(), authorization.getPass());,         },         return null;,     }, ,     /** {@inheritDoc} */,     @Override,     public void addConfigElement(ConfigElement config) {,     }, ,     /**,      * Add newAuthorization if it does not already exist,      * @param newAuthorization authorization to be added,      */,     public void addAuth(Authorization newAuthorization) {,         boolean alreadyExists=false;,         PropertyIterator iter = getAuthObjects().iterator();,         //iterate over authentication objects in manager,         while (iter.hasNext()) {,             Authorization authorization = (Authorization) iter.next().getObjectValue();,             if (authorization == null) {,                 continue;,             },             if (match(authorization,newAuthorization)) {,                 if (log.isDebugEnabled()) {,                     log.debug("Found the same Authorization object:" + newAuthorization.toString());,                 },                 //set true, if found the same one,                 alreadyExists=true;,                 break;,             },         },         if(!alreadyExists){,             // if there was no such auth object, add.,             getAuthObjects().addItem(newAuthorization);,         },     }, ,     public void addAuth() {,         getAuthObjects().addItem(new Authorization());,     }, ,     /** {@inheritDoc} */,     @Override,     public boolean expectsModification() {,         return false;,     }, ,     /**,      * Save the authentication data to a file.,      *,      * @param authFile,      *            path of the file to save the authentication data to,      * @throws IOException,      *             when writing to the file fails,      */,     public void save(String authFile) throws IOException {,         File file = new File(authFile);,         if (!file.isAbsolute()) {,             file = new File(System.getProperty("user.dir"),authFile);,         },         PrintWriter writer = null;,         try {,             writer = new PrintWriter(new FileWriter(file));,             writer.println("# JMeter generated Authorization file");,             for (int i = 0; i < getAuthObjects().size(); i++) {,                 Authorization auth = (Authorization) getAuthObjects().get(i).getObjectValue();,                 writer.println(auth.toString());,             },             writer.flush();,             writer.close();,         } finally {,             JOrphanUtils.closeQuietly(writer);,         },     }, ,     /**,      * Add authentication data from a file.,      *,      * @param authFile,      *            path to the file to read the authentication data from,      * @throws IOException,      *             when reading the data fails,      */,     public void addFile(String authFile) throws IOException {,         File file = new File(authFile);,         if (!file.isAbsolute()) {,             file = new File(System.getProperty("user.dir") + File.separator + authFile);,         },         if (!file.canRead()) {,             throw new IOException("The file you specified cannot be read.");,         }, ,         BufferedReader reader = null;,         boolean ok = true;,         try {,             reader = new BufferedReader(new FileReader(file));,             String line;,             while ((line = reader.readLine()) != null) {,                 try {,                     if (line.startsWith("#") || JOrphanUtils.isBlank(line)) { //$NON-NLS-1$,                         continue;,                     },                     StringTokenizer st = new StringTokenizer(line, "\t"); //$NON-NLS-1$,                     String url = st.nextToken();,                     String user = st.nextToken();,                     String pass = st.nextToken();,                     String domain = "";,                     String realm = "";,                     if (st.hasMoreTokens()){// Allow for old format file without the extra columnns,                         domain = st.nextToken();,                         realm = st.nextToken();,                     },                     Mechanism mechanism = Mechanism.BASIC_DIGEST;,                     if (st.hasMoreTokens()){// Allow for old format file without mechanism support,                         mechanism = Mechanism.valueOf(st.nextToken());,                     },                     Authorization auth = new Authorization(url, user, pass, domain, realm, mechanism);,                     getAuthObjects().addItem(auth);,                 } catch (NoSuchElementException e) {,                     log.error("Error parsing auth line: '" + line + "'");,                     ok = false;,                 },             },         } finally {,             JOrphanUtils.closeQuietly(reader);,         },         if (!ok){,             JMeterUtils.reportErrorToUser("One or more errors found when reading the Auth file - see the log file");,         },     }, ,     /**,      * Remove an authentication record.,      *,      * @param index,      *            index of the authentication record to remove,      */,     public void remove(int index) {,         getAuthObjects().remove(index);,     }, ,     /**,      *,      * @return true if kerberos auth must be cleared on each mail loop iteration ,      */,     public boolean getClearEachIteration() {,         return getPropertyAsBoolean(CLEAR, DEFAULT_CLEAR_VALUE);,     }, ,     public void setClearEachIteration(boolean clear) {,         setProperty(CLEAR, clear, DEFAULT_CLEAR_VALUE);,     }, ,     /**,      * Return the number of records.,      *,      * @return the number of records,      */,     public int getAuthCount() {,         return getAuthObjects().size();,     }, ,     // Needs to be package protected for Unit test,     static boolean isSupportedProtocol(URL url) {,         String protocol = url.getProtocol().toLowerCase(java.util.Locale.ENGLISH);,         return protocol.equals(HTTPConstants.PROTOCOL_HTTP) || protocol.equals(HTTPConstants.PROTOCOL_HTTPS);,     }    , ,     /**,      * Configure credentials and auth scheme on client if an authorization is ,      * available for url,      * @param client {@link HttpClient},      * @param url URL to test ,      * @param credentialsProvider {@link CredentialsProvider},      * @param localHost host running JMeter,      */,     public void setupCredentials(HttpClient client, URL url,,             CredentialsProvider credentialsProvider, String localHost) {,         Authorization auth = getAuthForURL(url);,         if (auth != null) {,             String username = auth.getUser();,             String realm = auth.getRealm();,             String domain = auth.getDomain();,             if (log.isDebugEnabled()){,                 log.debug(username + " > D="+domain+" R="+realm + " M="+auth.getMechanism());,             },             if (Mechanism.KERBEROS.equals(auth.getMechanism())) {,                 ((AbstractHttpClient) client).getAuthSchemes().register(AuthPolicy.SPNEGO, new SPNegoSchemeFactory(isStripPort(url)));,                 credentialsProvider.setCredentials(new AuthScope(null, -1, null), USE_JAAS_CREDENTIALS);,             } else {,                 credentialsProvider.setCredentials(,                         new AuthScope(url.getHost(), url.getPort(), realm.length()==0 ? null : realm),,                         new NTCredentials(username, auth.getPass(), localHost, domain));,             },         },     }, ,     /**,      * IE and Firefox will always strip port from the url before constructing,      * the SPN. Chrome has an option (<code>--enable-auth-negotiate-port</code>),      * to include the port if it differs from <code>80</code> or,      * <code>443</code>. That behavior can be changed by setting the jmeter,      * property <code>kerberos.spnego.strip_port</code>.,      *,      * @param url to be checked,      * @return <code>true</code> when port should omitted in SPN,      */,     private boolean isStripPort(URL url) {,         if (STRIP_PORT) {,             return true;,         },         return (url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT ||,                 url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT);,     }, ,     /**,      * Check if two authorization objects are equal ignoring username/password,      * @param a {@link Authorization},      * @param b {@link Authorization},      * @return true if a and b match,      */,     private boolean match(Authorization a, Authorization b){,         return,                 a.getURL().equals(b.getURL())&&,                 a.getDomain().equals(b.getDomain())&&,                 a.getRealm().equals(b.getRealm())&&,                 a.getMechanism().equals(b.getMechanism());,     }, ,     /** {@inheritDoc} */,     @Override,     public void testStarted() {,         kerberosManager.clearSubjects();,     },     ,     /** {@inheritDoc} */,     @Override,     public void testEnded() {,     }, ,     /** {@inheritDoc} */,     @Override,     public void testStarted(String host) {,         testStarted();,     }, ,     /** {@inheritDoc} */,     @Override,     public void testEnded(String host) {,     }, ,     /** {@inheritDoc} */,     @Override,     public void testIterationStart(LoopIterationEvent event) {,         if (getClearEachIteration()) {,             kerberosManager.clearSubjects();,         },     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/http/control/Authorization.java,getURL,80-80,[        return getPropertyAsString(URL);],,getUrl,363-363,[        return url;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/Authorization.java,,59-134,[    Authorization(String url, String user, String pass, String domain, String realm, Mechanism mechanism) {,         setURL(url);,         setUser(user);,         setPass(pass);,         setDomain(domain);,         setRealm(realm);,         setMechanism(mechanism);,     }, ,     public boolean expectsModification() {,         return false;,     }, ,     public Authorization() {,         this("","","","","", Mechanism.BASIC_DIGEST);,     }, ,     public void addConfigElement(ConfigElement config) {,     }, ,     public String getURL() {,         return getPropertyAsString(URL);,     }, ,     public void setURL(String url) {,         setProperty(URL, url);,     }, ,     public String getUser() {,         return getPropertyAsString(USERNAME);,     }, ,     public void setUser(String user) {,         setProperty(USERNAME, user);,     }, ,     public String getPass() {,         return getPropertyAsString(PASSWORD);,     }, ,     public void setPass(String pass) {,         setProperty(PASSWORD, pass);,     }, ,     public String getDomain() {,         return getPropertyAsString(DOMAIN);,     }, ,     public void setDomain(String domain) {,         setProperty(DOMAIN, domain);,     }, ,     public String getRealm() {,         return getPropertyAsString(REALM);,     }, ,     public void setRealm(String realm) {,         setProperty(REALM, realm);,     }, ,     public Mechanism getMechanism() {,         return Mechanism.valueOf(getPropertyAsString(MECHANISM, Mechanism.BASIC_DIGEST.name()));,     }, ,     public void setMechanism(Mechanism mechanism) {,         setProperty(MECHANISM, mechanism.name(), Mechanism.BASIC_DIGEST.name());,     }, ,     // Used for saving entries to a file,     @Override,     public String toString() {,         return getURL() + TAB + getUser() + TAB + getPass() + TAB + getDomain() + TAB + getRealm() + TAB + getMechanism();,     }, ,     public String toBasicHeader(){,         return "Basic " + Base64Encoder.encode(getUser() + ":" + getPass());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/jmeter/protocol/http/control/CacheManager.java,setCache,244-244,[                                log.warn("Failed computing expiration date with following info:"],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/CacheManager.java,,56-483,[    private static final Date EXPIRED_DATE = new Date(0L);, ,     private static final long serialVersionUID = 234L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String[] CACHEABLE_METHODS = JMeterUtils.getPropDefault("cacheable_methods", "GET").split("[ ,]");, ,     static {,         log.info("Will only cache the following methods: "+Arrays.toString(CACHEABLE_METHODS));,     }, ,     //+ JMX attributes, do not change values,     public static final String CLEAR = "clearEachIteration"; // $NON-NLS-1$,     public static final String USE_EXPIRES = "useExpires"; // $NON-NLS-1$,     public static final String MAX_SIZE = "maxSize";  // $NON-NLS-1$,     //-, ,     private transient InheritableThreadLocal<Map<String, CacheEntry>> threadCache;, ,     private transient boolean useExpires; // Cached value, ,     private static final int DEFAULT_MAX_SIZE = 5000;, ,     private static final long ONE_YEAR_MS = 365*24*60*60*1000L;, ,     public CacheManager() {,         setProperty(new BooleanProperty(CLEAR, false));,         setProperty(new BooleanProperty(USE_EXPIRES, false));,         clearCache();,         useExpires = false;,     }, ,     /*,      * Holder for storing cache details.,      * Perhaps add original response later?,      */,     // package-protected to allow access by unit-test cases,     static class CacheEntry{,         private final String lastModified;,         private final String etag;,         private final Date expires;,         public CacheEntry(String lastModified, Date expires, String etag){,            this.lastModified = lastModified;,            this.etag = etag;,            this.expires = expires;,        },         public String getLastModified() {,             return lastModified;,         },         public String getEtag() {,             return etag;,         },         @Override,         public String toString(){,             return lastModified+" "+etag;,         },         public Date getExpires() {,             return expires;,         },     }, ,     /**,      * Save the Last-Modified, Etag, and Expires headers if the result is cacheable.,      * Version for Java implementation.,      * @param conn connection,      * @param res result,      */,     public void saveDetails(URLConnection conn, HTTPSampleResult res){,         if (isCacheable(res) && !hasVaryHeader(conn)){,             String lastModified = conn.getHeaderField(HTTPConstants.LAST_MODIFIED);,             String expires = conn.getHeaderField(HTTPConstants.EXPIRES);,             String etag = conn.getHeaderField(HTTPConstants.ETAG);,             String url = conn.getURL().toString();,             String cacheControl = conn.getHeaderField(HTTPConstants.CACHE_CONTROL);,             String date = conn.getHeaderField(HTTPConstants.DATE);,             setCache(lastModified, cacheControl, expires, etag, url, date);,         },     }, ,     private boolean hasVaryHeader(URLConnection conn) {,         return conn.getHeaderField(HTTPConstants.VARY) != null;,     }, ,     /**,      * Save the Last-Modified, Etag, and Expires headers if the result is,      * cacheable. Version for Commons HttpClient implementation.,      *,      * @param method,      *            {@link HttpMethod} to get header information from,      * @param res,      *            result to decide if result is cacheable,      * @throws URIException,      *             if extraction of the the uri from <code>method</code> fails,      */,     public void saveDetails(HttpMethod method, HTTPSampleResult res) throws URIException{,         if (isCacheable(res) && !hasVaryHeader(method)){,             String lastModified = getHeader(method ,HTTPConstants.LAST_MODIFIED);,             String expires = getHeader(method ,HTTPConstants.EXPIRES);,             String etag = getHeader(method ,HTTPConstants.ETAG);,             String url = method.getURI().toString();,             String cacheControl = getHeader(method, HTTPConstants.CACHE_CONTROL);,             String date = getHeader(method, HTTPConstants.DATE);,             setCache(lastModified, cacheControl, expires, etag, url, date);,         },     }, ,     private boolean hasVaryHeader(HttpMethod method) {,         return getHeader(method, HTTPConstants.VARY) != null;,     }, ,     /**,      * Save the Last-Modified, Etag, and Expires headers if the result is,      * cacheable. Version for Apache HttpClient implementation.,      *,      * @param method,      *            {@link HttpResponse} to extract header information from,      * @param res,      *            result to decide if result is cacheable,      */,     public void saveDetails(HttpResponse method, HTTPSampleResult res) {,         if (isCacheable(res) && !hasVaryHeader(method)){,             String lastModified = getHeader(method ,HTTPConstants.LAST_MODIFIED);,             String expires = getHeader(method ,HTTPConstants.EXPIRES);,             String etag = getHeader(method ,HTTPConstants.ETAG);,             String cacheControl = getHeader(method, HTTPConstants.CACHE_CONTROL);,             String date = getHeader(method, HTTPConstants.DATE);,             setCache(lastModified, cacheControl, expires, etag, res.getUrlAsString(), date); // TODO correct URL?,         },     }, ,     private boolean hasVaryHeader(HttpResponse method) {,         return getHeader(method, HTTPConstants.VARY) != null;,     }, ,     // helper method to save the cache entry,     private void setCache(String lastModified, String cacheControl, String expires, String etag, String url, String date) {,         if (log.isDebugEnabled()){,             log.debug("setCache(",                   + lastModified + "," ,                   + cacheControl + ",",                   + expires + "," ,                   + etag + ",",                   + url + ",",                   + date,                   + ")");,         },         Date expiresDate = null; // i.e. not using Expires,         if (useExpires) {// Check that we are processing Expires/CacheControl,             final String MAX_AGE = "max-age=";,             ,             if(cacheControl != null && cacheControl.contains("no-store")) {,                 // We must not store an CacheEntry, otherwise a ,                 // conditional request may be made,                 return;,             },             if (expires != null) {,                 try {,                     expiresDate = DateUtils.parseDate(expires);,                 } catch (org.apache.http.impl.cookie.DateParseException e) {,                     if (log.isDebugEnabled()){,                         log.debug("Unable to parse Expires: '"+expires+"' "+e);,                     },                     expiresDate = CacheManager.EXPIRED_DATE; // invalid dates must be treated as expired,                 },             },             // if no-cache is present, ensure that expiresDate remains null, which forces revalidation,             if(cacheControl != null && !cacheControl.contains("no-cache")) {    ,                 // the max-age directive overrides the Expires header,,                 if(cacheControl.contains(MAX_AGE)) {,                     long maxAgeInSecs = Long.parseLong(,                             cacheControl.substring(cacheControl.indexOf(MAX_AGE)+MAX_AGE.length()),                                 .split("[, ]")[0] // Bug 51932 - allow for optional trailing attributes,                             );,                     expiresDate=new Date(System.currentTimeMillis()+maxAgeInSecs*1000);, ,                 } else if(expires==null) { // No max-age && No expires,                     if(!StringUtils.isEmpty(lastModified) && !StringUtils.isEmpty(date)) {,                         try {,                             Date responseDate = DateUtils.parseDate( date );,                             Date lastModifiedAsDate = DateUtils.parseDate( lastModified );,                             // see https://developer.mozilla.org/en/HTTP_Caching_FAQ,                             // see http://www.ietf.org/rfc/rfc2616.txt#13.2.4 ,                             expiresDate=new Date(System.currentTimeMillis(),                                     +Math.round((responseDate.getTime()-lastModifiedAsDate.getTime())*0.1));,                         } catch(DateParseException e) {,                             // date or lastModified may be null or in bad format,                             if(log.isWarnEnabled()) {,                                 log.warn("Failed computing expiration date with following info:",                                     +lastModified + "," ,                                     + cacheControl + ",",                                     + expires + "," ,                                     + etag + ",",                                     + url + ",",                                     + date);,                             },                             // TODO Can't see anything in SPEC,                             expiresDate = new Date(System.currentTimeMillis()+ONE_YEAR_MS);                      ,                         },                     } else {,                         // TODO Can't see anything in SPEC,                         expiresDate = new Date(System.currentTimeMillis()+ONE_YEAR_MS);                      ,                     },                 }  ,                 // else expiresDate computed in (expires!=null) condition is used,             },         },         getCache().put(url, new CacheEntry(lastModified, expiresDate, etag));,     }, ,     // Helper method to deal with missing headers - Commons HttpClient,     private String getHeader(HttpMethod method, String name){,         org.apache.commons.httpclient.Header hdr = method.getResponseHeader(name);,         return hdr != null ? hdr.getValue() : null;,     }, ,     // Apache HttpClient,     private String getHeader(HttpResponse method, String name) {,         org.apache.http.Header hdr = method.getLastHeader(name);,         return hdr != null ? hdr.getValue() : null;,     }, ,     /*,      * Is the sample result OK to cache?,      * i.e is it in the 2xx range, and is it a cacheable method?,      */,     private boolean isCacheable(HTTPSampleResult res){,         final String responseCode = res.getResponseCode();,         return isCacheableMethod(res),             && "200".compareTo(responseCode) <= 0  // $NON-NLS-1$,             && "299".compareTo(responseCode) >= 0;  // $NON-NLS-1$,     }, ,     private boolean isCacheableMethod(HTTPSampleResult res) {,         final String resMethod = res.getHTTPMethod();,         for(String method : CACHEABLE_METHODS) {,             if (method.equalsIgnoreCase(resMethod)) {,                 return true;,             },         },         return false;,     }, ,     /**,      * Check the cache, and if there is a match, set the headers:,      * <ul>,      * <li>If-Modified-Since</li>,      * <li>If-None-Match</li>,      * </ul>,      * Commons HttpClient version,      * @param url URL to look up in cache,      * @param method where to set the headers,      */,     public void setHeaders(URL url, HttpMethod method) {,         CacheEntry entry = getCache().get(url.toString());,         if (log.isDebugEnabled()){,             log.debug(method.getName()+"(OACH) "+url.toString()+" "+entry);,         },         if (entry != null){,             final String lastModified = entry.getLastModified();,             if (lastModified != null){,                 method.setRequestHeader(HTTPConstants.IF_MODIFIED_SINCE, lastModified);,             },             final String etag = entry.getEtag();,             if (etag != null){,                 method.setRequestHeader(HTTPConstants.IF_NONE_MATCH, etag);,             },         },     }, ,     /**,      * Check the cache, and if there is a match, set the headers:,      * <ul>,      * <li>If-Modified-Since</li>,      * <li>If-None-Match</li>,      * </ul>,      * Apache HttpClient version.,      * @param url {@link URL} to look up in cache,      * @param request where to set the headers,      */,     public void setHeaders(URL url, HttpRequestBase request) {,         CacheEntry entry = getCache().get(url.toString());,         if (log.isDebugEnabled()){,             log.debug(request.getMethod()+"(OAH) "+url.toString()+" "+entry);,         },         if (entry != null){,             final String lastModified = entry.getLastModified();,             if (lastModified != null){,                 request.setHeader(HTTPConstants.IF_MODIFIED_SINCE, lastModified);,             },             final String etag = entry.getEtag();,             if (etag != null){,                 request.setHeader(HTTPConstants.IF_NONE_MATCH, etag);,             },         },     }, ,     /**,      * Check the cache, and if there is a match, set the headers:,      * <ul>,      * <li>If-Modified-Since</li>,      * <li>If-None-Match</li>,      * </ul>,      * @param url {@link URL} to look up in cache,      * @param conn where to set the headers,      */,     public void setHeaders(HttpURLConnection conn, URL url) {,         CacheEntry entry = getCache().get(url.toString());,         if (log.isDebugEnabled()){,             log.debug(conn.getRequestMethod()+"(Java) "+url.toString()+" "+entry);,         },         if (entry != null){,             final String lastModified = entry.getLastModified();,             if (lastModified != null){,                 conn.addRequestProperty(HTTPConstants.IF_MODIFIED_SINCE, lastModified);,             },             final String etag = entry.getEtag();,             if (etag != null){,                 conn.addRequestProperty(HTTPConstants.IF_NONE_MATCH, etag);,             },         },     }, ,     /**,      * Check the cache, if the entry has an expires header and the entry has not expired, return true<br>,      * @param url {@link URL} to look up in cache,      * @return <code>true</code> if entry has an expires header and the entry has not expired, else <code>false</code>,      */,     public boolean inCache(URL url) {,         CacheEntry entry = getCache().get(url.toString());,         if (log.isDebugEnabled()){,             log.debug("inCache "+url.toString()+" "+entry);,         },         if (entry != null){,             final Date expiresDate = entry.getExpires();,             if (expiresDate != null) {,                 if (expiresDate.after(new Date())) {,                     if (log.isDebugEnabled()){,                         log.debug("Expires= " + expiresDate + " (Valid)");,                     },                     return true;,                 } else {,                     if (log.isDebugEnabled()){,                         log.debug("Expires= " + expiresDate + " (Expired)");,                     },                 },             },         },         return false;,     }, ,     private Map<String, CacheEntry> getCache(){,         return threadCache.get();,     }, ,     public boolean getClearEachIteration() {,         return getPropertyAsBoolean(CLEAR);,     }, ,     public void setClearEachIteration(boolean clear) {,         setProperty(new BooleanProperty(CLEAR, clear));,     }, ,     public boolean getUseExpires() {,         return getPropertyAsBoolean(USE_EXPIRES);,     }, ,     public void setUseExpires(boolean expires) {,         setProperty(new BooleanProperty(USE_EXPIRES, expires));,     },     ,     /**,      * @return int cache max size,      */,     public int getMaxSize() {,         return getPropertyAsInt(MAX_SIZE, DEFAULT_MAX_SIZE);,     }, ,     /**,      * @param size int cache max size,      */,     public void setMaxSize(int size) {,         setProperty(MAX_SIZE, size, DEFAULT_MAX_SIZE);,     },     , ,     @Override,     public void clear(){,         super.clear();,         clearCache();,     }, ,     private void clearCache() {,         log.debug("Clear cache");,         threadCache = new InheritableThreadLocal<Map<String, CacheEntry>>(){,             @Override,             protected Map<String, CacheEntry> initialValue(){,                 // Bug 51942 - this map may be used from multiple threads,                 @SuppressWarnings("unchecked") // LRUMap is not generic currently,                 Map<String, CacheEntry> map = new LRUMap(getMaxSize());,                 return Collections.<String, CacheEntry>synchronizedMap(map);,             },         };,     }, ,     @Override,     public void testStarted() {,     }, ,     @Override,     public void testEnded() {,     }, ,     @Override,     public void testStarted(String host) {,     }, ,     @Override,     public void testEnded(String host) {,     }, ,     @Override,     public void testIterationStart(LoopIterationEvent event) {,         if (getClearEachIteration()) {,             clearCache();,         },         useExpires=getUseExpires(); // cache the value,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/Cookie.java,,60-268,[        this("","","","",false,0,false,false);,     }, ,     /**,      * create the coookie,      * @param name name of the cookie,      * @param value value of the cookie,      * @param domain domain for which the cookie is valid,      * @param path  path for which the cookie is valid,      * @param secure flag whether cookie is to be handled as 'secure',      * @param expires - this is in seconds,      *,      */,     public Cookie(String name, String value, String domain, String path, boolean secure, long expires) {,         this(name,value,domain,path,secure,expires,true,true);,     }, ,     /**,      * create the coookie,      * @param name name of the cookie,      * @param value value of the cookie,      * @param domain domain for which the cookie is valid,      * @param path path for which the cookie is valid,      * @param secure flag whether cookie is to be handled as 'secure',      * @param expires - this is in seconds,      * @param hasPath - was the path explicitly specified?,      * @param hasDomain - was the domain explicitly specified?,      *,      */,     public Cookie(String name, String value, String domain, String path,,             boolean secure, long expires, boolean hasPath, boolean hasDomain) {,         this(name, value, domain, path, secure, expires, hasPath, hasDomain, DEFAULT_VERSION);,     }, ,     /**,      * Create a JMeter Cookie.,      * ,      * @param name name of the cookie,      * @param value value of the cookie,      * @param domain domain for which the cookie is valid,      * @param path path for which the cookie is valid,      * @param secure flag whether cookie is to be handled as 'secure',      * @param expires - this is in seconds,      * @param hasPath - was the path explicitly specified?,      * @param hasDomain - was the domain explicitly specified?,      * @param version - cookie spec. version,      */,     public Cookie(String name, String value, String domain, String path,,             boolean secure, long expires, boolean hasPath, boolean hasDomain, int version) {,         this.setName(name);,         this.setValue(value);,         this.setDomain(domain);,         this.setPath(path);,         this.setSecure(secure);,         this.setExpires(expires);,         this.setPathSpecified(hasPath);,         this.setDomainSpecified(hasDomain);,         this.setVersion(version);,     }, ,     public void addConfigElement(ConfigElement config) {,     }, ,     /**,      * get the value for this object.,      *,      * @return the value of this cookie,      */,     public String getValue() {,         return getPropertyAsString(VALUE);,     }, ,     /**,      * set the value for this object.,      *,      * @param value the value of this cookie,      */,     public void setValue(String value) {,         this.setProperty(VALUE, value);,     }, ,     /**,      * get the domain for this object.,      *,      * @return the domain for which this cookie is valid,      */,     public String getDomain() {,         return getPropertyAsString(DOMAIN);,     }, ,     /**,      * set the domain for this object.,      *,      * @param domain the domain for which this cookie is valid,      */,     public void setDomain(String domain) {,         setProperty(DOMAIN, domain);,     }, ,     /**,      * get the expiry time for the cookie,      *,      * @return Expiry time in seconds since the Java epoch,      */,     public long getExpires() {,         return getPropertyAsLong(EXPIRES);,     }, ,     /**,      * get the expiry time for the cookie,      *,      * @return Expiry time in milli-seconds since the Java epoch,,      * i.e. same as System.currentTimeMillis(),      */,     public long getExpiresMillis() {,         return getPropertyAsLong(EXPIRES)*1000;,     }, ,     /**,      * set the expiry time for the cookie,      * @param expires - expiry time in seconds since the Java epoch,      */,     public void setExpires(long expires) {,         setProperty(new LongProperty(EXPIRES, expires));,     }, ,     /**,      * get the secure for this object.,      *,      * @return flag whether this cookie should be treated as a 'secure' cookie,      */,     public boolean getSecure() {,         return getPropertyAsBoolean(SECURE);,     }, ,     /**,      * set the secure for this object.,      *,      * @param secure flag whether this cookie should be treated as a 'secure' cookie,      */,     public void setSecure(boolean secure) {,         setProperty(new BooleanProperty(SECURE, secure));,     }, ,     /**,      * get the path for this object.,      *,      * @return the path for which this cookie is valid,      */,     public String getPath() {,         return getPropertyAsString(PATH);,     }, ,     /**,      * set the path for this object.,      *,      * @param path the path for which this cookie is valid,      */,     public void setPath(String path) {,         setProperty(PATH, path);,     }, ,     public void setPathSpecified(boolean b) {,         setProperty(PATH_SPECIFIED, b);,     }, ,     public boolean isPathSpecified(){,         return getPropertyAsBoolean(PATH_SPECIFIED);,     }, ,     public void setDomainSpecified(boolean b) {,         setProperty(DOMAIN_SPECIFIED, b);,     }, ,     public boolean isDomainSpecified(){,         return getPropertyAsBoolean(DOMAIN_SPECIFIED);,     }, ,     /**,      * creates a string representation of this cookie,      */,     @Override,     public String toString() {,         StringBuilder sb=new StringBuilder(80);,         sb.append(getDomain());,         // flag - if all machines within a given domain can access the variable.,         //(from http://www.cookiecentral.com/faq/ 3.5),         sb.append(TAB).append("TRUE");,         sb.append(TAB).append(getPath());,         sb.append(TAB).append(JOrphanUtils.booleanToSTRING(getSecure()));,         sb.append(TAB).append(getExpires());,         sb.append(TAB).append(getName());,         sb.append(TAB).append(getValue());,         return sb.toString();,     }, ,     /**,      * @return the version,      */,     public int getVersion() {,         return getPropertyAsInt(VERSION, DEFAULT_VERSION);,     }, ,     /**,      * @param version the version to set,      */,     public void setVersion(int version) {,         setProperty(VERSION, version, DEFAULT_VERSION);,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/control/CookieManager.java,addFile,205-205,[            reader = new BufferedReader(new FileReader(file)); // TODO Charset ?],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/control/CookieManager.java,save,172-172,[        PrintWriter writer = new PrintWriter(new FileWriter(file)); // TODO Charset ?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/CookieManager.java,,59-437,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     //++ JMX tag values,     private static final String CLEAR = "CookieManager.clearEachIteration";// $NON-NLS-1$, ,     private static final String COOKIES = "CookieManager.cookies";// $NON-NLS-1$, ,     private static final String POLICY = "CookieManager.policy"; //$NON-NLS-1$,     ,     private static final String IMPLEMENTATION = "CookieManager.implementation"; //$NON-NLS-1$,     //-- JMX tag values, ,     private static final String TAB = "\t"; //$NON-NLS-1$, ,     // See bug 33796,     private static final boolean DELETE_NULL_COOKIES =,         JMeterUtils.getPropDefault("CookieManager.delete_null_cookies", true);// $NON-NLS-1$, ,     // See bug 28715,     // Package protected for tests,     static final boolean ALLOW_VARIABLE_COOKIES,         = JMeterUtils.getPropDefault("CookieManager.allow_variable_cookies", true);// $NON-NLS-1$, ,     private static final String COOKIE_NAME_PREFIX =,         JMeterUtils.getPropDefault("CookieManager.name.prefix", "COOKIE_").trim();// $NON-NLS-1$ $NON-NLS-2$, ,     private static final boolean SAVE_COOKIES =,         JMeterUtils.getPropDefault("CookieManager.save.cookies", false);// $NON-NLS-1$, ,     private static final boolean CHECK_COOKIES =,         JMeterUtils.getPropDefault("CookieManager.check.cookies", true);// $NON-NLS-1$, ,     static {,         log.info("Settings:",                 + " Delete null: " + DELETE_NULL_COOKIES,                 + " Check: " + CHECK_COOKIES,                 + " Allow variable: " + ALLOW_VARIABLE_COOKIES,                 + " Save: " + SAVE_COOKIES,                 + " Prefix: " + COOKIE_NAME_PREFIX,                 );,     },     private transient CookieHandler cookieHandler;, ,     private transient CollectionProperty initialCookies;, ,     public static final String DEFAULT_POLICY = CookiePolicy.BROWSER_COMPATIBILITY;,     ,     public static final String DEFAULT_IMPLEMENTATION = HC3CookieHandler.class.getName();, ,     public CookieManager() {,         clearCookies(); // Ensure that there is always a collection available,     }, ,     // ensure that the initial cookies are copied to the per-thread instances,     /** {@inheritDoc} */,     @Override,     public Object clone(){,         CookieManager clone = (CookieManager) super.clone();,         clone.initialCookies = initialCookies;,         clone.cookieHandler = cookieHandler;,         return clone;,     }, ,     public String getPolicy() {,         return getPropertyAsString(POLICY, DEFAULT_POLICY);,     }, ,     public void setCookiePolicy(String policy){,         setProperty(POLICY, policy, DEFAULT_POLICY);,     }, ,     public CollectionProperty getCookies() {,         return (CollectionProperty) getProperty(COOKIES);,     }, ,     public int getCookieCount() {// Used by GUI,         return getCookies().size();,     }, ,     public boolean getClearEachIteration() {,         return getPropertyAsBoolean(CLEAR);,     }, ,     public void setClearEachIteration(boolean clear) {,         setProperty(new BooleanProperty(CLEAR, clear));,     }, ,     public String getImplementation() {,         return getPropertyAsString(IMPLEMENTATION, DEFAULT_IMPLEMENTATION);,     }, ,     public void setImplementation(String implementation){,         setProperty(IMPLEMENTATION, implementation, DEFAULT_IMPLEMENTATION);,     }, ,     /**,      * Save the static cookie data to a file.,      * <p>,      * Cookies are only taken from the GUI - runtime cookies are not included.,      *,      * @param authFile,      *            name of the file to store the cookies into. If the name is,      *            relative, the system property <code>user.dir</code> will be,      *            prepended,      * @throws IOException,      *             when writing to that file fails,      */,     public void save(String authFile) throws IOException {,         File file = new File(authFile);,         if (!file.isAbsolute()) {,             file = new File(System.getProperty("user.dir") // $NON-NLS-1$,                     + File.separator + authFile);,         },         PrintWriter writer = new PrintWriter(new FileWriter(file)); // TODO Charset ?,         writer.println("# JMeter generated Cookie file");// $NON-NLS-1$,         PropertyIterator cookies = getCookies().iterator();,         long now = System.currentTimeMillis();,         while (cookies.hasNext()) {,             Cookie cook = (Cookie) cookies.next().getObjectValue();,             final long expiresMillis = cook.getExpiresMillis();,             if (expiresMillis == 0 || expiresMillis > now) { // only save unexpired cookies,                 writer.println(cookieToString(cook));,             },         },         writer.flush();,         writer.close();,     }, ,     /**,      * Add cookie data from a file.,      *,      * @param cookieFile,      *            name of the file to read the cookies from. If the name is,      *            relative, the system property <code>user.dir</code> will be,      *            prepended,      * @throws IOException,      *             if reading the file fails,      */,     public void addFile(String cookieFile) throws IOException {,         File file = new File(cookieFile);,         if (!file.isAbsolute()) {,             file = new File(System.getProperty("user.dir") // $NON-NLS-1$,                     + File.separator + cookieFile);,         },         BufferedReader reader = null;,         if (file.canRead()) {,             reader = new BufferedReader(new FileReader(file)); // TODO Charset ?,         } else {,             throw new IOException("The file you specified cannot be read.");,         }, ,         // N.B. this must agree with the save() and cookieToString() methods,         String line;,         try {,             final CollectionProperty cookies = getCookies();,             while ((line = reader.readLine()) != null) {,                 try {,                     if (line.startsWith("#") || JOrphanUtils.isBlank(line)) {//$NON-NLS-1$,                         continue;,                     },                     String[] st = JOrphanUtils.split(line, TAB, false);, ,                     final int _domain = 0;,                     //final int _ignored = 1;,                     final int _path = 2;,                     final int _secure = 3;,                     final int _expires = 4;,                     final int _name = 5;,                     final int _value = 6;,                     final int _fields = 7;,                     if (st.length!=_fields) {,                         throw new IOException("Expected "+_fields+" fields, found "+st.length+" in "+line);,                     }, ,                     if (st[_path].length()==0) {,                         st[_path] = "/"; //$NON-NLS-1$,                     },                     boolean secure = Boolean.parseBoolean(st[_secure]);,                     long expires = Long.parseLong(st[_expires]);,                     if (expires==Long.MAX_VALUE) {,                         expires=0;,                     },                     //long max was used to represent a non-expiring cookie, but that caused problems,                     Cookie cookie = new Cookie(st[_name], st[_value], st[_domain], st[_path], secure, expires);,                     cookies.addItem(cookie);,                 } catch (NumberFormatException e) {,                     throw new IOException("Error parsing cookie line\n\t'" + line + "'\n\t" + e);,                 },             },         } finally {,             reader.close();,          },     }, ,     private String cookieToString(Cookie c){,         StringBuilder sb=new StringBuilder(80);,         sb.append(c.getDomain());,         //flag - if all machines within a given domain can access the variable.,         //(from http://www.cookiecentral.com/faq/ 3.5),         sb.append(TAB).append("TRUE");,         sb.append(TAB).append(c.getPath());,         sb.append(TAB).append(JOrphanUtils.booleanToSTRING(c.getSecure()));,         sb.append(TAB).append(c.getExpires());,         sb.append(TAB).append(c.getName());,         sb.append(TAB).append(c.getValue());,         return sb.toString();,     }, ,     /** {@inheritDoc} */,     @Override,     public void recoverRunningVersion() {,         // do nothing, the cookie manager has to accept changes.,     }, ,     /** {@inheritDoc} */,     @Override,     public void setRunningVersion(boolean running) {,         // do nothing, the cookie manager has to accept changes.,     }, ,     /**,      * Add a cookie.,      *,      * @param c cookie to be added,      */,     public void add(Cookie c) {,         String cv = c.getValue();,         String cn = c.getName();,         removeMatchingCookies(c); // Can't have two matching cookies, ,         if (DELETE_NULL_COOKIES && (null == cv || cv.length()==0)) {,             if (log.isDebugEnabled()) {,                 log.debug("Dropping cookie with null value " + c.toString());,             },         } else {,             if (log.isDebugEnabled()) {,                 log.debug("Add cookie to store " + c.toString());,             },             getCookies().addItem(c);,             if (SAVE_COOKIES)  {,                 JMeterContext context = getThreadContext();,                 if (context.isSamplingStarted()) {,                     context.getVariables().put(COOKIE_NAME_PREFIX+cn, cv);,                 },             },         },     }, ,     /** {@inheritDoc} */,     @Override,     public void clear(){,         super.clear();,         clearCookies(); // ensure data is set up OK initially,     }, ,     /*,      * Remove all the cookies.,      */,     private void clearCookies() {,         log.debug("Clear all cookies from store");,         setProperty(new CollectionProperty(COOKIES, new ArrayList<>()));,     }, ,     /**,      * Remove a cookie.,      *,      * @param index index of the cookie to remove,      */,     public void remove(int index) {// TODO not used by GUI,         getCookies().remove(index);,     }, ,     /**,      * Return the cookie at index i.,      *,      * @param i index of the cookie to get,      * @return cookie at index <code>i</code>,      */,     public Cookie get(int i) {// Only used by GUI,         return (Cookie) getCookies().get(i).getObjectValue();,     }, ,     /**,      * Find cookies applicable to the given URL and build the Cookie header from,      * them.,      *,      * @param url,      *            URL of the request to which the returned header will be added.,      * @return the value string for the cookie header (goes after "Cookie: ").,      */,     public String getCookieHeaderForURL(URL url) {,         return cookieHandler.getCookieHeaderForURL(getCookies(), url, ALLOW_VARIABLE_COOKIES);,     }, , ,     public void addCookieFromHeader(String cookieHeader, URL url){,         cookieHandler.addCookieFromHeader(this, CHECK_COOKIES, cookieHeader, url);,     },     /**,      * Check if cookies match, i.e. name, path and domain are equal.,      * <br/>,      * TODO - should we compare secure too?,      * @param a,      * @param b,      * @return true if cookies match,      */,     private boolean match(Cookie a, Cookie b){,         return,         a.getName().equals(b.getName()),         &&,         a.getPath().equals(b.getPath()),         &&,         a.getDomain().equals(b.getDomain());,     }, ,     void removeMatchingCookies(Cookie newCookie){,         // Scan for any matching cookies,         PropertyIterator iter = getCookies().iterator();,         while (iter.hasNext()) {,             Cookie cookie = (Cookie) iter.next().getObjectValue();,             if (cookie == null) {// TODO is this possible?,                 continue;,             },             if (match(cookie,newCookie)) {,                 if (log.isDebugEnabled()) {,                     log.debug("New Cookie = " + newCookie.toString(),                               + " removing matching Cookie " + cookie.toString());,                 },                 iter.remove();,             },         },     }, ,     /** {@inheritDoc} */,     @Override,     public void testStarted() {,         initialCookies = getCookies();,         try {,             cookieHandler = (CookieHandler) ClassTools.construct(getImplementation(), getPolicy());,         } catch (JMeterException e) {,             log.error("Unable to load or invoke class: " + getImplementation(), e);,         },         if (log.isDebugEnabled()){,             log.debug("Policy: "+getPolicy()+" Clear: "+getClearEachIteration());,         },     }, ,     /** {@inheritDoc} */,     @Override,     public void testEnded() {,     }, ,     /** {@inheritDoc} */,     @Override,     public void testStarted(String host) {,         testStarted();,     }, ,     /** {@inheritDoc} */,     @Override,     public void testEnded(String host) {,     }, ,     /** {@inheritDoc} */,     @Override,     public void testIterationStart(LoopIterationEvent event) {,         if (getClearEachIteration()) {,             log.debug("Initialise cookies from pre-defined list");,             // No need to call clear,             setProperty(initialCookies.clone());,         },     }, ,     /**,      * Package protected for tests,      * @return the cookieHandler,      */,     CookieHandler getCookieHandler() {,         return cookieHandler;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/Header.java,,43-109,[        this("", ""); //$NON-NLS-1$ $NON-NLS-2$,     }, ,     /**,      * Create the header.,      *,      * @param name,      *            name of the header,      * @param value,      *            name of the header,      */,     public Header(String name, String value) {,         this.setName(name);,         this.setValue(value);,     }, ,     public void addConfigElement(ConfigElement config) {,     }, ,     public boolean expectsModification() {,         return false;,     }, ,     /**,      * Get the name for this object.,      *,      * @return the name of this header,      */,     @Override,     public String getName() {,         return getPropertyAsString(HNAME);,     }, ,     /**,      * Set the name for this object.,      *,      * @param name the name of this header,      */,     @Override,     public void setName(String name) {,         this.setProperty(HNAME, name);,     }, ,     /**,      * Get the value for this object.,      *,      * @return the value of this header,      */,     public String getValue() {,         return getPropertyAsString(VALUE);,     }, ,     /**,      * Set the value for this object.,      *,      * @param value the value of this header,      */,     public void setValue(String value) {,         this.setProperty(VALUE, value);,     }, ,     /**,      * Creates a string representation of this header.,      */,     @Override,     public String toString() {,         return getName() + "\t" + getValue(); //$NON-NLS-1$],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/control/HeaderManager.java,addFile,149-149,[            reader = new BufferedReader(new FileReader(file)); // TODO Charset ?],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/control/HeaderManager.java,save,116-116,[        PrintWriter writer = new PrintWriter(new FileWriter(file)); // TODO Charset ?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/HeaderManager.java,,50-310,[    private static final String[] COLUMN_RESOURCE_NAMES = {,           "name",             // $NON-NLS-1$,           "value"             // $NON-NLS-1$,         };, ,     private static final int COLUMN_COUNT = COLUMN_RESOURCE_NAMES.length;, , ,     /**,      * Apache SOAP driver does not provide an easy way to get and set the cookie,      * or HTTP header. Therefore it is necessary to store the SOAPHTTPConnection,      * object and reuse it.,      */,     private Object SOAPHeader = null;, ,     public HeaderManager() {,         setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));,     }, ,     /** {@inheritDoc} */,     @Override,     public void clear() {,         super.clear();,         setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));,     }, ,     /**,      * Get the collection of JMeterProperty entries representing the headers.,      *,      * @return the header collection property,      */,     public CollectionProperty getHeaders() {,         return (CollectionProperty) getProperty(HEADERS);,     }, ,     public int getColumnCount() {,         return COLUMN_COUNT;,     }, ,     public String getColumnName(int column) {,         return COLUMN_RESOURCE_NAMES[column];,     }, ,     public Class<? extends String> getColumnClass(int column) {,         return COLUMN_RESOURCE_NAMES[column].getClass();,     }, ,     public Header getHeader(int row) {,         return (Header) getHeaders().get(row).getObjectValue();,     }, ,     /**,      * Save the header data to a file.,      *,      * @param headFile,      *            name of the file to store headers into. If name is relative,      *            the system property <code>user.dir</code> will be prepended,      * @throws IOException,      *             if writing the headers fails,      */,     public void save(String headFile) throws IOException {,         File file = new File(headFile);,         if (!file.isAbsolute()) {,             file = new File(System.getProperty("user.dir")// $NON-NLS-1$,                     + File.separator + headFile);,         },         PrintWriter writer = new PrintWriter(new FileWriter(file)); // TODO Charset ?,         writer.println("# JMeter generated Header file");// $NON-NLS-1$,         final CollectionProperty hdrs = getHeaders();,         for (int i = 0; i < hdrs.size(); i++) {,             final JMeterProperty hdr = hdrs.get(i);,             Header head = (Header) hdr.getObjectValue();,             writer.println(head.toString());,         },         writer.flush();,         writer.close();,     }, ,     /**,      * Add header data from a file.,      *,      * @param headerFile,      *            name of the file to read headers from. If name is relative the,      *            system property <code>user.dir</code> will be prepended,      * @throws IOException,      *             if reading headers fails,      */,     public void addFile(String headerFile) throws IOException {,         File file = new File(headerFile);,         if (!file.isAbsolute()) {,             file = new File(System.getProperty("user.dir")// $NON-NLS-1$,                     + File.separator + headerFile);,         },         if (!file.canRead()) {,             throw new IOException("The file you specified cannot be read.");,         }, ,         BufferedReader reader = null;,         try {,             reader = new BufferedReader(new FileReader(file)); // TODO Charset ?,             String line;,             while ((line = reader.readLine()) != null) {,                 try {,                     if (line.startsWith("#") || JOrphanUtils.isBlank(line)) {// $NON-NLS-1$,                         continue;,                     },                     String[] st = JOrphanUtils.split(line, "\t", " ");// $NON-NLS-1$ $NON-NLS-2$,                     int name = 0;,                     int value = 1;,                     Header header = new Header(st[name], st[value]);,                     getHeaders().addItem(header);,                 } catch (Exception e) {,                     throw new IOException("Error parsing header line\n\t'" + line + "'\n\t" + e);,                 },             },         } finally {,             IOUtils.closeQuietly(reader);,         },     }, ,     /**,      * Add a header.,      *,      * @param h {@link Header} to add,      */,     public void add(Header h) {,         getHeaders().addItem(h);,     }, ,     /**,      * Add an empty header.,      */,     public void add() {,         getHeaders().addItem(new Header());,     }, ,     /**,      * Remove a header.,      *,      * @param index index from the header to remove,      */,     public void remove(int index) {,         getHeaders().remove(index);,     }, ,     /**,      * Return the number of headers.,      *,      * @return number of headers,      */,     public int size() {,         return getHeaders().size();,     }, ,     /**,      * Return the header at index i.,      *,      * @param i,      *            index of the header to get,      * @return {@link Header} at index <code>i</code>,      */,     public Header get(int i) {,         return (Header) getHeaders().get(i).getObjectValue();,     }, ,     /**,      * Remove from Headers the header named name,      * @param name header name,      */,     public void removeHeaderNamed(String name) {,         List<Integer> removeIndices = new ArrayList<>();,         for (int i = getHeaders().size() - 1; i >= 0; i--) {,             Header header = (Header) getHeaders().get(i).getObjectValue();,             if (header == null) {,                 continue;,             },             if (header.getName().equalsIgnoreCase(name)) {,                 removeIndices.add(Integer.valueOf(i));,             },         },         for (Integer indice : removeIndices) {,             getHeaders().remove(indice.intValue());,         },     }, ,     /**,      * Added support for SOAP related header stuff. 1-29-04 Peter Lin,      *,      * @return the SOAP header Object,      */,     public Object getSOAPHeader() {,         return this.SOAPHeader;,     }, ,     /**,      * Set the SOAPHeader with the SOAPHTTPConnection object. We may or may not,      * want to rename this to setHeaderObject(Object). Conceivably, other,      * samplers may need this kind of functionality. 1-29-04 Peter Lin,      *,      * @param header soap header,      */,     public void setSOAPHeader(Object header) {,         this.SOAPHeader = header;,     }, ,     /**,      * Merge the attributes with a another HeaderManager's attributes.,      * ,      * @param element,      *            The object to be merged with,      * @param preferLocalValues,      *            When both objects have a value for the same attribute, this,      *            flag determines which value is preferred.,      * @return merged HeaderManager,      * @throws IllegalArgumentException,      *             if <code>element</code> is not an instance of,      *             {@link HeaderManager},      */,     public HeaderManager merge(TestElement element, boolean preferLocalValues) {,         if (!(element instanceof HeaderManager)) {,             throw new IllegalArgumentException("Cannot merge type:" + this.getClass().getName() + " with type:" + element.getClass().getName());,         }, ,         // start off with a merged object as a copy of the local object,         HeaderManager merged = (HeaderManager)this.clone();, ,         HeaderManager other = (HeaderManager)element;,         // iterate thru each of the other headers,         for (int i = 0; i < other.getHeaders().size(); i++) {,             Header otherHeader = other.get(i);,             boolean found = false;,             // find the same property in the local headers,             for (int j = 0; j < merged.getHeaders().size(); j++) {,                 Header mergedHeader = merged.get(j);,                 if (mergedHeader.getName().equalsIgnoreCase(otherHeader.getName())) {,                     // we have a match,                     found = true;,                     if (!preferLocalValues) {,                         // prefer values from the other object,                         if ( (otherHeader.getValue() == null) || (otherHeader.getValue().length() == 0) ) {,                             // the other object has an empty value, so remove this value from the merged object,                             merged.remove(j);,                         } else {,                             // use the other object's value,                             mergedHeader.setValue(otherHeader.getValue());,                         },                     },                     // break out of the inner loop,                     break;,                 },             },             if (!found) {,                 // the other object has a new value to be added to the merged,                 merged.add(otherHeader);,             },         }, ,         // finally, merge the names so it's clear they've been merged,         merged.setName(merged.getName() + ":" + other.getName());, ,         return merged;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/control/HttpMirrorServer.java,run,142-142,[        } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/control/KerberosManager.java,,65-78,[        Callable<Subject> callable = new Callable<Subject>() {, ,             @Override,             public Subject call() throws Exception {,                 LoginContext loginCtx;,                 try {,                     loginCtx = new LoginContext(JAAS_APPLICATION,,                             new LoginCallbackHandler(username, password));,                     loginCtx.login();,                     return loginCtx.getSubject();,                 } catch (LoginException e) {,                     log.warn("Could not log in user " + username, e);,                 },                 return null;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java,configure,111-111,[        mirrorController = (HttpMirrorControl) element;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java,,50-211,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private JTextField portField;, ,     private JTextField maxPoolSizeField;, ,     private JTextField maxQueueSizeField;, ,     private JButton stop, start;, ,     private static final String ACTION_STOP = "stop"; // $NON-NLS-1$, ,     private static final String ACTION_START = "start"; // $NON-NLS-1$, ,     private HttpMirrorControl mirrorController;, , ,     public HttpMirrorControlGui() {,         super();,         log.debug("Creating HttpMirrorControlGui");,         init();,     }, ,     @Override,     public TestElement createTestElement() {,         mirrorController = new HttpMirrorControl();,         log.debug("creating/configuring model = " + mirrorController);,         modifyTestElement(mirrorController);,         return mirrorController;,     }, ,     /**,      * Modifies a given TestElement to mirror the data in the gui components.,      *,      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement),      */,     @Override,     public void modifyTestElement(TestElement el) {,         configureTestElement(el);,         if (el instanceof HttpMirrorControl) {,             mirrorController = (HttpMirrorControl) el;,             mirrorController.setPort(portField.getText());,             mirrorController.setMaxPoolSize(maxPoolSizeField.getText());,             mirrorController.setMaxQueueSize(maxQueueSizeField.getText());,         },     }, ,     @Override,     public String getLabelResource() {,         return "httpmirror_title"; // $NON-NLS-1$,     }, ,     @Override,     public Collection<String> getMenuCategories() {,         return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);,     }, ,     @Override,     public void configure(TestElement element) {,         log.debug("Configuring gui with " + element);,         super.configure(element);,         mirrorController = (HttpMirrorControl) element;,         portField.setText(mirrorController.getPortString());,         maxPoolSizeField.setText(mirrorController.getMaxPoolSizeAsString());,         maxQueueSizeField.setText(mirrorController.getMaxQueueSizeAsString());,         repaint();,     }, , ,     @Override,     public void actionPerformed(ActionEvent action) {,         String command = action.getActionCommand();, ,         if (command.equals(ACTION_STOP)) {,             mirrorController.stopHttpMirror();,             stop.setEnabled(false);,             start.setEnabled(true);,         } else if (command.equals(ACTION_START)) {,             modifyTestElement(mirrorController);,             mirrorController.startHttpMirror();,             start.setEnabled(false);,             stop.setEnabled(true);,         },     }, ,     private void init() {,         setLayout(new BorderLayout(0, 5));,         setBorder(makeBorder());, ,         add(makeTitlePanel(), BorderLayout.NORTH);, ,         JPanel mainPanel = new JPanel(new BorderLayout());, ,         Box myBox = Box.createVerticalBox();,         myBox.add(createPortPanel());,         mainPanel.add(myBox, BorderLayout.NORTH);, ,         mainPanel.add(createControls(), BorderLayout.CENTER);, ,         add(mainPanel, BorderLayout.CENTER);,     }, ,     private JPanel createControls() {,         start = new JButton(JMeterUtils.getResString("start")); // $NON-NLS-1$,         start.addActionListener(this);,         start.setActionCommand(ACTION_START);,         start.setEnabled(true);, ,         stop = new JButton(JMeterUtils.getResString("stop")); // $NON-NLS-1$,         stop.addActionListener(this);,         stop.setActionCommand(ACTION_STOP);,         stop.setEnabled(false);, ,         JPanel panel = new JPanel();,         panel.add(start);,         panel.add(stop);,         return panel;,     }, ,     private JPanel createPortPanel() {,         portField = new JTextField(HttpMirrorControl.DEFAULT_PORT_S, 8);,         portField.setName(HttpMirrorControl.PORT);, ,         JLabel label = new JLabel(JMeterUtils.getResString("port")); // $NON-NLS-1$,         label.setLabelFor(portField);, ,         maxPoolSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE), 8);,         maxPoolSizeField.setName(HttpMirrorControl.MAX_POOL_SIZE);, ,         JLabel mpsLabel = new JLabel(JMeterUtils.getResString("httpmirror_max_pool_size")); // $NON-NLS-1$,         mpsLabel.setLabelFor(maxPoolSizeField);, ,         maxQueueSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_QUEUE_SIZE), 8);,         maxQueueSizeField.setName(HttpMirrorControl.MAX_QUEUE_SIZE);, ,         JLabel mqsLabel = new JLabel(JMeterUtils.getResString("httpmirror_max_queue_size")); // $NON-NLS-1$,         mqsLabel.setLabelFor(maxQueueSizeField);, ,         HorizontalPanel panel = new HorizontalPanel();,         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("httpmirror_settings"))); // $NON-NLS-1$,         ,         panel.add(label);,         panel.add(portField);, ,         panel.add(mpsLabel);,         panel.add(maxPoolSizeField);, ,         panel.add(mqsLabel);,         panel.add(maxQueueSizeField);,         ,         panel.add(Box.createHorizontalStrut(10));, ,         return panel;,     }, ,     @Override,     public void clearGui(){,         super.clearGui();,         portField.setText(HttpMirrorControl.DEFAULT_PORT_S);,         maxPoolSizeField.setText(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE));,     }],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java,configure,95-95,[        final HTTPSamplerBase samplerBase = (HTTPSamplerBase) element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java,modifyTestElement,128-128,[        final HTTPSamplerBase samplerBase = (HTTPSamplerBase) sampler;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/control/gui/SoapSamplerGui.java,configure,161-161,[        SoapSampler sampler = (SoapSampler) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java,configure,390-390,[        WebServiceSampler sampler = (WebServiceSampler) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java,modifyTestElement,170-170,[        WebServiceSampler sampler = (WebServiceSampler) s;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java,browseWSDL,467-467,[        } catch (Exception exception) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/gui/AuthPanel.java,configure,143-143,[        clearEachIteration.setSelected(((AuthManager) el).getClearEachIteration());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/gui/AuthPanel.java,modifyTestElement,118-118,[        AuthManager authManager = (AuthManager) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/gui/CacheManagerGui.java,configure,72-72,[        final CacheManager cacheManager = (CacheManager)element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/gui/CacheManagerGui.java,modifyTestElement,90-90,[        final CacheManager cacheManager = (CacheManager)element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/gui/CookiePanel.java,configure,313-313,[        CookieManager cookieManager = (CookieManager) el;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/modifier/AnchorModifier.java,,52-234,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     public AnchorModifier() {,     }, ,     /**,      * Modifies an Entry object based on HTML response text.,      */,     @Override,     public void process() {,         JMeterContext context = getThreadContext();,         Sampler sam = context.getCurrentSampler();,         SampleResult res = context.getPreviousResult();,         HTTPSamplerBase sampler = null;,         HTTPSampleResult result = null;,         if (res == null || !(sam instanceof HTTPSamplerBase) || !(res instanceof HTTPSampleResult)) {,             log.info("Can't apply HTML Link Parser when the previous" + " sampler run is not an HTTP Request.");,             return;,         } else {,             sampler = (HTTPSamplerBase) sam;,             result = (HTTPSampleResult) res;,         },         List<HTTPSamplerBase> potentialLinks = new ArrayList<>();,         String responseText = ""; // $NON-NLS-1$,         responseText = result.getResponseDataAsString();,         Document html;,         int index = responseText.indexOf('<'); // $NON-NLS-1$,         if (index == -1) {,             index = 0;,         },         if (log.isDebugEnabled()) {,             log.debug("Check for matches against: "+sampler.toString());,         },         html = (Document) HtmlParsingUtils.getDOM(responseText.substring(index));,         addAnchorUrls(html, result, sampler, potentialLinks);,         addFormUrls(html, result, sampler, potentialLinks);,         addFramesetUrls(html, result, sampler, potentialLinks);,         if (potentialLinks.size() > 0) {,             HTTPSamplerBase url = potentialLinks.get(ThreadLocalRandom.current().nextInt(potentialLinks.size()));,             if (log.isDebugEnabled()) {,                 log.debug("Selected: "+url.toString());,             },             sampler.setDomain(url.getDomain());,             sampler.setPath(url.getPath());,             if (url.getMethod().equals(HTTPConstants.POST)) {,                 PropertyIterator iter = sampler.getArguments().iterator();,                 while (iter.hasNext()) {,                     Argument arg = (Argument) iter.next().getObjectValue();,                     modifyArgument(arg, url.getArguments());,                 },             } else {,                 sampler.setArguments(url.getArguments());,                 // config.parseArguments(url.getQueryString());,             },             sampler.setProtocol(url.getProtocol());,             return;,         } else {,             log.debug("No matches found");,         },         return;,     }, ,     private void modifyArgument(Argument arg, Arguments args) {,         if (log.isDebugEnabled()) {,             log.debug("Modifying argument: " + arg);,         },         List<Argument> possibleReplacements = new ArrayList<>();,         PropertyIterator iter = args.iterator();,         Argument replacementArg;,         while (iter.hasNext()) {,             replacementArg = (Argument) iter.next().getObjectValue();,             try {,                 if (HtmlParsingUtils.isArgumentMatched(replacementArg, arg)) {,                     possibleReplacements.add(replacementArg);,                 },             } catch (Exception ex) {,                 log.error("Problem adding Argument", ex);,             },         }, ,         if (possibleReplacements.size() > 0) {,             replacementArg = possibleReplacements.get(ThreadLocalRandom.current().nextInt(possibleReplacements.size()));,             arg.setName(replacementArg.getName());,             arg.setValue(replacementArg.getValue());,             if (log.isDebugEnabled()) {,                 log.debug("Just set argument to values: " + arg.getName() + " = " + arg.getValue());,             },             args.removeArgument(replacementArg);,         },     }, ,     public void addConfigElement(ConfigElement config) {,     }, ,     private void addFormUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, ,             List<HTTPSamplerBase> potentialLinks) {,         NodeList rootList = html.getChildNodes();,         List<HTTPSamplerBase> urls = new LinkedList<>();,         for (int x = 0; x < rootList.getLength(); x++) {,             urls.addAll(HtmlParsingUtils.createURLFromForm(rootList.item(x), result.getURL()));,         },         for (HTTPSamplerBase newUrl : urls) {,             newUrl.setMethod(HTTPConstants.POST);,             if (log.isDebugEnabled()) {,                 log.debug("Potential Form match: " + newUrl.toString());,             },             if (HtmlParsingUtils.isAnchorMatched(newUrl, config)) {,                 log.debug("Matched!");,                 potentialLinks.add(newUrl);,             },         },     }, ,     private void addAnchorUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, ,             List<HTTPSamplerBase> potentialLinks) {,         String base = "";,         NodeList baseList = html.getElementsByTagName("base"); // $NON-NLS-1$,         if (baseList.getLength() > 0) {,             base = baseList.item(0).getAttributes().getNamedItem("href").getNodeValue(); // $NON-NLS-1$,         },         NodeList nodeList = html.getElementsByTagName("a"); // $NON-NLS-1$,         for (int i = 0; i < nodeList.getLength(); i++) {,             Node tempNode = nodeList.item(i);,             NamedNodeMap nnm = tempNode.getAttributes();,             Node namedItem = nnm.getNamedItem("href"); // $NON-NLS-1$,             if (namedItem == null) {,                 continue;,             },             String hrefStr = namedItem.getNodeValue();,             if (hrefStr.startsWith("javascript:")) { // $NON-NLS-1$,                 continue; // No point trying these,             },             try {,                 HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(hrefStr, ConversionUtils.makeRelativeURL(result.getURL(), base));,                 newUrl.setMethod(HTTPConstants.GET);,                 if (log.isDebugEnabled()) {,                     log.debug("Potential <a href> match: " + newUrl);,                 },                 if (HtmlParsingUtils.isAnchorMatched(newUrl, config)) {,                     log.debug("Matched!");,                     potentialLinks.add(newUrl);,                 },             } catch (MalformedURLException e) {,                 log.warn("Bad URL "+e);,             },         },     }, ,     private void addFramesetUrls(Document html, HTTPSampleResult result,,        HTTPSamplerBase config, List<HTTPSamplerBase> potentialLinks) {,        String base = "";,        NodeList baseList = html.getElementsByTagName("base"); // $NON-NLS-1$,        if (baseList.getLength() > 0) {,            base = baseList.item(0).getAttributes().getNamedItem("href") // $NON-NLS-1$,                    .getNodeValue();,        },        NodeList nodeList = html.getElementsByTagName("frame"); // $NON-NLS-1$,        for (int i = 0; i < nodeList.getLength(); i++) {,            Node tempNode = nodeList.item(i);,            NamedNodeMap nnm = tempNode.getAttributes();,            Node namedItem = nnm.getNamedItem("src"); // $NON-NLS-1$,            if (namedItem == null) {,                continue;,            },            String hrefStr = namedItem.getNodeValue();,            try {,                HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(,                        hrefStr, ConversionUtils.makeRelativeURL(result.getURL(), base));,                newUrl.setMethod(HTTPConstants.GET);,                if (log.isDebugEnabled()) {,                    log.debug("Potential <frame src> match: " + newUrl);,                },                if (HtmlParsingUtils.isAnchorMatched(newUrl, config)) {,                    log.debug("Matched!");,                    potentialLinks.add(newUrl);,                },            } catch (MalformedURLException e) {,                log.warn("Bad URL "+e);,            },        },    }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/modifier/ParamMask.java,,36-246,[    private String PREFIX = "ParamModifier.prefix";, ,     private String FIELD_NAME = "ParamModifier.field_name";, ,     private String UPPER_BOUND = "ParamModifier.upper_bound";, ,     private String LOWER_BOUND = "ParamModifier.lower_bound";, ,     private String INCREMENT = "ParamModifier.increment";, ,     private String SUFFIX = "ParamModifier.suffix";, ,     private long _value = 0;, ,     /**,      * Default constructor.,      */,     public ParamMask() {,         setFieldName("");,         setPrefix("");,         setLowerBound(0);,         setUpperBound(0);,         setIncrement(0);,         setSuffix("");,     }, ,     /**,      * Sets the prefix for the <code>long</code> value. The prefix, the value,      * and the suffix are concatenated to give the parameter value. This allows,      * a wider range of posibilities for the parameter values.,      *,      * @param prefix,      *            a string to prefix to the parameter value,      */,     public void setPrefix(String prefix) {,         setProperty(PREFIX, prefix);,     }, ,     /**,      * Set the current value of the <code>long</code> portion of the parameter,      * value to replace. This is usually not used, as the method,      * {@link #resetValue} is used to define a policy for the starting value.,      *,      * @param  val  the new parameter value,      */,     public void setValue(long val) {,         _value = val;,     }, ,     public void setFieldName(String fieldName) {,         setProperty(FIELD_NAME, fieldName);,     }, ,     /**,      * Sets the lowest possible value that the <code>long</code> portion of,      * the parameter value may be.,      *,      * @param val,      *            the new lowest possible parameter value,      */,     public void setLowerBound(long val) {,         setProperty(new LongProperty(LOWER_BOUND, val));,     }, ,     /**,      * Sets the highest possible value that the <code>long</code> portion of,      * the parameter value may be.,      *,      * @param val,      *            the new highest possible parameter value,      */,     public void setUpperBound(long val) {,         setProperty(new LongProperty(UPPER_BOUND, val));,     }, ,     /**,      * Sets the number by which the parameter value is incremented between,      * loops.,      *,      * @param incr,      *            the new increment for the parameter value,      */,     public void setIncrement(long incr) {,         setProperty(new LongProperty(INCREMENT, incr));,     }, ,     /**,      * Sets the suffix for the <code>long</code> value. The prefix, the value,      * and the suffix are concatenated to give the parameter value. This allows,      * a wider range of posibilities for the parameter values.,      *,      * @param suffix,      *            a string to suffix to the parameter value,      */,     public void setSuffix(String suffix) {,         setProperty(SUFFIX, suffix);,     }, ,     /**,      * Accessor method to return the <code>String</code> that will be prefixed,      * to the <code>long</code> value.,      *,      * @return the parameter value prefix,      */,     public String getPrefix() {,         return getPropertyAsString(PREFIX);,     }, ,     /**,      * Accessor method, returns the lowest possible value that the,      * <code>long</code> portion of the parameter value may be.,      *,      * @return the lower bound of the possible values,      */,     public long getLowerBound() {,         return getPropertyAsLong(LOWER_BOUND);,     }, ,     /**,      * Accessor method, returns the highest possible value that the,      * <code>long</code> portion of the parameter value may be.,      *,      * @return the higher bound of the possible values,      */,     public long getUpperBound() {,         return getPropertyAsLong(UPPER_BOUND);,     }, ,     /**,      * Accessor method, returns the number by which the parameter value is,      * incremented between loops.,      *,      * @return the increment,      */,     public long getIncrement() {,         return getPropertyAsLong(INCREMENT);,     }, ,     /**,      * Accessor method to return the <code>String</code> that will be suffixed,      * to the <code>long</code> value.,      *,      * @return the parameter value suffix,      */,     public String getSuffix() {,         return getPropertyAsString(SUFFIX);,     }, ,     /*,      * -----------------------------------------------------------------------,      * Methods,      * -----------------------------------------------------------------------,      */, ,     /**,      * Returns the current value, prefixed and suffixed, as a string, then,      * increments it. If the incremented value is above the upper bound, the,      * value is reset to the lower bound. <BR>,      * <P>,      * This method determines the policy of what happens when an upper bound is,      * reached/surpassed.,      *,      * @return a <code>String</code> representing the current,      *         <code>long</code> value,      */,     public String getNextValue() {,         // return the current value (don't forget the prefix!),         String retval = getPrefix() + Long.toString(_value) + getSuffix();, ,         // increment the value,         _value += getIncrement();,         if (_value > getUpperBound()) {,             _value = getLowerBound();,         }, ,         return retval;,     }, ,     /**,      * This method determines the policy of what value to start (and re-start),      * at.,      */,     public void resetValue() {,         _value = getLowerBound();,     }, ,     public String getFieldName() {,         return getPropertyAsString(FIELD_NAME);,     }, ,     /**,      * For debugging purposes.,      *,      * @return a <code>String</code> representing the object,      */,     @Override,     public String toString() {,         StringBuilder sb = new StringBuilder();,         sb.append("-------------------------------\n");,         sb.append("Dumping ParamMask Object\n");,         sb.append("-------------------------------\n");,         sb.append("Name          = " + getFieldName() + "\n");,         sb.append("Prefix        = " + getPrefix() + "\n");,         sb.append("Current Value = " + _value + "\n");,         sb.append("Lower Bound   = " + getLowerBound() + "\n");,         sb.append("Upper Bound   = " + getUpperBound() + "\n");,         sb.append("Increment     = " + getIncrement() + "\n");,         sb.append("Suffix        = " + getSuffix() + "\n");,         sb.append("-------------------------------\n");, ,         return sb.toString();],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/modifier/ParamModifier.java,,74-154,[    public ParamModifier() {,         setProperty(new TestElementProperty(MASK, new ParamMask()));,     }, ,     public ParamMask getMask() {,         return (ParamMask) getProperty(MASK).getObjectValue();,     }, ,     @Override,     public void testStarted() {,         getMask().resetValue();,     }, ,     @Override,     public void testStarted(String host) {,         getMask().resetValue();,     }, ,     @Override,     public void testEnded() {,     }, ,     @Override,     public void testEnded(String host) {,     }, ,     /*,      * ------------------------------------------------------------------------,      * Methods implemented from interface org.apache.jmeter.config.Modifier,      * ------------------------------------------------------------------------,      */, ,     /**,      * Modifies an entry object to replace the value of any url parameter that,      * matches a defined mask.,      *,      */,     @Override,     public void process() {,         Sampler sam = getThreadContext().getCurrentSampler();,         HTTPSamplerBase sampler = null;,         if (!(sam instanceof HTTPSamplerBase)) {,             return;,         } else {,             sampler = (HTTPSamplerBase) sam;,         },         boolean modified = false;,         PropertyIterator iter = sampler.getArguments().iterator();,         while (iter.hasNext()) {,             Argument arg = (Argument) iter.next().getObjectValue();,             modified = modifyArgument(arg);,             if (modified) {,                 break;,             },         },     }, ,     /*,      * ------------------------------------------------------------------------,      * Methods,      * ------------------------------------------------------------------------,      */, ,     /**,      * Helper method for {@link #modifyEntry} Replaces a parameter's value if,      * the parameter name matches the mask name and the value is a '*'.,      *,      * @param arg,      *            an {@link Argument} representing a http parameter,      * @return <code>true</code>if the value was replaced,      */,     private boolean modifyArgument(Argument arg) {,         // if a mask for this argument exists,         if (arg.getName().equals(getMask().getFieldName())) {,             // values to be masked must be set in the WebApp to "*",             if ("*".equals(arg.getValue())) {,                 arg.setValue(getMask().getNextValue());,                 return true;,             },         },         return false;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java,,40-145,[public class RegExUserParameters extends AbstractTestElement implements Serializable, PreProcessor {,     private static final String REGEX_GROUP_SUFFIX = "_g";, ,     private static final String MATCH_NR = "matchNr";, ,     /**,      * ,      */,     private static final long serialVersionUID = 5486502839185386122L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     public static final String REG_EX_REF_NAME = "RegExUserParameters.regex_ref_name";// $NON-NLS-1$, ,     public static final String REG_EX_PARAM_NAMES_GR_NR = "RegExUserParameters.param_names_gr_nr";// $NON-NLS-1$, ,     public static final String REG_EX_PARAM_VALUES_GR_NR = "RegExUserParameters.param_values_gr_nr";// $NON-NLS-1$, ,     @Override,     public void process() {,         if (log.isDebugEnabled()) {,             log.debug(Thread.currentThread().getName() + " Running up named: " + getName());//$NON-NLS-1$,         },         Sampler entry = getThreadContext().getCurrentSampler();,         if (!(entry instanceof HTTPSamplerBase)) {,             return;,         }, ,         Map<String, String> paramMap = buildParamsMap();,         if(paramMap == null || paramMap.isEmpty()){,             log.info("RegExUserParameters element:"+getName()+" => Referenced RegExp was not found, no parameter will be changed");,             return;,         }, ,         HTTPSamplerBase sampler = (HTTPSamplerBase) entry;,         PropertyIterator iter = sampler.getArguments().iterator();,         while (iter.hasNext()) {,             Argument arg = (Argument) iter.next().getObjectValue();,             String oldValue = arg.getValue();,             // if parameter name exists in http request,             // then change its value with value obtained with regular expression,             String val = paramMap.get(arg.getName());,             if (val != null) {,                 arg.setValue(val);,             },             if (log.isDebugEnabled()){,                 log.debug("RegExUserParameters element:"+getName()+" => changed parameter: "+arg.getName() +" = "+ arg.getValue()+", was:"+oldValue);,             },         },     }, ,     private Map<String, String> buildParamsMap(){,         String regExRefName = getRegExRefName()+"_";,         String grNames = getRegParamNamesGrNr();,         String grValues = getRegExParamValuesGrNr();,         JMeterVariables jmvars = getThreadContext().getVariables();,         // verify if regex groups exists,         if(jmvars.get(regExRefName + MATCH_NR) == null,                 || jmvars.get(regExRefName + 1 + REGEX_GROUP_SUFFIX + grNames) == null ,                 || jmvars.get(regExRefName + 1 + REGEX_GROUP_SUFFIX + grValues) == null){,             return null;,         },         int n = Integer.parseInt(jmvars.get(regExRefName + MATCH_NR));,         Map<String, String> map = new HashMap<>(n);,         for(int i=1; i<=n; i++){,             map.put(jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grNames), ,                     jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grValues));,         },         return map;,     }, ,     /**,      * A new instance is created for each thread group, and the,      * clone() method is then called to create copies for each thread in a,      * thread group.,      * ,      * @see java.lang.Object#clone(),      */,     @Override,     public Object clone() {,         RegExUserParameters up = (RegExUserParameters) super.clone();,         return up;,     },     ,     public void setRegExRefName(String str) {,         setProperty(REG_EX_REF_NAME, str);,     }, ,     public String getRegExRefName() {,         return getPropertyAsString(REG_EX_REF_NAME);,     }, ,     public void setRegExParamNamesGrNr(String str) {,         setProperty(REG_EX_PARAM_NAMES_GR_NR, str);,     }, ,     public String getRegParamNamesGrNr() {,         return getPropertyAsString(REG_EX_PARAM_NAMES_GR_NR);,     }, ,     public void setRegExParamValuesGrNr(String str) {,         setProperty(REG_EX_PARAM_VALUES_GR_NR, str);,     }, ,     public String getRegExParamValuesGrNr() {,         return getPropertyAsString(REG_EX_PARAM_VALUES_GR_NR);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java,,39-236,[public class URLRewritingModifier extends AbstractTestElement implements Serializable, PreProcessor {, ,     private static final long serialVersionUID = 233L;, ,     private static final String SEMI_COLON = ";"; // $NON-NLS-1$, ,     private transient Pattern pathExtensionEqualsQuestionmarkRegexp;, ,     private transient Pattern pathExtensionEqualsNoQuestionmarkRegexp;, ,     private transient Pattern parameterRegexp;, ,     private transient Pattern pathExtensionNoEqualsQuestionmarkRegexp;, ,     private transient Pattern pathExtensionNoEqualsNoQuestionmarkRegexp;, ,     // transient Perl5Compiler compiler = new Perl5Compiler();,     private static final String ARGUMENT_NAME = "argument_name"; // $NON-NLS-1$, ,     private static final String PATH_EXTENSION = "path_extension"; // $NON-NLS-1$, ,     private static final String PATH_EXTENSION_NO_EQUALS = "path_extension_no_equals"; // $NON-NLS-1$, ,     private static final String PATH_EXTENSION_NO_QUESTIONMARK = "path_extension_no_questionmark"; // $NON-NLS-1$, ,     private static final String SHOULD_CACHE = "cache_value"; // $NON-NLS-1$, ,     private static final String ENCODE = "encode"; // $NON-NLS-1$, ,     // PreProcessors are cloned per-thread, so this will be saved per-thread,     private transient String savedValue = ""; // $NON-NLS-1$, ,     @Override,     public void process() {,         JMeterContext ctx = getThreadContext();,         Sampler sampler = ctx.getCurrentSampler();,         if (!(sampler instanceof HTTPSamplerBase)) {// Ignore non-HTTP samplers,             return;,         },         SampleResult responseText = ctx.getPreviousResult();,         if (responseText == null) {,             return;,         },         initRegex(getArgumentName());,         String text = responseText.getResponseDataAsString();,         Perl5Matcher matcher = JMeterUtils.getMatcher();,         String value = "";,         if (isPathExtension() && isPathExtensionNoEquals() && isPathExtensionNoQuestionmark()) {,             if (matcher.contains(text, pathExtensionNoEqualsNoQuestionmarkRegexp)) {,                 MatchResult result = matcher.getMatch();,                 value = result.group(1);,             },         } else if (isPathExtension() && isPathExtensionNoEquals()) // && !isPathExtensionNoQuestionmark(),         {,             if (matcher.contains(text, pathExtensionNoEqualsQuestionmarkRegexp)) {,                 MatchResult result = matcher.getMatch();,                 value = result.group(1);,             },         } else if (isPathExtension() && isPathExtensionNoQuestionmark()) // && !isPathExtensionNoEquals(),         {,             if (matcher.contains(text, pathExtensionEqualsNoQuestionmarkRegexp)) {,                 MatchResult result = matcher.getMatch();,                 value = result.group(1);,             },         } else if (isPathExtension()) // && !isPathExtensionNoEquals() && !isPathExtensionNoQuestionmark(),         {,             if (matcher.contains(text, pathExtensionEqualsQuestionmarkRegexp)) {,                 MatchResult result = matcher.getMatch();,                 value = result.group(1);,             },         } else // if ! isPathExtension(),         {,             if (matcher.contains(text, parameterRegexp)) {,                 MatchResult result = matcher.getMatch();,                 for (int i = 1; i < result.groups(); i++) {,                     value = result.group(i);,                     if (value != null) {,                         break;,                     },                 },             },         }, ,         // Bug 15025 - save session value across samplers,         if (shouldCache()){,             if (value == null || value.length() == 0) {,                 value = savedValue;,             } else {,                 savedValue = value;,             },         },         modify((HTTPSamplerBase) sampler, value);,     }, ,     private void modify(HTTPSamplerBase sampler, String value) {,         if (isPathExtension()) {,             if (isPathExtensionNoEquals()) {,                 sampler.setPath(sampler.getPath() + SEMI_COLON + getArgumentName() + value); // $NON-NLS-1$,             } else {,                 sampler.setPath(sampler.getPath() + SEMI_COLON + getArgumentName() + "=" + value); // $NON-NLS-1$ // $NON-NLS-2$,             },         } else {,             sampler.getArguments().removeArgument(getArgumentName());,             sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value, !encode()));,         },     }, ,     public void setArgumentName(String argName) {,         setProperty(ARGUMENT_NAME, argName);,     }, ,     private void initRegex(String argName) {,         String quotedArg = Perl5Compiler.quotemeta(argName);// Don't get tripped up by RE chars in the arg name,         pathExtensionEqualsQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(,                 SEMI_COLON + quotedArg + "=([^\"'<>&\\s;]*)", // $NON-NLS-1$,                 Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);, ,         pathExtensionEqualsNoQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(,                 SEMI_COLON + quotedArg + "=([^\"'<>&\\s;?]*)", // $NON-NLS-1$,                 Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);, ,         pathExtensionNoEqualsQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(,                 SEMI_COLON + quotedArg + "([^\"'<>&\\s;]*)", // $NON-NLS-1$,                 Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);, ,         pathExtensionNoEqualsNoQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(,                 SEMI_COLON + quotedArg + "([^\"'<>&\\s;?]*)", // $NON-NLS-1$,                 Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);, ,         parameterRegexp = JMeterUtils.getPatternCache().getPattern(,                 // ;sessionid=value,                 "[;\\?&]" + quotedArg + "=([^\"'<>&\\s;\\\\]*)" +  // $NON-NLS-1$, ,                 // name="sessionid" value="value",                 "|\\s[Nn][Aa][Mm][Ee]\\s*=\\s*[\"']" + quotedArg,                 + "[\"']" + "[^>]*"  // $NON-NLS-1$,                 + "\\s[vV][Aa][Ll][Uu][Ee]\\s*=\\s*[\"']" // $NON-NLS-1$,                 + "([^\"']*)" + "[\"']" // $NON-NLS-1$, ,                 //  value="value" name="sessionid",                 + "|\\s[vV][Aa][Ll][Uu][Ee]\\s*=\\s*[\"']" // $NON-NLS-1$,                 + "([^\"']*)" + "[\"']" + "[^>]*" // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-3$,                 + "\\s[Nn][Aa][Mm][Ee]\\s*=\\s*[\"']"  // $NON-NLS-1$,                 + quotedArg + "[\"']", // $NON-NLS-1$,                 Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);,         // NOTE: the handling of simple- vs. double-quotes could be formally,         // more accurate, but I can't imagine a session id containing,         // either, so we should be OK. The whole set of expressions is a,         // quick hack anyway, so who cares.,     }, ,     public String getArgumentName() {,         return getPropertyAsString(ARGUMENT_NAME);,     }, ,     public void setPathExtension(boolean pathExt) {,         setProperty(new BooleanProperty(PATH_EXTENSION, pathExt));,     }, ,     public void setPathExtensionNoEquals(boolean pathExtNoEquals) {,         setProperty(new BooleanProperty(PATH_EXTENSION_NO_EQUALS, pathExtNoEquals));,     }, ,     public void setPathExtensionNoQuestionmark(boolean pathExtNoQuestionmark) {,         setProperty(new BooleanProperty(PATH_EXTENSION_NO_QUESTIONMARK, pathExtNoQuestionmark));,     }, ,     public void setShouldCache(boolean b) {,         setProperty(new BooleanProperty(SHOULD_CACHE, b));,     }, ,     public boolean isPathExtension() {,         return getPropertyAsBoolean(PATH_EXTENSION);,     }, ,     public boolean isPathExtensionNoEquals() {,         return getPropertyAsBoolean(PATH_EXTENSION_NO_EQUALS);,     }, ,     public boolean isPathExtensionNoQuestionmark() {,         return getPropertyAsBoolean(PATH_EXTENSION_NO_QUESTIONMARK);,     }, ,     public boolean shouldCache() {,         return getPropertyAsBoolean(SHOULD_CACHE,true);,     }, ,     protected Object readResolve(){,         savedValue = "";,         return this;,     }, ,     public boolean encode() {,         return getPropertyAsBoolean(ENCODE, false);        ,     },     public void setEncode(boolean b) {,         setProperty(new BooleanProperty(ENCODE, b));,     }],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/modifier/gui/ParamModifierGui.java,configure,92-92,[        ParamModifier model = (ParamModifier) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/modifier/gui/URLRewritingModifierGui.java,configure,134-134,[        URLRewritingModifier rewritingModifier = ((URLRewritingModifier) el);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/modifier/gui/URLRewritingModifierGui.java,modifyTestElement,105-105,[        URLRewritingModifier rewritingModifier = ((URLRewritingModifier) modifier);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java,createURLFromForm,287-287,[        recurseForm(doc, urlConfigs, context, selectName, false);],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java,head,81-81,[            String tagName = tag.tagName().toLowerCase();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/http/parser/URLString.java,getURL,57-57,[        return url;],,getUrl,933-971,[        StringBuilder pathAndQuery = new StringBuilder(100);,         String path = this.getPath();,         // Hack to allow entire URL to be provided in host field,         if (path.startsWith(HTTP_PREFIX),          || path.startsWith(HTTPS_PREFIX)){,             return new URL(path);,         },         String domain = getDomain();,         String protocol = getProtocol();,         if (PROTOCOL_FILE.equalsIgnoreCase(protocol)) {,             domain=null; // allow use of relative file URLs,         } else {,             // HTTP URLs must be absolute, allow file to be relative,             if (!path.startsWith("/")){ // $NON-NLS-1$,                 pathAndQuery.append("/"); // $NON-NLS-1$,             },         },         pathAndQuery.append(path);, ,         // Add the query string if it is a HTTP GET or DELETE request,         if(HTTPConstants.GET.equals(getMethod()) || HTTPConstants.DELETE.equals(getMethod())) {,             // Get the query string encoded in specified encoding,             // If no encoding is specified by user, we will get it,             // encoded in UTF-8, which is what the HTTP spec says,             String queryString = getQueryString(getContentEncoding());,             if(queryString.length() > 0) {,                 if (path.indexOf(QRY_PFX) > -1) {// Already contains a prefix,                     pathAndQuery.append(QRY_SEP);,                 } else {,                     pathAndQuery.append(QRY_PFX);,                 },                 pathAndQuery.append(queryString);,             },         },         // If default port for protocol is used, we do not include port in URL,         if(isProtocolDefaultPort()) {,             return new URL(protocol, domain, pathAndQuery.toString());,         },         return new URL(protocol, domain, getPort(), pathAndQuery.toString());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/proxy/Daemon.java,run,144-144,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java,parse,129-129,[                final String reqLine = line.toString();],,parse,153-153,[            log.debug("Request: '" + clientRequest.toString().replaceAll("\r\n", "<CRLF>") + "'");],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java,parse,152-152,[            log.debug("rawPostData in default JRE encoding: " + new String(rawPostData)); // TODO - charset?],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java,getRawPostData,434-434,[        return rawPostData;],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/protocol/http/proxy/Proxy.java,startSSL,443-443,[                secureSocket = (SSLSocket) sslFactory.createSocket(sock,],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/proxy/Proxy.java,generateErrorResult,468-468,[            e.printStackTrace(new PrintStream(text));],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/proxy/Proxy.java,run,183-183,[                log.debug(port + "Initial request: " + new String(ba));],,run,218-218,[                    log.debug(port + "Reparse: " + new String(ba));],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/jmeter/protocol/http/proxy/Proxy.java,run,214-214,[                    result = generateErrorResult(result, request, ioe, "\n**ensure browser is set to accept the JMeter proxy certificate**"); // Generate result (if nec.) and populate it],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/proxy/Proxy.java,run,261-261,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,createAuthorization,637-637,[                                String authCred= new String(Base64.decodeBase64(authCredentialsBase64));],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,getUseKeepalive,436-436,[        return getPropertyAsBoolean(USE_KEEPALIVE, true);],,getUseKeepAlive,331-331,[        return testElement.getUseKeepAlive();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,getCertificateDetails,690-690,[        return null; // should not happen],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,initJMeterKeyStore,1479-1479,[            } catch (Exception e) { // store is faulty, we need to recreate it],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,initUserKeyStore,1387-1387,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,placeSampler,1172-1172,[        } catch (Exception e) {],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,deliverSampler,547-547,[                        LAST_REDIRECT = null; // so break the chain],,deliverSampler,553-553,[                        LAST_REDIRECT = httpSampleResult.getRedirectLocation();],,deliverSampler,555-555,[                        LAST_REDIRECT = null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,,849-858,[        JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 try {,                     model.addComponent(sc, node);,                 } catch (IllegalUserActionException e) {,                     log.error("Program error", e);,                     throw new Error(e);,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,,879-888,[        JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 try {,                     model.addComponent(sc, node);,                 } catch (IllegalUserActionException e) {,                      log.error("Program error", e);,                      throw new Error(e);,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/proxy/ProxyControl.java,,910-919,[        JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                  try {,                     model.addComponent(sc, node);,                 } catch (IllegalUserActionException e) {,                     log.error("Program error", e);,                     throw new Error(e);,                 },             }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java,init,80-80,[                } catch (Exception e) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,configure,315-315,[        model = (ProxyControl) element;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,,85-978,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L;, ,     private static final String NEW_LINE = "\n";  // $NON-NLS-1$, ,     private static final String SPACE = " ";  // $NON-NLS-1$, ,     /**,      * This choice means don't explicitly set Implementation and rely on default, see Bug 54154,      */,     private static final String USE_DEFAULT_HTTP_IMPL = ""; // $NON-NLS-1$, ,     private static final String SUGGESTED_EXCLUSIONS =,             JMeterUtils.getPropDefault("proxy.excludes.suggested", ".*\\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff)"); // $NON-NLS-1$, ,     private JTextField portField;, ,     private JLabeledTextField sslDomains;, ,     /**,      * Used to indicate that HTTP request headers should be captured. The,      * default is to capture the HTTP request headers, which are specific to,      * particular browser settings.,      */,     private JCheckBox httpHeaders;, ,     /**,      * Whether to group requests together based on inactivity separation periods --,      * and how to handle such grouping afterwards.,      */,     private JComboBox<String> groupingMode;, ,     /**,      * Add an Assertion to the first sample of each set,      */,     private JCheckBox addAssertions;, ,     /**,      * Set/clear the Use Keep-Alive box on the samplers (default is true),      */,     private JCheckBox useKeepAlive;, ,     /*,      * Use regexes to match the source data,      */,     private JCheckBox regexMatch;, ,     /**,      * The list of sampler type names to choose from,      */,     private JComboBox<String> samplerTypeName;, ,     /**,      * Set/clear the Redirect automatically box on the samplers (default is false),      */,     private JCheckBox samplerRedirectAutomatically;, ,     /**,      * Set/clear the Follow-redirects box on the samplers (default is true),      */,     private JCheckBox samplerFollowRedirects;, ,     /**,      * Set/clear the Download images box on the samplers (default is false),      */,     private JCheckBox samplerDownloadImages;, ,     /**,      * Regular expression to include results based on content type,      */,     private JTextField contentTypeInclude;, ,     /**,      * Regular expression to exclude results based on content type,      */,     private JTextField contentTypeExclude;, ,     /**,      * List of available target controllers,      */,     private JComboBox<Object> targetNodes;,     ,     /**,      * Notify child Listener of Filtered Samplers,      */,     private JCheckBox notifyChildSamplerListenerOfFilteredSamplersCB;, ,     private DefaultComboBoxModel<Object> targetNodesModel;, ,     private ProxyControl model;, ,     private JTable excludeTable;, ,     private PowerTableModel excludeModel;, ,     private JTable includeTable;, ,     private PowerTableModel includeModel;, ,     private static final String CHANGE_TARGET = "change_target"; // $NON-NLS-1$, ,     private JButton stop, start, restart;, ,     //+ action names,     private static final String STOP = "stop"; // $NON-NLS-1$, ,     private static final String START = "start"; // $NON-NLS-1$, ,     private static final String RESTART = "restart"; // $NON-NLS-1$, ,     // This is applied to fields that should cause a restart when changed,     private static final String ENABLE_RESTART = "enable_restart"; // $NON-NLS-1$, ,     private static final String ADD_INCLUDE = "add_include"; // $NON-NLS-1$, ,     private static final String ADD_EXCLUDE = "add_exclude"; // $NON-NLS-1$, ,     private static final String DELETE_INCLUDE = "delete_include"; // $NON-NLS-1$, ,     private static final String DELETE_EXCLUDE = "delete_exclude"; // $NON-NLS-1$, ,     private static final String ADD_TO_INCLUDE_FROM_CLIPBOARD = "include_clipboard"; // $NON-NLS-1$, ,     private static final String ADD_TO_EXCLUDE_FROM_CLIPBOARD = "exclude_clipboard"; // $NON-NLS-1$, ,     private static final String ADD_SUGGESTED_EXCLUDES = "exclude_suggested";,     //- action names, ,     // Resource names for column headers,     private static final String INCLUDE_COL = "patterns_to_include"; // $NON-NLS-1$, ,     private static final String EXCLUDE_COL = "patterns_to_exclude"; // $NON-NLS-1$, ,     // Used by itemListener,     private static final String PORTFIELD = "portField"; // $NON-NLS-1$, ,     public ProxyControlGui() {,         super();,         log.debug("Creating ProxyControlGui");,         init();,     }, ,     /** {@inheritDoc} */,     @Override,     public TestElement createTestElement() {,         model = makeProxyControl();,         log.debug("creating/configuring model = " + model);,         modifyTestElement(model);,         return model;,     }, ,     protected ProxyControl makeProxyControl() {,         ProxyControl local = new ProxyControl();,         return local;,     }, ,     /** {@inheritDoc} */,     @Override,     public void modifyTestElement(TestElement el) {,         GuiUtils.stopTableEditing(excludeTable);,         GuiUtils.stopTableEditing(includeTable);,         configureTestElement(el);,         if (el instanceof ProxyControl) {,             model = (ProxyControl) el;,             model.setPort(portField.getText());,             model.setSslDomains(sslDomains.getText());,             setIncludeListInProxyControl(model);,             setExcludeListInProxyControl(model);,             model.setCaptureHttpHeaders(httpHeaders.isSelected());,             model.setGroupingMode(groupingMode.getSelectedIndex());,             model.setAssertions(addAssertions.isSelected());,             if(samplerTypeName.getSelectedIndex()< HTTPSamplerFactory.getImplementations().length) {,                 model.setSamplerTypeName(HTTPSamplerFactory.getImplementations()[samplerTypeName.getSelectedIndex()]);,             } else {,                 model.setSamplerTypeName(USE_DEFAULT_HTTP_IMPL);,             },             model.setSamplerRedirectAutomatically(samplerRedirectAutomatically.isSelected());,             model.setSamplerFollowRedirects(samplerFollowRedirects.isSelected());,             model.setUseKeepAlive(useKeepAlive.isSelected());,             model.setSamplerDownloadImages(samplerDownloadImages.isSelected());,             model.setNotifyChildSamplerListenerOfFilteredSamplers(notifyChildSamplerListenerOfFilteredSamplersCB.isSelected());,             model.setRegexMatch(regexMatch.isSelected());,             model.setContentTypeInclude(contentTypeInclude.getText());,             model.setContentTypeExclude(contentTypeExclude.getText());,             TreeNodeWrapper nw = (TreeNodeWrapper) targetNodes.getSelectedItem();,             if (nw == null) {,                 model.setTarget(null);,             } else {,                 model.setTarget(nw.getTreeNode());,             },         },     }, ,     protected void setIncludeListInProxyControl(ProxyControl element) {,         List<String> includeList = getDataList(includeModel, INCLUDE_COL);,         element.setIncludeList(includeList);,     }, ,     protected void setExcludeListInProxyControl(ProxyControl element) {,         List<String> excludeList = getDataList(excludeModel, EXCLUDE_COL);,         element.setExcludeList(excludeList);,     }, ,     private List<String> getDataList(PowerTableModel p_model, String colName) {,         String[] dataArray = p_model.getData().getColumn(colName);,         List<String> list = new LinkedList<>();,         for (int i = 0; i < dataArray.length; i++) {,             list.add(dataArray[i]);,         },         return list;,     }, ,     /** {@inheritDoc} */,     @Override,     public String getLabelResource() {,         return "proxy_title"; // $NON-NLS-1$,     }, ,     /** {@inheritDoc} */,     @Override,     public Collection<String> getMenuCategories() {,         return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);,     }, ,     /** {@inheritDoc} */,     @Override,     public void configure(TestElement element) {,         log.debug("Configuring gui with " + element);,         super.configure(element);,         model = (ProxyControl) element;,         portField.setText(model.getPortString());,         sslDomains.setText(model.getSslDomains());,         httpHeaders.setSelected(model.getCaptureHttpHeaders());,         groupingMode.setSelectedIndex(model.getGroupingMode());,         addAssertions.setSelected(model.getAssertions());,         samplerTypeName.setSelectedItem(model.getSamplerTypeName());,         samplerRedirectAutomatically.setSelected(model.getSamplerRedirectAutomatically());,         samplerFollowRedirects.setSelected(model.getSamplerFollowRedirects());,         useKeepAlive.setSelected(model.getUseKeepalive());,         samplerDownloadImages.setSelected(model.getSamplerDownloadImages());,         notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(model.getNotifyChildSamplerListenerOfFilteredSamplers());,         regexMatch.setSelected(model.getRegexMatch());,         contentTypeInclude.setText(model.getContentTypeInclude());,         contentTypeExclude.setText(model.getContentTypeExclude());, ,         reinitializeTargetCombo();// Set up list of potential targets and,                                     // enable listener, ,         populateTable(includeModel, model.getIncludePatterns().iterator());,         populateTable(excludeModel, model.getExcludePatterns().iterator());,         repaint();,     }, ,     private void populateTable(PowerTableModel p_model, PropertyIterator iter) {,         p_model.clearData();,         while (iter.hasNext()) {,             p_model.addRow(new Object[] { iter.next().getStringValue() });,         },         p_model.fireTableDataChanged();,     }, ,     /*,      * Handles groupingMode. actionPerfomed is not suitable, as that seems to be,      * activated whenever the Proxy is selected in the Test Plan,      * Also handles samplerTypeName,      */,     /** {@inheritDoc} */,     @Override,     public void itemStateChanged(ItemEvent e) {,         // System.err.println(e.paramString());,         enableRestart();,     }, ,     /** {@inheritDoc} */,     @Override,     public void actionPerformed(ActionEvent action) {,         String command = action.getActionCommand();, ,         // Prevent both redirect types from being selected,         final Object source = action.getSource();,         if (source.equals(samplerFollowRedirects) && samplerFollowRedirects.isSelected()) {,             samplerRedirectAutomatically.setSelected(false);,         } else if (source.equals(samplerRedirectAutomatically) && samplerRedirectAutomatically.isSelected()) {,             samplerFollowRedirects.setSelected(false);,         }, ,         // System.err.println(action.paramString()+" "+command+ ",         // "+action.getModifiers());, ,         if (command.equals(STOP)) {,             model.stopProxy();,             stop.setEnabled(false);,             start.setEnabled(true);,             restart.setEnabled(false);,         } else if (command.equals(START)) {,             startProxy();,         } else if (command.equals(RESTART)) {,             model.stopProxy();,             startProxy();,         } else if (command.equals(ENABLE_RESTART)){,             enableRestart();,         } else if (command.equals(ADD_EXCLUDE)) {,             excludeModel.addNewRow();,             excludeModel.fireTableDataChanged();,             enableRestart();,         } else if (command.equals(ADD_INCLUDE)) {,             includeModel.addNewRow();,             includeModel.fireTableDataChanged();,             enableRestart();,         } else if (command.equals(DELETE_EXCLUDE)) {,             excludeModel.removeRow(excludeTable.getSelectedRow());,             excludeModel.fireTableDataChanged();,             enableRestart();,         } else if (command.equals(DELETE_INCLUDE)) {,             includeModel.removeRow(includeTable.getSelectedRow());,             includeModel.fireTableDataChanged();,             enableRestart();,         } else if (command.equals(CHANGE_TARGET)) {,             log.debug("Change target " + targetNodes.getSelectedItem());,             log.debug("In model " + model);,             TreeNodeWrapper nw = (TreeNodeWrapper) targetNodes.getSelectedItem();,             model.setTarget(nw.getTreeNode());,             enableRestart();,         } else if (command.equals(ADD_TO_INCLUDE_FROM_CLIPBOARD)) {,             addFromClipboard(includeTable);,             includeModel.fireTableDataChanged();,             enableRestart();,         } else if (command.equals(ADD_TO_EXCLUDE_FROM_CLIPBOARD)) {,             addFromClipboard(excludeTable);,             excludeModel.fireTableDataChanged();,             enableRestart();,         } else if (command.equals(ADD_SUGGESTED_EXCLUDES)) {,             addSuggestedExcludes(excludeTable);,             excludeModel.fireTableDataChanged();,             enableRestart();,         },     }, ,     /**,      * Add suggested excludes to exclude table,      * @param table {@link JTable},      */,     protected void addSuggestedExcludes(JTable table) {,         GuiUtils.stopTableEditing(table);,         int rowCount = table.getRowCount();,         PowerTableModel model = null;,         String[] exclusions = SUGGESTED_EXCLUSIONS.split(";"); // $NON-NLS-1$,         if (exclusions.length>0) {,             model = (PowerTableModel) table.getModel();,             if(model != null) {,                 for (String clipboardLine : exclusions) {,                     model.addRow(new Object[] {clipboardLine});,                 },                 if (table.getRowCount() > rowCount) {,                     // Highlight (select) the appropriate rows.,                     int rowToSelect = model.getRowCount() - 1;,                     table.setRowSelectionInterval(rowCount, rowToSelect);,                 },             },         },     }, ,     /**,      * Add values from the clipboard to table,      * @param table {@link JTable},      */,     protected void addFromClipboard(JTable table) {,         GuiUtils.stopTableEditing(table);,         int rowCount = table.getRowCount();,         PowerTableModel model = null;,         try {,             String clipboardContent = GuiUtils.getPastedText();,             if (clipboardContent != null) {,                 String[] clipboardLines = clipboardContent.split(NEW_LINE);,                 for (String clipboardLine : clipboardLines) {,                     model = (PowerTableModel) table.getModel();,                     model.addRow(new Object[] {clipboardLine});,                 },                 if (table.getRowCount() > rowCount) {,                     if(model != null) {,                         // Highlight (select) the appropriate rows.,                         int rowToSelect = model.getRowCount() - 1;,                         table.setRowSelectionInterval(rowCount, rowToSelect);,                     },                 },             },         } catch (IOException ioe) {,             JOptionPane.showMessageDialog(this,,                     JMeterUtils.getResString("proxy_daemon_error_read_args") // $NON-NLS-1$,                     + "\n" + ioe.getLocalizedMessage(), JMeterUtils.getResString("error_title"),  // $NON-NLS-1$  $NON-NLS-2$,                     JOptionPane.ERROR_MESSAGE);,         } catch (UnsupportedFlavorException ufe) {,             JOptionPane.showMessageDialog(this,,                     JMeterUtils.getResString("proxy_daemon_error_not_retrieve") + SPACE // $NON-NLS-1$,                         + DataFlavor.stringFlavor.getHumanPresentableName() + SPACE,                         + JMeterUtils.getResString("proxy_daemon_error_from_clipboard") // $NON-NLS-1$,                         + ufe.getLocalizedMessage(), JMeterUtils.getResString("error_title"),  // $NON-NLS-1$,                         JOptionPane.ERROR_MESSAGE);,         },     }, ,     private void startProxy() {,         ValueReplacer replacer = GuiPackage.getInstance().getReplacer();,         modifyTestElement(model);,         TreeNodeWrapper treeNodeWrapper = (TreeNodeWrapper)targetNodesModel.getSelectedItem();,         if (JMeterUtils.getResString("use_recording_controller").equals(treeNodeWrapper.getLabel())) {,             JMeterTreeNode targetNode = model.findTargetControllerNode();,             if(targetNode == null || !(targetNode.getTestElement() instanceof RecordingController)) {,                 JOptionPane.showMessageDialog(this,,                         JMeterUtils.getResString("proxy_cl_wrong_target_cl"), // $NON-NLS-1$,                         JMeterUtils.getResString("error_title"), // $NON-NLS-1$,                         JOptionPane.ERROR_MESSAGE);,                 return;,             },         },         // Proxy can take some while to start up; show a wating cursor,         Cursor cursor = getCursor();,         setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));,         // TODO somehow show progress,         try {,             replacer.replaceValues(model);,             model.startProxy();,             start.setEnabled(false);,             stop.setEnabled(true);,             restart.setEnabled(false);,             if (ProxyControl.isDynamicMode()) {,                 String details[] = model.getCertificateDetails();,                 StringBuilder sb = new StringBuilder();,                 sb.append(JMeterUtils.getResString("proxy_daemon_msg_rootca_cert"))  // $NON-NLS-1$,                         .append(SPACE).append(KeyToolUtils.ROOT_CACERT_CRT_PFX),                         .append(SPACE).append(JMeterUtils.getResString("proxy_daemon_msg_created_in_bin"));,                 sb.append(NEW_LINE).append(JMeterUtils.getResString("proxy_daemon_msg_install_as_in_doc")); // $NON-NLS-1$,                 sb.append(NEW_LINE).append(JMeterUtils.getResString("proxy_daemon_msg_check_details")) // $NON-NLS-1$,                     .append(NEW_LINE).append(NEW_LINE);,                 for(String detail : details) {,                     sb.append(detail).append(NEW_LINE);,                 },                 JOptionPane.showMessageDialog(this,,                     sb.toString(),,                     JMeterUtils.getResString("proxy_daemon_msg_rootca_cert") + SPACE // $NON-NLS-1$,                     + KeyToolUtils.ROOT_CACERT_CRT_PFX + SPACE,                     + JMeterUtils.getResString("proxy_daemon_msg_created_in_bin"), // $NON-NLS-1$,                     JOptionPane.INFORMATION_MESSAGE);,             },         } catch (InvalidVariableException e) {,             JOptionPane.showMessageDialog(this,,                     JMeterUtils.getResString("invalid_variables")+": "+e.getMessage(), // $NON-NLS-1$ $NON-NLS-2$,                     JMeterUtils.getResString("error_title"), // $NON-NLS-1$,                     JOptionPane.ERROR_MESSAGE);,         } catch (BindException e) {,             JOptionPane.showMessageDialog(this,,                     JMeterUtils.getResString("proxy_daemon_bind_error")+": "+e.getMessage(), // $NON-NLS-1$ $NON-NLS-2$,                     JMeterUtils.getResString("error_title"), // $NON-NLS-1$,                     JOptionPane.ERROR_MESSAGE);,         } catch (IOException e) {,             JOptionPane.showMessageDialog(this,,                     JMeterUtils.getResString("proxy_daemon_error")+": "+e.getMessage(), // $NON-NLS-1$ $NON-NLS-2$,                     JMeterUtils.getResString("error_title"), // $NON-NLS-1$,                     JOptionPane.ERROR_MESSAGE);,         } finally {,             setCursor(cursor);,         },     }, ,     private void enableRestart() {,         if (stop.isEnabled()) {,             // System.err.println("Enable Restart");,             restart.setEnabled(true);,         },     }, ,     /** {@inheritDoc} */,     @Override,     public void keyPressed(KeyEvent e) {,     }, ,     /** {@inheritDoc} */,     @Override,     public void keyTyped(KeyEvent e) {,     }, ,     /** {@inheritDoc} */,     @Override,     public void keyReleased(KeyEvent e) {,         String fieldName = e.getComponent().getName();, ,         if (fieldName.equals(PORTFIELD)) {,             try {,                 Integer.parseInt(portField.getText());,             } catch (NumberFormatException nfe) {,                 int length = portField.getText().length();,                 if (length > 0) {,                     JOptionPane.showMessageDialog(this, ,                             JMeterUtils.getResString("proxy_settings_port_error_digits"), // $NON-NLS-1$,                             JMeterUtils.getResString("proxy_settings_port_error_invalid_data"), // $NON-NLS-1$,                             JOptionPane.WARNING_MESSAGE);,                     // Drop the last character:,                     portField.setText(portField.getText().substring(0, length-1));,                 },             },             enableRestart();,         } else if (fieldName.equals(ENABLE_RESTART)){,             enableRestart();,         },     }, ,     private void init() {,         setLayout(new BorderLayout(0, 5));,         setBorder(makeBorder());, ,         add(makeTitlePanel(), BorderLayout.NORTH);, ,         JPanel mainPanel = new JPanel(new BorderLayout());, ,         Box myBox = Box.createVerticalBox();,         myBox.add(createPortPanel());,         myBox.add(Box.createVerticalStrut(5));,         myBox.add(createTestPlanContentPanel());,         myBox.add(Box.createVerticalStrut(5));,         myBox.add(createHTTPSamplerPanel());,         myBox.add(Box.createVerticalStrut(5));,         myBox.add(createContentTypePanel());,         myBox.add(Box.createVerticalStrut(5));,         mainPanel.add(myBox, BorderLayout.NORTH);, ,         Box includeExcludePanel = Box.createVerticalBox();,         includeExcludePanel.add(createIncludePanel());,         includeExcludePanel.add(createExcludePanel());,         includeExcludePanel.add(createNotifyListenersPanel());,         mainPanel.add(includeExcludePanel, BorderLayout.CENTER);, ,         mainPanel.add(createControls(), BorderLayout.SOUTH);, ,         add(mainPanel, BorderLayout.CENTER);,     }, ,     private JPanel createControls() {,         start = new JButton(JMeterUtils.getResString("start")); // $NON-NLS-1$,         start.addActionListener(this);,         start.setActionCommand(START);,         start.setEnabled(true);, ,         stop = new JButton(JMeterUtils.getResString("stop")); // $NON-NLS-1$,         stop.addActionListener(this);,         stop.setActionCommand(STOP);,         stop.setEnabled(false);, ,         restart = new JButton(JMeterUtils.getResString("restart")); // $NON-NLS-1$,         restart.addActionListener(this);,         restart.setActionCommand(RESTART);,         restart.setEnabled(false);, ,         JPanel panel = new JPanel();,         panel.add(start);,         panel.add(stop);,         panel.add(restart);,         return panel;,     }, ,     private JPanel createPortPanel() {,         portField = new JTextField(ProxyControl.DEFAULT_PORT_S, 5);,         portField.setName(PORTFIELD);,         portField.addKeyListener(this);, ,         JLabel label = new JLabel(JMeterUtils.getResString("port")); // $NON-NLS-1$,         label.setLabelFor(portField);, ,         JPanel gPane = new JPanel(new BorderLayout());,         gPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("proxy_general_settings"))); // $NON-NLS-1$, ,         HorizontalPanel panel = new HorizontalPanel();,         panel.add(label);,         panel.add(portField);,         panel.add(Box.createHorizontalStrut(10));, ,         gPane.add(panel, BorderLayout.WEST);, ,         sslDomains = new JLabeledTextField(JMeterUtils.getResString("proxy_domains")); // $NON-NLS-1$,         sslDomains.setEnabled(ProxyControl.isDynamicMode());,         if (ProxyControl.isDynamicMode()) {,             sslDomains.setToolTipText(JMeterUtils.getResString("proxy_domains_dynamic_mode_tooltip"));,         } else {,             sslDomains.setToolTipText(JMeterUtils.getResString("proxy_domains_dynamic_mode_tooltip_java6"));,         },         gPane.add(sslDomains, BorderLayout.CENTER);,         return gPane;,     }, ,     private JPanel createTestPlanContentPanel() {,         httpHeaders = new JCheckBox(JMeterUtils.getResString("proxy_headers")); // $NON-NLS-1$,         httpHeaders.setSelected(true); // maintain original default,         httpHeaders.addActionListener(this);,         httpHeaders.setActionCommand(ENABLE_RESTART);, ,         addAssertions = new JCheckBox(JMeterUtils.getResString("proxy_assertions")); // $NON-NLS-1$,         addAssertions.setSelected(false);,         addAssertions.addActionListener(this);,         addAssertions.setActionCommand(ENABLE_RESTART);, ,         regexMatch = new JCheckBox(JMeterUtils.getResString("proxy_regex")); // $NON-NLS-1$,         regexMatch.setSelected(false);,         regexMatch.addActionListener(this);,         regexMatch.setActionCommand(ENABLE_RESTART);, ,         VerticalPanel mainPanel = new VerticalPanel();,         mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("proxy_test_plan_content"))); // $NON-NLS-1$, ,         HorizontalPanel nodeCreationPanel = new HorizontalPanel();,         nodeCreationPanel.add(createGroupingPanel());,         nodeCreationPanel.add(httpHeaders);,         nodeCreationPanel.add(addAssertions);,         nodeCreationPanel.add(regexMatch);, ,         HorizontalPanel targetPanel = new HorizontalPanel();,         targetPanel.add(createTargetPanel());,         mainPanel.add(targetPanel);,         mainPanel.add(nodeCreationPanel);, ,         return mainPanel;,     }, ,     private JPanel createHTTPSamplerPanel() {,         DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();,         for (String s : HTTPSamplerFactory.getImplementations()){,             m.addElement(s);,         },         m.addElement(USE_DEFAULT_HTTP_IMPL);,         samplerTypeName = new JComboBox<>(m);,         samplerTypeName.setPreferredSize(new Dimension(150, 20));,         samplerTypeName.setSelectedItem(USE_DEFAULT_HTTP_IMPL);,         samplerTypeName.addItemListener(this);,         JLabel label2 = new JLabel(JMeterUtils.getResString("proxy_sampler_type")); // $NON-NLS-1$,         label2.setLabelFor(samplerTypeName);, ,         samplerRedirectAutomatically = new JCheckBox(JMeterUtils.getResString("follow_redirects_auto")); // $NON-NLS-1$,         samplerRedirectAutomatically.setSelected(false);,         samplerRedirectAutomatically.addActionListener(this);,         samplerRedirectAutomatically.setActionCommand(ENABLE_RESTART);, ,         samplerFollowRedirects = new JCheckBox(JMeterUtils.getResString("follow_redirects")); // $NON-NLS-1$,         samplerFollowRedirects.setSelected(true);,         samplerFollowRedirects.addActionListener(this);,         samplerFollowRedirects.setActionCommand(ENABLE_RESTART);, ,         useKeepAlive = new JCheckBox(JMeterUtils.getResString("use_keepalive")); // $NON-NLS-1$,         useKeepAlive.setSelected(true);,         useKeepAlive.addActionListener(this);,         useKeepAlive.setActionCommand(ENABLE_RESTART);, ,         samplerDownloadImages = new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images")); // $NON-NLS-1$,         samplerDownloadImages.setSelected(false);,         samplerDownloadImages.addActionListener(this);,         samplerDownloadImages.setActionCommand(ENABLE_RESTART);, ,         HorizontalPanel panel = new HorizontalPanel();,         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("proxy_sampler_settings"))); // $NON-NLS-1$,         panel.add(label2);,         panel.add(samplerTypeName);,         panel.add(samplerRedirectAutomatically);,         panel.add(samplerFollowRedirects);,         panel.add(useKeepAlive);,         panel.add(samplerDownloadImages);, ,         return panel;,     }, ,     private JPanel createTargetPanel() {,         targetNodesModel = new DefaultComboBoxModel<>();,         targetNodes = new JComboBox<>(targetNodesModel);,         targetNodes.setPrototypeDisplayValue(""); // $NON-NLS-1$ // Bug 56303 fixed the width of combo list,         JPopupMenu popup = (JPopupMenu) targetNodes.getUI().getAccessibleChild(targetNodes, 0); // get popup element,         JScrollPane scrollPane = findScrollPane(popup);,         if(scrollPane != null) {,             scrollPane.setHorizontalScrollBar(new JScrollBar(JScrollBar.HORIZONTAL)); // add scroll pane if label element is too long,             scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);,         },         targetNodes.setActionCommand(CHANGE_TARGET);,         // Action listener will be added later, ,         JLabel label = new JLabel(JMeterUtils.getResString("proxy_target")); // $NON-NLS-1$,         label.setLabelFor(targetNodes);, ,         HorizontalPanel panel = new HorizontalPanel();,         panel.add(label);,         panel.add(targetNodes);, ,         return panel;,     }, ,     private JScrollPane findScrollPane(JPopupMenu popup) {,         Component[] components = popup.getComponents();,         for (Component component : components) {,             if(component instanceof JScrollPane) {,                 return (JScrollPane) component;,             },         },         return null;,     }, ,     private JPanel createGroupingPanel() {,         DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();,         // Note: position of these elements in the menu *must* match the,         // corresponding ProxyControl.GROUPING_* values.,         m.addElement(JMeterUtils.getResString("grouping_no_groups")); // $NON-NLS-1$,         m.addElement(JMeterUtils.getResString("grouping_add_separators")); // $NON-NLS-1$,         m.addElement(JMeterUtils.getResString("grouping_in_controllers")); // $NON-NLS-1$,         m.addElement(JMeterUtils.getResString("grouping_store_first_only")); // $NON-NLS-1$,         m.addElement(JMeterUtils.getResString("grouping_in_transaction_controllers")); // $NON-NLS-1$,         groupingMode = new JComboBox<>(m);,         groupingMode.setPreferredSize(new Dimension(150, 20));,         groupingMode.setSelectedIndex(0);,         groupingMode.addItemListener(this);, ,         JLabel label2 = new JLabel(JMeterUtils.getResString("grouping_mode")); // $NON-NLS-1$,         label2.setLabelFor(groupingMode);, ,         HorizontalPanel panel = new HorizontalPanel();,         panel.add(label2);,         panel.add(groupingMode);, ,         return panel;,     }, ,     private JPanel createContentTypePanel() {,         contentTypeInclude = new JTextField(35);,         contentTypeInclude.addKeyListener(this);,         contentTypeInclude.setName(ENABLE_RESTART);,         JLabel labelInclude = new JLabel(JMeterUtils.getResString("proxy_content_type_include")); // $NON-NLS-1$,         labelInclude.setLabelFor(contentTypeInclude);,         // Default value,         contentTypeInclude.setText(JMeterUtils.getProperty("proxy.content_type_include")); // $NON-NLS-1$, ,         contentTypeExclude = new JTextField(35);,         contentTypeExclude.addKeyListener(this);,         contentTypeExclude.setName(ENABLE_RESTART);,         JLabel labelExclude = new JLabel(JMeterUtils.getResString("proxy_content_type_exclude")); // $NON-NLS-1$,         labelExclude.setLabelFor(contentTypeExclude);,         // Default value,         contentTypeExclude.setText(JMeterUtils.getProperty("proxy.content_type_exclude")); // $NON-NLS-1$, ,         HorizontalPanel panel = new HorizontalPanel();,         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("proxy_content_type_filter"))); // $NON-NLS-1$,         panel.add(labelInclude);,         panel.add(contentTypeInclude);,         panel.add(labelExclude);,         panel.add(contentTypeExclude);, ,         return panel;,     }, ,     private JPanel createIncludePanel() {,         includeModel = new PowerTableModel(new String[] { INCLUDE_COL }, new Class[] { String.class });,         includeTable = new JTable(includeModel);,         includeTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());,         includeTable.setPreferredScrollableViewportSize(new Dimension(100, 30));, ,         JPanel panel = new JPanel(new BorderLayout());,         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils,                 .getResString("patterns_to_include"))); // $NON-NLS-1$, ,         panel.add(new JScrollPane(includeTable), BorderLayout.CENTER);,         panel.add(createTableButtonPanel(ADD_INCLUDE, DELETE_INCLUDE, ADD_TO_INCLUDE_FROM_CLIPBOARD, null), BorderLayout.SOUTH);, ,         return panel;,     }, ,     private JPanel createExcludePanel() {,         excludeModel = new PowerTableModel(new String[] { EXCLUDE_COL }, new Class[] { String.class });,         excludeTable = new JTable(excludeModel);,         excludeTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());,         excludeTable.setPreferredScrollableViewportSize(new Dimension(100, 30));, ,         JPanel panel = new JPanel(new BorderLayout());,         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils,                 .getResString("patterns_to_exclude"))); // $NON-NLS-1$, ,         panel.add(new JScrollPane(excludeTable), BorderLayout.CENTER);,         panel.add(createTableButtonPanel(ADD_EXCLUDE, DELETE_EXCLUDE, ADD_TO_EXCLUDE_FROM_CLIPBOARD, ADD_SUGGESTED_EXCLUDES), BorderLayout.SOUTH);, ,         return panel;,     }, ,     private JPanel createNotifyListenersPanel() {,         JPanel panel = new JPanel();,         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils,                 .getResString("notify_child_listeners_fr"))); // $NON-NLS-1$,         ,         notifyChildSamplerListenerOfFilteredSamplersCB = new JCheckBox(JMeterUtils.getResString("notify_child_listeners_fr")); // $NON-NLS-1$,         notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true);,         notifyChildSamplerListenerOfFilteredSamplersCB.addActionListener(this);,         notifyChildSamplerListenerOfFilteredSamplersCB.setActionCommand(ENABLE_RESTART);, ,         panel.add(notifyChildSamplerListenerOfFilteredSamplersCB);,         return panel;,     }, ,     private JPanel createTableButtonPanel(String addCommand, String deleteCommand, String copyFromClipboard, String addSuggestedExcludes) {,         JPanel buttonPanel = new JPanel();, ,         JButton addButton = new JButton(JMeterUtils.getResString("add")); // $NON-NLS-1$,         addButton.setActionCommand(addCommand);,         addButton.addActionListener(this);,         buttonPanel.add(addButton);, ,         JButton deleteButton = new JButton(JMeterUtils.getResString("delete")); // $NON-NLS-1$,         deleteButton.setActionCommand(deleteCommand);,         deleteButton.addActionListener(this);,         buttonPanel.add(deleteButton);, ,         /** A button for adding new excludes/includes to the table from the clipboard. */,         JButton addFromClipboard = new JButton(JMeterUtils.getResString("add_from_clipboard")); // $NON-NLS-1$,         addFromClipboard.setActionCommand(copyFromClipboard);,         addFromClipboard.addActionListener(this);,         buttonPanel.add(addFromClipboard);, ,         if(addSuggestedExcludes != null) {,             /** A button for adding suggested excludes. */,             JButton addFromSuggestedExcludes = new JButton(JMeterUtils.getResString("add_from_suggested_excludes")); // $NON-NLS-1$,             addFromSuggestedExcludes.setActionCommand(addSuggestedExcludes);,             addFromSuggestedExcludes.addActionListener(this);,             buttonPanel.add(addFromSuggestedExcludes);,         },         return buttonPanel;,     }, ,     private void reinitializeTargetCombo() {,         log.debug("Reinitializing target combo");, ,         // Stop action notifications while we shuffle this around:,         targetNodes.removeActionListener(this);, ,         targetNodesModel.removeAllElements();,         GuiPackage gp = GuiPackage.getInstance();,         JMeterTreeNode root;,         if (gp != null) {,             root = (JMeterTreeNode) GuiPackage.getInstance().getTreeModel().getRoot();,             targetNodesModel,                     .addElement(new TreeNodeWrapper(null, JMeterUtils.getResString("use_recording_controller"))); // $NON-NLS-1$,             buildNodesModel(root, "", 0);,         },         TreeNodeWrapper choice = null;,         for (int i = 0; i < targetNodesModel.getSize(); i++) {,             choice = (TreeNodeWrapper) targetNodesModel.getElementAt(i);,             log.debug("Selecting item " + choice + " for model " + model + " in " + this);,             if (choice.getTreeNode() == model.getTarget()) // .equals caused NPE,             {,                 break;,             },         },         // Reinstate action notifications:,         targetNodes.addActionListener(this);,         // Set the current value:,         targetNodesModel.setSelectedItem(choice);, ,         log.debug("Reinitialization complete");,     }, ,     private void buildNodesModel(JMeterTreeNode node, String parent_name, int level) {,         String separator = " > ";,         if (node != null) {,             for (int i = 0; i < node.getChildCount(); i++) {,                 StringBuilder name = new StringBuilder();,                 JMeterTreeNode cur = (JMeterTreeNode) node.getChildAt(i);,                 TestElement te = cur.getTestElement();,                 /*,                  * Will never be true. Probably intended to use,                  * org.apache.jmeter.threads.ThreadGroup rather than,                  * java.lang.ThreadGroup However, that does not work correctly;,                  * whereas treating it as a Controller does. if (te instanceof,                  * ThreadGroup) { name.append(parent_name);,                  * name.append(cur.getName()); name.append(seperator);,                  * buildNodesModel(cur, name.toString(), level); } else,                  */,                 if (te instanceof Controller) {,                     name.append(parent_name);,                     name.append(cur.getName());,                     TreeNodeWrapper tnw = new TreeNodeWrapper(cur, name.toString());,                     targetNodesModel.addElement(tnw);,                     name.append(separator);,                     buildNodesModel(cur, name.toString(), level + 1);,                 } else if (te instanceof TestPlan || te instanceof WorkBench) {,                     name.append(cur.getName());,                     name.append(separator);,                     buildNodesModel(cur, name.toString(), 0);,                 },                 // Ignore everything else,             },         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java,,69-388,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 232L; // Remember to change this when the class changes ..., ,     public static final String DEFAULT_CLASS = "org.apache.jmeter.protocol.http.util.accesslog.TCLogParser"; // $NON-NLS-1$, ,     /* private members used by class */,     private transient LogParser parser = null;, ,     // NOTUSED private Class PARSERCLASS = null;,     private String logFile, parserClassName, filterClassName;, ,     private transient Filter filter;, ,     private int count = 0;, ,     private boolean started = false;, ,     /**,      * Set the path where XML messages are stored for random selection.,      *,      * @param path path where to store XML messages,      */,     public void setLogFile(String path) {,         logFile = path;,     }, ,     /**,      * Get the path where XML messages are stored. this is the directory where,      * JMeter will randomly select a file.,      *,      * @return path where XML messages are stored,      */,     public String getLogFile() {,         return logFile;,     }, ,     /**,      * it's kinda obvious, but we state it anyways. Set the xml file with a,      * string path.,      *,      * @param classname -,      *            parser class name,      */,     public void setParserClassName(String classname) {,         parserClassName = classname;,     }, ,     /**,      * Get the file location of the xml file.,      *,      * @return String file path.,      */,     public String getParserClassName() {,         return parserClassName;,     }, ,     /**,      * sample gets a new HTTPSampler from the generator and calls it's sample(),      * method.,      *,      * @return newly generated and called sample,      */,     public SampleResult sampleWithParser() {,         initFilter();,         instantiateParser();,         SampleResult res = null;,         try {, ,             if (parser == null) {,                 throw new JMeterException("No Parser available");,             },             /*,              * samp.setDomain(this.getDomain()); samp.setPort(this.getPort());,              */,             // we call parse with 1 to get only one.,             // this also means if we change the implementation,             // to use 2, it would use every other entry and,             // so on. Not that it is really useful, but a,             // person could use it that way if they have a,             // huge gigabyte log file and they only want to,             // use a quarter of the entries.,             int thisCount = parser.parseAndConfigure(1, this);,             if (thisCount < 0) // Was there an error?,             {,                 return errorResult(new Error("Problem parsing the log file"), new HTTPSampleResult());,             },             if (thisCount == 0) {,                 if (count == 0 || filter == null) {,                     log.info("Stopping current thread");,                     JMeterContextService.getContext().getThread().stop();,                 },                 if (filter != null) {,                     filter.reset();,                 },                 CookieManager cm = getCookieManager();,                 if (cm != null) {,                     cm.clear();,                 },                 count = 0;,                 return errorResult(new Error("No entries found"), new HTTPSampleResult());,             },             count = thisCount;,             res = sample();,             if(res != null) {,                 res.setSampleLabel(toString());,             },         } catch (Exception e) {,             log.warn("Sampling failure", e);,             return errorResult(e, new HTTPSampleResult());,         },         return res;,     }, ,     /**,      * sample(Entry e) simply calls sample().,      *,      * @param e -,      *            ignored,      * @return the new sample,      */,     @Override,     public SampleResult sample(Entry e) {,         return sampleWithParser();,     }, ,     /**,      * Method will instantiate the log parser based on the class in the text,      * field. This was done to make it easier for people to plugin their own log,      * parser and use different log parser.,      */,     public void instantiateParser() {,         if (parser == null) {,             try {,                 if (this.getParserClassName() != null && this.getParserClassName().length() > 0) {,                     if (this.getLogFile() != null && this.getLogFile().length() > 0) {,                         parser = (LogParser) Class.forName(getParserClassName()).newInstance();,                         parser.setSourceFile(this.getLogFile());,                         parser.setFilter(filter);,                     } else {,                         log.error("No log file specified");,                     },                 },             } catch (InstantiationException e) {,                 log.error("", e);,             } catch (IllegalAccessException e) {,                 log.error("", e);,             } catch (ClassNotFoundException e) {,                 log.error("", e);,             },         },     }, ,     /**,      * @return Returns the filterClassName.,      */,     public String getFilterClassName() {,         return filterClassName;,     }, ,     /**,      * @param filterClassName,      *            The filterClassName to set.,      */,     public void setFilterClassName(String filterClassName) {,         this.filterClassName = filterClassName;,     }, ,     /**,      * @return Returns the domain.,      */,     @Override,     public String getDomain() { // N.B. Must be in this class for the TestBean code to work,         return super.getDomain();,     }, ,     /**,      * @param domain,      *            The domain to set.,      */,     @Override,     public void setDomain(String domain) { // N.B. Must be in this class for the TestBean code to work,         super.setDomain(domain);,     }, ,     /**,      * @return Returns the imageParsing.,      */,     public boolean isImageParsing() {,         return super.isImageParser();,     }, ,     /**,      * @param imageParsing,      *            The imageParsing to set.,      */,     public void setImageParsing(boolean imageParsing) {,         super.setImageParser(imageParsing);,     }, ,     /**,      * @return Returns the port.,      */,     public String getPortString() {,         return super.getPropertyAsString(HTTPSamplerBase.PORT);,     }, ,     /**,      * @param port,      *            The port to set.,      */,     public void setPortString(String port) {,         super.setProperty(HTTPSamplerBase.PORT, port);,     },     ,     /**,      * Sets the scheme, with default,      * @param value the protocol,      */,     @Override,     public void setProtocol(String value) {,         setProperty(PROTOCOL, value.toLowerCase(java.util.Locale.ENGLISH));,     },     ,     /**,      * Gets the protocol, with default.,      *,      * @return the protocol,      */,     @Override,     public String getProtocol() {,         String protocol = getPropertyAsString(PROTOCOL);,         if (StringUtils.isEmpty(protocol)) {,             return HTTPConstants.PROTOCOL_HTTP;,         },         return protocol;,     }, ,     /**,      *,      */,     public AccessLogSampler() {,         super();,     }, ,     protected void initFilter() {,         if (filter == null && filterClassName != null && filterClassName.length() > 0) {,             try {,                 filter = (Filter) Class.forName(filterClassName).newInstance();,             } catch (Exception e) {,                 log.warn("Couldn't instantiate filter '" + filterClassName + "'", e);,             },         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public Object clone() {,         AccessLogSampler s = (AccessLogSampler) super.clone();,         if (started) {,             if (filterClassName != null && filterClassName.length() > 0) {, ,                 try {,                     if (TestCloneable.class.isAssignableFrom(Class.forName(filterClassName))) {,                         initFilter();,                         s.filter = (Filter) ((TestCloneable) filter).clone();,                     },                     if (TestCloneable.class.isAssignableFrom(Class.forName(parserClassName))),                     {,                         instantiateParser();,                         s.parser = (LogParser)((TestCloneable)parser).clone();,                         if (filter != null),                         {,                             s.parser.setFilter(s.filter);,                         },                     },                 } catch (Exception e) {,                     log.warn("Could not clone cloneable filter", e);,                 },             },         },         return s;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testEnded() {,         if (parser != null) {,             parser.close();,         },         filter = null;,         started = false;,         super.testEnded();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testStarted() {,         started = true;,         super.testStarted();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void threadFinished() {,         if(parser instanceof ThreadListener) {,             ((ThreadListener)parser).threadFinished();,         },         if(filter instanceof ThreadListener) {,             ((ThreadListener)filter).threadFinished();,         },     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/sampler/AjpSampler.java,setConnectionHeaders,297-297,[                byte [] sbody = stringBody.getBytes(); // TODO - charset?],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java,getConnectionHeaders,369-369,[            res.setRequestHeaders(getConnectionHeaders(httpMethod));],,getConnectionHeaders,201-201,[        HttpMethodBase httpMethod = null;],,getConnectionHeaders,213-213,[            if (method.equals(HTTPConstants.POST)) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java,,224-227,[                httpMethod = new EntityEnclosingMethod(urlStr) {,                     @Override,                     public String getName() { // HC3.1 does not have the method,                         return HTTPConstants.DELETE;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java,,233-236,[                httpMethod = new EntityEnclosingMethod(urlStr) {,                     @Override,                     public String getName() { // HC3.1 does not have the method,                         return HTTPConstants.PATCH;],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java,sendData,1082-1082,[                out.write("<actual file content, not shown here>".getBytes());// encoding does not really matter here],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,sample,307-307,[        } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,,505-509,[                            new PrivilegedExceptionAction<HttpResponse>() {,     ,                                 @Override,                                 public HttpResponse run() throws Exception {,                                     return httpClient.execute(httpRequest,],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,,664-667,[            httpClient = new DefaultHttpClient(connManager, clientParams) {,                 @Override,                 protected HttpRequestRetryHandler createHttpRequestRetryHandler() {,                     return new DefaultHttpRequestRetryHandler(RETRY_COUNT, false); // set retry count],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,writeTo,992-992,[                out.write("<actual file content, not shown here>".getBytes());// encoding does not really matter here],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java,,64-64,[    protected static final Set<String> nonProxyHostFull = new HashSet<>();],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java,,66-66,[    protected static final List<String> nonProxyHostSuffix = new ArrayList<>();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java,resultProcessing,1614-1614,[                            areFollowingRedirect ? res.getParent() : SEPARATE_CONTAINER ? null : res);],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java,escapeIllegalURLCharacters,1357-1357,[        if (url == null || url.toLowerCase().startsWith("file:")) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java,errorResult,905-905,[        e.printStackTrace(new PrintStream(text));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java,,1290-1305,[                        new ThreadFactory() {,                             @Override,                             public Thread newThread(final Runnable r) {,                                 Thread t = new CleanerThread(new Runnable() {,                                     @Override,                                     public void run() {,                                         try {,                                             r.run();,                                         } finally {,                                             ((CleanerThread)Thread.currentThread()).notifyThreadEnd();,                                         },                                     },                                 });,                                 t.setName(parentThreadName+"-ResDownload-" + t.getName()); //$NON-NLS-1$,                                 t.setDaemon(true);,                                 return t;],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/sampler/PostWriter.java,sendPostData,120-120,[                postedBody.append(new String(header)); // TODO - charset?],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/sampler/PostWriter.java,sendPostData,117-117,[                byte[] header = file.getHeader().getBytes();  // TODO - charset?],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/http/sampler/SoapSampler.java,getSOAPAction,109-109,[        return getPropertyAsString(SOAP_ACTION);],,getSoapAction,206-206,[        return getPropertyAsString(SOAP_ACTION);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/http/sampler/SoapSampler.java,setSOAPAction,122-123,[        setProperty(SOAP_ACTION, action);,     }],,setSoapAction,197-198,[        setProperty(SOAP_ACTION, data);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/sampler/SoapSampler.java,,50-375,[public class SoapSampler extends HTTPSampler2 implements Interruptible { // Implemented by parent class,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     public static final String XML_DATA = "HTTPSamper.xml_data"; //$NON-NLS-1$, ,     public static final String URL_DATA = "SoapSampler.URL_DATA"; //$NON-NLS-1$, ,     public static final String SOAP_ACTION = "SoapSampler.SOAP_ACTION"; //$NON-NLS-1$, ,     public static final String SEND_SOAP_ACTION = "SoapSampler.SEND_SOAP_ACTION"; //$NON-NLS-1$, ,     public static final String XML_DATA_FILE = "SoapSampler.xml_data_file"; //$NON-NLS-1$, ,     private static final String DOUBLE_QUOTE = "\""; //$NON-NLS-1$, ,     private static final String SOAPACTION = "SOAPAction"; //$NON-NLS-1$, ,     private static final String ENCODING = "utf-8"; //$NON-NLS-1$ TODO should this be variable?, ,     private static final String DEFAULT_CONTENT_TYPE = "text/xml"; //$NON-NLS-1$, ,     public void setXmlData(String data) {,         setProperty(XML_DATA, data);,     }, ,     public String getXmlData() {,         return getPropertyAsString(XML_DATA);,     }, ,     /**,      * it's kinda obvious, but we state it anyways. Set the xml file with a,      * string path.,      *,      * @param filename path to the xml file,      */,     public void setXmlFile(String filename) {,         setProperty(XML_DATA_FILE, filename);,     }, ,     /**,      * Get the file location of the xml file.,      *,      * @return String file path.,      */,     public String getXmlFile() {,         return getPropertyAsString(XML_DATA_FILE);,     }, ,     public String getURLData() {,         return getPropertyAsString(URL_DATA);,     }, ,     public void setURLData(String url) {,         setProperty(URL_DATA, url);,     }, ,     public String getSOAPAction() {,         return getPropertyAsString(SOAP_ACTION);,     }, ,     public String getSOAPActionQuoted() {,         String action = getSOAPAction();,         StringBuilder sb = new StringBuilder(action.length()+2);,         sb.append(DOUBLE_QUOTE);,         sb.append(action);,         sb.append(DOUBLE_QUOTE);,         return sb.toString();,     }, ,     public void setSOAPAction(String action) {,         setProperty(SOAP_ACTION, action);,     }, ,     public boolean getSendSOAPAction() {,         return getPropertyAsBoolean(SEND_SOAP_ACTION);,     }, ,     public void setSendSOAPAction(boolean action) {,         setProperty(SEND_SOAP_ACTION, String.valueOf(action));,     }, ,     protected int setPostHeaders(PostMethod post) {,         int length=0;// Take length from file,         if (getHeaderManager() != null) {,             // headerManager was set, so let's set the connection,             // to use it.,             HeaderManager mngr = getHeaderManager();,             int headerSize = mngr.size();,             for (int idx = 0; idx < headerSize; idx++) {,                 Header hd = mngr.getHeader(idx);,                 if (HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(hd.getName())) {// Use this to override file length,                     length = Integer.parseInt(hd.getValue());,                     break;,                 },                 // All the other headers are set up by HTTPSampler2.setupConnection(),             },         } else {,             // otherwise we use "text/xml" as the default,             post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, DEFAULT_CONTENT_TYPE); //$NON-NLS-1$,         },         if (getSendSOAPAction()) {,             post.setRequestHeader(SOAPACTION, getSOAPActionQuoted());,         },         return length;,     }, ,     /**,      * Send POST data from <code>Entry</code> to the open connection.,      *,      * @param post,      * @throws IOException if an I/O exception occurs,      */,     private String sendPostData(PostMethod post, final int length) {,         // Buffer to hold the post body, except file content,         StringBuilder postedBody = new StringBuilder(1000);,         final String xmlFile = getXmlFile();,         if (xmlFile != null && xmlFile.length() > 0) {,             File xmlFileAsFile = new File(xmlFile);,             if(!(xmlFileAsFile.exists() && xmlFileAsFile.canRead())) {,                 throw new IllegalArgumentException(JMeterUtils.getResString("soap_sampler_file_invalid") // $NON-NLS-1$,                         + xmlFileAsFile.getAbsolutePath());,             },             // We just add placeholder text for file content,             postedBody.append("Filename: ").append(xmlFile).append("\n");,             postedBody.append("<actual file content, not shown here>");,             post.setRequestEntity(new RequestEntity() {,                 @Override,                 public boolean isRepeatable() {,                     return true;,                 }, ,                 @Override,                 public void writeRequest(OutputStream out) throws IOException {,                     InputStream in = null;,                     try{,                         in = new BufferedInputStream(new FileInputStream(xmlFile));,                         IOUtils.copy(in, out);,                         out.flush();,                     } finally {,                         IOUtils.closeQuietly(in);,                     },                 }, ,                 @Override,                 public long getContentLength() {,                     switch(length){,                         case -1:,                             return -1;,                         case 0: // No header provided,                             return new File(xmlFile).length();,                         default:,                             return length;,                         },                 }, ,                 @Override,                 public String getContentType() {,                     // TODO do we need to add a charset for the file contents?,                     return DEFAULT_CONTENT_TYPE; // $NON-NLS-1$,                 },             });,         } else {,             postedBody.append(getXmlData());,             post.setRequestEntity(new RequestEntity() {,                 @Override,                 public boolean isRepeatable() {,                     return true;,                 }, ,                 @Override,                 public void writeRequest(OutputStream out) throws IOException {,                     // charset must agree with content-type below,                     IOUtils.write(getXmlData(), out, ENCODING); // $NON-NLS-1$,                     out.flush();,                 }, ,                 @Override,                 public long getContentLength() {,                     try {,                         return getXmlData().getBytes(ENCODING).length; // so we don't generate chunked encoding,                     } catch (UnsupportedEncodingException e) {,                         log.warn(e.getLocalizedMessage());,                         return -1; // will use chunked encoding,                     },                 }, ,                 @Override,                 public String getContentType() {,                     return DEFAULT_CONTENT_TYPE+"; charset="+ENCODING; // $NON-NLS-1$,                 },             });,         },         return postedBody.toString();,     }, ,     @Override,     protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth) {, ,         String urlStr = url.toString();, ,         log.debug("Start : sample " + urlStr);, ,         PostMethod httpMethod;,         httpMethod = new PostMethod(urlStr);, ,         HTTPSampleResult res = new HTTPSampleResult();,         res.setMonitor(false);, ,         res.setSampleLabel(urlStr); // May be replaced later,         res.setHTTPMethod(HTTPConstants.POST);,         res.setURL(url);,         res.sampleStart(); // Count the retries as well in the time,         HttpClient client = null;,         InputStream instream = null;,         try {,             int content_len = setPostHeaders(httpMethod);,             client = setupConnection(url, httpMethod, res);,             setSavedClient(client);, ,             res.setQueryString(sendPostData(httpMethod,content_len));,             int statusCode = client.executeMethod(httpMethod);,             // Some headers are set by executeMethod(),             res.setRequestHeaders(getConnectionHeaders(httpMethod));, ,             // Request sent. Now get the response:,             instream = httpMethod.getResponseBodyAsStream();, ,             if (instream != null) {// will be null for HEAD, ,                 org.apache.commons.httpclient.Header responseHeader = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_ENCODING);,                 if (responseHeader != null && HTTPConstants.ENCODING_GZIP.equals(responseHeader.getValue())) {,                     instream = new GZIPInputStream(instream);,                 }, ,                 //int contentLength = httpMethod.getResponseContentLength();Not visible ...,                 //TODO size ouststream according to actual content length,                 ByteArrayOutputStream outstream = new ByteArrayOutputStream(4 * 1024);,                 //contentLength > 0 ? contentLength : DEFAULT_INITIAL_BUFFER_SIZE);,                 byte[] buffer = new byte[4096];,                 int len;,                 boolean first = true;// first response,                 while ((len = instream.read(buffer)) > 0) {,                     if (first) { // save the latency,                         res.latencyEnd();,                         first = false;,                     },                     outstream.write(buffer, 0, len);,                 }, ,                 res.setResponseData(outstream.toByteArray());,                 outstream.close();, ,             }, ,             res.sampleEnd();,             // Done with the sampling proper., ,             // Now collect the results into the HTTPSampleResult:, ,             res.setSampleLabel(httpMethod.getURI().toString());,             // Pick up Actual path (after redirects), ,             res.setResponseCode(Integer.toString(statusCode));,             res.setSuccessful(isSuccessCode(statusCode));, ,             res.setResponseMessage(httpMethod.getStatusText());, ,             // Set up the defaults (may be overridden below),             res.setDataEncoding(ENCODING);,             res.setContentType(DEFAULT_CONTENT_TYPE);,             String ct = null;,             org.apache.commons.httpclient.Header h,                     = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);,             if (h != null)// Can be missing, e.g. on redirect,             {,                 ct = h.getValue();,                 res.setContentType(ct);// e.g. text/html; charset=ISO-8859-1,                 res.setEncodingAndType(ct);,             }, ,             res.setResponseHeaders(getResponseHeaders(httpMethod));,             if (res.isRedirect()) {,                 res.setRedirectLocation(httpMethod.getResponseHeader(HTTPConstants.HEADER_LOCATION).getValue());,             }, ,             // If we redirected automatically, the URL may have changed,             if (getAutoRedirects()) {,                 res.setURL(new URL(httpMethod.getURI().toString()));,             }, ,             // Store any cookies received in the cookie manager:,             saveConnectionCookies(httpMethod, res.getURL(), getCookieManager());, ,             // Save cache information,             final CacheManager cacheManager = getCacheManager();,             if (cacheManager != null){,                 cacheManager.saveDetails(httpMethod, res);,             }, ,             // Follow redirects and download page resources if appropriate:,             res = resultProcessing(areFollowingRedirect, frameDepth, res);, ,             log.debug("End : sample");,             httpMethod.releaseConnection();,             return res;,         } catch (IllegalArgumentException e)// e.g. some kinds of invalid URL,         {,             res.sampleEnd();,             errorResult(e, res);,             return res;,         } catch (IOException e) {,             res.sampleEnd();,             errorResult(e, res);,             return res;,         } finally {,             JOrphanUtils.closeQuietly(instream);,             setSavedClient(null);,             httpMethod.releaseConnection();,         },     }, ,     @Override,     public URL getUrl() throws MalformedURLException {,         return new URL(getURLData());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/http/sampler/SoapSampler.java,,177-210,[            post.setRequestEntity(new RequestEntity() {,                 @Override,                 public boolean isRepeatable() {,                     return true;,                 }, ,                 @Override,                 public void writeRequest(OutputStream out) throws IOException {,                     InputStream in = null;,                     try{,                         in = new BufferedInputStream(new FileInputStream(xmlFile));,                         IOUtils.copy(in, out);,                         out.flush();,                     } finally {,                         IOUtils.closeQuietly(in);,                     },                 }, ,                 @Override,                 public long getContentLength() {,                     switch(length){,                         case -1:,                             return -1;,                         case 0: // No header provided,                             return new File(xmlFile).length();,                         default:,                             return length;,                         },                 }, ,                 @Override,                 public String getContentType() {,                     // TODO do we need to add a charset for the file contents?,                     return DEFAULT_CONTENT_TYPE; // $NON-NLS-1$],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java,setTimeout,686-687,[        setProperty(TIMEOUT, text);,     }],,setTimeOut,750-751,[        this.timeOut = timeOut;,     }],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java,getRandomFileName,164-164,[                File one = fileList[ThreadLocalRandom.current().nextInt(fileList.length)];],,getRandomFileName,163-163,[                File [] fileList = src.listFiles(new JMeterFileFilter(new String[] { ".xml" }, false));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java,sample,622-622,[        } catch (Exception exception) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/util/Base64Encoder.java,encode,41-41,[        return encode(s.getBytes()); // TODO - charset?],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/protocol/http/util/ConversionUtils.java,getEncodingFromContentType,68-68,[                if (charSet != null) {],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/protocol/http/util/HC4TrustAllSSLSocketFactory.java,createLayeredSocket,91-91,[        SSLSocket sslSocket = (SSLSocket) this.factory.createSocket(],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/util/HTTPArgument.java,,41-267,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private static final String ALWAYS_ENCODE = "HTTPArgument.always_encode";, ,     private static final String USE_EQUALS = "HTTPArgument.use_equals";, ,     private static final EncoderCache cache = new EncoderCache(1000);, ,     /**,      * Constructor for the Argument object.,      * <p>,      * The value is assumed to be not encoded.,      *,      * @param name,      *            name of the paramter,      * @param value,      *            value of the parameter,      * @param metadata,      *            the separator to use between name and value,      */,     public HTTPArgument(String name, String value, String metadata) {,         this(name, value, false);,         this.setMetaData(metadata);,     }, ,     public void setUseEquals(boolean ue) {,         if (ue) {,             setMetaData("=");,         } else {,             setMetaData("");,         },         setProperty(new BooleanProperty(USE_EQUALS, ue));,     }, ,     public boolean isUseEquals() {,         boolean eq = getPropertyAsBoolean(USE_EQUALS);,         if (getMetaData().equals("=") || (getValue() != null && getValue().length() > 0)) {,             setUseEquals(true);,             return true;,         },         return eq;, ,     }, ,     public void setAlwaysEncoded(boolean ae) {,         setProperty(new BooleanProperty(ALWAYS_ENCODE, ae));,     }, ,     public boolean isAlwaysEncoded() {,         return getPropertyAsBoolean(ALWAYS_ENCODE);,     }, ,     /**,      * Constructor for the Argument object.,      * <p>,      * The value is assumed to be not encoded.,      *,      * @param name,      *            name of the parameter,      * @param value,      *            value of the parameter,      */,     public HTTPArgument(String name, String value) {,         this(name, value, false);,     }, ,     /**,      * @param name,      *            name of the parameter,      * @param value,      *            value of the parameter,      * @param alreadyEncoded,      *            <code>true</code> if the value is already encoded, in which,      *            case they are decoded before storage,      */,     public HTTPArgument(String name, String value, boolean alreadyEncoded) {,         // We assume the argument value is encoded according to the HTTP spec, i.e. UTF-8,         this(name, value, alreadyEncoded, EncoderCache.URL_ARGUMENT_ENCODING);,     }, ,     /**,      * Construct a new HTTPArgument instance; alwaysEncoded is set to true.,      *,      * @param name the name of the parameter,      * @param value the value of the parameter,      * @param alreadyEncoded true if the name and value is already encoded, in which case they are decoded before storage.,      * @param contentEncoding the encoding used for the parameter value,      */,     public HTTPArgument(String name, String value, boolean alreadyEncoded, String contentEncoding) {,         setAlwaysEncoded(true);,         if (alreadyEncoded) {,             try {,                 // We assume the name is always encoded according to spec,                 if(log.isDebugEnabled()) {,                     log.debug("Decoding name, calling URLDecoder.decode with '"+name+"' and contentEncoding:"+EncoderCache.URL_ARGUMENT_ENCODING);,                 },                 name = URLDecoder.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);,                 // The value is encoded in the specified encoding,                 if(log.isDebugEnabled()) {,                     log.debug("Decoding value, calling URLDecoder.decode with '"+value+"' and contentEncoding:"+contentEncoding);,                 },                 value = URLDecoder.decode(value, contentEncoding);,             } catch (UnsupportedEncodingException e) {,                 log.error(contentEncoding + " encoding not supported!");,                 throw new Error(e.toString(), e);,             },         },         setName(name);,         setValue(value);,         setMetaData("=");,     }, ,     /**,      * Construct a new HTTPArgument instance,      *,      * @param name,      *            the name of the parameter,      * @param value,      *            the value of the parameter,      * @param metaData,      *            the separator to use between name and value,      * @param alreadyEncoded,      *            true if the name and value is already encoded,      */,     public HTTPArgument(String name, String value, String metaData, boolean alreadyEncoded) {,         // We assume the argument value is encoded according to the HTTP spec, i.e. UTF-8,         this(name, value, metaData, alreadyEncoded, EncoderCache.URL_ARGUMENT_ENCODING);,     }, ,     /**,      * Construct a new HTTPArgument instance,      *,      * @param name the name of the parameter,      * @param value the value of the parameter,      * @param metaData the separator to use between name and value,      * @param alreadyEncoded true if the name and value is already encoded,      * @param contentEncoding the encoding used for the parameter value,      */,     public HTTPArgument(String name, String value, String metaData, boolean alreadyEncoded, String contentEncoding) {,         this(name, value, alreadyEncoded, contentEncoding);,         setMetaData(metaData);,     }, ,     public HTTPArgument(Argument arg) {,         this(arg.getName(), arg.getValue(), arg.getMetaData());,     }, ,     /**,      * Constructor for the Argument object,      */,     public HTTPArgument() {,     }, ,     /**,      * Sets the Name attribute of the Argument object.,      *,      * @param newName,      *            the new Name value,      */,     @Override,     public void setName(String newName) {,         if (newName == null || !newName.equals(getName())) {,             super.setName(newName);,         },     }, ,     /**,      * Get the argument value encoded using UTF-8,      *,      * @return the argument value encoded in UTF-8,      */,     public String getEncodedValue() {,         // Encode according to the HTTP spec, i.e. UTF-8,         try {,             return getEncodedValue(EncoderCache.URL_ARGUMENT_ENCODING);,         } catch (UnsupportedEncodingException e) {,             // This can't happen (how should utf8 not be supported!?!),,             // so just throw an Error:,             throw new Error("Should not happen: " + e.toString());,         },     }, ,     /**,      * Get the argument value encoded in the specified encoding,      *,      * @param contentEncoding the encoding to use when encoding the argument value,      * @return the argument value encoded in the specified encoding,      * @throws UnsupportedEncodingException of the encoding is not supported,      */,     public String getEncodedValue(String contentEncoding) throws UnsupportedEncodingException {,         if (isAlwaysEncoded()) {,             return cache.getEncoded(getValue(), contentEncoding);,         } else {,             return getValue();,         },     }, ,     public String getEncodedName() {,         if (isAlwaysEncoded()) {,             return cache.getEncoded(getName());,         } else {,             return getName();,         }, ,     }, ,     /**,      * Converts all {@link Argument} entries in the collection to {@link HTTPArgument} entries.,      * ,      * @param args collection of {@link Argument} and/or {@link HTTPArgument} entries,      */,     public static void convertArgumentsToHTTP(Arguments args) {,         List<Argument> newArguments = new LinkedList<>();,         PropertyIterator iter = args.getArguments().iterator();,         while (iter.hasNext()) {,             Argument arg = (Argument) iter.next().getObjectValue();,             if (!(arg instanceof HTTPArgument)) {,                 newArguments.add(new HTTPArgument(arg));,             } else {,                 newArguments.add(arg);,             },         },         args.removeAllArguments();,         args.setArguments(newArguments);,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/util/HTTPFileArg.java,,53-231,[    public HTTPFileArg() {,     }, ,     /**,      * Constructor for the HTTPFileArg object with given path.,      *,      * @param path,      *            path to the file to use,      * @throws IllegalArgumentException,      *             if <code>path</code> is <code>null</code>,      */,     public HTTPFileArg(String path) {,         this(path, "", "");,     }, ,     /**,      * Constructor for the HTTPFileArg object with full information.,      *,      * @param path,      *            path of the file to use,      * @param paramname,      *            name of the http parameter to use for the file,      * @param mimetype,      *            mimetype of the file,      * @throws IllegalArgumentException,      *             if any parameter is <code>null</code>,      */,     public HTTPFileArg(String path, String paramname, String mimetype) {,         if (path == null || paramname == null || mimetype == null){,             throw new IllegalArgumentException("Parameters must not be null");,         },         setPath(path);,         setParamName(paramname);,         setMimeType(mimetype);,     }, ,     /**,      * Constructor for the HTTPFileArg object with full information,,      * using existing properties,      *,      * @param path,      *            path of the file to use,      * @param paramname,      *            name of the http parameter to use for the file,      * @param mimetype,      *            mimetype of the file,      * @throws IllegalArgumentException,      *             if any parameter is <code>null</code>,      */,     public HTTPFileArg(JMeterProperty path, JMeterProperty paramname, JMeterProperty mimetype) {,         if (path == null || paramname == null || mimetype == null){,             throw new IllegalArgumentException("Parameters must not be null");,         },         setProperty(FILEPATH, path);,         setProperty(MIMETYPE, mimetype);,         setProperty(PARAMNAME, paramname);,     }, ,     private void setProperty(String name, JMeterProperty prop) {,         JMeterProperty jmp = prop.clone();,         jmp.setName(name);,         setProperty(jmp);,     }, ,     /**,      * Copy Constructor.,      *,      * @param file,      *            {@link HTTPFileArg} to get information about the path, http,      *            parameter name and mimetype of the file,      * @throws IllegalArgumentException,      *             if any of those retrieved information is <code>null</code>,      */,     public HTTPFileArg(HTTPFileArg file) {,         this(file.getPath(), file.getParamName(), file.getMimeType());,     }, ,     /**,      * Set the http parameter name of the File.,      *,      * @param newParamName,      * the new http parameter name,      */,     public void setParamName(String newParamName) {,         setProperty(new StringProperty(PARAMNAME, newParamName));,     }, ,     /**,      * Get the http parameter name of the File.,      *,      * @return the http parameter name,      */,     public String getParamName() {,         return getPropertyAsString(PARAMNAME);,     }, ,     /**,      * Set the mimetype of the File.,      *,      * @param newMimeType,      * the new mimetype,      */,     public void setMimeType(String newMimeType) {,         setProperty(new StringProperty(MIMETYPE, newMimeType));,     }, ,     /**,      * Get the mimetype of the File.,      *,      * @return the http parameter mimetype,      */,     public String getMimeType() {,         return getPropertyAsString(MIMETYPE);,     }, ,     /**,      * Set the path of the File.,      *,      * @param newPath,      *  the new path,      */,     public void setPath(String newPath) {,         setProperty(new StringProperty(FILEPATH, newPath));,     }, ,     /**,      * Get the path of the File.,      *,      * @return the file's path,      */,     public String getPath() {,         return getPropertyAsString(FILEPATH);,     }, ,    /**,     * Sets the body header for the HTTPFileArg object. Header,     * contains path, parameter name and mime type information.,     * This is only intended for use by methods which need to store information,     * temporarily whilst creating the HTTP body.,     * ,     * @param newHeader,     *  the new Header value,     */,    public void setHeader(String newHeader) {,        header = newHeader;,    }, ,    /**,     * Gets the saved body header for the HTTPFileArg object.,     *,     * @return saved body header,     */,    public String getHeader() {,        return header;,    }, ,     /**,      * returns path, param name, mime type information of,      * HTTPFileArg object.,      *,      * @return the string demonstration of HTTPFileArg object in this,      * format:,      *    "path:'&lt;PATH&gt;'|param:'&lt;PARAM NAME&gt;'|mimetype:'&lt;MIME TYPE&gt;'",      */,     @Override,     public String toString() {,         return "path:'" + getPath(),             + "'|param:'" + getParamName(),             + "'|mimetype:'" + getMimeType() + "'";,     }, ,     /**,      * Check if the entry is not empty.,      * @return true if Path, name or mimetype fields are not the empty string,      */,     public boolean isNotEmpty() {,         return getPath().length() > 0,             || getParamName().length() > 0,             || getMimeType().length() > 0; // TODO should we allow mimetype only?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/http/util/HTTPFileArgs.java,,44-234,[    public HTTPFileArgs() {,         setProperty(new CollectionProperty(HTTP_FILE_ARGS, new ArrayList<HTTPFileArg>()));,     }, ,     /**,      * Get the files.,      *,      * @return the files,      */,     public CollectionProperty getHTTPFileArgsCollection() {,         return (CollectionProperty) getProperty(HTTP_FILE_ARGS);,     }, ,     /**,      * Clear the files.,      */,     @Override,     public void clear() {,         super.clear();,         setProperty(new CollectionProperty(HTTP_FILE_ARGS, new ArrayList<HTTPFileArg>()));,     }, ,     /**,      * Set the list of files. Any existing files will be lost.,      *,      * @param files the new files,      */,     public void setHTTPFileArgs(List<HTTPFileArg> files) {,         setProperty(new CollectionProperty(HTTP_FILE_ARGS, files));,     }, ,     /**,      * Add a new file with the given path.,      *,      * @param path,      *  the path of the file,      */,     public void addHTTPFileArg(String path) {,         addHTTPFileArg(new HTTPFileArg(path));,     }, ,     /**,      * Add a new file.,      *,      * @param file,      *  the new file,      */,     public void addHTTPFileArg(HTTPFileArg file) {,         TestElementProperty newHTTPFileArg = new TestElementProperty(file.getPath(), file);,         if (isRunningVersion()) {,             this.setTemporary(newHTTPFileArg);,         },         getHTTPFileArgsCollection().addItem(newHTTPFileArg);,     }, ,     /**,      * adds a new File to the HTTPFileArgs list to be uploaded with http,      * request.,      *,      * @param path file full path.,      * @param param http parameter name.,      * @param mime mime type of file.,      */,     public void addHTTPFileArg(String path, String param, String mime) {,         addHTTPFileArg(new HTTPFileArg(path, param, mime));,     }, ,     /**,      * Get a PropertyIterator of the files.,      *,      * @return an iteration of the files,      */,     public PropertyIterator iterator() {,         return getHTTPFileArgsCollection().iterator();,     }, ,     /**,      * Get the current arguments as an array.,      *,      * @return an array of file arguments,      */,     public HTTPFileArg[] asArray(){,         CollectionProperty props = getHTTPFileArgsCollection();,         final int size = props.size();,         HTTPFileArg[] args = new HTTPFileArg[size];,         for(int i=0; i<size; i++){,             args[i]=(HTTPFileArg) props.get(i).getObjectValue();,         },         return args;,     },     /**,      * Create a string representation of the files.,      *,      * @return the string representation of the files,      */,     @Override,     public String toString() {,         StringBuilder str = new StringBuilder();,         PropertyIterator iter = getHTTPFileArgsCollection().iterator();,         while (iter.hasNext()) {,             HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();,             str.append(file.toString());,             if (iter.hasNext()) {,                 str.append("\n"); //$NON-NLS-1$,             },         },         return str.toString();,     }, ,     /**,      * Remove the specified file from the list.,      *,      * @param row,      *  the index of the file to remove,      */,     public void removeHTTPFileArg(int row) {,         if (row < getHTTPFileArgCount()) {,             getHTTPFileArgsCollection().remove(row);,         },     }, ,     /**,      * Remove the specified file from the list.,      *,      * @param file,      *  the file to remove,      */,     public void removeHTTPFileArg(HTTPFileArg file) {,         PropertyIterator iter = getHTTPFileArgsCollection().iterator();,         while (iter.hasNext()) {,             HTTPFileArg item = (HTTPFileArg) iter.next().getObjectValue();,             if (file.equals(item)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove the file with the specified path.,      *,      * @param filePath,      *  the path of the file to remove,      */,     public void removeHTTPFileArg(String filePath) {,         PropertyIterator iter = getHTTPFileArgsCollection().iterator();,         while (iter.hasNext()) {,             HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();,             if (file.getPath().equals(filePath)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove all files from the list.,      */,     public void removeAllHTTPFileArgs() {,         getHTTPFileArgsCollection().clear();,     }, ,     /**,      * Add a new empty file to the list. The new file will have the,      * empty string as its path.,      */,     public void addEmptyHTTPFileArg() {,         addHTTPFileArg(new HTTPFileArg(""));,     }, ,     /**,      * Get the number of files in the list.,      *,      * @return the number of files,      */,     public int getHTTPFileArgCount() {,         return getHTTPFileArgsCollection().size();,     }, ,     /**,      * Get a single file.,      *,      * @param row,      *  the index of the file to return.,      * @return the file at the specified index, or null if no file,      *  exists at that index.,      */,     public HTTPFileArg getHTTPFileArg(int row) {,         HTTPFileArg file = null;,         if (row < getHTTPFileArgCount()) {,             file = (HTTPFileArg) getHTTPFileArgsCollection().get(row).getObjectValue();,         },         return file;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/http/util/WSDLHelper.java,main,420-420,[        } catch (Exception exception) {],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/jmeter/protocol/http/util/WSDLHelper.java,getSOAPBindings,333-333,[                nd.getAttribute("name");],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java,excludeFiles,160-160,[            EXCFILE = filenames;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java,excludePattern,200-200,[            EXCPTRN = regexp;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java,includeFiles,145-145,[            INCFILE = filenames;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java,includePattern,177-177,[            INCPTRN = regexp;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,isFiltered,153-153,[        ((HTTPSampler)sampler).setCookieManager(cm);],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,clone,90-101,[        if(cookieManagers == null),         {,             cookieManagers = new ConcurrentHashMap<>();,         },         if(managersInUse == null),         {,             managersInUse = Collections.synchronizedSet(new HashSet<CookieManager>());,         },         SessionFilter f = new SessionFilter();,         f.cookieManagers = cookieManagers;,         f.managersInUse = managersInUse;,         return f;],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,getCookieManager,167-167,[                managersInUse.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,threadFinished,216-216,[            managersInUse.notify();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,getCookieManager,180-180,[            cm = cookieManagers.get(ipAddr);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,reset,82-82,[        cookieManagers.clear();],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/jmeter/protocol/http/util/accesslog/SharedTCLogParser.java,clone,42-45,[        SharedTCLogParser parser = new SharedTCLogParser();,         parser.FILENAME = FILENAME;,         parser.FILTER = FILTER;,         return parser;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,convertStringToJMRequest,485-485,[        ((HTTPSamplerBase) el).parseArguments(text);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,parseOneParameter,524-524,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,getReader,211-211,[            return new BufferedReader(new FileReader(file));],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,getReader,214-214,[        return new BufferedReader(new InputStreamReader(in));],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,checkParamFormat,336-336,[            this.checkParamFormat(line);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,,102-102,[    protected boolean useFILE = true;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/java/config/JavaConfig.java,,43-118,[    public JavaConfig() {,         setArguments(new Arguments());,     }, ,     /**,      * Sets the class name attribute of the JavaConfig object. This is the class,      * name of the,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerClient},      * implementation which will be used to execute the test.,      *,      * @param classname,      *            the new classname value,      */,     public void setClassname(String classname) {,         setProperty(JavaSampler.CLASSNAME, classname);,     }, ,     /**,      * Gets the class name attribute of the JavaConfig object. This is the class,      * name of the,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerClient},      * implementation which will be used to execute the test.,      *,      * @return the classname value,      */,     public String getClassname() {,         return getPropertyAsString(JavaSampler.CLASSNAME);,     }, ,     /**,      * Adds an argument to the list of arguments for this JavaConfig object. The,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerClient},      * implementation can access these arguments through the,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerContext}.,      *,      * @param name,      *            the name of the argument to be added,      * @param value,      *            the value of the argument to be added,      */,     public void addArgument(String name, String value) {,         Arguments args = this.getArguments();,         args.addArgument(name, value);,     }, ,     /**,      * Removes all of the arguments associated with this JavaConfig object.,      */,     public void removeArguments() {,         setProperty(new TestElementProperty(JavaSampler.ARGUMENTS, new Arguments()));,     }, ,     /**,      * Set all of the arguments for this JavaConfig object. This will replace,      * any previously added arguments. The,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerClient},      * implementation can access these arguments through the,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerContext}.,      *,      * @param args,      *            the new arguments,      */,     public void setArguments(Arguments args) {,         setProperty(new TestElementProperty(JavaSampler.ARGUMENTS, args));,     }, ,     /**,      * Gets the arguments for this JavaConfig object. The,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerClient},      * implementation can access these arguments through the,      * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerContext}.,      *,      * @return the arguments,      */,     public Arguments getArguments() {,         return (Arguments) getProperty(JavaSampler.ARGUMENTS).getObjectValue();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java,modifyTestElement,267-267,[        ((JavaConfig) config).setArguments((Arguments) argsPanel.createTestElement());],,modifyTestElement,268-268,[        ((JavaConfig) config).setClassname(String.valueOf(classnameCombo.getSelectedItem()));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java,actionPerformed,208-208,[            } catch (Exception e) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java,configure,311-311,[        JUnitSampler sampler = (JUnitSampler)el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java,modifyTestElement,277-277,[        JUnitSampler sampler = (JUnitSampler)el;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java,,41-89,[public class JSR223Sampler extends JSR223TestElement implements Cloneable, Sampler, TestBean, ConfigMergabilityIndicator {,     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(,             Arrays.asList("org.apache.jmeter.config.gui.SimpleConfigGui"));, ,     private static final long serialVersionUID = 234L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     @Override,     public SampleResult sample(Entry entry) {,         SampleResult result = new SampleResult();,         result.setSampleLabel(getName());,         result.setSuccessful(true);,         result.setResponseCodeOK();,         result.setResponseMessageOK();, ,         final String filename = getFilename();,         if (filename.length() > 0){,             result.setSamplerData("File: "+filename);,         } else {,             result.setSamplerData(getScript());,         },         result.setDataType(SampleResult.TEXT);,         result.sampleStart();,         try {,             ScriptEngine scriptEngine = getScriptEngine();,             Bindings bindings = scriptEngine.createBindings();,             bindings.put("SampleResult",result);,             Object ret = processFileOrScript(scriptEngine, bindings);,             if (ret != null && (result.getResponseData() == null || result.getResponseData()==SampleResult.EMPTY_BA)){,                 result.setResponseData(ret.toString(), null);,             },         } catch (IOException | ScriptException e) {,             log.error("Problem in JSR223 script "+getName()+", message:"+e, e);,             result.setSuccessful(false);,             result.setResponseCode("500"); // $NON-NLS-1$,             result.setResponseMessage(e.toString());,         },         result.sampleEnd();,         return result;,     }, ,     /**,      * @see org.apache.jmeter.samplers.AbstractSampler#applies(org.apache.jmeter.config.ConfigTestElement),      */,     @Override,     public boolean applies(ConfigTestElement configElement) {,         String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();,         return APPLIABLE_CONFIG_CLASSES.contains(guiClass);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/java/sampler/JUnitSampler.java,,675-679,[                protectable = new Protectable() {,                     @Override,                     public void protect() throws Throwable {,                         at.runTest();,                     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/java/sampler/JUnitSampler.java,,684-701,[                protectable = new Protectable() {,                     @Override,                     public void protect() throws Throwable {,                         try {,                             m.invoke(theClazz,new Object[0]);,                         } catch (InvocationTargetException e) {,                             /*,                              * Calling a method via reflection results in wrapping any,                              * Exceptions in ITE; unwrap these here so runProtected can,                              * allocate them correctly.,                              */,                             Throwable t = e.getCause();,                             if (t != null) {,                                 throw t;,                             },                             throw e;,                         },                     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/java/sampler/JavaSampler.java,createJavaClient,231-231,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/java/sampler/JavaSampler.java,initClass,126-126,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,setArgument,392-392,[            pstmt.setBytes(index, argument.getBytes());],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,getPreparedStatement,447-447,[                pstmt = conn.prepareStatement(getQuery());],,getPreparedStatement,449-449,[            pstmt.setQueryTimeout(getIntegerQueryTimeout());],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,execute,168-168,[                    rs = stmt.executeQuery(getQuery());],,execute,184-184,[                stmt.executeUpdate(getQuery());],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,getPreparedStatement,447-447,[                pstmt = conn.prepareStatement(getQuery());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,,428-434,[            Map<String, PreparedStatement> lruMap = new LRUMap(MAX_OPEN_PREPARED_STATEMENTS) {,                 private static final long serialVersionUID = 1L;,                 @Override,                 protected boolean removeLRU(LinkEntry entry) {,                     PreparedStatement preparedStatement = (PreparedStatement)entry.getValue();,                     close(preparedStatement);,                     return true;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java,getConnection,285-285,[            if (dsc != null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java,sample,95-95,[            res.setResponseData(ex.getMessage().getBytes());],,sample,100-100,[            res.setResponseData(ex.getMessage().getBytes());],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jmeter/protocol/jms/client/InitialContextFactory.java,lookupContext,80-80,[                } catch (Exception e) {],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java,modifyTestElement,97-97,[        JMSProperties jmsProperties = (JMSProperties) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java,configure,266-266,[        PublisherSampler sampler = (PublisherSampler) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java,modifyTestElement,156-156,[        PublisherSampler sampler = (PublisherSampler) s;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/jms/control/gui/JMSSubscriberGui.java,configure,214-214,[        SubscriberSampler sampler = (SubscriberSampler) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/jms/control/gui/JMSSubscriberGui.java,modifyTestElement,144-144,[        SubscriberSampler sampler = (SubscriberSampler) s;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/jms/sampler/JMSProperties.java,,48-246,[    public JMSProperties() {,         setProperty(new CollectionProperty(JMS_PROPERTIES, new ArrayList<JMSProperty>()));,     }, ,     /**,      * Get the JmsPropertiess.,      *,      * @return the JmsProperties,      */,     public CollectionProperty getProperties() {,         return (CollectionProperty) getProperty(JMS_PROPERTIES);,     }, ,     /**,      * Clear the JmsProperties.,      */,     @Override,     public void clear() {,         super.clear();,         setProperty(new CollectionProperty(JMS_PROPERTIES, new ArrayList<JMSProperty>()));,     }, ,     /**,      * Set the list of JmsProperties. Any existing JmsProperties will be lost.,      *,      * @param jmsProperties,      *            the new JmsProperties,      */,     public void setProperties(List<JMSProperty> jmsProperties) {,         setProperty(new CollectionProperty(JMS_PROPERTIES, jmsProperties));,     }, ,     /**,      * Get the JmsProperties as a Map. Each JMSProperty name is used as the key, and,      * its value as the value.,      *,      * @return a new Map with String keys and values containing the JmsProperties,      */,     public Map<String, Object> getJmsPropertysAsMap() {,         PropertyIterator iter = getProperties().iterator();,         Map<String, Object> argMap = new LinkedHashMap<>();,         while (iter.hasNext()) {,             JMSProperty arg = (JMSProperty) iter.next().getObjectValue();,             // Because CollectionProperty.mergeIn will not prevent adding two,             // properties of the same name, we need to select the first value so,             // that this element's values prevail over defaults provided by,             // configuration,             // elements:,             if (!argMap.containsKey(arg.getName())) {,                 argMap.put(arg.getName(), arg.getValueAsObject());,             },         },         return argMap;,     }, ,     /**,      * Add a new JMSProperty with the given name and value.,      *,      * @param name,      *            the name of the JMSProperty,      * @param value,      *            the value of the JMSProperty,      */,     public void addJmsProperty(String name, String value) {,         addJmsProperty(new JMSProperty(name, value));,     }, ,     /**,      * Add a new argument.,      *,      * @param arg,      *            the new argument,      */,     public void addJmsProperty(JMSProperty arg) {,         TestElementProperty newArg = new TestElementProperty(arg.getName(), arg);,         if (isRunningVersion()) {,             this.setTemporary(newArg);,         },         getProperties().addItem(newArg);,     }, ,     /**,      * Add a new argument with the given name, value, and metadata.,      *,      * @param name,      *            the name of the argument,      * @param value,      *            the value of the argument,      * @param type,      *            the type for the argument,      */,     public void addJmsProperty(String name, String value, String type) {,         addJmsProperty(new JMSProperty(name, value, type));,     }, ,     /**,      * Get a PropertyIterator of the JmsProperties.,      *,      * @return an iteration of the JmsProperties,      */,     public PropertyIterator iterator() {,         return getProperties().iterator();,     }, ,     /**,      * Create a string representation of the JmsProperties.,      *,      * @return the string representation of the JmsProperties,      */,     @Override,     public String toString() {,         StringBuilder str = new StringBuilder();,         PropertyIterator iter = getProperties().iterator();,         while (iter.hasNext()) {,             JMSProperty arg = (JMSProperty) iter.next().getObjectValue();,             str.append(arg.toString());,             if (iter.hasNext()) {,                 str.append(","); //$NON-NLS-1$,             },         },         return str.toString();,     }, ,     /**,      * Remove the specified argument from the list.,      *,      * @param row,      *            the index of the argument to remove,      */,     public void removeJmsProperty(int row) {,         if (row < getProperties().size()) {,             getProperties().remove(row);,         },     }, ,     /**,      * Remove the specified argument from the list.,      *,      * @param arg,      *            the argument to remove,      */,     public void removeJmsProperty(JMSProperty arg) {,         PropertyIterator iter = getProperties().iterator();,         while (iter.hasNext()) {,             JMSProperty item = (JMSProperty) iter.next().getObjectValue();,             if (arg.equals(item)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove the argument with the specified name.,      *,      * @param argName,      *            the name of the argument to remove,      */,     public void removeJmsProperty(String argName) {,         PropertyIterator iter = getProperties().iterator();,         while (iter.hasNext()) {,             JMSProperty arg = (JMSProperty) iter.next().getObjectValue();,             if (arg.getName().equals(argName)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove all JmsProperties from the list.,      */,     public void removeAllJmsPropertys() {,         getProperties().clear();,     }, ,     /**,      * Get the number of JmsProperties in the list.,      *,      * @return the number of JmsProperties,      */,     public int getJmsPropertyCount() {,         return getProperties().size();,     }, ,     /**,      * Get a single JMSProperty.,      *,      * @param row,      *            the index of the JMSProperty to return.,      * @return the JMSProperty at the specified index, or null if no JMSProperty,      *         exists at that index.,      */,     public JMSProperty getJmsProperty(int row) {,         JMSProperty argument = null;, ,         if (row < getProperties().size()) {,             argument = (JMSProperty) getProperties().get(row).getObjectValue();,         }, ,         return argument;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/jms/sampler/JMSProperty.java,,47-168,[    private static final String DFLT_TYPE = String.class.getName();, ,     /**,      * Create a new JmsProperty without a name, value, or metadata.,      */,     public JMSProperty() {,     }, ,     /**,      * Create a new JmsProperty with the specified name and value, and String type.,      *,      * @param name,      *            the prop name,      * @param value,      *            the prop value,      */,     public JMSProperty(String name, String value) {,         this(name, value, DFLT_TYPE);,     }, ,     /**,      * Create a new JmsProperty with the specified name and value, and String type.,      *,      * @param name,      *            the prop name,      * @param value,      *            the prop value,      * @param type,      *            the type type,      */,     public JMSProperty(String name, String value, String type) {,         setProperty(new StringProperty(PROP_NAME, name));,         setProperty(new StringProperty(PROP_VALUE, value));,         setProperty(new StringProperty(PROP_TYPE, type));,     },     ,     /**,      * Set the name of the JmsProperty.,      *,      * @param newName,      *            the new name,      */,     @Override,     public void setName(String newName) {,         setProperty(new StringProperty(PROP_NAME, newName));,     }, ,     /**,      * Get the name of the JmsProperty.,      *,      * @return the attribute's name,      */,     @Override,     public String getName() {,         return getPropertyAsString(PROP_NAME);,     }, ,     /**,      * Sets the value of the JmsProperty.,      *,      * @param newValue,      *            the new value,      */,     public void setValue(String newValue) {,         setProperty(new StringProperty(PROP_VALUE, newValue));,     }, ,     /**,      * Gets the value of the JmsProperty object.,      *,      * @return the attribute's value,      */,     public String getValue() {,         return getPropertyAsString(PROP_VALUE);,     },     ,     /**,      * Sets the Meta Data attribute of the JmsProperty.,      *,      * @param type,      *            the new type,      */,     public void setType(String type) {,         setProperty(new StringProperty(PROP_TYPE, type));,     }, ,     /**,      * Gets the Meta Data attribute of the JmsProperty.,      *,      * @return the MetaData value,      */,     public String getType() {,         return getPropertyAsString(PROP_TYPE);,     }, ,     @Override,     public String toString() {,         return getName() + "," + getValue()+","+getType();,     }, ,     public Object getValueAsObject() {,         String type = getType();,         String value = getValue();,         ,         if(type.equals(Boolean.class.getName())) {,             return Boolean.valueOf(value);,         } else if(type.equals(Byte.class.getName())) {,             return Byte.valueOf(value);,         } else if(type.equals(Short.class.getName())) {,             return Short.valueOf(value);,         } else if(type.equals(Integer.class.getName())) {,             return Integer.valueOf(value);,         } else if(type.equals(Long.class.getName())) {,             return Long.valueOf(value);,         } else if(type.equals(Float.class.getName())) {,             return Float.valueOf(value);,         } else if(type.equals(Double.class.getName())) {,             return Double.valueOf(value);,         } else if(type.equals(String.class.getName())) {,             return value;,         } else {,             return null;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,getJMSSelector,539-539,[        return getPropertyAsString(JMSSampler.JMS_SELECTOR, JMS_SELECTOR_DEFAULT);],,getJmsSelector,415-415,[        return getPropertyAsString(JMS_SELECTOR, JMS_SELECTOR_DEFAULT);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,setJMSSelector,546-547,[        setProperty(JMSSampler.JMS_SELECTOR, selector, JMS_SELECTOR_DEFAULT);,     }],,setJmsSelector,433-434,[        setProperty(JMS_SELECTOR, jmsSelector, JMS_SELECTOR_DEFAULT);,     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,sample,175-175,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,threadStarted,389-389,[        } catch (Exception e) {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java,getFileObjectContent,382-382,[        readObject = (Serializable) xstream.fromXML(inputStream, readObject);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java,transformXmlToObjectMessage,404-404,[          readObject = (Serializable) xstream.fromXML(xmlMessage, readObject);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java,sample,212-212,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java,sample,192-192,[            result.setResponseData(buffer.toString().getBytes()); // TODO - charset?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java,,60-177,[    public LDAPArgument() {,     }, ,     /**,      * Create a new Argument with the specified name and value, and no metadata.,      *,      * @param name,      *            the argument name,      * @param value,      *            the argument value,      * @param opcode,      *            the operation to perform, may be one of <code>add</code>,,      *            <code>delete</code>, <code>remove</code> or,      *            <code>modify</code>.,      */,     public LDAPArgument(String name, String value, String opcode) {,         setProperty(new StringProperty(ARG_NAME, name));,         setProperty(new StringProperty(VALUE, value));,         setProperty(new StringProperty(OPCODE, opcode));,     }, ,     /**,      * Create a new Argument with the specified name, value, and metadata.,      *,      * @param name,      *            the argument name,      * @param value,      *            the argument value,      * @param opcode,      *            the operation to perform, may be one of <code>add</code>,,      *            <code>delete</code>, <code>remove</code> or,      *            <code>modify</code>.,      * @param metadata,      *            the argument metadata,      */,     public LDAPArgument(String name, String value, String opcode, String metadata) {,         setProperty(new StringProperty(ARG_NAME, name));,         setProperty(new StringProperty(VALUE, value));,         setProperty(new StringProperty(OPCODE, opcode));,         setProperty(new StringProperty(METADATA, metadata));,     }, ,     /**,      * Set the name of the Argument.,      *,      * @param newName,      *            the new name,      */,     @Override,     public void setName(String newName) {,         setProperty(new StringProperty(ARG_NAME, newName));,     }, ,     /**,      * Get the name of the Argument.,      *,      * @return the attribute's name,      */,     @Override,     public String getName() {,         return getPropertyAsString(ARG_NAME);,     }, ,     /**,      * Sets the value of the Argument.,      *,      * @param newValue,      *            the new value,      */,     public void setValue(String newValue) {,         setProperty(new StringProperty(VALUE, newValue));,     }, ,     /**,      * Gets the value of the Argument object.,      *,      * @return the attribute's value,      */,     public String getValue() {,         return getPropertyAsString(VALUE);,     }, ,     /**,      * Sets the opcode of the Argument.,      *,      * @param newOpcode,      *            the new value,      */,     public void setOpcode(String newOpcode) {,         setProperty(new StringProperty(OPCODE, newOpcode));,     }, ,     /**,      * Gets the opcode of the Argument object.,      *,      * @return the attribute's value,      */,     public String getOpcode() {,         return getPropertyAsString(OPCODE);,     }, ,     /**,      * Sets the Meta Data attribute of the Argument.,      *,      * @param newMetaData,      *            the new metadata,      */,     public void setMetaData(String newMetaData) {,         setProperty(new StringProperty(METADATA, newMetaData));,     }, ,     /**,      * Gets the Meta Data attribute of the Argument.,      *,      * @return the MetaData value,      */,     public String getMetaData() {,         return getPropertyAsString(METADATA);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java,,50-264,[    public LDAPArguments() {,         setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));,     }, ,     /**,      * Get the arguments.,      *,      * @return the arguments,      */,     public CollectionProperty getArguments() {,         return (CollectionProperty) getProperty(ARGUMENTS);,     }, ,     /**,      * Clear the arguments.,      */,     @Override,     public void clear() {,         super.clear();,         setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));,     }, ,     /**,      * Set the list of arguments. Any existing arguments will be lost.,      *,      * @param arguments,      *            the new arguments,      */,     public void setArguments(List<Object> arguments) {,         setProperty(new CollectionProperty(ARGUMENTS, arguments));,     }, ,     /**,      * Get the arguments as a Map. Each argument name is used as the key, and,      * its value as the value.,      *,      * @return a new Map with String keys and values containing the arguments,      */,     public Map<String, String> getArgumentsAsMap() {,         PropertyIterator iter = getArguments().iterator();,         Map<String, String> argMap = new HashMap<>();,         while (iter.hasNext()) {,             LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();,             argMap.put(arg.getName(), arg.getValue());,         },         return argMap;,     }, ,     /**,      * Add a new argument with the given name and value.,      *,      * @param name,      *            the name of the argument,      * @param value,      *            the value of the argument,      * @param opcode,      *            the operation to perform, may be one of <code>add</code>,,      *            <code>delete</code>, <code>remove</code> or,      *            <code>modify</code>.,      */,     public void addArgument(String name, String value, String opcode) {,         addArgument(new LDAPArgument(name, value, opcode, null));,     }, ,     /**,      * Add a new argument.,      *,      * @param arg,      *            the new argument,      */,     public void addArgument(LDAPArgument arg) {,         TestElementProperty newArg = new TestElementProperty(arg.getName(), arg);,         if (isRunningVersion()) {,             this.setTemporary(newArg);,         },         getArguments().addItem(newArg);,     }, ,     /**,      * Add a new argument with the given name, value, and metadata.,      *,      * @param name,      *            the name of the argument,      * @param value,      *            the value of the argument,      * @param opcode,      *            the operation to perform, may be one of <code>add</code>,,      *            <code>delete</code>, <code>remove</code> or,      *            <code>modify</code>.,      * @param metadata,      *            the metadata for the argument,      */,     public void addArgument(String name, String value, String opcode, String metadata) {,         addArgument(new LDAPArgument(name, value, opcode, metadata));,     }, ,     /**,      * Get a PropertyIterator of the arguments.,      *,      * @return an iteration of the arguments,      */,     public PropertyIterator iterator() {,         return getArguments().iterator();,     }, ,     /**,      * Create a string representation of the arguments.,      *,      * @return the string representation of the arguments,      */,     @Override,     public String toString() {,         StringBuilder str = new StringBuilder();,         PropertyIterator iter = getArguments().iterator();,         while (iter.hasNext()) {,             LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();,             final String metaData = arg.getMetaData();,             str.append(arg.getName());,             if (metaData == null) {,                 str.append("=");  //$NON-NLS$,             } else {,                 str.append(metaData);,             },             str.append(arg.getValue());,             if (iter.hasNext()) {,                 str.append("&"); //$NON-NLS$,             },         },         return str.toString();,     }, ,     /**,      * Remove the specified argument from the list.,      *,      * @param row,      *            the index of the argument to remove,      */,     public void removeArgument(int row) {,         if (row < getArguments().size()) {,             getArguments().remove(row);,         },     }, ,     /**,      * Remove the specified argument from the list.,      *,      * @param arg,      *            the argument to remove,      */,     public void removeArgument(LDAPArgument arg) {,         PropertyIterator iter = getArguments().iterator();,         while (iter.hasNext()) {,             LDAPArgument item = (LDAPArgument) iter.next().getObjectValue();,             if (arg.equals(item)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove the argument with the specified name.,      *,      * @param argName,      *            the name of the argument to remove,      */,     public void removeArgument(String argName) {,         PropertyIterator iter = getArguments().iterator();,         while (iter.hasNext()) {,             LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();,             if (arg.getName().equals(argName)) {,                 iter.remove();,             },         },     }, ,     /**,      * Remove all arguments from the list.,      */,     public void removeAllArguments() {,         getArguments().clear();,     }, ,     /**,      * Add a new empty argument to the list. The new argument will have the,      * empty string as its name and value, and null metadata.,      */,     public void addEmptyArgument() {,         addArgument(new LDAPArgument("", "", "", null));,     }, ,     /**,      * Get the number of arguments in the list.,      *,      * @return the number of arguments,      */,     public int getArgumentCount() {,         return getArguments().size();,     }, ,     /**,      * Get a single argument.,      *,      * @param row,      *            the index of the argument to return.,      * @return the argument at the specified index, or null if no argument,      *         exists at that index.,      */,     public LDAPArgument getArgument(int row) {,         LDAPArgument argument = null;, ,         if (row < getArguments().size()) {,             argument = (LDAPArgument) getArguments().get(row).getObjectValue();,         }, ,         return argument;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java,modifyTestElement,82-82,[        ((LDAPExtSampler) sampler).addTestElement(ldapDefaultPanel.createTestElement());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/ldap/control/gui/LdapTestSamplerGui.java,modifyTestElement,75-75,[        ((LDAPSampler) sampler).addTestElement(ldapDefaultPanel.createTestElement());],,modifyTestElement,76-76,[        ((LDAPSampler) sampler).addTestElement(loginPanel.createTestElement());],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java,getRequestAttributes,568-568,[            return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java,,970-977,[        {,             @Override,             public int compare(Attribute o1, Attribute o2),             {,                 String      nm1 = o1.getID();,                 String      nm2 = o2.getID();, ,                 return nm1.compareTo(nm2);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java,,984-1016,[        {,             private int compareToReverse(final String s1, final String s2),             {,                 int     len1 = s1.length();,                 int     len2 = s2.length();,                 int     s1i = len1 - 1;,                 int     s2i = len2 - 1;, ,                 for ( ; (s1i >= 0) && (s2i >= 0); s1i--, s2i--),                 {,                     char    c1 = s1.charAt(s1i);,                     char    c2 = s2.charAt(s2i);, ,                     if (c1 != c2) {,                         return c1 - c2;,                     },                 },                 return len1 - len2;,             }, ,             @Override,             public int compare(SearchResult o1, SearchResult o2),             {,                 String      nm1 = o1.getName();,                 String      nm2 = o2.getName();, ,                 if (nm1 == null) {,                     nm1 = "";,                 },                 if (nm2 == null) {,                     nm2 = "";,                 },                 return compareToReverse(nm1, nm2);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java,configure,122-122,[        MailReaderSampler mrs = (MailReaderSampler) element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java,modifyTestElement,161-161,[        MailReaderSampler mrs = (MailReaderSampler) te;],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSampler.java,sample,80-80,[            res.setResponseData(resultAsString.getBytes());],,sample,85-85,[            res.setResponseData(ex.getMessage().getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java,sample,291-291,[                sb.append(new String(buf, 0, read));  // TODO - charset?],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java,sample,295-295,[            res.setResponseData(sb.toString().getBytes()); // TODO this should really be request data, but there is none],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java,sample,210-210,[        } catch (Exception ex) {],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java,setConnectionTimeout,311-312,[        tfMailServerConnectionTimeout.setText(connectionTimeout);,     }],,setConnectionTimeOut,771-772,[        this.connectionTimeOut = connectionTimeOut;,     }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java,attachmentFolderFileChooserActionPerformed,965-965,[        if (null != attachments && attachments.length() > 0) {],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java,clearHeaderFields,1073-1073,[               JTextField headerName = removeButtons.get(removeButton);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java,getHeaderFields,503-503,[            String value = headerFields.get(headerName).getText();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/smtp/sampler/protocol/LocalTrustStoreSSLSocketFactory.java,<init>,62-62,[        } catch (Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java,getConnectionTimeout,781-781,[        String connectionTimeout = connectionTimeOut.trim();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java,prepareMessage,208-208,[               (attachmentCount == 0 ||  (mailBody.length() == 0 && attachmentCount == 1))) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java,execute,292-292,[        Transport tr = session.getTransport(getProtocol());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java,getPort,733-733,[        String port = smtpPort.trim();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java,getTimeout,760-760,[        String timeout = timeOut.trim();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/jmeter/protocol/smtp/sampler/protocol/SynchronousTransportListener.java,finish,98-98,[            LOCK.notify();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/smtp/sampler/protocol/TrustAllSSLSocketFactory.java,<init>,67-67,[        } catch (Exception e) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/protocol/smtp/sampler/protocol/TrustAllSSLSocketFactory.java,,51-63,[                    new X509TrustManager() {,                         @Override,                         public X509Certificate[] getAcceptedIssuers() {,                             return EMPTY_X509Certificate;,                         },                         @Override,                         public void checkClientTrusted(,                                 X509Certificate[] certs, String authType) {,                         },                         @Override,                         public void checkServerTrusted(,                                 X509Certificate[] certs, String authType) {,                         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/system/SystemSampler.java,sample,184-184,[            results.setResponseData(nativeCommand.getOutResult().getBytes()); // default charset is deliberate here],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/system/gui/SystemSamplerGui.java,configure,146-146,[        SystemSampler systemSampler = (SystemSampler) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/protocol/system/gui/SystemSamplerGui.java,modifyTestElement,115-115,[        SystemSampler systemSampler = (SystemSampler)sampler;],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java,read,116-116,[                log.debug("Read: " + w.size() + "\n" + w.toString());],,read,120-120,[            throw new ReadException("Error reading from server, bytes read: " + w.size(), e, w.toString());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java,getProtocol,364-364,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/reporters/FileReporter.java,init,74-74,[                reader = new BufferedReader(new FileReader(datafile));],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/jmeter/reporters/FileReporter.java,update,363-363,[            g.drawString((Integer.valueOf(t)).toString(), t * increment + 2, height - 2);],,update,368-368,[            g.drawString(Integer.valueOf(Math.round(minValue + (t * incrementValue))).toString(), 2, height - t],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/reporters/MailerModel.java,,514-514,[        return this.failureCount;],,,202-202,[            failureCount++;],,,208-208,[        if (sendMails && (failureCount > getFailureLimit()) && !siteDown && !failureMsgSent) {],,,243-243,[                failureCount = 0;],,,263-263,[        failureCount = 0;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/reporters/MailerModel.java,,506-506,[        return successCount;],,,205-205,[            successCount++;],,,203-203,[            successCount = 0;],,,230-230,[            if (successCount > getSuccessLimit()) {],,,223-223,[                successCount = 0;],,,264-264,[        successCount = 0;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/reporters/MailerModel.java,add,218-218,[                } catch (Exception e) {],,add,238-238,[                } catch (Exception e) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/reporters/MailerModel.java,,59-527,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String MAIL_SMTP_HOST = "mail.smtp.host"; //$NON-NLS-1$, ,     private static final String MAIL_SMTP_PORT = "mail.smtp.port"; //$NON-NLS-1$, ,     private static final String MAIL_SMTP_AUTH = "mail.smtp.auth"; //$NON-NLS-1$, ,     private static final String MAIL_SMTP_SOCKETFACTORY_CLASS = "mail.smtp.socketFactory.class"; //$NON-NLS-1$, ,     private static final String MAIL_SMTP_STARTTLS = "mail.smtp.starttls.enable"; //$NON-NLS-1$, ,     private long failureCount = 0;, ,     private long successCount = 0;, ,     private boolean failureMsgSent = false;, ,     private boolean siteDown = false;, ,     private boolean successMsgSent = false;, ,     private static final String FROM_KEY = "MailerModel.fromAddress"; //$NON-NLS-1$, ,     private static final String TO_KEY = "MailerModel.addressie"; //$NON-NLS-1$, ,     private static final String HOST_KEY = "MailerModel.smtpHost"; //$NON-NLS-1$, ,     private static final String PORT_KEY = "MailerModel.smtpPort"; //$NON-NLS-1$, ,     private static final String SUCCESS_SUBJECT = "MailerModel.successSubject"; //$NON-NLS-1$, ,     private static final String FAILURE_SUBJECT = "MailerModel.failureSubject"; //$NON-NLS-1$, ,     private static final String FAILURE_LIMIT_KEY = "MailerModel.failureLimit"; //$NON-NLS-1$, ,     private static final String SUCCESS_LIMIT_KEY = "MailerModel.successLimit"; //$NON-NLS-1$, ,     private static final String LOGIN = "MailerModel.login"; //$NON-NLS-1$, ,     private static final String PASSWORD = "MailerModel.password"; //$NON-NLS-1$, ,     private static final String MAIL_AUTH_TYPE = "MailerModel.authType"; //$NON-NLS-1$, ,     private static final String DEFAULT_LIMIT = "2"; //$NON-NLS-1$, ,     private static final String DEFAULT_SMTP_PORT = "25";, ,     private static final String DEFAULT_PASSWORD_VALUE = ""; //$NON-NLS-1$, ,     private static final String DEFAULT_MAIL_AUTH_TYPE_VALUE = MailAuthType.NONE.toString(); //$NON-NLS-1$, ,     private static final String DEFAULT_LOGIN_VALUE = ""; //$NON-NLS-1$, ,     /** The listener for changes. */,     private transient ChangeListener changeListener;, ,     /**,      * Constructs a MailerModel.,      */,     public MailerModel() {,         super();, ,         setProperty(SUCCESS_LIMIT_KEY, JMeterUtils.getPropDefault("mailer.successlimit", DEFAULT_LIMIT)); //$NON-NLS-1$,         setProperty(FAILURE_LIMIT_KEY, JMeterUtils.getPropDefault("mailer.failurelimit", DEFAULT_LIMIT)); //$NON-NLS-1$,     }, ,     public void addChangeListener(ChangeListener list) {,         changeListener = list;,     }, ,     /** {@inheritDoc} */,     @Override,     public Object clone() {,         MailerModel m = (MailerModel) super.clone();,         m.changeListener = changeListener;,         return m;,     }, ,     public void notifyChangeListeners() {,         if (changeListener != null) {,             changeListener.stateChanged(new ChangeEvent(this));,         },     }, ,     /**,      * Gets a List of String-objects. Each String is one mail-address of the,      * addresses-String set by <code>setToAddress(str)</code>. The addresses,      * must be seperated by commas. Only String-objects containing a "@" are,      * added to the returned List.,      *,      * @return a List of String-objects wherein each String represents a,      *         mail-address.,      */,     public List<String> getAddressList() {,         String addressees = getToAddress();,         List<String> addressList = new ArrayList<>();, ,         if (addressees != null) {, ,             StringTokenizer next = new StringTokenizer(addressees, ","); //$NON-NLS-1$, ,             while (next.hasMoreTokens()) {,                 String theToken = next.nextToken().trim();, ,                 if (theToken.indexOf('@') > 0) { //$NON-NLS-1$,                     addressList.add(theToken);,                 } else {,                     log.warn("Ignored unexpected e-mail address: "+theToken);,                 },             },         }, ,         return addressList;,     }, ,     /**,      * Adds a SampleResult for display in the Visualizer.,      *,      * @param sample,      *            the SampleResult encapsulating informations about the last,      *            sample.,      */,     public void add(SampleResult sample) {,         add(sample, false);,     }, ,     /**,      * Adds a SampleResult. If SampleResult represents a change concerning the,      * failure/success of the sampling a message might be sent to the addressies,      * according to the settings of <code>successCount</code> and,      * <code>failureCount</code>.,      *,      * @param sample,      *            the SampleResult encapsulating information about the last,      *            sample.,      * @param sendMails whether or not to send e-mails,      */,     public synchronized void add(SampleResult sample, boolean sendMails) {, ,         // -1 is the code for a failed sample.,         //,         if (!sample.isSuccessful()) {,             failureCount++;,             successCount = 0;,         } else {,             successCount++;,         }, ,         if (sendMails && (failureCount > getFailureLimit()) && !siteDown && !failureMsgSent) {,             // Send the mail ...,             List<String> addressList = getAddressList();, ,             if (addressList.size() != 0) {,                 try {,                     sendMail(getFromAddress(), addressList, getFailureSubject(), "URL Failed: ",                             + sample.getSampleLabel(), getSmtpHost(),,                             getSmtpPort(), getLogin(), getPassword(),,                             getMailAuthType(), false);,                 } catch (Exception e) {,                     log.error("Problem sending mail: "+e);,                 },                 siteDown = true;,                 failureMsgSent = true;,                 successCount = 0;,                 successMsgSent = false;,             },         }, ,         if (sendMails && siteDown && (sample.getTime() != -1) && !successMsgSent) {,             // Send the mail ...,             if (successCount > getSuccessLimit()) {,                 List<String> addressList = getAddressList();, ,                 try {,                     sendMail(getFromAddress(), addressList, getSuccessSubject(), "URL Restarted: ",                             + sample.getSampleLabel(), getSmtpHost(),,                             getSmtpPort(), getLogin(), getPassword(),,                             getMailAuthType(), false);,                 } catch (Exception e) {,                     log.error("Problem sending mail", e);,                 },                 siteDown = false;,                 successMsgSent = true;,                 failureCount = 0;,                 failureMsgSent = false;,             },         }, ,         if (successMsgSent && failureMsgSent) {,             clear();,         },         notifyChangeListeners();,     }, , , ,     /**,      * Resets the state of this object to its default. But: This method does not,      * reset any mail-specific attributes (like sender, mail-subject...) since,      * they are independent of the sampling.,      */,     @Override,     public synchronized void clear() {// TODO: should this be clearData()?,         failureCount = 0;,         successCount = 0;,         siteDown = false;,         successMsgSent = false;,         failureMsgSent = false;,         notifyChangeListeners();,     }, ,     /**,      * Returns a String-representation of this object. Returns always,      * "E-Mail-Notification". Might be enhanced in future versions to return,      * some kind of String-representation of the mail-parameters (like sender,,      * addressies, smtpHost...).,      *,      * @return A String-representation of this object.,      */,     @Override,     public String toString() {,         return "E-Mail Notification";,     }, ,     /**,      * Sends a mail with the given parameters using SMTP.,      *,      * @param from,      *            the sender of the mail as shown in the mail-client.,      * @param vEmails,      *            all receivers of the mail. The receivers are seperated by,      *            commas.,      * @param subject,      *            the subject of the mail.,      * @param attText,      *            the message-body.,      * @param smtpHost,      *            the smtp-server used to send the mail.,      * @throws MessagingException,      *             if the building of the message fails,      * @throws AddressException,      *             if any of the addresses is wrong,      */,     public void sendMail(String from, List<String> vEmails, String subject, String attText, String smtpHost),             throws AddressException, MessagingException {,         sendMail(from, vEmails, subject, attText, smtpHost, DEFAULT_SMTP_PORT, null, null, null, false);,     }, ,     /**,      * Sends a mail with the given parameters using SMTP.,      *,      * @param from,      *            the sender of the mail as shown in the mail-client.,      * @param vEmails,      *            all receivers of the mail. The receivers are seperated by,      *            commas.,      * @param subject,      *            the subject of the mail.,      * @param attText,      *            the message-body.,      * @param smtpHost,      *            the smtp-server used to send the mail.,      * @param smtpPort the smtp-server port used to send the mail.,      * @param user the login used to authenticate,      * @param password the password used to authenticate,      * @param mailAuthType {@link MailAuthType} Security policy,      * @param debug Flag whether debug messages for the mail session should be generated,      * @throws AddressException If mail address is wrong,      * @throws MessagingException If building MimeMessage fails,      */,     public void sendMail(String from, List<String> vEmails, String subject,,             String attText, String smtpHost,,             String smtpPort,,             final String user,,             final String password,,             MailAuthType mailAuthType,,             boolean debug),             throws AddressException, MessagingException{, ,         InternetAddress[] address = new InternetAddress[vEmails.size()];, ,         for (int k = 0; k < vEmails.size(); k++) {,             address[k] = new InternetAddress(vEmails.get(k));,         }, ,         // create some properties and get the default Session,         Properties props = new Properties();, ,         props.put(MAIL_SMTP_HOST, smtpHost);,         props.put(MAIL_SMTP_PORT, smtpPort); // property values are strings,         Authenticator authenticator = null;,         if(mailAuthType != MailAuthType.NONE) {,             props.put(MAIL_SMTP_AUTH, "true");,             switch (mailAuthType) {,                 case SSL:,                     props.put(MAIL_SMTP_SOCKETFACTORY_CLASS,,                             "javax.net.ssl.SSLSocketFactory");,                     break;,                 case TLS:,                     props.put(MAIL_SMTP_STARTTLS,,                             "true");,                     break;, ,                 default:,                     break;,                 },         }, ,         if(!StringUtils.isEmpty(user)) {,             authenticator =,                     new javax.mail.Authenticator() {,                         @Override,                         protected PasswordAuthentication getPasswordAuthentication() {,                             return new PasswordAuthentication(user,password);,                         },                     };,         },         Session session = Session.getInstance(props, authenticator);,         session.setDebug(debug);, ,         // create a message,         Message msg = new MimeMessage(session);, ,         msg.setFrom(new InternetAddress(from));,         msg.setRecipients(Message.RecipientType.TO, address);,         msg.setSubject(subject);,         msg.setText(attText);,         Transport.send(msg);,     }, ,     /**,      * Send a Test Mail to check configuration,      * @throws AddressException If mail address is wrong,      * @throws MessagingException If building MimeMessage fails,      */,     public synchronized void sendTestMail() throws AddressException, MessagingException {,         String to = getToAddress();,         String from = getFromAddress();,         String subject = "Testing mail-addresses";,         String smtpHost = getSmtpHost();,         String attText = "JMeter-Testmail" + "\n" + "To:  " + to + "\n" + "From: " + from + "\n" + "Via:  " + smtpHost,                 + "\n" + "Fail Subject:  " + getFailureSubject() + "\n" + "Success Subject:  " + getSuccessSubject();, ,         log.info(attText);, ,         sendMail(from, getAddressList(), subject, attText, smtpHost,,                 getSmtpPort(),,                 getLogin(),,                 getPassword(),,                 getMailAuthType(),,                 true);,         log.info("Test mail sent successfully!!");,     }, ,     // ////////////////////////////////////////////////////////////,     //,     // setter/getter - JavaDoc-Comments not needed...,     //,     // ////////////////////////////////////////////////////////////, ,     public void setToAddress(String str) {,         setProperty(TO_KEY, str);,     }, ,     public void setFromAddress(String str) {,         setProperty(FROM_KEY, str);,     }, ,     public void setSmtpHost(String str) {,         setProperty(HOST_KEY, str);,     }, ,     public void setSmtpPort(String value) {,         if(StringUtils.isEmpty(value)) {,             value = DEFAULT_SMTP_PORT;,         },         setProperty(PORT_KEY, value, DEFAULT_SMTP_PORT);,     }, ,     public void setLogin(String login) {,         setProperty(LOGIN, login, DEFAULT_LOGIN_VALUE);,     }, ,     public void setPassword(String password) {,         setProperty(PASSWORD, password, DEFAULT_PASSWORD_VALUE);,     }, ,     public void setMailAuthType(String value) {,         setProperty(MAIL_AUTH_TYPE, value, DEFAULT_MAIL_AUTH_TYPE_VALUE);,     }, ,     public void setFailureSubject(String str) {,         setProperty(FAILURE_SUBJECT, str);,     }, ,     public void setSuccessSubject(String str) {,         setProperty(SUCCESS_SUBJECT, str);,     }, ,     public void setSuccessLimit(String limit) {,         setProperty(SUCCESS_LIMIT_KEY, limit);,     }, ,     // private void setSuccessCount(long count),     // {,     // this.successCount = count;,     // }, ,     public void setFailureLimit(String limit) {,         setProperty(FAILURE_LIMIT_KEY, limit);,     }, ,     // private void setFailureCount(long count),     // {,     // this.failureCount = count;,     // }, ,     public String getToAddress() {,         return getPropertyAsString(TO_KEY);,     }, ,     public String getFromAddress() {,         return getPropertyAsString(FROM_KEY);,     }, ,     public String getSmtpHost() {,         return getPropertyAsString(HOST_KEY);,     }, ,     public String getSmtpPort() {,         return getPropertyAsString(PORT_KEY, DEFAULT_SMTP_PORT);,     }, ,     public String getFailureSubject() {,         return getPropertyAsString(FAILURE_SUBJECT);,     }, ,     public String getSuccessSubject() {,         return getPropertyAsString(SUCCESS_SUBJECT);,     }, ,     public long getSuccessLimit() {,         return getPropertyAsLong(SUCCESS_LIMIT_KEY);,     }, ,     public long getSuccessCount() {,         return successCount;,     }, ,     public long getFailureLimit() {,         return getPropertyAsLong(FAILURE_LIMIT_KEY);,     }, ,     public long getFailureCount() {,         return this.failureCount;,     }, ,     public String getLogin() {,         return getPropertyAsString(LOGIN, DEFAULT_LOGIN_VALUE);,     }, ,     public String getPassword() {,         return getPropertyAsString(PASSWORD, DEFAULT_PASSWORD_VALUE);,     }, ,     public MailAuthType getMailAuthType() {,         String authType = getPropertyAsString(MAIL_AUTH_TYPE, DEFAULT_MAIL_AUTH_TYPE_VALUE);,         return MailAuthType.valueOf(authType);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/reporters/MailerModel.java,,370-373,[                    new javax.mail.Authenticator() {,                         @Override,                         protected PasswordAuthentication getPasswordAuthentication() {,                             return new PasswordAuthentication(user,password);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/reporters/MailerResultCollector.java,,33-52,[        super();,         setProperty(new TestElementProperty(MAILER_MODEL, new MailerModel()));,     }, ,     /** {@inheritDoc} */,     @Override,     public void clear() {,         super.clear();,         setProperty(new TestElementProperty(MAILER_MODEL, new MailerModel()));,     }, ,     /** {@inheritDoc} */,     @Override,     public void sampleOccurred(SampleEvent e) {,         super.sampleOccurred(e); // sends the result to the visualiser,         getMailerModel().add(e.getResult(), true); // updates the model used for sending e-mails,     }, ,     public MailerModel getMailerModel() {,         return (MailerModel) getProperty(MAILER_MODEL).getObjectValue();],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/reporters/ResultAction.java,,38-92,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     /*,      * Constructor is initially called once for each occurrence in the test plan,      * For GUI, several more instances are created Then clear is called at start,      * of test Called several times during test startup The name will not,      * necessarily have been set at this point.,      */,     public ResultAction() {,         super();,         // log.debug(Thread.currentThread().getName());,         // System.out.println(">> "+me+" "+this.getName()+",         // "+Thread.currentThread().getName());,     }, ,     /**,      * Examine the sample(s) and take appropriate action,      *,      * @see org.apache.jmeter.samplers.SampleListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent),      */,     @Override,     public void sampleOccurred(SampleEvent e) {,         SampleResult s = e.getResult();,         log.debug(s.getSampleLabel() + " OK? " + s.isSuccessful());,         if (!s.isSuccessful()) {,             if (isStopTestNow()) {,                 s.setStopTestNow(true);,             },             if (isStopTest()) {,                 s.setStopTest(true);,             },             if (isStopThread()) {,                 s.setStopThread(true);,             },             if (isStartNextThreadLoop()) {,                s.setStartNextThreadLoop(true);,             },         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void sampleStarted(SampleEvent e) {,         // not used,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void sampleStopped(SampleEvent e) {,         // not used,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/reporters/ResultCollector.java,loadExistingFile,376-376,[                dataReader = new BufferedReader(new FileReader(file)); // TODO Charset ?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/reporters/ResultCollector.java,,68-691,[public class ResultCollector extends AbstractListenerElement implements SampleListener, Clearable, Serializable,,         TestStateListener, Remoteable, NoThreadClone {, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 233L;, ,     // This string is used to identify local test runs, so must not be a valid host name,     private static final String TEST_IS_LOCAL = "*local*"; // $NON-NLS-1$, ,     private static final String TESTRESULTS_START = "<testResults>"; // $NON-NLS-1$, ,     private static final String TESTRESULTS_START_V1_1_PREVER = "<testResults version=\"";  // $NON-NLS-1$, ,     private static final String TESTRESULTS_START_V1_1_POSTVER="\">"; // $NON-NLS-1$, ,     private static final String TESTRESULTS_END = "</testResults>"; // $NON-NLS-1$, ,     private static final String XML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"; // $NON-NLS-1$, ,     private static final int MIN_XML_FILE_LEN = XML_HEADER.length() + TESTRESULTS_START.length(),             + TESTRESULTS_END.length();, ,     public static final String FILENAME = "filename"; // $NON-NLS-1$, ,     private static final String SAVE_CONFIG = "saveConfig"; // $NON-NLS-1$, ,     private static final String ERROR_LOGGING = "ResultCollector.error_logging"; // $NON-NLS-1$, ,     private static final String SUCCESS_ONLY_LOGGING = "ResultCollector.success_only_logging"; // $NON-NLS-1$, ,     /** AutoFlush on each line */,     private static final boolean SAVING_AUTOFLUSH = JMeterUtils.getPropDefault("jmeter.save.saveservice.autoflush", false); //$NON-NLS-1$, ,     // Static variables, ,     // Lock used to guard static mutable variables,     private static final Object LOCK = new Object();, ,     //@GuardedBy("LOCK"),     private static final Map<String, FileEntry> files = new HashMap<>();, ,     /**,      * Shutdown Hook that ensures PrintWriter is flushed is CTRL+C or kill is called during a test,      */,     //@GuardedBy("LOCK"),     private static Thread shutdownHook;, ,     /*,      * Keep track of the file writer and the configuration,,      * as the instance used to close them is not the same as the instance that creates,      * them. This means one cannot use the saved PrintWriter or use getSaveConfig(),      */,     private static class FileEntry{,         final PrintWriter pw;,         final SampleSaveConfiguration config;,         FileEntry(PrintWriter _pw, SampleSaveConfiguration _config){,             pw =_pw;,             config = _config;,         },     }, ,     /**,      * The instance count is used to keep track of whether any tests are currently running.,      * It's not possible to use the constructor or threadStarted etc as tests may overlap,      * e.g. a remote test may be started,,      * and then a local test started whilst the remote test is still running.,      */,     //@GuardedBy("LOCK"),     private static int instanceCount; // Keep track of how many instances are active, ,     // Instance variables (guarded by volatile), ,     private transient volatile PrintWriter out;, ,     private volatile boolean inTest = false;, ,     private volatile boolean isStats = false;, ,     /** the summarizer to which this result collector will forward the samples */,     private volatile Summariser summariser;, ,     private static final class ShutdownHook implements Runnable {, ,         @Override,         public void run() {,             log.info("Shutdown hook started");,             synchronized (LOCK) {,                 flushFileOutput();                    ,             },             log.info("Shutdown hook ended");,         }     ,     },     ,     /**,      * No-arg constructor.,      */,     public ResultCollector() {,         this(null);,     }, ,     /**,      * Constructor which sets the used {@link Summariser},      * @param summer The {@link Summariser} to use,      */,     public ResultCollector(Summariser summer) {,         setErrorLogging(false);,         setSuccessOnlyLogging(false);,         setProperty(new ObjectProperty(SAVE_CONFIG, new SampleSaveConfiguration()));,         summariser = summer;,     }, ,     // Ensure that the sample save config is not shared between copied nodes,     // N.B. clone only seems to be used for client-server tests,     @Override,     public Object clone(){,         ResultCollector clone = (ResultCollector) super.clone();,         clone.setSaveConfig((SampleSaveConfiguration)clone.getSaveConfig().clone());,         // Unfortunately AbstractTestElement does not call super.clone(),         clone.summariser = this.summariser;,         return clone;,     }, ,     private void setFilenameProperty(String f) {,         setProperty(FILENAME, f);,     }, ,     /**,      * Get the filename of the file this collector uses,      * ,      * @return The name of the file,      */,     public String getFilename() {,         return getPropertyAsString(FILENAME);,     }, ,     /**,      * Get the state of error logging,      * ,      * @return Flag whether errors should be logged,      */,     public boolean isErrorLogging() {,         return getPropertyAsBoolean(ERROR_LOGGING);,     }, ,     /**,      * Sets error logging flag,      * ,      * @param errorLogging,      *            The flag whether errors should be logged,      */,     public final void setErrorLogging(boolean errorLogging) {,         setProperty(new BooleanProperty(ERROR_LOGGING, errorLogging));,     }, ,     /**,      * Sets the flag whether only successful samples should be logged,      * ,      * @param value,      *            The flag whether only successful samples should be logged,      */,     public final void setSuccessOnlyLogging(boolean value) {,         if (value) {,             setProperty(new BooleanProperty(SUCCESS_ONLY_LOGGING, true));,         } else {,             removeProperty(SUCCESS_ONLY_LOGGING);,         },     }, ,     /**,      * Get the state of successful only logging,      * ,      * @return Flag whether only successful samples should be logged,      */,     public boolean isSuccessOnlyLogging() {,         return getPropertyAsBoolean(SUCCESS_ONLY_LOGGING,false);,     }, ,     /**,      * Decides whether or not to a sample is wanted based on:,      * <ul>,      * <li>errorOnly</li>,      * <li>successOnly</li>,      * <li>sample success</li>,      * </ul>,      * Should only be called for single samples.,      *,      * @param success is sample successful,      * @return whether to log/display the sample,      */,     public boolean isSampleWanted(boolean success){,         boolean errorOnly = isErrorLogging();,         boolean successOnly = isSuccessOnlyLogging();,         return isSampleWanted(success, errorOnly, successOnly);,     }, ,     /**,      * Decides whether or not to a sample is wanted based on:,      * <ul>,      * <li>errorOnly</li>,      * <li>successOnly</li>,      * <li>sample success</li>,      * </ul>,      * This version is intended to be called by code that loops over many samples;,      * it is cheaper than fetching the settings each time.,      * @param success status of sample,      * @param errorOnly if errors only wanted,      * @param successOnly if success only wanted,      * @return whether to log/display the sample,      */,     public static boolean isSampleWanted(boolean success, boolean errorOnly,,             boolean successOnly) {,         return (!errorOnly && !successOnly) ||,                (success && successOnly) ||,                (!success && errorOnly);,         // successOnly and errorOnly cannot both be set,     },     /**,      * Sets the filename attribute of the ResultCollector object.,      *,      * @param f,      *            the new filename value,      */,     public void setFilename(String f) {,         if (inTest) {,             return;,         },         setFilenameProperty(f);,     }, ,     @Override,     public void testEnded(String host) {,         synchronized(LOCK){,             instanceCount--;,             if (instanceCount <= 0) {,                 // No need for the hook now,                 // Bug 57088 - prevent (im?)possible NPE,                 if (shutdownHook != null) {,                     Runtime.getRuntime().removeShutdownHook(shutdownHook);,                 } else {,                     log.warn("Should not happen: shutdownHook==null, instanceCount=" + instanceCount);,                 },                 finalizeFileOutput();,                 inTest = false;,             },         }, ,         if(summariser != null) {,             summariser.testEnded(host);,         },     }, ,     @Override,     public void testStarted(String host) {,         synchronized(LOCK){,             if (instanceCount == 0) { // Only add the hook once,                 shutdownHook = new Thread(new ShutdownHook());,                 Runtime.getRuntime().addShutdownHook(shutdownHook);,             },             instanceCount++;,             try {,                 initializeFileOutput();,                 if (getVisualizer() != null) {,                     this.isStats = getVisualizer().isStats();,                 },             } catch (Exception e) {,                 log.error("", e);,             },         },         inTest = true;, ,         if(summariser != null) {,             summariser.testStarted(host);,         },     }, ,     @Override,     public void testEnded() {,         testEnded(TEST_IS_LOCAL);,     }, ,     @Override,     public void testStarted() {,         testStarted(TEST_IS_LOCAL);,     }, ,     /**,      * Loads an existing sample data (JTL) file.,      * This can be one of:,      * <ul>,      *   <li>XStream format</li>,      *   <li>Avalon format</li>,      *   <li>CSV format</li>,      * </ul>,      *,      */,     public void loadExistingFile() {,         final Visualizer visualizer = getVisualizer();,         if (visualizer == null) {,             return; // No point reading the file if there's no visualiser,         },         boolean parsedOK = false;,         String filename = getFilename();,         File file = new File(filename);,         if (file.exists()) {,             BufferedReader dataReader = null;,             BufferedInputStream bufferedInputStream = null;,             try {,                 dataReader = new BufferedReader(new FileReader(file)); // TODO Charset ?,                 // Get the first line, and see if it is XML,                 String line = dataReader.readLine();,                 dataReader.close();,                 dataReader = null;,                 if (line == null) {,                     log.warn(filename+" is empty");,                 } else {,                     if (!line.startsWith("<?xml ")){// No, must be CSV //$NON-NLS-1$,                         CSVSaveService.processSamples(filename, visualizer, this);,                         parsedOK = true;,                     } else { // We are processing XML,                         try { // Assume XStream,                             bufferedInputStream = new BufferedInputStream(new FileInputStream(file));,                             SaveService.loadTestResults(bufferedInputStream,,                                     new ResultCollectorHelper(this, visualizer));,                             parsedOK = true;,                         } catch (ConversionException e) {,                             final String message = e.getShortMessage();,                             if (message.startsWith("sampleResult")) { // probably Avalon format,                                 log.info("Failed to load "+filename+" using XStream. Assuming Avalon format, as message was: "+message);,                                 OldSaveService.processSamples(filename, visualizer, this);,                                 parsedOK = true;,                             } else {,                                 log.warn("Failed to load "+filename+" using XStream. Error was: "+e);,                             },                         } catch (Exception e) {,                             log.warn("Failed to load "+filename+" using XStream. Error was: "+e);,                         },                     },                 },             } catch (IOException | JMeterError | RuntimeException | OutOfMemoryError e) {,                 // FIXME Why do we catch OOM ?,                 log.warn("Problem reading JTL file: "+file);,             } catch (ConfigurationException | SAXException e) { // Avalon only,                 log.warn("Problem reading Avalon JTL file: "+file,e);,             } finally {,                 JOrphanUtils.closeQuietly(dataReader);,                 JOrphanUtils.closeQuietly(bufferedInputStream);,                 if (!parsedOK) {,                     GuiPackage.showErrorMessage(,                                 "Error loading results file - see log file",,                                 "Result file loader");,                 },             },         } else {,             GuiPackage.showErrorMessage(,                     "Error loading results file - could not open file",,                     "Result file loader");,         },     }, ,     private static void writeFileStart(PrintWriter writer, SampleSaveConfiguration saveConfig) {,         if (saveConfig.saveAsXml()) {,             writer.print(XML_HEADER);,             // Write the EOL separately so we generate LF line ends on Unix and Windows,             writer.print("\n"); // $NON-NLS-1$,             String pi=saveConfig.getXmlPi();,             if (pi.length() > 0) {,                 writer.println(pi);,             },             // Can't do it as a static initialisation, because SaveService,             // is being constructed when this is called,             writer.print(TESTRESULTS_START_V1_1_PREVER);,             writer.print(SaveService.getVERSION());,             writer.print(TESTRESULTS_START_V1_1_POSTVER);,             // Write the EOL separately so we generate LF line ends on Unix and Windows,             writer.print("\n"); // $NON-NLS-1$,         } else if (saveConfig.saveFieldNames()) {,             writer.println(CSVSaveService.printableFieldNamesToString(saveConfig));,         },     }, ,     private static void writeFileEnd(PrintWriter pw, SampleSaveConfiguration saveConfig) {,         if (saveConfig.saveAsXml()) {,             pw.print("\n"); // $NON-NLS-1$,             pw.print(TESTRESULTS_END);,             pw.print("\n");// Added in version 1.1 // $NON-NLS-1$,         },     }, ,     private static PrintWriter getFileWriter(String filename, SampleSaveConfiguration saveConfig),             throws IOException {,         if (filename == null || filename.length() == 0) {,             return null;,         },         filename = FileServer.resolveBaseRelativeName(filename);,         FileEntry fe = files.get(filename);,         PrintWriter writer = null;,         boolean trimmed = true;, ,         if (fe == null) {,             if (saveConfig.saveAsXml()) {,                 trimmed = trimLastLine(filename);,             } else {,                 trimmed = new File(filename).exists();,             },             // Find the name of the directory containing the file,             // and create it - if there is one,             File pdir = new File(filename).getParentFile();,             if (pdir != null) {,                 // returns false if directory already exists, so need to check again,                 if(pdir.mkdirs()){,                     log.info("Folder "+pdir.getAbsolutePath()+" was created");,                 } // else if might have been created by another process so not a problem,                 if (!pdir.exists()){,                     log.warn("Error creating directories for "+pdir.toString());,                 },             },             writer = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,,                     trimmed)), SaveService.getFileEncoding("UTF-8")), SAVING_AUTOFLUSH); // $NON-NLS-1$,             log.debug("Opened file: "+filename);,             files.put(filename, new FileEntry(writer, saveConfig));,         } else {,             writer = fe.pw;,         },         if (!trimmed) {,             writeFileStart(writer, saveConfig);,         },         return writer;,     }, ,     // returns false if the file did not contain the terminator,     private static boolean trimLastLine(String filename) {,         RandomAccessFile raf = null;,         try {,             raf = new RandomAccessFile(filename, "rw"); // $NON-NLS-1$,             long len = raf.length();,             if (len < MIN_XML_FILE_LEN) {,                 return false;,             },             raf.seek(len - TESTRESULTS_END.length() - 10);// TODO: may not work on all OSes?,             String line;,             long pos = raf.getFilePointer();,             int end = 0;,             while ((line = raf.readLine()) != null)// reads to end of line OR end of file,             {,                 end = line.indexOf(TESTRESULTS_END);,                 if (end >= 0) // found the string,                 {,                     break;,                 },                 pos = raf.getFilePointer();,             },             if (line == null) {,                 log.warn("Unexpected EOF trying to find XML end marker in " + filename);,                 raf.close();,                 return false;,             },             raf.setLength(pos + end);// Truncate the file,             raf.close();,             raf = null;,         } catch (FileNotFoundException e) {,             return false;,         } catch (IOException e) {,             log.warn("Error trying to find XML terminator " + e.toString());,             return false;,         } finally {,             try {,                 if (raf != null) {,                     raf.close();,                 },             } catch (IOException e1) {,                 log.info("Could not close " + filename + " " + e1.getLocalizedMessage());,             },         },         return true;,     }, ,     @Override,     public void sampleStarted(SampleEvent e) {,     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,     }, ,     /**,      * When a test result is received, display it and save it.,      *,      * @param event,      *            the sample event that was received,      */,     @Override,     public void sampleOccurred(SampleEvent event) {,         SampleResult result = event.getResult();, ,         if (isSampleWanted(result.isSuccessful())) {,             sendToVisualizer(result);,             if (out != null && !isResultMarked(result) && !this.isStats) {,                 SampleSaveConfiguration config = getSaveConfig();,                 result.setSaveConfig(config);,                 try {,                     if (config.saveAsXml()) {,                         SaveService.saveSampleResult(event, out);,                     } else { // !saveAsXml,                         String savee = CSVSaveService.resultToDelimitedString(event);,                         out.println(savee);,                     },                 } catch (Exception err) {,                     log.error("Error trying to record a sample", err); // should throw exception back to caller,                 },             },         }, ,         if(summariser != null) {,             summariser.sampleOccurred(event);,         },     }, ,     protected final void sendToVisualizer(SampleResult r) {,         if (getVisualizer() != null) {,             getVisualizer().add(r);,         },     }, ,     /**,      * recordStats is used to save statistics generated by visualizers,      *,      * @param e The data to save,      * @throws IOException when data writing fails,      */,     // Used by: MonitorHealthVisualizer.add(SampleResult res),     public void recordStats(TestElement e) throws IOException {,         if (out != null) {,             SaveService.saveTestElement(e, out);,         },     }, ,     /**,      * Checks if the sample result is marked or not, and marks it,      * @param res - the sample result to check,      * @return <code>true</code> if the result was marked,      */,     private boolean isResultMarked(SampleResult res) {,         String filename = getFilename();,         return res.markFile(filename);,     }, ,     private void initializeFileOutput() throws IOException {, ,         String filename = getFilename();,         if (filename != null) {,             if (out == null) {,                 try {,                     out = getFileWriter(filename, getSaveConfig());,                 } catch (FileNotFoundException e) {,                     out = null;,                 },             },         },     }, ,     /**,      * Flush PrintWriter to synchronize file contents,      */,     protected void flushFile() {,         if (out != null) {,             log.info("forced flush through ResultCollecto#flushFile");,             out.flush();,         },     }, ,     /**,      * Flush PrintWriter, called by Shutdown Hook to ensure no data is lost,      */,     private static void flushFileOutput() {,         for(Map.Entry<String,ResultCollector.FileEntry> me : files.entrySet()){,             log.debug("Flushing: "+me.getKey());,             FileEntry fe = me.getValue();,             fe.pw.flush();,             if (fe.pw.checkError()){,                 log.warn("Problem detected during use of "+me.getKey());,             },         },     },     ,     private void finalizeFileOutput() {,         for(Map.Entry<String,ResultCollector.FileEntry> me : files.entrySet()){,             log.debug("Closing: "+me.getKey());,             FileEntry fe = me.getValue();,             writeFileEnd(fe.pw, fe.config);,             fe.pw.close();,             if (fe.pw.checkError()){,                 log.warn("Problem detected during use of "+me.getKey());,             },         },         files.clear();,     }, ,     /**,      * @return Returns the saveConfig.,      */,     public SampleSaveConfiguration getSaveConfig() {,         try {,             return (SampleSaveConfiguration) getProperty(SAVE_CONFIG).getObjectValue();,         } catch (ClassCastException e) {,             setSaveConfig(new SampleSaveConfiguration());,             return getSaveConfig();,         },     }, ,     /**,      * @param saveConfig,      *            The saveConfig to set.,      */,     public void setSaveConfig(SampleSaveConfiguration saveConfig) {,         getProperty(SAVE_CONFIG).setObjectValue(saveConfig);,     }, ,     // This is required so that,     // @see org.apache.jmeter.gui.tree.JMeterTreeModel.getNodesOfType(),     // can find the Clearable nodes - the userObject has to implement the interface.,     @Override,     public void clearData() {,     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/ResultCollector.java,testEnded,301-301,[            instanceCount--;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/ResultCollector.java,testStarted,327-327,[            instanceCount++;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/ResultCollector.java,testStarted,324-324,[                shutdownHook = new Thread(new ShutdownHook());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/reporters/ResultSaver.java,,49-280,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private static final Object LOCK = new Object();, ,     // File name sequence number,     //@GuardedBy("LOCK"),     private static long sequenceNumber = 0;, ,     //@GuardedBy("LOCK"),     private static String timeStamp;, ,     private static final String TIMESTAMP_FORMAT = "yyyyMMdd-HHmm_"; // $NON-NLS-1$, ,     //@GuardedBy("LOCK"),     private static int numberPadLength;, ,     //+ JMX property names; do not change, ,     public static final String FILENAME = "FileSaver.filename"; // $NON-NLS-1$, ,     public static final String VARIABLE_NAME = "FileSaver.variablename"; // $NON-NLS-1$, ,     public static final String ERRORS_ONLY = "FileSaver.errorsonly"; // $NON-NLS-1$, ,     public static final String SUCCESS_ONLY = "FileSaver.successonly"; // $NON-NLS-1$, ,     public static final String SKIP_AUTO_NUMBER = "FileSaver.skipautonumber"; // $NON-NLS-1$, ,     public static final String SKIP_SUFFIX = "FileSaver.skipsuffix"; // $NON-NLS-1$, ,     public static final String ADD_TIMESTAMP = "FileSaver.addTimstamp"; // $NON-NLS-1$, ,     public static final String NUMBER_PAD_LENGTH = "FileSaver.numberPadLen"; // $NON-NLS-1$, ,     //- JMX property names, ,     private synchronized long nextNumber() {,         return ++sequenceNumber;,     }, ,     /*,      * Constructor is initially called once for each occurrence in the test plan,      * For GUI, several more instances are created Then clear is called at start,      * of test Called several times during test startup The name will not,      * necessarily have been set at this point.,      */,     public ResultSaver() {,         super();,         // log.debug(Thread.currentThread().getName());,         // System.out.println(">> "+me+" "+this.getName()+",         // "+Thread.currentThread().getName());,     }, ,     /*,      * Constructor for use during startup (intended for non-GUI use) @param name,      * of summariser,      */,     public ResultSaver(String name) {,         this();,         setName(name);,     }, ,     /*,      * This is called once for each occurrence in the test plan, before the,      * start of the test. The super.clear() method clears the name (and all,      * other properties), so it is called last.,      */,     @Override,     public void clear() {,         synchronized(LOCK){,             sequenceNumber = 0; // TODO is this the right thing to do?,             if (getAddTimeStamp()) {,                 DateFormat format = new SimpleDateFormat(TIMESTAMP_FORMAT);,                 timeStamp = format.format(new Date());,             } else {,                 timeStamp = "";,             },             numberPadLength=getNumberPadLen();,         },         super.clear();,     }, ,     /**,      * Saves the sample result (and any sub results) in files,      *,      * @see org.apache.jmeter.samplers.SampleListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent),      */,     @Override,     public void sampleOccurred(SampleEvent e) {,       processSample(e.getResult(), new Counter());,    }, ,    /**,     * Recurse the whole (sub)result hierarchy.,     *,     * @param s Sample result,     * @param c sample counter,     */,    private void processSample(SampleResult s, Counter c) {,         saveSample(s, c.num++);,         SampleResult[] sr = s.getSubResults();,         for (int i = 0; i < sr.length; i++) {,             processSample(sr[i], c);,         },     }, ,     /**,      * @param s SampleResult to save,      * @param num number to append to variable (if >0),      */,     private void saveSample(SampleResult s, int num) {,         // Should we save the sample?,         if (s.isSuccessful()){,             if (getErrorsOnly()){,                 return;,             },         } else {,             if (getSuccessOnly()){,                 return;,             },         }, ,         String fileName = makeFileName(s.getContentType(), getSkipAutoNumber(), getSkipSuffix());,         log.debug("Saving " + s.getSampleLabel() + " in " + fileName);,         s.setResultFileName(fileName);// Associate sample with file name,         String variable = getVariableName();,         if (variable.length()>0){,             if (num > 0) {,                 StringBuilder sb = new StringBuilder(variable);,                 sb.append(num);,                 variable=sb.toString();,             },             JMeterContextService.getContext().getVariables().put(variable, fileName);,         },         File out = new File(fileName);,         FileOutputStream pw = null;,         try {,             pw = new FileOutputStream(out);,             JOrphanUtils.write(s.getResponseData(), pw); // chunk the output if necessary,         } catch (FileNotFoundException e1) {,             log.error("Error creating sample file for " + s.getSampleLabel(), e1);,         } catch (IOException e1) {,             log.error("Error saving sample " + s.getSampleLabel(), e1);,         } finally {,             JOrphanUtils.closeQuietly(pw);,         },     }, ,     /**,      * @return fileName composed of fixed prefix, a number, and a suffix derived,      *         from the contentType e.g. Content-Type:,      *         text/html;charset=ISO-8859-1,      */,     private String makeFileName(String contentType, boolean skipAutoNumber, boolean skipSuffix) {,         StringBuilder sb = new StringBuilder(FileServer.resolveBaseRelativeName(getFilename()));,         sb.append(timeStamp); // may be the empty string,         if (!skipAutoNumber){,             String number = Long.toString(nextNumber());,             for(int i=number.length(); i < numberPadLength; i++) {,                 sb.append('0');,             },             sb.append(number);,         },         if (!skipSuffix){,             sb.append('.');,             if (contentType != null) {,                 int i = contentType.indexOf('/'); // $NON-NLS-1$,                 if (i != -1) {,                     int j = contentType.indexOf(';'); // $NON-NLS-1$,                     if (j != -1) {,                         sb.append(contentType.substring(i + 1, j));,                     } else {,                         sb.append(contentType.substring(i + 1));,                     },                 } else {,                     sb.append("unknown");,                 },             } else {,                 sb.append("unknown");,             },         },         return sb.toString();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void sampleStarted(SampleEvent e) {,         // not used,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void sampleStopped(SampleEvent e) {,         // not used,     }, ,     private String getFilename() {,         return getPropertyAsString(FILENAME);,     }, ,     private String getVariableName() {,         return getPropertyAsString(VARIABLE_NAME,""); // $NON-NLS-1$,     }, ,     private boolean getErrorsOnly() {,         return getPropertyAsBoolean(ERRORS_ONLY);,     }, ,     private boolean getSkipAutoNumber() {,         return getPropertyAsBoolean(SKIP_AUTO_NUMBER);,     }, ,     private boolean getSkipSuffix() {,         return getPropertyAsBoolean(SKIP_SUFFIX);,     }, ,     private boolean getSuccessOnly() {,         return getPropertyAsBoolean(SUCCESS_ONLY);,     }, ,     private boolean getAddTimeStamp() {,         return getPropertyAsBoolean(ADD_TIMESTAMP);,     }, ,     private int getNumberPadLen() {,         return getPropertyAsInt(NUMBER_PAD_LENGTH, 0);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/ResultSaver.java,clear,128-128,[            numberPadLength=getNumberPadLen();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/ResultSaver.java,clear,121-121,[            sequenceNumber = 0; // TODO is this the right thing to do?],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/ResultSaver.java,clear,124-124,[                timeStamp = format.format(new Date());],,clear,126-126,[                timeStamp = "";],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/reporters/Summariser.java,,72-394,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     /** interval between summaries (in seconds) default 30 seconds */,     private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 30); //$NON-NLS-1$, ,     /** Write messages to log file ? */,     private static final boolean TOLOG = JMeterUtils.getPropDefault("summariser.log", true); //$NON-NLS-1$, ,     /** Write messages to System.out ? */,     private static final boolean TOOUT = JMeterUtils.getPropDefault("summariser.out", true); //$NON-NLS-1$, ,     /*,      * Ensure that a report is not skipped if we are slightly late in checking,      * the time.,      */,     private static final int INTERVAL_WINDOW = 5; // in seconds, ,     /**,      * Lock used to protect ACCUMULATORS update + INSTANCE_COUNT update,      */,     private static final Object LOCK = new Object();, ,     /*,      * This map allows summarisers with the same name to contribute to the same totals.,      */,     //@GuardedBy("LOCK") - needed to ensure consistency between this and INSTANCE_COUNT,     private static final Map<String, Totals> ACCUMULATORS = new ConcurrentHashMap<>();, ,     //@GuardedBy("LOCK"),     private static int INSTANCE_COUNT; // number of active tests, ,     /*,      * Cached copy of Totals for this instance.,      * The variables do not need to be synchronised,,      * as they are not shared between threads,      * However the contents do need to be synchronized.,      */,     //@GuardedBy("myTotals"),     private transient Totals myTotals = null;, ,     // Name of the accumulator. Set up by testStarted().,     private transient String myName;, ,     /*,      * Constructor is initially called once for each occurrence in the test plan.,      * For GUI, several more instances are created.,      * Then clear is called at start of test.,      * Called several times during test startup.,      * The name will not necessarily have been set at this point.,      */,     public Summariser() {,         super();,         synchronized (LOCK) {,             ACCUMULATORS.clear();,             INSTANCE_COUNT=0;,         },     }, ,     /**,      * Constructor for use during startup (intended for non-GUI use),      *,      * @param name of summariser,      */,     public Summariser(String name) {,         this();,         setName(name);,     }, ,     /*,      * Contains the items needed to collect stats for a summariser,      *,      */,     private static class Totals {, ,         /** Time of last summary (to prevent double reporting) */,         private long last = 0;, ,         private final SummariserRunningSample delta = new SummariserRunningSample("DELTA");, ,         private final SummariserRunningSample total = new SummariserRunningSample("TOTAL");, ,         /**,          * Add the delta values to the total values and clear the delta,          */,         private void moveDelta() {,             total.addSample(delta);,             delta.clear();,         },     }, ,     /**,      * Accumulates the sample in two SampleResult objects - one for running,      * totals, and the other for deltas.,      *,      * @see org.apache.jmeter.samplers.SampleListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent),      */,     @Override,     public void sampleOccurred(SampleEvent e) {,         SampleResult s = e.getResult();, ,         long now = System.currentTimeMillis() / 1000;// in seconds, ,         SummariserRunningSample myDelta = null;,         SummariserRunningSample myTotal = null;,         boolean reportNow = false;, ,         /*,          * Have we reached the reporting boundary?,          * Need to allow for a margin of error, otherwise can miss the slot.,          * Also need to check we've not hit the window already,          */,         synchronized (myTotals) {,             if (s != null) {,                 myTotals.delta.addSample(s);,             }, ,             if ((now > myTotals.last + INTERVAL_WINDOW) && (now % INTERVAL <= INTERVAL_WINDOW)) {,                 reportNow = true;, ,                 // copy the data to minimise the synch time,                 myDelta = new SummariserRunningSample(myTotals.delta);,                 myTotals.moveDelta();,                 myTotal = new SummariserRunningSample(myTotals.total);, ,                 myTotals.last = now; // stop double-reporting,             },         },         if (reportNow) {,             String str;,             str = format(myName, myDelta, "+");,             if (TOLOG) {,                 log.info(str);,             },             if (TOOUT) {,                 System.out.println(str);,             }, ,             // Only if we have updated them,             if (myTotal != null && myDelta != null &&myTotal.getNumSamples() != myDelta.getNumSamples()) {,                 str = format(myName, myTotal, "=");,                 if (TOLOG) {,                     log.info(str);,                 },                 if (TOOUT) {,                     System.out.println(str);,                 },             },         },     }, ,     private static StringBuilder longToSb(StringBuilder sb, long l, int len) {,         sb.setLength(0);,         sb.append(l);,         return JOrphanUtils.rightAlign(sb, len);,     }, ,     private static StringBuilder doubleToSb(DecimalFormat dfDouble, StringBuilder sb, double d, int len, int frac) {,         sb.setLength(0);,         dfDouble.setMinimumFractionDigits(frac);,         dfDouble.setMaximumFractionDigits(frac);,         sb.append(dfDouble.format(d));,         return JOrphanUtils.rightAlign(sb, len);,     }, ,     /**,      * Formats summariserRunningSample,      * @param name Summariser name,      * @param summariserRunningSample {@link SummariserRunningSample},      * @param type Type of summariser (difference or total),      * @return the summary information,      */,     private static String format(String name, SummariserRunningSample summariserRunningSample, String type) {,         DecimalFormat dfDouble = new DecimalFormat("#0.0"); // $NON-NLS-1$,         StringBuilder tmp = new StringBuilder(20); // for intermediate use,         StringBuilder sb = new StringBuilder(100); // output line buffer,         sb.append(name);,         sb.append(" ");,         sb.append(type);,         sb.append(" ");,         sb.append(longToSb(tmp, summariserRunningSample.getNumSamples(), 6));,         sb.append(" in ");,         long elapsed = summariserRunningSample.getElapsed();,         long elapsedSec = (elapsed + 500) / 1000; // rounded seconds,         if (elapsedSec > 100       // No point displaying decimals (less than 1% error),          || (elapsed - elapsedSec * 1000) < 50 // decimal would be zero,          ) {,             sb.append(longToSb(tmp, elapsedSec, 5));,         } else {,             double elapsedSecf = elapsed / 1000.0d; // fractional seconds,             sb.append(doubleToSb(dfDouble, tmp, elapsedSecf, 5, 1)); // This will round,         },         sb.append("s = ");,         if (elapsed > 0) {,             sb.append(doubleToSb(dfDouble, tmp, summariserRunningSample.getRate(), 6, 1));,         } else {,             sb.append("******");// Rate is effectively infinite,         },         sb.append("/s Avg: ");,         sb.append(longToSb(tmp, summariserRunningSample.getAverage(), 5));,         sb.append(" Min: ");,         sb.append(longToSb(tmp, summariserRunningSample.getMin(), 5));,         sb.append(" Max: ");,         sb.append(longToSb(tmp, summariserRunningSample.getMax(), 5));,         sb.append(" Err: ");,         sb.append(longToSb(tmp, summariserRunningSample.getErrorCount(), 5));,         sb.append(" (");,         sb.append(summariserRunningSample.getErrorPercentageString());,         sb.append(")");,         if ("+".equals(type)) {,             ThreadCounts tc = JMeterContextService.getThreadCounts();,             sb.append(" Active: ");,             sb.append(tc.activeThreads);,             sb.append(" Started: ");,             sb.append(tc.startedThreads);,             sb.append(" Finished: ");,             sb.append(tc.finishedThreads);,         },         return sb.toString();,     }, ,     /** {@inheritDoc} */,     @Override,     public void sampleStarted(SampleEvent e) {,         // not used,     }, ,     /** {@inheritDoc} */,     @Override,     public void sampleStopped(SampleEvent e) {,         // not used,     }, ,     /*,      * The testStarted/testEnded methods are called at the start and end of a test.,      *,      * However, when a test is run on multiple nodes, there is no guarantee that all the,      * testStarted() methods will be called before all the threadStart() or sampleOccurred(),      * methods for other threads - nor that testEnded() will only be called after all,      * sampleOccurred() calls. The ordering is only guaranteed within a single test.,      *,      */, , ,     /** {@inheritDoc} */,     @Override,     public void testStarted() {,         testStarted("local");,     }, ,     /** {@inheritDoc} */,     @Override,     public void testEnded() {,         testEnded("local");,     }, ,     /**,      * Called once for each Summariser in the test plan.,      * There may be more than one summariser with the same name,,      * however they will all be called before the test proper starts.,      * <p>,      * However, note that this applies to a single test only.,      * When running in client-server mode, testStarted() may be,      * invoked after sampleOccurred().,      * <p>,      * {@inheritDoc},      */,     @Override,     public void testStarted(String host) {,         synchronized (LOCK) {,             myName = getName();,             myTotals = ACCUMULATORS.get(myName);,             if (myTotals == null){,                 myTotals = new Totals();,                 ACCUMULATORS.put(myName, myTotals);,             },             INSTANCE_COUNT++;,         },     }, ,     /**,      * Called from a different thread as testStarted() but using the same instance.,      * So synch is needed to fetch the accumulator, and the myName field will already be set up.,      * <p>,      * {@inheritDoc},      */,     @Override,     public void testEnded(String host) {,         Set<Entry<String, Totals>> totals = null;,         synchronized (LOCK) {,             INSTANCE_COUNT--;,             if (INSTANCE_COUNT <= 0){,                 totals = ACCUMULATORS.entrySet();,             },         },         if (totals == null) {// We're not done yet,             return;,         },         for(Map.Entry<String, Totals> entry : totals){,             String str;,             String name = entry.getKey();,             Totals total = entry.getValue();,             total.delta.setEndTime(); // ensure delta has correct end time,             // Only print final delta if there were some samples in the delta,             // and there has been at least one sample reported previously,             if (total.delta.getNumSamples() > 0 && total.total.getNumSamples() >  0) {,                 str = format(name, total.delta, "+");,                 if (TOLOG) {,                     log.info(str);,                 },                 if (TOOUT) {,                     System.out.println(str);,                 },             },             total.moveDelta(); // This will update the total endTime,             str = format(name, total.total, "=");,             if (TOLOG) {,                 log.info(str);,             },             if (TOOUT) {,                 System.out.println(str);,             },         },     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/Summariser.java,<init>,126-126,[            INSTANCE_COUNT=0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/Summariser.java,testEnded,361-361,[            INSTANCE_COUNT--;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/reporters/Summariser.java,testStarted,347-347,[            INSTANCE_COUNT++;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/reporters/gui/ResultActionGui.java,configure,60-60,[        errorPanel.configure(((OnErrorTestElement) el).getErrorAction());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/reporters/gui/ResultActionGui.java,modifyTestElement,81-81,[        ((OnErrorTestElement) te).setErrorAction(errorPanel.getOnErrorSetting());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/sampler/DebugSampler.java,,95-101,[        Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){,             @Override,             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {,                 String m1,m2;,                 m1=(String)o1.getKey();,                 m2=(String)o2.getKey();,                 return m1.compareTo(m2);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/sampler/gui/TestActionGui.java,configure,97-97,[        TestAction ta = (TestAction) element;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/sampler/gui/TestActionGui.java,modifyTestElement,137-137,[        TestAction ta = (TestAction) element;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/jmeter/samplers/DiskStoreSampleSender.java,readResolve,157-157,[            singleExecutor.submit(new Runnable(){],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/jmeter/samplers/DiskStoreSampleSender.java,sampleOccurred,129-129,[        singleExecutor.submit(new Runnable() {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/jmeter/samplers/DiskStoreSampleSender.java,testEnded,73-73,[        singleExecutor.submit(new Runnable(){],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/samplers/RemoteListenerWrapper.java,,39-133,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private final RemoteSampleListener listener;, ,     private final SampleSender sender;, ,     public RemoteListenerWrapper(RemoteSampleListener l) {,         listener = l;,         // Get appropriate sender class governed by the behaviour set in the JMeter property,         sender = SampleSenderFactory.getInstance(listener);,     }, ,     public RemoteListenerWrapper() // TODO: not used - make private?,     {,         listener = null;,         sender = null;,     }, ,     @Override,     public void testStarted() {,         log.debug("Test Started()");,         try {,             listener.testStarted();,         } catch (Throwable ex) {,             log.warn("testStarted()", ex);,             if (ex instanceof Error){,                 throw (Error) ex;,             },             if (ex instanceof RuntimeException){,                 throw (RuntimeException) ex;,             },         }, ,     }, ,     @Override,     public void testEnded() {,         sender.testEnded();,     }, ,     @Override,     public void testStarted(String host) {,         log.debug("Test Started on " + host);,         try {,             listener.testStarted(host);,         } catch (Throwable ex) {,             log.error("testStarted(host)", ex);,             if (ex instanceof Error){,                 throw (Error) ex;,             },             if (ex instanceof RuntimeException){,                 throw (RuntimeException) ex;,             },         },     }, ,     @Override,     public void testEnded(String host) {,         sender.testEnded(host);,     }, ,     @Override,     public void sampleOccurred(SampleEvent e) {,         sender.sampleOccurred(e);,     }, ,     // Note that sampleStarted() and sampleStopped() is not made to appear,     // in synch with sampleOccured() when replaying held samples.,     // For now this is not critical since sampleStarted() and sampleStopped(),     // is not used, but it may become an issue in the future. Then these,     // events must also be stored so that replay of all events may occur and,     // in the right order. Each stored event must then be tagged with something,     // that lets you distinguish between occured, started and ended., ,     @Override,     public void sampleStarted(SampleEvent e) {,         log.debug("Sample started");,         try {,             listener.sampleStarted(e);,         } catch (RemoteException err) {,             log.error("sampleStarted", err);,         },     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,         log.debug("Sample stopped");,         try {,             listener.sampleStopped(e);,         } catch (RemoteException err) {,             log.error("sampleStopped", err);,         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/samplers/RemoteSampleListenerWrapper.java,,35-73,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private RemoteSampleListener listener;, ,     public RemoteSampleListenerWrapper(RemoteSampleListener l) {,         listener = l;,     }, ,     public RemoteSampleListenerWrapper() {,     }, ,     @Override,     public void sampleOccurred(SampleEvent e) {,         try {,             listener.sampleOccurred(e);,         } catch (RemoteException err) {,             log.error("", err); // $NON-NLS-1$,         },     }, ,     @Override,     public void sampleStarted(SampleEvent e) {,         try {,             listener.sampleStarted(e);,         } catch (RemoteException err) {,             log.error("", err); // $NON-NLS-1$,         },     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,         try {,             listener.sampleStopped(e);,         } catch (RemoteException err) {,             log.error("", err); // $NON-NLS-1$,         },     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/samplers/RemoteTestListenerWrapper.java,,33-83,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private final RemoteSampleListener listener;, ,     public RemoteTestListenerWrapper() {,         log.warn("Only intended for use in testing");,         listener = null;,     }, ,     public RemoteTestListenerWrapper(RemoteSampleListener l) {,         listener = l;,     }, ,     @Override,     public void testStarted() {,         try {,             listener.testStarted();,         } catch (Exception ex) {,             log.error("", ex); // $NON-NLS-1$,         }, ,     }, ,     @Override,     public void testEnded() {,         try {,             listener.testEnded();,         } catch (Exception ex) {,             log.error("", ex); // $NON-NLS-1$,         },     }, ,     @Override,     public void testStarted(String host) {,         try {,             listener.testStarted(host);,         } catch (Exception ex) {,             log.error("", ex); // $NON-NLS-1$,         },     }, ,     @Override,     public void testEnded(String host) {,         try {,             listener.testEnded(host);,         } catch (Exception ex) {,             log.error("", ex); // $NON-NLS-1$,         },     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/samplers/SampleResult.java,getResponseDataAsString,740-740,[            return new String(responseData); // N.B. default charset is used deliberately here],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/samplers/SampleResult.java,setResponseData,688-688,[            responseData = response.getBytes(); // N.B. default charset is used deliberately here],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/samplers/SampleResult.java,setResponseData,708-708,[            responseData = response.getBytes(); // N.B. default charset is used deliberately here],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/samplers/SampleResult.java,getResponseData,724-724,[        return responseData;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/samplers/SampleResult.java,getTimeStamp,545-545,[        return timeStamp;],,getTimestamp,75-75,[        return this.current.getTimeStamp();],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/jmeter/samplers/SampleSaveConfiguration.java,equals,528-528,[            stringValues = s.delimiter == delimiter || (delimiter != null && delimiter.equals(s.delimiter));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/samplers/SampleSenderFactory.java,getInstance,99-99,[            } catch (Exception e) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/samplers/StatisticalSampleResult.java,,38-147,[    public StatisticalSampleResult(){// May be called by XStream,     }, ,     /**,      * Allow OldSaveService to generate a suitable result when sample/error counts have been saved.,      *,      * @deprecated Needs to be replaced when multiple sample results are sorted out,      *,      * @param stamp this may be a start time or an end time (both in milliseconds),      * @param elapsed time in milliseconds,      */,     @Deprecated,     public StatisticalSampleResult(long stamp, long elapsed) {,         super(stamp, elapsed);,         this.elapsed = elapsed;,     }, ,     /**,      * Create a statistical sample result from an ordinary sample result.,      * ,      * @param res the sample result ,      */,     public StatisticalSampleResult(SampleResult res) {,         // Copy data that is shared between samples (i.e. the key items):,         setSampleLabel(res.getSampleLabel());,         ,         setThreadName(res.getThreadName());, ,         setSuccessful(true); // Assume result is OK,         setSampleCount(0); // because we add the sample count in later,         elapsed = 0;,     }, ,     /**,      * Create a statistical sample result from an ordinary sample result.,      * ,      * @param res the sample result ,      * @param unused no longer used,      * @deprecated no longer necessary; use {@link #StatisticalSampleResult(SampleResult)} instead,      */,     @Deprecated,     public StatisticalSampleResult(SampleResult res, boolean unused) {,         this(res);,     }, ,     public void add(SampleResult res) {,         // Add Sample Counter,         setSampleCount(getSampleCount() + res.getSampleCount());, ,         setBytes(getBytes() + res.getBytes());, ,         // Add Error Counter,         if (!res.isSuccessful()) {,             errorCount++;,             this.setSuccessful(false);,         }, ,         // Set start/end times,         if (getStartTime()==0){ // Bug 40954 - ensure start time gets started!,             this.setStartTime(res.getStartTime());,         } else {,             this.setStartTime(Math.min(getStartTime(), res.getStartTime()));,         },         this.setEndTime(Math.max(getEndTime(), res.getEndTime()));, ,         setLatency(getLatency()+ res.getLatency());,         setConnectTime(getConnectTime()+ res.getConnectTime());, ,         elapsed += res.getTime();,     }, ,     @Override,     public long getTime() {,         return elapsed;,     }, ,     @Override,     public long getTimeStamp() {,         return getEndTime();,     }, ,     @Override,     public int getErrorCount() {// Overrides SampleResult,         return errorCount;,     }, ,     @Override,     public void setErrorCount(int e) {// for reading CSV files,         errorCount = e;,     }, ,     /**,      * Generates the key to be used for aggregating samples as follows:<br>,      * <code>sampleLabel</code> "-" <code>[threadName|threadGroup]</code>,      * <p>,      * N.B. the key should agree with the fixed items that are saved in the sample.,      *,      * @param event sample event whose key is to be calculated,      * @param keyOnThreadName true if key should use thread name, otherwise use thread group,      * @return the key to use for aggregating samples,      */,     public static String getKey(SampleEvent event, boolean keyOnThreadName) {,         StringBuilder sb = new StringBuilder(80);,         sb.append(event.getResult().getSampleLabel());,         if (keyOnThreadName){,             sb.append('-').append(event.getResult().getThreadName());,         } else {,             sb.append('-').append(event.getThreadGroup());,         },         return sb.toString();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jmeter/save/CSVSaveService.java,splitHeader,633-633,[                return null; // unknown column name],,splitHeader,638-638,[                return null; // out of order],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/save/CSVSaveService.java,makeResultFromDelimitedString,168-168,[                if (event != null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/save/SaveService.java,getChecksumForPropertiesFile,230-230,[                    + JMeterUtils.getPropDefault(SAVESERVICE_PROPERTIES,],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/save/SaveService.java,getChecksumForPropertiesFile,235-235,[                md.update(line.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/save/SaveService.java,getInputStreamReader,590-590,[            return new InputStreamReader(inStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/save/SaveService.java,getOutputStreamWriter,602-602,[            return new OutputStreamWriter(outStream);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/save/SaveService.java,classToAlias,108-108,[                return alias == null ? super.serializedClass(type) : alias ;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/save/SaveService.java,aliasToClass,95-95,[                if (fullName != null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/save/SaveService.java,,90-108,[            return new MapperWrapper(next){,             // Translate alias to classname and then delegate to wrapped class,             @Override,             public Class<?> realClass(String alias) {,                 String fullName = aliasToClass(alias);,                 if (fullName != null) {,                     fullName = NameUpdater.getCurrentName(fullName);,                 },                 return super.realClass(fullName == null ? alias : fullName);,             },             // Translate to alias and then delegate to wrapped class,             @Override,             public String serializedClass(@SuppressWarnings("rawtypes") // superclass does not use types ,                     Class type) {,                 if (type == null) {,                     return super.serializedClass(null); // was type, but that caused FindBugs warning,                 },                 String alias = classToAlias(type.getName());,                 return alias == null ? super.serializedClass(type) : alias ;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/save/ScriptWrapperConverter.java,createConversionException,105-105,[        if (ste!=null){],,
STYLE,DLS_DEAD_LOCAL_STORE,org/apache/jmeter/save/converters/TestElementConverter.java,unmarshal,94-94,[        String targetName = inputName;],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/services/FileServer.java,createBufferedReader,426-426,[            isr = new InputStreamReader(fis);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/services/FileServer.java,createBufferedWriter,455-455,[            osw = new OutputStreamWriter(fos);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/services/FileServer.java,getBaseDir,181-181,[        return base.getAbsolutePath();],,getBasedir,106-106,[        return getPropertyAsString(BASEDIR);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/jmeter/services/FileServer.java,getRandomFile,514-514,[                int count = lfiles.length;],,getRandomFile,513-513,[                File[] lfiles = src.listFiles(new JMeterFileFilter(extensions));],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/testbeans/gui/BooleanPropertyEditor.java,getTags,64-64,[        return TAGS;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/testbeans/gui/TableEditor.java,createReader,231-231,[        catch(Exception e) { return new Functor("is" + propName); }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/testbeans/gui/TestBeanGUI.java,,94-513,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private final Class<?> testBeanClass;, ,     private transient BeanInfo beanInfo;, ,     private final Class<?> customizerClass;, ,     /**,      * The single customizer if the customizer class implements,      * SharedCustomizer, null otherwise.,      */,     private Customizer customizer = null;, ,     /**,      * TestElement to Customizer map if customizer is null. This is necessary to,      * avoid the cost of creating a new customizer on each edit. The cache size,      * needs to be limited, though, to avoid memory issues when editing very,      * large test plans.,      */,     @SuppressWarnings("unchecked"),     private final Map<TestElement, Customizer> customizers = new LRUMap(20);, ,     /**,      * Index of the customizer in the JPanel's child component list:,      */,     private int customizerIndexInPanel;, ,     /**,      * The property name to value map that the active customizer edits:,      */,     private final Map<String, Object> propertyMap = new HashMap<>();, ,     /**,      * Whether the GUI components have been created.,      */,     private boolean initialized = false;, ,     static {,         List<String> paths = new LinkedList<>();,         paths.add("org.apache.jmeter.testbeans.gui");// $NON-NLS-1$,         paths.addAll(Arrays.asList(PropertyEditorManager.getEditorSearchPath()));,         String s = JMeterUtils.getPropDefault("propertyEditorSearchPath", null);// $NON-NLS-1$,         if (s != null) {,             paths.addAll(Arrays.asList(JOrphanUtils.split(s, ",", "")));// $NON-NLS-1$ // $NON-NLS-2$,         },         PropertyEditorManager.setEditorSearchPath(paths.toArray(new String[paths.size()]));,     }, ,     /**,      * @deprecated Dummy for JUnit test purposes only,      */,     @Deprecated,     public TestBeanGUI() {,         log.warn("Constructor only for use in testing");// $NON-NLS-1$,         testBeanClass = null;,         customizerClass = null;,         beanInfo = null;,     }, ,     public TestBeanGUI(Class<?> testBeanClass) {,         super();,         log.debug("testing class: " + testBeanClass.getName());,         // A quick verification, just in case:,         if (!TestBean.class.isAssignableFrom(testBeanClass)) {,             Error e = new Error();,             log.error("This should never happen!", e);,             throw e; // Programming error: bail out.,         }, ,         this.testBeanClass = testBeanClass;, ,         // Get the beanInfo:,         try {,             beanInfo = Introspector.getBeanInfo(testBeanClass);,         } catch (IntrospectionException e) {,             log.error("Can't get beanInfo for " + testBeanClass.getName(), e);,             throw new Error(e.toString()); // Programming error. Don't,                                             // continue.,         }, ,         customizerClass = beanInfo.getBeanDescriptor().getCustomizerClass();, ,         // Creation of the customizer and GUI initialization is delayed until,         // the,         // first,         // configure call. We don't need all that just to find out the static,         // label, menu,         // categories, etc!,         initialized = false;,         JMeterUtils.addLocaleChangeListener(this);,     }, ,     private Customizer createCustomizer() {,         try {,             return (Customizer) customizerClass.newInstance();,         } catch (InstantiationException | IllegalAccessException e) {,             log.error("Could not instantiate customizer of class " + customizerClass, e);,             throw new Error(e.toString());,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public String getStaticLabel() {,         if (beanInfo == null){,             return "null";// $NON-NLS-1$,         },         return beanInfo.getBeanDescriptor().getDisplayName();,     }, ,     /**,      * {@inheritDoc},      */,    @Override, public TestElement createTestElement() {,         try {,             TestElement element = (TestElement) testBeanClass.newInstance();,             // In other GUI component, clearGUI resets the value to defaults one as there is one GUI per Element,             // With TestBeanGUI as it's shared, its default values are only known here, we must call setValues with ,             // element (as it holds default values),             // otherwise we will get values as computed by customizer reset and not default ones,             if(initialized) {,                 setValues(element);,             },             // configure(element);,             // super.clear(); // set name, enabled.,             modifyTestElement(element); // put the default values back into the,             // new element,             return element;,         } catch (InstantiationException | IllegalAccessException e) {,             log.error("Can't create test element", e);,             throw new Error(e.toString()); // Programming error. Don't,                                             // continue.,         },     }, ,    /**,     * {@inheritDoc},     */,     @Override,     public void modifyTestElement(TestElement element) {,         // Fetch data from screen fields,         if (customizer instanceof GenericTestBeanCustomizer) {,             GenericTestBeanCustomizer gtbc = (GenericTestBeanCustomizer) customizer;,             gtbc.saveGuiFields();,         },         configureTestElement(element);, ,         // Copy all property values from the map into the element:,         for (PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {,             String name = desc.getName();,             Object value = propertyMap.get(name);,             log.debug("Modify " + name + " to " + value);,             if (value == null) {,                 if (GenericTestBeanCustomizer.notNull(desc)) { // cannot be null,                     setPropertyInElement(element, name, desc.getValue(GenericTestBeanCustomizer.DEFAULT));,                 } else {,                     element.removeProperty(name);,                 },             } else {,                 setPropertyInElement(element, name, value);,             },         },     }, ,     /**,      * @param element,      * @param name,      */,     private void setPropertyInElement(TestElement element, String name, Object value) {,         JMeterProperty jprop = AbstractProperty.createProperty(value);,         jprop.setName(name);,         element.setProperty(jprop);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public JPopupMenu createPopupMenu() {,         if (Timer.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultTimerMenu();,         },         else if(Sampler.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultSamplerMenu();,         },         else if(ConfigElement.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultConfigElementMenu();,         },         else if(Assertion.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultAssertionMenu();,         },         else if(PostProcessor.class.isAssignableFrom(testBeanClass) ||,                 PreProcessor.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultExtractorMenu();,         },         else if(Visualizer.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultVisualizerMenu();,         },         else if(Controller.class.isAssignableFrom(testBeanClass)),         {,             return MenuFactory.getDefaultControllerMenu();,         },         else {,             log.warn("Cannot determine PopupMenu for "+testBeanClass.getName());,             return MenuFactory.getDefaultMenu();,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void configure(TestElement element) {,         if (!initialized){,             init();,         },         clearGui();, ,         super.configure(element);, ,         setValues(element);, ,         initialized = true;,     },     ,     /**,      * Get values from element to fill propertyMap and setup customizer ,      * @param element TestElement,      */,     private void setValues(TestElement element) {,         // Copy all property values into the map:,         for (PropertyIterator jprops = element.propertyIterator(); jprops.hasNext();) {,             JMeterProperty jprop = jprops.next();,             propertyMap.put(jprop.getName(), jprop.getObjectValue());,         },         ,         if (customizer != null) {,             customizer.setObject(propertyMap);,         } else {,             if (initialized){,                 remove(customizerIndexInPanel);,             },             Customizer c = customizers.get(element);,             if (c == null) {,                 c = createCustomizer();,                 c.setObject(propertyMap);,                 customizers.put(element, c);,             },             add((Component) c, BorderLayout.CENTER);,         },     }, ,     /** {@inheritDoc} */,     @Override,     public Collection<String> getMenuCategories() {,         List<String> menuCategories = new LinkedList<>();,         BeanDescriptor bd = beanInfo.getBeanDescriptor();, ,         // We don't want to show expert beans in the menus unless we're,         // in expert mode:,         if (bd.isExpert() && !JMeterUtils.isExpertMode()) {,             return null;,         }, ,         int matches = setupGuiClasses(menuCategories);,         if (matches == 0) {,             log.error("Could not assign GUI class to " + testBeanClass.getName());,         } else if (matches > 1) {// may be impossible, but no harm in,                                     // checking ...,             log.error("More than 1 GUI class found for " + testBeanClass.getName());,         },         return menuCategories;,     }, ,     /**,      * Setup GUI class,      * @return number of matches,      */,     public int setupGuiClasses() {,         return setupGuiClasses(new ArrayList<String>());,     },     ,     /**,      * Setup GUI class,      * @param menuCategories List<String> menu categories,      * @return number of matches,      */,     private int setupGuiClasses(List<String> menuCategories ) {,         int matches = 0;// How many classes can we assign from?,         // TODO: there must be a nicer way...,         BeanDescriptor bd = beanInfo.getBeanDescriptor();,         if (Assertion.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.ASSERTIONS);,             bd.setValue(TestElement.GUI_CLASS, AbstractAssertionGui.class.getName());,             matches++;,         },         if (ConfigElement.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.CONFIG_ELEMENTS);,             bd.setValue(TestElement.GUI_CLASS, AbstractConfigGui.class.getName());,             matches++;,         },         if (Controller.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.CONTROLLERS);,             bd.setValue(TestElement.GUI_CLASS, AbstractControllerGui.class.getName());,             matches++;,         },         if (Visualizer.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.LISTENERS);,             bd.setValue(TestElement.GUI_CLASS, AbstractVisualizer.class.getName());,             matches++;,         },         if (PostProcessor.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.POST_PROCESSORS);,             bd.setValue(TestElement.GUI_CLASS, AbstractPostProcessorGui.class.getName());,             matches++;,         },         if (PreProcessor.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.PRE_PROCESSORS);,             bd.setValue(TestElement.GUI_CLASS, AbstractPreProcessorGui.class.getName());,             matches++;,         },         if (Sampler.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.SAMPLERS);,             bd.setValue(TestElement.GUI_CLASS, AbstractSamplerGui.class.getName());,             matches++;,         },         if (Timer.class.isAssignableFrom(testBeanClass)) {,             menuCategories.add(MenuFactory.TIMERS);,             bd.setValue(TestElement.GUI_CLASS, AbstractTimerGui.class.getName());,             matches++;,         },         return matches;,     }, ,     private void init() {,         setLayout(new BorderLayout(0, 5));, ,         setBorder(makeBorder());,         add(makeTitlePanel(), BorderLayout.NORTH);, ,         customizerIndexInPanel = getComponentCount();, ,         if (customizerClass == null) {,             customizer = new GenericTestBeanCustomizer(beanInfo);,         } else if (SharedCustomizer.class.isAssignableFrom(customizerClass)) {,             customizer = createCustomizer();,         }, ,         if (customizer != null){,             add((Component) customizer, BorderLayout.CENTER);,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public String getLabelResource() {,         // @see getStaticLabel,         return null;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void clearGui() {,         super.clearGui();,         if (customizer instanceof GenericTestBeanCustomizer) {,             GenericTestBeanCustomizer gtbc = (GenericTestBeanCustomizer) customizer;,             gtbc.clearGuiFields();,         },         propertyMap.clear();,     }, ,     public boolean isHidden() {,         return beanInfo.getBeanDescriptor().isHidden();,     }, ,     public boolean isExpert() {,         return beanInfo.getBeanDescriptor().isExpert();,     }, ,     /**,      * Handle Locale Change by reloading BeanInfo,      * @param event {@link LocaleChangeEvent},      */,     @Override,     public void localeChanged(LocaleChangeEvent event) {,         try {,             beanInfo = Introspector.getBeanInfo(testBeanClass);,             setupGuiClasses();,         } catch (IntrospectionException e) {,             log.error("Can't get beanInfo for " + testBeanClass.getName(), e);,             JMeterUtils.reportErrorToUser("Can't get beanInfo for " + testBeanClass.getName());,         },     }, ,     /**,      * {@inheritDoc}},      * @see org.apache.jmeter.gui.AbstractJMeterGuiComponent#getDocAnchor(),      */,     @Override,     public String getDocAnchor() {,         ResourceBundle resourceBundle = ResourceBundle.getBundle(,                 testBeanClass.getName() + "Resources",  // $NON-NLS-1$,                 new Locale("",""));, ,         String name = resourceBundle.getString("displayName");,         return name.replace(' ', '_');],,
I18N,DM_CONVERT_CASE,org/apache/jmeter/testbeans/gui/TextAreaEditor.java,propertyChange,140-140,[            String lang = cse.getAsText().toLowerCase();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/testbeans/gui/WrapperEditor.java,initialize,142-142,[            } else if (tags != null && tags.length > 0) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/testelement/TestPlan.java,,41-271,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     //+ JMX field names - do not change values,     private static final String FUNCTIONAL_MODE = "TestPlan.functional_mode"; //$NON-NLS-1$, ,     private static final String USER_DEFINED_VARIABLES = "TestPlan.user_defined_variables"; //$NON-NLS-1$, ,     private static final String SERIALIZE_THREADGROUPS = "TestPlan.serialize_threadgroups"; //$NON-NLS-1$, ,     private static final String CLASSPATHS = "TestPlan.user_define_classpath"; //$NON-NLS-1$, ,     private static final String TEARDOWN_ON_SHUTDOWN = "TestPlan.tearDown_on_shutdown"; //$NON-NLS-1$, ,     //- JMX field names, ,     private static final String CLASSPATH_SEPARATOR = ","; //$NON-NLS-1$, ,     private static final String BASEDIR = "basedir";, ,     private transient List<AbstractThreadGroup> threadGroups = new LinkedList<>();, ,     // There's only 1 test plan, so can cache the mode here,     private static volatile boolean functionalMode = false;, ,     public TestPlan() {,         // this("Test Plan");,         // setFunctionalMode(false);,         // setSerialized(false);,     }, ,     public TestPlan(String name) {,         setName(name);,         // setFunctionalMode(false);,         // setSerialized(false);,     }, ,     // create transient item,     private Object readResolve(){,         threadGroups = new LinkedList<>();,         return this;,     }, ,     public void prepareForPreCompile(),     {,         getVariables().setRunningVersion(true);,     }, ,     /**,      * Fetches the functional mode property,      *,      * @return functional mode,      */,     public boolean isFunctionalMode() {,         return getPropertyAsBoolean(FUNCTIONAL_MODE);,     }, ,     public void setUserDefinedVariables(Arguments vars) {,         setProperty(new TestElementProperty(USER_DEFINED_VARIABLES, vars));,     }, ,     public JMeterProperty getUserDefinedVariablesAsProperty() {,         return getProperty(USER_DEFINED_VARIABLES);,     }, ,     public String getBasedir() {,         return getPropertyAsString(BASEDIR);,     }, ,     // Does not appear to be used yet,     public void setBasedir(String b) {,         setProperty(BASEDIR, b);,     }, ,     public Arguments getArguments() {,         return getVariables();,     }, ,     public Map<String, String> getUserDefinedVariables() {,         Arguments args = getVariables();,         return args.getArgumentsAsMap();,     }, ,     private Arguments getVariables() {,         Arguments args = (Arguments) getProperty(USER_DEFINED_VARIABLES).getObjectValue();,         if (args == null) {,             args = new Arguments();,             setUserDefinedVariables(args);,         },         return args;,     }, ,     public void setFunctionalMode(boolean funcMode) {,         setProperty(new BooleanProperty(FUNCTIONAL_MODE, funcMode));,         functionalMode = funcMode;,     }, ,     /**,      * Gets the static copy of the functional mode,      *,      * @return mode,      */,     public static boolean getFunctionalMode() {,         return functionalMode;,     }, ,     public void setSerialized(boolean serializeTGs) {,         setProperty(new BooleanProperty(SERIALIZE_THREADGROUPS, serializeTGs));,     }, ,     public void setTearDownOnShutdown(boolean tearDown) {,         setProperty(TEARDOWN_ON_SHUTDOWN, tearDown, false);,     }, ,     public boolean isTearDownOnShutdown() {,         return getPropertyAsBoolean(TEARDOWN_ON_SHUTDOWN, false);,     }, ,     /**,      * Set the classpath for the test plan. If the classpath is made up from,      * more then one path, the parts must be separated with,      * {@link TestPlan#CLASSPATH_SEPARATOR}.,      *,      * @param text,      *            the classpath to be set,      */,     public void setTestPlanClasspath(String text) {,         setProperty(CLASSPATHS,text);,     }, ,     public void setTestPlanClasspathArray(String[] text) {,         StringBuilder cat = new StringBuilder();,         for (int idx=0; idx < text.length; idx++) {,             if (idx > 0) {,                 cat.append(CLASSPATH_SEPARATOR);,             },             cat.append(text[idx]);,         },         this.setTestPlanClasspath(cat.toString());,     }, ,     public String[] getTestPlanClasspathArray() {,         return JOrphanUtils.split(this.getTestPlanClasspath(),CLASSPATH_SEPARATOR);,     }, ,     /**,      * Returns the classpath,      * @return classpath,      */,     public String getTestPlanClasspath() {,         return getPropertyAsString(CLASSPATHS);,     }, ,     /**,      * Fetch the serialize threadgroups property,      *,      * @return serialized setting,      */,     public boolean isSerialized() {,         return getPropertyAsBoolean(SERIALIZE_THREADGROUPS);,     }, ,     public void addParameter(String name, String value) {,         getVariables().addArgument(name, value);,     }, ,     @Override,     public void addTestElement(TestElement tg) {,         super.addTestElement(tg);,         if (tg instanceof AbstractThreadGroup && !isRunningVersion()) {,             addThreadGroup((AbstractThreadGroup) tg);,         },     }, ,     /**,      * Adds a feature to the AbstractThreadGroup attribute of the TestPlan object.,      *,      * @param group,      *            the feature to be added to the AbstractThreadGroup attribute,      */,     public void addThreadGroup(AbstractThreadGroup group) {,         threadGroups.add(group);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testEnded() {,         try {,             FileServer.getFileServer().closeFiles();,         } catch (IOException e) {,             log.error("Problem closing files at end of test", e);,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testEnded(String host) {,         testEnded();, ,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testStarted() {,         if (getBasedir() != null && getBasedir().length() > 0) {,             try {,                 FileServer.getFileServer().setBasedir(FileServer.getFileServer().getBaseDir() + getBasedir());,             } catch (IllegalStateException e) {,                 log.error("Failed to set file server base dir with " + getBasedir(), e);,             },         },         // we set the classpath,         String[] paths = this.getTestPlanClasspathArray();,         for (int idx=0; idx < paths.length; idx++) {,             NewDriver.addURL(paths[idx]);,             log.info("add " + paths[idx] + " to classpath");,         },     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testStarted(String host) {,         testStarted();,     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/jmeter/testelement/TestPlan.java,setFunctionalMode,134-134,[        functionalMode = funcMode;],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/threads/JMeterVariables.java,,35-149,[    private final Map<String, Object> variables = new HashMap<>();, ,     private int iteration = 0;, ,     // Property names to preload into JMeter variables:,     private static final String [] PRE_LOAD = {,       "START.MS",     // $NON-NLS-1$,       "START.YMD",    // $NON-NLS-1$,       "START.HMS",    //$NON-NLS-1$,       "TESTSTART.MS", // $NON-NLS-1$,     };, ,     public JMeterVariables() {,         preloadVariables();,     }, ,     private void preloadVariables(){,         for (int i = 0; i < PRE_LOAD.length; i++){,             String property=PRE_LOAD[i];,             String value=JMeterUtils.getProperty(property);,             if (value != null){,                 variables.put(property,value);,             },         },     }, ,     public String getThreadName() {,         return Thread.currentThread().getName();,     }, ,     public int getIteration() {,         return iteration;,     }, ,     public void incIteration() {,         iteration++;,     }, ,     // Does not appear to be used,     public void initialize() {,         variables.clear();,         preloadVariables();,     }, ,     /**,      * Remove a variable.,      * ,      * @param key the variable name to remove,      * ,      * @return the variable value, or {@code null} if there was no such variable,      */,     public Object remove(String key) {,         return variables.remove(key);,     }, ,     /**,      * Creates or updates a variable with a String value.,      * ,      * @param key the variable name,      * @param value the variable value,      */,     public void put(String key, String value) {,         variables.put(key, value);,     }, ,     /**,      * Creates or updates a variable with a value that does not have to be a String.,      * ,      * @param key the variable name,      * @param value the variable value,      */,     public void putObject(String key, Object value) {,         variables.put(key, value);,     }, ,     public void putAll(Map<String, ?> vars) {,         variables.putAll(vars);,     }, ,     public void putAll(JMeterVariables vars) {,         putAll(vars.variables);,     }, ,     /**,      * Gets the value of a variable, coerced to a String.,      * ,      * @param key the name of the variable,      * @return the value of the variable, or {@code null} if it does not exist,      */,     public String get(String key) {,         return (String) variables.get(key);,     }, ,     /**,      * Gets the value of a variable (not converted to String).,      * ,      * @param key the name of the variable,      * @return the value of the variable, or {@code null} if it does not exist,      */,     public Object getObject(String key) {,         return variables.get(key);,     }, ,     /**,      * Gets a read-only Iterator over the variables.,      * ,      * @return the iterator,      */,     public Iterator<Entry<String, Object>> getIterator(){,         return Collections.unmodifiableMap(variables).entrySet().iterator() ;,     }, ,     // Used by DebugSampler,     public Set<Entry<String, Object>> entrySet(){,         return Collections.unmodifiableMap(variables).entrySet();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/testelement/property/AbstractProperty.java,getBlankProperty,269-269,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/testelement/property/AbstractProperty.java,normalizeList,314-314,[        } catch (Exception e) {// should not happen],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/testelement/property/AbstractProperty.java,normalizeMap,352-352,[        } catch (Exception e) {// should not happen],,
STYLE,BC_BAD_CAST_TO_ABSTRACT_COLLECTION,org/apache/jmeter/testelement/property/CollectionProperty.java,get,83-83,[            return ((List<JMeterProperty>) value).get(row);],,
STYLE,BC_BAD_CAST_TO_ABSTRACT_COLLECTION,org/apache/jmeter/testelement/property/CollectionProperty.java,remove,90-90,[            ((List<?>) value).remove(index);],,
STYLE,BC_BAD_CAST_TO_ABSTRACT_COLLECTION,org/apache/jmeter/testelement/property/CollectionProperty.java,set,71-71,[            ((List<JMeterProperty>) value).set(index, new StringProperty(prop, prop));],,
STYLE,BC_BAD_CAST_TO_ABSTRACT_COLLECTION,org/apache/jmeter/testelement/property/CollectionProperty.java,set,77-77,[            ((List<JMeterProperty>) value).set(index, prop);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/testelement/property/CollectionProperty.java,cloneCollection,152-152,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/testelement/property/MapProperty.java,cloneMap,126-126,[        } catch (Exception e) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/threads/AbstractThreadGroup.java,,43-246,[public abstract class AbstractThreadGroup extends AbstractTestElement ,     implements Serializable, Controller, JMeterThreadMonitor, TestCompilerHelper {, ,     private static final long serialVersionUID = 240L;, ,     // Only create the map if it is required,     private transient final ConcurrentMap<TestElement, Object> children = ,             TestCompiler.IS_USE_STATIC_SET ? null : new ConcurrentHashMap<TestElement, Object>();, ,     private static final Object DUMMY = new Object();, ,     /** Action to be taken when a Sampler error occurs */,     public static final String ON_SAMPLE_ERROR = "ThreadGroup.on_sample_error"; // int, ,     /** Continue, i.e. ignore sampler errors */,     public static final String ON_SAMPLE_ERROR_CONTINUE = "continue";, ,     /** Start next loop for current thread if sampler error occurs */,     public static final String ON_SAMPLE_ERROR_START_NEXT_LOOP = "startnextloop";, ,     /** Stop current thread if sampler error occurs */,     public static final String ON_SAMPLE_ERROR_STOPTHREAD = "stopthread";, ,     /** Stop test (all threads) if sampler error occurs, the entire test is stopped at the end of any current samples */,     public static final String ON_SAMPLE_ERROR_STOPTEST = "stoptest";, ,     /** Stop test NOW (all threads) if sampler error occurs, the entire test is stopped abruptly. Any current samplers are interrupted if possible. */,     public static final String ON_SAMPLE_ERROR_STOPTEST_NOW = "stoptestnow";, ,     /** Number of threads in the thread group */,     public static final String NUM_THREADS = "ThreadGroup.num_threads";, ,     public static final String MAIN_CONTROLLER = "ThreadGroup.main_controller";, ,     private final AtomicInteger numberOfThreads = new AtomicInteger(0); // Number of active threads in this group, ,     /** {@inheritDoc} */,     @Override,     public boolean isDone() {,         return getSamplerController().isDone();,     }, ,     /** {@inheritDoc} */,     @Override,     public Sampler next() {,         return getSamplerController().next();,     }, ,     /**,      * Get the sampler controller.,      *,      * @return the sampler controller.,      */,     public Controller getSamplerController() {,         return (Controller) getProperty(MAIN_CONTROLLER).getObjectValue();,     }, ,     /**,      * Set the sampler controller.,      *,      * @param c,      *            the sampler controller.,      */,     public void setSamplerController(LoopController c) {,         c.setContinueForever(false);,         setProperty(new TestElementProperty(MAIN_CONTROLLER, c));,     }, ,     /**,      * Add a test element.,      *,      * @param child,      *            the test element to add.,      */,     @Override,     public void addTestElement(TestElement child) {,         getSamplerController().addTestElement(child);,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public final boolean addTestElementOnce(TestElement child){,         if (children.putIfAbsent(child, DUMMY) == null) {,             addTestElement(child);,             return true;,         },         return false;,     }, ,     /** {@inheritDoc} */,     @Override,     public void addIterationListener(LoopIterationListener lis) {,         getSamplerController().addIterationListener(lis);,     },     ,     /** {@inheritDoc} */,     @Override,     public void removeIterationListener(LoopIterationListener iterationListener) {,         getSamplerController().removeIterationListener(iterationListener);,     }, ,     /** {@inheritDoc} */,     @Override,     public void initialize() {,         Controller c = getSamplerController();,         JMeterProperty property = c.getProperty(TestElement.NAME);,         property.setObjectValue(getName()); // Copy our name into that of the controller,         property.setRunningVersion(property.isRunningVersion());// otherwise name reverts,         c.initialize();,     }, ,     /**,      * Start next iteration after an error,      */,     public void startNextLoop() {,        ((LoopController) getSamplerController()).startNextLoop();,     },     ,     /**,      * NOOP,      */,     @Override,     public void triggerEndOfLoop() {,         // NOOP,     },     ,     /**,      * Set the total number of threads to start,      *,      * @param numThreads,      *            the number of threads.,      */,     public void setNumThreads(int numThreads) {,         setProperty(new IntegerProperty(NUM_THREADS, numThreads));,     }, ,     /**,      * Increment the number of active threads,      */,     void incrNumberOfThreads() {,         numberOfThreads.incrementAndGet();,     }, ,     /**,      * Decrement the number of active threads,      */,     void decrNumberOfThreads() {,         numberOfThreads.decrementAndGet();,     }, ,     /**,      * Get the number of active threads,      *,      * @return the number of active threads,      */,     public int getNumberOfThreads() {,         return numberOfThreads.get();,     },     ,     /**,      * Get the number of threads.,      *,      * @return the number of threads.,      */,     public int getNumThreads() {,         return this.getPropertyAsInt(AbstractThreadGroup.NUM_THREADS);,     }, ,     /**,      * Check if a sampler error should cause thread to start next loop.,      *,      * @return true if thread should start next loop,      */,     public boolean getOnErrorStartNextLoop() {,         return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_START_NEXT_LOOP);,     }, ,     /**,      * Check if a sampler error should cause thread to stop.,      *,      * @return true if thread should stop,      */,     public boolean getOnErrorStopThread() {,         return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_STOPTHREAD);,     }, ,     /**,      * Check if a sampler error should cause test to stop.,      *,      * @return true if test (all threads) should stop,      */,     public boolean getOnErrorStopTest() {,         return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_STOPTEST);,     }, ,     /**,      * Check if a sampler error should cause test to stop now.,      *,      * @return true if test (all threads) should stop immediately,      */,     public boolean getOnErrorStopTestNow() {,         return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_STOPTEST_NOW);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/threads/RemoteThreadsListenerImpl.java,<init>,76-76,[                } catch (Exception e) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/threads/RemoteThreadsListenerWrapper.java,,36-65,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 240L;, ,     private RemoteThreadsListener listener;, ,     public RemoteThreadsListenerWrapper(RemoteThreadsListener l) {,         listener = l;,     }, ,     public RemoteThreadsListenerWrapper() {,     }, ,     @Override,     public void threadStarted() {,         try {,             listener.threadStarted();,         } catch (RemoteException err) {,             log.error("", err); // $NON-NLS-1$,         },     }, ,     @Override,     public void threadFinished() {,         try {,             listener.threadFinished();,         } catch (RemoteException err) {,             log.error("", err); // $NON-NLS-1$,         },     }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/threads/SamplePackage.java,recoverRunningVersion,127-127,[        sampler.recoverRunningVersion();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/threads/SamplePackage.java,setRunningVersion,96-96,[        sampler.setRunningVersion(running);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/threads/JMeterThread.java,,67-922,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     public static final String PACKAGE_OBJECT = "JMeterThread.pack"; // $NON-NLS-1$, ,     public static final String LAST_SAMPLE_OK = "JMeterThread.last_sample_ok"; // $NON-NLS-1$, ,     private static final String TRUE = Boolean.toString(true); // i.e. "true", ,     /** How often to check for shutdown during ramp-up, default 1000ms */,     private static final int RAMPUP_GRANULARITY =,             JMeterUtils.getPropDefault("jmeterthread.rampup.granularity", 1000); // $NON-NLS-1$, ,     private final Controller controller;, ,     private final HashTree testTree;, ,     private final TestCompiler compiler;, ,     private final JMeterThreadMonitor monitor;, ,     private final JMeterVariables threadVars;, ,     // Note: this is only used to implement TestIterationListener#testIterationStart,     // Since this is a frequent event, it makes sense to create the list once rather than scanning each time,     // The memory used will be released when the thread finishes,     private final Collection<TestIterationListener> testIterationStartListeners;, ,     private final ListenerNotifier notifier;, ,     /*,      * The following variables are set by StandardJMeterEngine.,      * This is done before start() is called, so the values will be published to the thread safely,      * TODO - consider passing them to the constructor, so that they can be made final,      * (to avoid adding lots of parameters, perhaps have a parameter wrapper object.,      */,     private String threadName;, ,     private int initialDelay = 0;, ,     private int threadNum = 0;, ,     private long startTime = 0;, ,     private long endTime = 0;, ,     private boolean scheduler = false;,     // based on this scheduler is enabled or disabled, ,     // Gives access to parent thread threadGroup,     private AbstractThreadGroup threadGroup;, ,     private StandardJMeterEngine engine = null; // For access to stop methods., ,     /*,      * The following variables may be set/read from multiple threads.,      */,     private volatile boolean running; // may be set from a different thread, ,     private volatile boolean onErrorStopTest;, ,     private volatile boolean onErrorStopTestNow;, ,     private volatile boolean onErrorStopThread;, ,     private volatile boolean onErrorStartNextLoop;, ,     private volatile Sampler currentSampler;, ,     private final ReentrantLock interruptLock = new ReentrantLock(); // ensure that interrupt cannot overlap with shutdown, ,     public JMeterThread(HashTree test, JMeterThreadMonitor monitor, ListenerNotifier note) {,         this.monitor = monitor;,         threadVars = new JMeterVariables();,         testTree = test;,         compiler = new TestCompiler(testTree);,         controller = (Controller) testTree.getArray()[0];,         SearchByClass<TestIterationListener> threadListenerSearcher = new SearchByClass<>(TestIterationListener.class); // TL - IS,         test.traverse(threadListenerSearcher);,         testIterationStartListeners = threadListenerSearcher.getSearchResults();,         notifier = note;,         running = true;,     }, ,     public void setInitialContext(JMeterContext context) {,         threadVars.putAll(context.getVariables());,     }, ,     /**,      * Enable the scheduler for this JMeterThread.,      *,      * @param sche,      *            flag whether the scheduler should be enabled,      */,     public void setScheduled(boolean sche) {,         this.scheduler = sche;,     }, ,     /**,      * Set the StartTime for this Thread.,      *,      * @param stime the StartTime value.,      */,     public void setStartTime(long stime) {,         startTime = stime;,     }, ,     /**,      * Get the start time value.,      *,      * @return the start time value.,      */,     public long getStartTime() {,         return startTime;,     }, ,     /**,      * Set the EndTime for this Thread.,      *,      * @param etime,      *            the EndTime value.,      */,     public void setEndTime(long etime) {,         endTime = etime;,     }, ,     /**,      * Get the end time value.,      *,      * @return the end time value.,      */,     public long getEndTime() {,         return endTime;,     }, ,     /**,      * Check the scheduled time is completed.,      *,      */,     private void stopScheduler() {,         long now = System.currentTimeMillis();,         long delay = now - endTime;,         if ((delay >= 0)) {,             running = false;,             log.info("Stopping because end time detected by thread: " + threadName);,         },     }, ,     /**,      * Wait until the scheduled start time if necessary,      *,      */,     private void startScheduler() {,         long delay = (startTime - System.currentTimeMillis());,         delayBy(delay, "startScheduler");,     }, ,     public void setThreadName(String threadName) {,         this.threadName = threadName;,     }, ,     /*,      * See below for reason for this change. Just in case this causes problems,,      * allow the change to be backed out,      */,     private static final boolean startEarlier =,         JMeterUtils.getPropDefault("jmeterthread.startearlier", true); // $NON-NLS-1$, ,     private static final boolean reversePostProcessors =,         JMeterUtils.getPropDefault("jmeterthread.reversePostProcessors",false); // $NON-NLS-1$, ,     static {,         if (startEarlier) {,             log.info("jmeterthread.startearlier=true (see jmeter.properties)");,         } else {,             log.info("jmeterthread.startearlier=false (see jmeter.properties)");,         },         if (reversePostProcessors) {,             log.info("Running PostProcessors in reverse order");,         } else {,             log.info("Running PostProcessors in forward order");,         },     }, ,     @Override,     public void run() {,         // threadContext is not thread-safe, so keep within thread,         JMeterContext threadContext = JMeterContextService.getContext();,         LoopIterationListener iterationListener=null;, ,         try {,             iterationListener = initRun(threadContext);,             while (running) {,                 Sampler sam = controller.next();,                 while (running && sam != null) {,                     process_sampler(sam, null, threadContext);,                     threadContext.cleanAfterSample();,                     if(onErrorStartNextLoop || threadContext.isRestartNextLoop()) {,                         if(threadContext.isRestartNextLoop()) {,                             triggerEndOfLoopOnParentControllers(sam, threadContext);,                             sam = null;,                             threadContext.getVariables().put(LAST_SAMPLE_OK, TRUE);,                             threadContext.setRestartNextLoop(false);,                         } else {,                             boolean lastSampleFailed = !TRUE.equals(threadContext.getVariables().get(LAST_SAMPLE_OK));,                             if(lastSampleFailed) {,                                 if(log.isDebugEnabled()) {,                                     log.debug("StartNextLoop option is on, Last sample failed, starting next loop");,                                 },                                 triggerEndOfLoopOnParentControllers(sam, threadContext);,                                 sam = null;,                                 threadContext.getVariables().put(LAST_SAMPLE_OK, TRUE);,                             } else {,                                 sam = controller.next();,                             },                         },                     } ,                     else {,                         sam = controller.next();,                     },                 },                 if (controller.isDone()) {,                     running = false;,                     log.info("Thread is done: " + threadName);,                 },             },         },         // Might be found by contoller.next(),         catch (JMeterStopTestException e) {,             log.info("Stopping Test: " + e.toString());,             stopTest();,         },         catch (JMeterStopTestNowException e) {,             log.info("Stopping Test Now: " + e.toString());,             stopTestNow();,         } catch (JMeterStopThreadException e) {,             log.info("Stop Thread seen: " + e.toString());,         } catch (Exception e) {,             log.error("Test failed!", e);,         } catch (ThreadDeath e) {,             throw e; // Must not ignore this one,         } catch (Error e) {// Make sure errors are output to the log file,             log.error("Test failed!", e);,         } finally {,             currentSampler = null; // prevent any further interrupts,             try {,                 interruptLock.lock();  // make sure current interrupt is finished, prevent another starting yet,                 threadContext.clear();,                 log.info("Thread finished: " + threadName);,                 threadFinished(iterationListener);,                 monitor.threadFinished(this); // Tell the monitor we are done,                 JMeterContextService.removeContext(); // Remove the ThreadLocal entry,             },             finally {,                 interruptLock.unlock(); // Allow any pending interrupt to complete (OK because currentSampler == null),             },         },     }, ,     /**,      * Trigger end of loop on parent controllers up to Thread Group,      * @param sam Sampler Base sampler,      * @param threadContext ,      */,     private void triggerEndOfLoopOnParentControllers(Sampler sam, JMeterContext threadContext) {,         // Find parent controllers of current sampler,         FindTestElementsUpToRootTraverser pathToRootTraverser=null;,         TransactionSampler transactionSampler = null;,         if(sam instanceof TransactionSampler) {,             transactionSampler = (TransactionSampler) sam;,             pathToRootTraverser = new FindTestElementsUpToRootTraverser((transactionSampler).getTransactionController());,         } else {,             pathToRootTraverser = new FindTestElementsUpToRootTraverser(sam);,         },         testTree.traverse(pathToRootTraverser);,         List<Controller> controllersToReinit = pathToRootTraverser.getControllersToRoot();, ,         // Trigger end of loop condition on all parent controllers of current sampler,         for (Iterator<Controller> iterator = controllersToReinit,                 .iterator(); iterator.hasNext();) {,             Controller parentController =  iterator.next();,             if(parentController instanceof AbstractThreadGroup) {,                 AbstractThreadGroup tg = (AbstractThreadGroup) parentController;,                 tg.startNextLoop();,             } else {,                 parentController.triggerEndOfLoop();,             },         },         if(transactionSampler!=null) {,             process_sampler(transactionSampler, null, threadContext);,         },     }, ,     /**,      * Process the current sampler, handling transaction samplers.,      *,      * @param current sampler,      * @param parent sampler,      * @param threadContext,      * @return SampleResult if a transaction was processed,      */,     @SuppressWarnings("deprecation") // OK to call TestBeanHelper.prepare(),     private SampleResult process_sampler(Sampler current, Sampler parent, JMeterContext threadContext) {,         SampleResult transactionResult = null;,         try {,             // Check if we are running a transaction,             TransactionSampler transactionSampler = null;,             if(current instanceof TransactionSampler) {,                 transactionSampler = (TransactionSampler) current;,             },             // Find the package for the transaction,             SamplePackage transactionPack = null;,             if(transactionSampler != null) {,                 transactionPack = compiler.configureTransactionSampler(transactionSampler);, ,                 // Check if the transaction is done,                 if(transactionSampler.isTransactionDone()) {,                     // Get the transaction sample result,                     transactionResult = transactionSampler.getTransactionResult();,                     transactionResult.setThreadName(threadName);,                     transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());,                     transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());, ,                     // Check assertions for the transaction sample,                     checkAssertions(transactionPack.getAssertions(), transactionResult, threadContext);,                     // Notify listeners with the transaction sample result,                     if (!(parent instanceof TransactionSampler)){,                         notifyListeners(transactionPack.getSampleListeners(), transactionResult);,                     },                     compiler.done(transactionPack);,                     // Transaction is done, we do not have a sampler to sample,                     current = null;,                 },                 else {,                     Sampler prev = current;,                     // It is the sub sampler of the transaction that will be sampled,                     current = transactionSampler.getSubSampler();,                     if (current instanceof TransactionSampler){,                         SampleResult res = process_sampler(current, prev, threadContext);// recursive call,                         threadContext.setCurrentSampler(prev);,                         current=null;,                         if (res!=null){,                             transactionSampler.addSubSamplerResult(res);,                         },                     },                 },             }, ,             // Check if we have a sampler to sample,             if(current != null) {,                 threadContext.setCurrentSampler(current);,                 // Get the sampler ready to sample,                 SamplePackage pack = compiler.configureSampler(current);,                 runPreProcessors(pack.getPreProcessors());, ,                 // Hack: save the package for any transaction controllers,                 threadVars.putObject(PACKAGE_OBJECT, pack);, ,                 delay(pack.getTimers());,                 Sampler sampler = pack.getSampler();,                 sampler.setThreadContext(threadContext);,                 // TODO should this set the thread names for all the subsamples?,                 // might be more efficient than fetching the name elsewehere,                 sampler.setThreadName(threadName);,                 TestBeanHelper.prepare(sampler);, ,                 // Perform the actual sample,                 currentSampler = sampler;,                 SampleResult result = sampler.sample(null); // TODO: remove this useless Entry parameter,                 currentSampler = null;, ,                 // If we got any results, then perform processing on the result,                 if (result != null) {,                     result.setGroupThreads(threadGroup.getNumberOfThreads());,                     result.setAllThreads(JMeterContextService.getNumberOfThreads());,                     result.setThreadName(threadName);,                     SampleResult[]subResults = result.getSubResults();,                     if(subResults != null) {,                         for (SampleResult subResult : subResults) {,                             subResult.setGroupThreads(threadGroup.getNumberOfThreads());,                             subResult.setAllThreads(JMeterContextService.getNumberOfThreads());,                             subResult.setThreadName(threadName);,                         },                     },                     threadContext.setPreviousResult(result);,                     runPostProcessors(pack.getPostProcessors());,                     checkAssertions(pack.getAssertions(), result, threadContext);,                     // Do not send subsamples to listeners which receive the transaction sample,                     List<SampleListener> sampleListeners = getSampleListeners(pack, transactionPack, transactionSampler);,                     notifyListeners(sampleListeners, result);,                     compiler.done(pack);,                     // Add the result as subsample of transaction if we are in a transaction,                     if(transactionSampler != null) {,                         transactionSampler.addSubSamplerResult(result);,                     }, ,                     // Check if thread or test should be stopped,                     if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {,                         stopThread();,                     },                     if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {,                         stopTest();,                     },                     if (result.isStopTestNow() || (!result.isSuccessful() && onErrorStopTestNow)) {,                         stopTestNow();,                     },                     if(result.isStartNextThreadLoop()) {,                         threadContext.setRestartNextLoop(true);,                     },                 } else {,                     compiler.done(pack); // Finish up,                 },             },             if (scheduler) {,                 // checks the scheduler to stop the iteration,                 stopScheduler();,             },         } catch (JMeterStopTestException e) {,             log.info("Stopping Test: " + e.toString());,             stopTest();,         } catch (JMeterStopThreadException e) {,             log.info("Stopping Thread: " + e.toString());,             stopThread();,         } catch (Exception e) {,             if (current != null) {,                 log.error("Error while processing sampler '"+current.getName()+"' :", e);,             } else {,                 log.error("", e);,             },         },         return transactionResult;,     }, ,     /**,      * Get the SampleListeners for the sampler. Listeners who receive transaction sample,      * will not be in this list.,      *,      * @param samplePack,      * @param transactionPack,      * @param transactionSampler,      * @return the listeners who should receive the sample result,      */,     private List<SampleListener> getSampleListeners(SamplePackage samplePack, SamplePackage transactionPack, TransactionSampler transactionSampler) {,         List<SampleListener> sampleListeners = samplePack.getSampleListeners();,         // Do not send subsamples to listeners which receive the transaction sample,         if(transactionSampler != null) {,             List<SampleListener> onlySubSamplerListeners = new ArrayList<>();,             List<SampleListener> transListeners = transactionPack.getSampleListeners();,             for(SampleListener listener : sampleListeners) {,                 // Check if this instance is present in transaction listener list,                 boolean found = false;,                 for(SampleListener trans : transListeners) {,                     // Check for the same instance,                     if(trans == listener) {,                         found = true;,                         break;,                     },                 },                 if(!found) {,                     onlySubSamplerListeners.add(listener);,                 },             },             sampleListeners = onlySubSamplerListeners;,         },         return sampleListeners;,     }, ,     /**,      * @param threadContext,      * @return the iteration listener ,      */,     private IterationListener initRun(JMeterContext threadContext) {,         threadContext.setVariables(threadVars);,         threadContext.setThreadNum(getThreadNum());,         threadContext.getVariables().put(LAST_SAMPLE_OK, TRUE);,         threadContext.setThread(this);,         threadContext.setThreadGroup(threadGroup);,         threadContext.setEngine(engine);,         testTree.traverse(compiler);,         // listeners = controller.getListeners();,         if (scheduler) {,             // set the scheduler to start,             startScheduler();,         },         rampUpDelay(); // TODO - how to handle thread stopped here,         log.info("Thread started: " + Thread.currentThread().getName());,         /*,          * Setting SamplingStarted before the contollers are initialised allows,          * them to access the running values of functions and variables (however,          * it does not seem to help with the listeners),          */,         if (startEarlier) {,             threadContext.setSamplingStarted(true);,         },         controller.initialize();,         IterationListener iterationListener = new IterationListener();,         controller.addIterationListener(iterationListener);,         if (!startEarlier) {,             threadContext.setSamplingStarted(true);,         },         threadStarted();,         return iterationListener;,     }, ,     private void threadStarted() {,         JMeterContextService.incrNumberOfThreads();,         threadGroup.incrNumberOfThreads();,         GuiPackage gp =GuiPackage.getInstance();,         if (gp != null) {// check there is a GUI,             gp.getMainFrame().updateCounts();,         },         ThreadListenerTraverser startup = new ThreadListenerTraverser(true);,         testTree.traverse(startup); // call ThreadListener.threadStarted(),     }, ,     private void threadFinished(LoopIterationListener iterationListener) {,         ThreadListenerTraverser shut = new ThreadListenerTraverser(false);,         testTree.traverse(shut); // call ThreadListener.threadFinished(),         JMeterContextService.decrNumberOfThreads();,         threadGroup.decrNumberOfThreads();,         GuiPackage gp = GuiPackage.getInstance();,         if (gp != null){// check there is a GUI,             gp.getMainFrame().updateCounts();,         },         if (iterationListener != null) { // probably not possible, but check anyway,             controller.removeIterationListener(iterationListener);,         },     }, ,     // N.B. This is only called at the start and end of a thread, so there is not,     // necessary to cache the search results, thus saving memory,     private static class ThreadListenerTraverser implements HashTreeTraverser {,         private final boolean isStart;, ,         private ThreadListenerTraverser(boolean start) {,             isStart = start;,         }, ,         @Override,         public void addNode(Object node, HashTree subTree) {,             if (node instanceof ThreadListener) {,                 ThreadListener tl = (ThreadListener) node;,                 if (isStart) {,                     tl.threadStarted();,                 } else {,                     tl.threadFinished();,                 },             },         }, ,         @Override,         public void subtractNode() {,         }, ,         @Override,         public void processPath() {,         },     }, ,     public String getThreadName() {,         return threadName;,     }, ,     public void stop() { // Called by StandardJMeterEngine, TestAction and AccessLogSampler,         running = false;,         log.info("Stopping: " + threadName);,     }, ,     /** {@inheritDoc} */,     @Override,     public boolean interrupt(){,         try {,             interruptLock.lock();,             Sampler samp = currentSampler; // fetch once; must be done under lock,             if (samp instanceof Interruptible){ // (also protects against null),                 log.warn("Interrupting: " + threadName + " sampler: " +samp.getName());,                 try {,                     boolean found = ((Interruptible)samp).interrupt();,                     if (!found) {,                         log.warn("No operation pending");,                     },                     return found;,                 } catch (Exception e) {,                     log.warn("Caught Exception interrupting sampler: "+e.toString());,                 },             } else if (samp != null){,                 log.warn("Sampler is not Interruptible: "+samp.getName());,             },         } finally {,             interruptLock.unlock();            ,         },         return false;,     }, ,     private void stopTest() {,         running = false;,         log.info("Stop Test detected by thread: " + threadName);,         if (engine != null) {,             engine.askThreadsToStop();,         },     }, ,     private void stopTestNow() {,         running = false;,         log.info("Stop Test Now detected by thread: " + threadName);,         if (engine != null) {,             engine.stopTest();,         },     }, ,     private void stopThread() {,         running = false;,         log.info("Stop Thread detected by thread: " + threadName);,     }, ,     @SuppressWarnings("deprecation") // OK to call TestBeanHelper.prepare(),     private void checkAssertions(List<Assertion> assertions, SampleResult parent, JMeterContext threadContext) {,         for (Assertion assertion : assertions) {,             TestBeanHelper.prepare((TestElement) assertion);,             if (assertion instanceof AbstractScopedAssertion){,                 AbstractScopedAssertion scopedAssertion = (AbstractScopedAssertion) assertion;,                 String scope = scopedAssertion.fetchScope();,                 if (scopedAssertion.isScopeParent(scope) || scopedAssertion.isScopeAll(scope) || scopedAssertion.isScopeVariable(scope)){,                     processAssertion(parent, assertion);,                 },                 if (scopedAssertion.isScopeChildren(scope) || scopedAssertion.isScopeAll(scope)){,                     SampleResult children[] = parent.getSubResults();,                     boolean childError = false;,                     for (int i=0;i <children.length; i++){,                         processAssertion(children[i], assertion);,                         if (!children[i].isSuccessful()){,                             childError = true;,                         },                     },                     // If parent is OK, but child failed, add a message and flag the parent as failed,                     if (childError && parent.isSuccessful()) {,                         AssertionResult assertionResult = new AssertionResult(((AbstractTestElement)assertion).getName());,                         assertionResult.setResultForFailure("One or more sub-samples failed");,                         parent.addAssertionResult(assertionResult);,                         parent.setSuccessful(false);,                     },                 },             } else {,                 processAssertion(parent, assertion);,             },         },         threadContext.getVariables().put(LAST_SAMPLE_OK, Boolean.toString(parent.isSuccessful()));,     }, ,     private void processAssertion(SampleResult result, Assertion assertion) {,         AssertionResult assertionResult;,         try {,             assertionResult = assertion.getResult(result);,         } catch (ThreadDeath e) {,             throw e;,         } catch (Error e) {,             log.error("Error processing Assertion ",e);,             assertionResult = new AssertionResult("Assertion failed! See log file.");,             assertionResult.setError(true);,             assertionResult.setFailureMessage(e.toString());,         } catch (Exception e) {,             log.error("Exception processing Assertion ",e);,             assertionResult = new AssertionResult("Assertion failed! See log file.");,             assertionResult.setError(true);,             assertionResult.setFailureMessage(e.toString());,         },         result.setSuccessful(result.isSuccessful() && !(assertionResult.isError() || assertionResult.isFailure()));,         result.addAssertionResult(assertionResult);,     }, ,     @SuppressWarnings("deprecation") // OK to call TestBeanHelper.prepare(),     private void runPostProcessors(List<PostProcessor> extractors) {,         ListIterator<PostProcessor> iter;,         if (reversePostProcessors) {// Original (rather odd) behaviour,             iter = extractors.listIterator(extractors.size());// start at the end,             while (iter.hasPrevious()) {,                 PostProcessor ex = iter.previous();,                 TestBeanHelper.prepare((TestElement) ex);,                 ex.process();,             },         } else {,             for (PostProcessor ex : extractors) {,                 TestBeanHelper.prepare((TestElement) ex);,                 ex.process();,             },         },     }, ,     @SuppressWarnings("deprecation") // OK to call TestBeanHelper.prepare(),     private void runPreProcessors(List<PreProcessor> preProcessors) {,         for (PreProcessor ex : preProcessors) {,             if (log.isDebugEnabled()) {,                 log.debug("Running preprocessor: " + ((AbstractTestElement) ex).getName());,             },             TestBeanHelper.prepare((TestElement) ex);,             ex.process();,         },     }, ,     @SuppressWarnings("deprecation") // OK to call TestBeanHelper.prepare(),     private void delay(List<Timer> timers) {,         long sum = 0;,         for (Timer timer : timers) {,             TestBeanHelper.prepare((TestElement) timer);,             sum += timer.delay();,         },         if (sum > 0) {,             try {,                 TimeUnit.MILLISECONDS.sleep(sum);,             } catch (InterruptedException e) {,                 log.warn("The delay timer was interrupted - probably did not wait as long as intended.");,             },         },     }, ,     void notifyTestListeners() {,         threadVars.incIteration();,         for (TestIterationListener listener : testIterationStartListeners) {,             if (listener instanceof TestElement) {,                 listener.testIterationStart(new LoopIterationEvent(controller, threadVars.getIteration()));,                 ((TestElement) listener).recoverRunningVersion();,             } else {,                 listener.testIterationStart(new LoopIterationEvent(controller, threadVars.getIteration()));,             },         },     }, ,     private void notifyListeners(List<SampleListener> listeners, SampleResult result) {,         SampleEvent event = new SampleEvent(result, threadGroup.getName(), threadVars);,         notifier.notifyListeners(event, listeners);, ,     }, ,     /**,      * Set rampup delay for JMeterThread Thread,      * @param delay Rampup delay for JMeterThread,      */,     public void setInitialDelay(int delay) {,         initialDelay = delay;,     }, ,     /**,      * Initial delay if ramp-up period is active for this threadGroup.,      */,     private void rampUpDelay() {,         delayBy(initialDelay, "RampUp");,     }, ,     /**,      * Wait for delay with RAMPUP_GRANULARITY,      * @param delay delay in ms,      * @param type Delay type,      */,     protected final void delayBy(long delay, String type) {,         if (delay > 0) {,             long start = System.currentTimeMillis();,             long end = start + delay;,             long now=0;,             long pause = RAMPUP_GRANULARITY;,             while(running && (now = System.currentTimeMillis()) < end) {,                 long togo = end - now;,                 if (togo < pause) {,                     pause = togo;,                 },                 try {,                     TimeUnit.MILLISECONDS.sleep(pause); // delay between checks,                 } catch (InterruptedException e) {,                     if (running) { // Don't bother reporting stop test interruptions,                         log.warn(type+" delay for "+threadName+" was interrupted. Waited "+(now - start)+" milli-seconds out of "+delay);,                     },                     break;,                 },             },         },     }, ,     /**,      * Returns the threadNum.,      *,      * @return the threadNum,      */,     public int getThreadNum() {,         return threadNum;,     }, ,     /**,      * Sets the threadNum.,      *,      * @param threadNum,      *            the threadNum to set,      */,     public void setThreadNum(int threadNum) {,         this.threadNum = threadNum;,     }, ,     private class IterationListener implements LoopIterationListener {,         /**,          * {@inheritDoc},          */,         @Override,         public void iterationStart(LoopIterationEvent iterEvent) {,             notifyTestListeners();,         },     }, ,     /**,      * Save the engine instance for access to the stop methods,      *,      * @param engine the engine which is used,      */,     public void setEngine(StandardJMeterEngine engine) {,         this.engine = engine;,     }, ,     /**,      * Should Test stop on sampler error?,      *,      * @param b -,      *            true or false,      */,     public void setOnErrorStopTest(boolean b) {,         onErrorStopTest = b;,     }, ,     /**,      * Should Test stop abruptly on sampler error?,      *,      * @param b -,      *            true or false,      */,     public void setOnErrorStopTestNow(boolean b) {,         onErrorStopTestNow = b;,     }, ,     /**,      * Should Thread stop on Sampler error?,      *,      * @param b -,      *            true or false,      */,     public void setOnErrorStopThread(boolean b) {,         onErrorStopThread = b;,     }, ,     /**,      * Should Thread start next loop on Sampler error?,      *,      * @param b -,      *            true or false,      */,     public void setOnErrorStartNextLoop(boolean b) {,         onErrorStartNextLoop = b;,     }, ,     public void setThreadGroup(AbstractThreadGroup group) {,         this.threadGroup = group;,     }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/threads/ThreadGroup.java,stop,412-412,[                threadStarter.interrupt();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/threads/ThreadGroup.java,tellThreadsToStop,384-384,[                threadStarter.interrupt();],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java,configure,175-175,[        setSampleErrorBoxes((AbstractThreadGroup) tg);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/threads/gui/PostThreadGroupGui.java,,30-43,[        super(false);,     }, ,     @Override,     public String getLabelResource() {,         return "post_thread_group_title"; // $NON-NLS-1$, ,     }, ,     @Override,     public TestElement createTestElement() {,         PostThreadGroup tg = new PostThreadGroup();,         modifyTestElement(tg);,         return tg;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/threads/gui/SetupThreadGroupGui.java,,30-43,[        super(false);,     }, ,     @Override,     public String getLabelResource() {,         return "setup_thread_group_title"; // $NON-NLS-1$, ,     }, ,     @Override,     public TestElement createTestElement() {,         SetupThreadGroup tg = new SetupThreadGroup();,         modifyTestElement(tg);,         return tg;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/BSFTimer.java,,28-53,[public class BSFTimer extends BSFTestElement implements Cloneable, Timer, TestBean {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     /** {@inheritDoc} */,     @Override,     public long delay() {,         long delay = 0;,         BSFManager mgr = null;,         try {,             mgr = getManager();,             Object o = evalFileOrScript(mgr);,             if (o == null) {,                 log.warn("Script did not return a value");,                 return 0;,             },             delay = Long.parseLong(o.toString());,         } catch (NumberFormatException | BSFException e) {,             log.warn("Problem in BSF script "+e);,         } finally {,             if(mgr != null) {,                 mgr.terminate();,             },         },         return delay;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/BeanShellTimer.java,,28-62,[public class BeanShellTimer extends BeanShellTestElement implements Cloneable, Timer, TestBean {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     // can be specified in jmeter.properties,     private static final String INIT_FILE = "beanshell.timer.init"; //$NON-NLS-1$, ,     @Override,     protected String getInitFileProperty() {,         return INIT_FILE;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public long delay() {,         String ret="0";,         final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();,         if (bshInterpreter == null) {,             log.error("BeanShell not found");,             return 0;,         },         try {,             Object o = processFileOrScript(bshInterpreter);,             if (o != null) { ret=o.toString(); },         } catch (JMeterException e) {,             log.warn("Problem in BeanShell script "+e);,         },         try {,             return Long.decode(ret).longValue();,         } catch (NumberFormatException e){,             log.warn(e.getLocalizedMessage());,             return 0;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/ConstantTimer.java,,39-111,[    private long delay = 0;, ,     /**,      * No-arg constructor.,      */,     public ConstantTimer() {,     }, ,     /**,      * Set the delay for this timer.,      * @param delay The delay for this timer,      */,     public void setDelay(String delay) {,         setProperty(DELAY, delay);,     }, ,     /**,      * Set the range (not used for this timer).,      * @param range Not used,      *,      */,     public void setRange(double range) {,         // NOOP,     }, ,     /**,      * Get the delay value for display.,      *,      * @return the delay value for display.,      */,     public String getDelay() {,         return getPropertyAsString(DELAY);,     }, ,     /**,      * Retrieve the range (not used for this timer).,      *,      * @return the range (always zero for this timer).,      */,     public double getRange() {,         return 0;,     }, ,     /**,      * Retrieve the delay to use during test execution.,      *,      * @return the delay.,      */,     @Override,     public long delay() {,         return delay;,     }, ,     /**,      * Provide a description of this timer class.,      *,      * @return the description of this timer class.,      */,     @Override,     public String toString() {,         return JMeterUtils.getResString("constant_timer_memo"); //$NON-NLS-1$,     }, ,     /**,      * Gain access to any variables that have been defined.,      *,      * @see LoopIterationListener#iterationStart(LoopIterationEvent),      */,     @Override,     public void iterationStart(LoopIterationEvent event) {,         delay = getPropertyAsLong(DELAY);, ,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/GaussianRandomTimer.java,,31-41,[public class GaussianRandomTimer extends RandomTimer implements Serializable {,     private static final long serialVersionUID = 241L;, ,     @Override,     public long delay() {,         return (long) Math.abs((getRandom().nextGaussian() * getRange()) + super.delay());,     }, ,     @Override,     public String toString() {,         return JMeterUtils.getResString("gaussian_timer_memo"); //$NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/JSR223Timer.java,,31-51,[public class JSR223Timer extends JSR223TestElement implements Cloneable, Timer, TestBean {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     /** {@inheritDoc} */,     @Override,     public long delay() {,         long delay = 0;,         try {,             ScriptEngine scriptEngine = getScriptEngine();,             Object o = processFileOrScript(scriptEngine, null);,             if (o == null) {,                 log.warn("Script did not return a value");,                 return 0;,             },             delay = Long.parseLong(o.toString());,         } catch (NumberFormatException | IOException | ScriptException e) {,             log.error("Problem in JSR223 script "+getName(), e);,         },         return delay;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/PoissonRandomTimer.java,,31-387,[public class PoissonRandomTimer extends RandomTimer implements Serializable {,     /**,      *,      */,     private static final long serialVersionUID = 3514708226113231004L;,     /**,      *,      */,     private static final double[] LOG_FACTORIAL =,         {,             0.000000000000000,,             0.000000000000000,,             0.693147180559945,,             1.791759469228055,,             3.178053830347946,,             4.787491742782046,,             6.579251212010101,,             8.525161361065415,,             10.604602902745251,,             12.801827480081469,,             15.104412573075516,,             17.502307845873887,,             19.987214495661885,,             22.552163853123421,,             25.191221182738683,,             27.899271383840894,,             30.671860106080675,,             33.505073450136891,,             36.395445208033053,,             39.339884187199495,,             42.335616460753485,,             45.380138898476908,,             48.471181351835227,,             51.606675567764377,,             54.784729398112319,,             58.003605222980518,,             61.261701761002001,,             64.557538627006323,,             67.889743137181526,,             71.257038967168000,,             74.658236348830158,,             78.092223553315307,,             81.557959456115029,,             85.054467017581516,,             88.580827542197682,,             92.136175603687079,,             95.719694542143202,,             99.330612454787428,,             102.968198614513810,,             106.631760260643450,,             110.320639714757390,,             114.034211781461690,,             117.771881399745060,,             121.533081515438640,,             125.317271149356880,,             129.123933639127240,,             132.952575035616290,,             136.802722637326350,,             140.673923648234250,,             144.565743946344900,,             148.477766951773020,,             152.409592584497350,,             156.360836303078800,,             160.331128216630930,,             164.320112263195170,,             168.327445448427650,,             172.352797139162820,,             176.395848406997370,,             180.456291417543780,,             184.533828861449510,,             188.628173423671600,,             192.739047287844900,,             196.866181672889980,,             201.009316399281570,,             205.168199482641200,,             209.342586752536820,,             213.532241494563270,,             217.736934113954250,,             221.956441819130360,,             226.190548323727570,,             230.439043565776930,,             234.701723442818260,,             238.978389561834350,,             243.268849002982730,,             247.572914096186910,,             251.890402209723190,,             256.221135550009480,,             260.564940971863220,,             264.921649798552780,,             269.291097651019810,,             273.673124285693690,,             278.067573440366120,,             282.474292687630400,,             286.893133295426990,,             291.323950094270290,,             295.766601350760600,,             300.220948647014100,,             304.686856765668720,,             309.164193580146900,,             313.652829949878990,,             318.152639620209300,,             322.663499126726210,,             327.185287703775200,,             331.717887196928470,,             336.261181979198450,,             340.815058870798960,,             345.379407062266860,,             349.954118040770250,,             354.539085519440790,,             359.134205369575340,,             363.739375555563470,,             368.354496072404690,,             372.979468885689020,,             377.614197873918670,,             382.258588773060010,,             386.912549123217560,,             391.575988217329610,,             396.248817051791490,,             400.930948278915760,,             405.622296161144900,,             410.322776526937280,,             415.032306728249580,,             419.750805599544780,,             424.478193418257090,,             429.214391866651570,,             433.959323995014870,,             438.712914186121170,,             443.475088120918940,,             448.245772745384610,,             453.024896238496130,,             457.812387981278110,,             462.608178526874890,,             467.412199571608080,,             472.224383926980520,,             477.044665492585580,,             481.872979229887900,,             486.709261136839360,,             491.553448223298010,,             496.405478487217580,,             501.265290891579240,,             506.132825342034830,,             511.008022665236070,,             515.890824587822520,,             520.781173716044240,,             525.679013515995050,,             530.584288294433580,,             535.496943180169520,,             540.416924105997740,,             545.344177791154950,,             550.278651724285620,,             555.220294146894960,,             560.169054037273100,,             565.124881094874350,,             570.087725725134190,,             575.057539024710200,,             580.034272767130800,,             585.017879388839220,,             590.008311975617860,,             595.005524249382010,,             600.009470555327430,,             605.020105849423770,,             610.037385686238740,,             615.061266207084940,,             620.091704128477430,,             625.128656730891070,,             630.172081847810200,,             635.221937855059760,,             640.278183660408100,,             645.340778693435030,,             650.409682895655240,,             655.484856710889060,,             660.566261075873510,,             665.653857411105950,,             670.747607611912710,,             675.847474039736880,,             680.953419513637530,,             686.065407301994010,,             691.183401114410800,,             696.307365093814040,,             701.437263808737160,,             706.573062245787470,,             711.714725802289990,,             716.862220279103440,,             722.015511873601330,,             727.174567172815840,,             732.339353146739310,,             737.509837141777440,,             742.685986874351220,,             747.867770424643370,,             753.055156230484160,,             758.248113081374300,,             763.446610112640200,,             768.650616799717000,,             773.860102952558460,,             779.075038710167410,,             784.295394535245690,,             789.521141208958970,,             794.752249825813460,,             799.988691788643450,,             805.230438803703120,,             810.477462875863580,,             815.729736303910160,,             820.987231675937890,,             826.249921864842800,,             831.517780023906310,,             836.790779582469900,,             842.068894241700490,,             847.352097970438420,,             852.640365001133090,,             857.933669825857460,,             863.231987192405430,,             868.535292100464630,,             873.843559797865740,,             879.156765776907600,,             884.474885770751830,,             889.797895749890240,,             895.125771918679900,,             900.458490711945270,,             905.796028791646340,,             911.138363043611210,,             916.485470574328820,,             921.837328707804890,,             927.193914982476710,,             932.555207148186240,,             937.921183163208070,,             943.291821191335660,,             948.667099599019820,,             954.046996952560450,,             959.431492015349480,,             964.820563745165940,,             970.214191291518320,,             975.612353993036210,,             981.015031374908400,,             986.422203146368590,,             991.833849198223450,,             997.249949600427840,,             1002.670484599700300,,             1008.095434617181700,,             1013.524780246136200,,             1018.958502249690200,,             1024.396581558613400,,             1029.838999269135500,,             1035.285736640801600,,             1040.736775094367400,,             1046.192096209724900,,             1051.651681723869200,,             1057.115513528895000,,             1062.583573670030100,,             1068.055844343701400,,             1073.532307895632800,,             1079.012946818975000,,             1084.497743752465600,,             1089.986681478622400,,             1095.479742921962700,,             1100.976911147256000,,             1106.478169357800900,,             1111.983500893733000,,             1117.492889230361000,,             1123.006317976526100,,             1128.523770872990800,,             1134.045231790853000,,             1139.570684729984800,,             1145.100113817496100,,             1150.633503306223700,,             1156.170837573242400,,         };, , ,     /**,      * {@inheritDoc},      */,     @Override,     public long delay() {,         return Math.abs(randomPoisson((int)Math.round(getRange())) + super.delay());,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public String toString() {,         return JMeterUtils.getResString("poisson_timer_memo"); //$NON-NLS-1$,     }, ,     /**,      * Generate Poisson random based using,      * @param lambda Lambda in Poisson,      * @return random,      */,     private static int randomPoisson(int lambda) {,         if(lambda <= 30) {,             return poissonRandomNumberLowEq30(lambda);,         } else {,             return poissonRandomNumberSup30(lambda);,         },     },     /**,      * see http://en.wikipedia.org/wiki/Poisson_distribution,      * @param lambda Lambda in Poisson,      * @return random,      */,     private static final int poissonRandomNumberLowEq30(int lambda) {,         double L = Math.exp(-lambda);,         int k = 0;,         double p = 1;,         do {,             k = k + 1;,             double u = Math.random();,             p = p * u;,         } while (p > L);,         return k - 1;,     }, ,     /**,      * http://www.johndcook.com/blog/2010/06/14/generating-poisson-random-values/,      * @param lambda Lambda in Poisson,      * @return random,      */,     private static final int poissonRandomNumberSup30(int lambda) {,         double c = 0.767 - 3.36/lambda;,         double beta = Math.PI/Math.sqrt(3.0*lambda);,         double alpha = beta*lambda;,         double k = Math.log(c) - lambda - Math.log(beta);,         while(true) {,             double u = Math.random();,             double x = (alpha - Math.log((1.0 - u)/u))/beta;,             int n = (int)Math.floor(x + 0.5);,             if (n < 0){,                 continue;,             },             double v = Math.random();,             double y = alpha - beta*x;,             double lhs = y + Math.log(v/Math.pow((1.0 + Math.exp(y)),2));,             double rhs = k + n*Math.log(lambda) -logFactorial(n);,             if (lhs <= rhs) {,                 return n;,             },         },     }, ,     /**,      * Compute log factorial,      * http://www.johndcook.com/blog/2010/08/16/how-to-compute-log-factorial/,      * @param n Number for which we want log(n!),      * @return Log factorial,      */,     private static final double logFactorial(int n),     {,         if (n < 0) {,             throw new IllegalArgumentException();,         },         else if (n > 254) {,             double x = n + 1;,             return (x - 0.5)*Math.log(x) - x + 0.5*Math.log(2*Math.PI) + 1.0/(12.0*x);,         },         else {,             return LOG_FACTORIAL[n];],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/RandomTimer.java,,42-71,[    public RandomTimer() {,     }, ,     /**,      * Set the range value.,      */,     @Override,     public void setRange(double range) {,         setProperty(new DoubleProperty(RANGE, range));,     }, ,     public void setRange(String range) {,         setProperty(new StringProperty(RANGE, range));,     }, ,     /**,      * Get the range value.,      *,      * @return double,      */,     @Override,     public double getRange() {,         return this.getPropertyAsDouble(RANGE);,     },     ,     /**,      * @return {@link Random} Thread local Random,      */,     protected Random getRandom() {,         return ThreadLocalRandom.current();],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/SyncTimer.java,,41-277,[public class SyncTimer extends AbstractTestElement implements Timer, Serializable, TestBean, TestStateListener, ThreadListener {,     private static final Logger LOGGER = LoggingManager.getLoggerForClass();, ,     /**,      * Wrapper to {@link CyclicBarrier} to allow lazy init of CyclicBarrier when SyncTimer is configured with 0,      */,     private static final class BarrierWrapper implements Cloneable {, ,         private CyclicBarrier barrier;, ,         /**,          *,          */,         public BarrierWrapper() {,             this.barrier = null;,         }, ,         /**,          * @param parties Number of parties,          */,         public BarrierWrapper(int parties) {,             this.barrier = new CyclicBarrier(parties);,         }, ,         /**,          * Synchronized is required to ensure CyclicBarrier is initialized only once per Thread Group,          * @param parties Number of parties,          */,         public synchronized void setup(int parties) {,             if(this.barrier== null) {,                 this.barrier = new CyclicBarrier(parties);,             },         }, , ,         /**,          * Wait until all threads called await on this timer,          * ,          * @return The arrival index of the current thread,          * @throws InterruptedException,          *             when interrupted while waiting, or the interrupted status,          *             is set on entering this method,          * @throws BrokenBarrierException,          *             if the barrier is reset while waiting or broken on,          *             entering or while waiting,          * @see java.util.concurrent.CyclicBarrier#await(),          */,         public int await() throws InterruptedException, BrokenBarrierException{,             return barrier.await();,         },         ,         /**,          * Wait until all threads called await on this timer,          * ,          * @param timeout,          *            The timeout in <code>timeUnit</code> units,          * @param timeUnit,          *            The time unit for the <code>timeout</code>,          * @return The arrival index of the current thread,          * @throws InterruptedException,          *             when interrupted while waiting, or the interrupted status,          *             is set on entering this method,          * @throws BrokenBarrierException,          *             if the barrier is reset while waiting or broken on,          *             entering or while waiting,          * @throws TimeoutException,          *             if the specified time elapses,          * @see java.util.concurrent.CyclicBarrier#await(),          */,         public int await(long timeout, TimeUnit timeUnit) throws InterruptedException, BrokenBarrierException, TimeoutException {,             return barrier.await(timeout, timeUnit);,         }, ,         /**,          * @see java.util.concurrent.CyclicBarrier#reset(),          */,         public void reset() {,             barrier.reset();,         }, ,         /**,          * @see java.lang.Object#clone(),          */,         @Override,         protected Object clone()  {,             BarrierWrapper barrierWrapper=  null;,             try {,                 barrierWrapper = (BarrierWrapper) super.clone();,                 barrierWrapper.barrier = this.barrier;,             } catch (CloneNotSupportedException e) {,                 //Cannot happen,             },             return barrierWrapper;,         },     }, ,     private static final long serialVersionUID = 2;, ,     private transient BarrierWrapper barrier;, ,     private int groupSize;,     ,     private long timeoutInMs;, ,     // Ensure transient object is created by the server,     private Object readResolve(){,         createBarrier();,         return this;,     }, ,     /**,      * @return Returns the numThreads.,      */,     public int getGroupSize() {,         return groupSize;,     }, ,     /**,      * @param numThreads,      *            The numThreads to set.,      */,     public void setGroupSize(int numThreads) {,         this.groupSize = numThreads;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public long delay() {,         if(getGroupSize()>=0) {,             int arrival = 0;,             try {,                 if(timeoutInMs==0) {,                     arrival = this.barrier.await();                    ,                 } else if(timeoutInMs > 0){,                     arrival = this.barrier.await(timeoutInMs, TimeUnit.MILLISECONDS);,                 } else {,                     throw new IllegalArgumentException("Negative value for timeout:"+timeoutInMs+" in Synchronizing Timer "+getName());,                 },             } catch (InterruptedException | BrokenBarrierException e) {,                 return 0;,             } catch (TimeoutException e) {,                 LOGGER.warn("SyncTimer "+ getName() + " timeouted waiting for users after:"+getTimeoutInMs()+"ms");,                 return 0;,             } finally {,                 if(arrival == 0) {,                     barrier.reset();,                 },             },         },         return 0;,     }, ,     /**,      * We have to control the cloning process because we need some cross-thread,      * communication if our synctimers are to be able to determine when to block,      * and when to release.,      */,     @Override,     public Object clone() {,         SyncTimer newTimer = (SyncTimer) super.clone();,         newTimer.barrier = barrier;,         return newTimer;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testEnded() {,         this.testEnded(null);,     }, ,     /**,      * Reset timerCounter,      */,     @Override,     public void testEnded(String host) {,         createBarrier();,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void testStarted() {,         testStarted(null);,     }, ,     /**,      * Reset timerCounter,      */,     @Override,     public void testStarted(String host) {,         createBarrier();,     }, ,     /**,      *,      */,     private void createBarrier() {,         if(getGroupSize() == 0) {,             // Lazy init,             this.barrier = new BarrierWrapper();,         } else {,             this.barrier = new BarrierWrapper(getGroupSize());,         },     }, ,     @Override,     public void threadStarted() {,         if(getGroupSize() == 0) {,             int numThreadsInGroup = JMeterContextService.getContext().getThreadGroup().getNumThreads();,             // Unique Barrier creation ensured by synchronized setup,             this.barrier.setup(numThreadsInGroup);,         },     }, ,     @Override,     public void threadFinished() {,         // NOOP,     }, ,     /**,      * @return the timeoutInMs,      */,     public long getTimeoutInMs() {,         return timeoutInMs;,     }, ,     /**,      * @param timeoutInMs the timeoutInMs to set,      */,     public void setTimeoutInMs(long timeoutInMs) {,         this.timeoutInMs = timeoutInMs;,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/timers/UniformRandomTimer.java,,31-41,[public class UniformRandomTimer extends RandomTimer implements Serializable {,     private static final long serialVersionUID = 241L;, ,     @Override,     public long delay() {,         return (long) Math.abs((getRandom().nextDouble() * getRange()) + super.delay());,     }, ,     @Override,     public String toString() {,         return JMeterUtils.getResString("uniform_timer_memo"); //$NON-NLS-1$],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/timers/gui/AbstractRandomTimerGui.java,modifyTestElement,95-95,[        ((RandomTimer) timer).setDelay(delayField.getText());],,modifyTestElement,96-96,[        ((RandomTimer) timer).setRange(rangeField.getText());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/timers/gui/ConstantTimerGui.java,configure,103-103,[        delayField.setText(((ConstantTimer) el).getDelay());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/timers/gui/ConstantTimerGui.java,modifyTestElement,92-92,[        ((ConstantTimer) timer).setDelay(delayField.getText());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/util/BSFTestElement.java,,45-135,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     static {,         BSFManager.registerScriptingEngine("jexl", //$NON-NLS-1$,                 "org.apache.commons.jexl.bsf.JexlEngine", //$NON-NLS-1$,                 new String[]{"jexl"}); //$NON-NLS-1$,         log.info("Registering JMeter version of JavaScript engine as work-round for BSF-22");,         BSFManager.registerScriptingEngine("javascript", //$NON-NLS-1$,                 "org.apache.jmeter.util.BSFJavaScriptEngine", //$NON-NLS-1$,                 new String[]{"js"}); //$NON-NLS-1$,     }, ,     public BSFTestElement() {,         super();,     }, ,     protected BSFManager getManager() throws BSFException {,         BSFManager mgr = new BSFManager();,         initManager(mgr);,         return mgr;,     }, ,     protected void initManager(BSFManager mgr) throws BSFException{,         final String label = getName();,         final String fileName = getFilename();,         final String scriptParameters = getParameters();,         // Use actual class name for log,         final Logger logger = LoggingManager.getLoggerForShortName(getClass().getName());,         mgr.declareBean("log", logger, Logger.class); // $NON-NLS-1$,         mgr.declareBean("Label",label, String.class); // $NON-NLS-1$,         mgr.declareBean("FileName",fileName, String.class); // $NON-NLS-1$,         mgr.declareBean("Parameters", scriptParameters, String.class); // $NON-NLS-1$,         String [] args=JOrphanUtils.split(scriptParameters, " ");//$NON-NLS-1$,         mgr.declareBean("args",args,args.getClass());//$NON-NLS-1$,         // Add variables for access to context and variables,         JMeterContext jmctx = JMeterContextService.getContext();,         JMeterVariables vars = jmctx.getVariables();,         Properties props = JMeterUtils.getJMeterProperties();, ,         mgr.declareBean("ctx", jmctx, jmctx.getClass()); // $NON-NLS-1$,         mgr.declareBean("vars", vars, vars.getClass()); // $NON-NLS-1$,         mgr.declareBean("props", props, props.getClass()); // $NON-NLS-1$,         // For use in debugging:,         mgr.declareBean("OUT", System.out, PrintStream.class); // $NON-NLS-1$, ,         // Most subclasses will need these:,         Sampler sampler = jmctx.getCurrentSampler();,         mgr.declareBean("sampler", sampler, Sampler.class);,         SampleResult prev = jmctx.getPreviousResult();,         mgr.declareBean("prev", prev, SampleResult.class);,     }, ,     protected void processFileOrScript(BSFManager mgr) throws BSFException{,         BSFEngine bsfEngine = mgr.loadScriptingEngine(getScriptLanguage());,         final String scriptFile = getFilename();,         if (scriptFile.length() == 0) {,             bsfEngine.exec("[script]",0,0,getScript());,         } else {// we have a file, read and process it,             try {,                 String script=FileUtils.readFileToString(new File(scriptFile));,                 bsfEngine.exec(scriptFile,0,0,script);,             } catch (IOException e) {,                 log.warn(e.getLocalizedMessage());,                 throw new BSFException(BSFException.REASON_IO_ERROR,"Problem reading script file",e);,             },         },     }, ,     protected Object evalFileOrScript(BSFManager mgr) throws BSFException{,         BSFEngine bsfEngine = mgr.loadScriptingEngine(getScriptLanguage());,         final String scriptFile = getFilename();,         if (scriptFile.length() == 0) {,             return bsfEngine.eval("[script]",0,0,getScript());,         } else {// we have a file, read and process it,             try {,                 String script=FileUtils.readFileToString(new File(scriptFile));,                 return bsfEngine.eval(scriptFile,0,0,script);,             } catch (IOException e) {,                 log.warn(e.getLocalizedMessage());,                 throw new BSFException(BSFException.REASON_IO_ERROR,"Problem reading script file",e);,             },         },     }, ,     public String getScriptLanguage() {,         return scriptLanguage;,     }, ,     public void setScriptLanguage(String s) {,         scriptLanguage = s;,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/util/BeanShellClient.java,main,69-69,[        InputStreamReader fis = new FileReader(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/util/BeanShellClient.java,sendLine,86-86,[        outPipe.write( line.getBytes() ); // TODO - charset?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/util/BeanShellTestElement.java,,37-280,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     //++ For TestBean implementations only,     private String parameters; // passed to file or script, ,     private String filename; // file to source (overrides script), ,     private String script; // script (if file not provided), ,     private boolean resetInterpreter = false;,     //-- For TestBean implementations only, , ,     private transient BeanShellInterpreter bshInterpreter = null;, ,     private transient boolean hasInitFile = false;, ,     public BeanShellTestElement() {,         super();,         init();,     }, ,     protected abstract String getInitFileProperty();, ,     /**,      * Get the interpreter and set up standard script variables.,      * <p>,      * Sets the following script variables:,      * <ul>,      * <li>ctx</li>,      * <li>Label</li>,      * <li>prev</li>,      * <li>props</li>,      * <li>vars</li>,      * </ul>,      * @return the interpreter,      */,     protected BeanShellInterpreter getBeanShellInterpreter() {,         if (isResetInterpreter()) {,             try {,                 bshInterpreter.reset();,             } catch (ClassNotFoundException e) {,                 log.error("Cannot reset BeanShell: "+e.toString());,             },         }, ,         JMeterContext jmctx = JMeterContextService.getContext();,         JMeterVariables vars = jmctx.getVariables();, ,         try {,             bshInterpreter.set("ctx", jmctx);//$NON-NLS-1$,             bshInterpreter.set("Label", getName()); //$NON-NLS-1$,             bshInterpreter.set("prev", jmctx.getPreviousResult());//$NON-NLS-1$,             bshInterpreter.set("props", JMeterUtils.getJMeterProperties());,             bshInterpreter.set("vars", vars);//$NON-NLS-1$,         } catch (JMeterException e) {,             log.warn("Problem setting one or more BeanShell variables "+e);,         },         return bshInterpreter;,     }, ,     private void init() {,         parameters=""; // ensure variables are not null,         filename="";,         script="";,         try {,             String initFileName = JMeterUtils.getProperty(getInitFileProperty());,             hasInitFile = initFileName != null;,             bshInterpreter = new BeanShellInterpreter(initFileName, log);,         } catch (ClassNotFoundException e) {,             log.error("Cannot find BeanShell: "+e.toString());,         },     }, ,     protected Object readResolve() {,         init();,         return this;,     }, ,     @Override,     public Object clone() {,         BeanShellTestElement o = (BeanShellTestElement) super.clone();,         o.init();,        return o;,     }, ,     /**,      * Process the file or script from the test element.,      * <p>,      * Sets the following script variables:,      * <ul>,      * <li>FileName</li>,      * <li>Parameters</li>,      * <li>bsh.args</li>,      * </ul>,      * @param bsh the interpreter, not {@code null},      * @return the result of the script, may be {@code null},      * ,      * @throws JMeterException when working with the bsh fails,      */,     protected Object processFileOrScript(BeanShellInterpreter bsh) throws JMeterException{,         String fileName = getFilename();,         String params = getParameters();, ,         bsh.set("FileName", fileName);//$NON-NLS-1$,         // Set params as a single line,         bsh.set("Parameters", params); // $NON-NLS-1$,         // and set as an array,         bsh.set("bsh.args",//$NON-NLS-1$,                 JOrphanUtils.split(params, " "));//$NON-NLS-1$, ,         if (fileName.length() == 0) {,             return bsh.eval(getScript());,         },         return bsh.source(fileName);,     }, ,     /**,      * Return the script (TestBean version).,      * Must be overridden for subclasses that don't implement TestBean,      * otherwise the clone() method won't work.,      *,      * @return the script to execute,      */,     public String getScript(){,         return script;,     }, ,     /**,      * Set the script (TestBean version).,      * Must be overridden for subclasses that don't implement TestBean,      * otherwise the clone() method won't work.,      *,      * @param s the script to execute (may be blank),      */,     public void setScript(String s){,         script=s;,     }, ,     @Override,     public void threadStarted() {,         if (bshInterpreter == null || !hasInitFile) {,             return;,         },         try {,             bshInterpreter.evalNoLog("threadStarted()"); // $NON-NLS-1$,         } catch (JMeterException ignored) {,             log.debug(getClass().getName() + " : " + ignored.getLocalizedMessage()); // $NON-NLS-1$,         },     }, ,     @Override,     public void threadFinished() {,         if (bshInterpreter == null || !hasInitFile) {,             return;,         },         try {,             bshInterpreter.evalNoLog("threadFinished()"); // $NON-NLS-1$,         } catch (JMeterException ignored) {,             log.debug(getClass().getName() + " : " + ignored.getLocalizedMessage()); // $NON-NLS-1$,         },     }, ,     @Override,     public void testEnded() {,         if (bshInterpreter == null || !hasInitFile) {,             return;,         },         try {,             bshInterpreter.evalNoLog("testEnded()"); // $NON-NLS-1$,         } catch (JMeterException ignored) {,             log.debug(getClass().getName() + " : " + ignored.getLocalizedMessage()); // $NON-NLS-1$,         },     }, ,     @Override,     public void testEnded(String host) {,         if (bshInterpreter == null || !hasInitFile) {,             return;,         },         try {,             bshInterpreter.eval((new StringBuilder("testEnded(\"")) // $NON-NLS-1$,                     .append(host),                     .append("\")") // $NON-NLS-1$,                     .toString()); // $NON-NLS-1$,         } catch (JMeterException ignored) {,             log.debug(getClass().getName() + " : " + ignored.getLocalizedMessage()); // $NON-NLS-1$,         },     }, ,     @Override,     public void testStarted() {,         if (bshInterpreter == null || !hasInitFile) {,             return;,         },         try {,             bshInterpreter.evalNoLog("testStarted()"); // $NON-NLS-1$,         } catch (JMeterException ignored) {,             log.debug(getClass().getName() + " : " + ignored.getLocalizedMessage()); // $NON-NLS-1$,         },     }, ,     @Override,     public void testStarted(String host) {,         if (bshInterpreter == null || !hasInitFile) {,             return;,         },         try {,             bshInterpreter.eval((new StringBuilder("testStarted(\"")) // $NON-NLS-1$,                     .append(host),                     .append("\")") // $NON-NLS-1$,                     .toString()); // $NON-NLS-1$,         } catch (JMeterException ignored) {,             log.debug(getClass().getName() + " : " + ignored.getLocalizedMessage()); // $NON-NLS-1$,         },     }, ,     // Overridden by non-TestBean implementations to return the property value instead,     public String getParameters() {,         return parameters;,     }, ,     public void setParameters(String s) {,         parameters = s;,     }, ,     // Overridden by non-TestBean implementations to return the property value instead,     public String getFilename() {,         return filename;,     }, ,     public void setFilename(String s) {,         filename = s;,     }, ,     public boolean isResetInterpreter() {,         return resetInterpreter;,     }, ,     public void setResetInterpreter(boolean b) {,         resetInterpreter = b;,     }],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/util/HttpSSLProtocolSocketFactory.java,wrapSocket,115-115,[            return new SlowSSLSocket((SSLSocket) sock, CPS);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jmeter/util/JMeterTreeNodeTransferable.java,getTransferData,71-71,[                    } catch (Exception e) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/util/JMeterTreeNodeTransferable.java,getTransferDataFlavors,46-46,[        return DATA_FLAVORS;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jmeter/util/JMeterUtils.java,clearMatcherMemory,1344-1344,[        } catch (Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/util/JMeterUtils.java,getResourceFileAsText,615-615,[                fileReader = new BufferedReader(new InputStreamReader(is));],,
PERFORMANCE,DM_GC,org/apache/jmeter/util/JMeterUtils.java,helpGC,1329-1329,[        System.gc();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/jmeter/util/JMeterUtils.java,getResourceFileAsText,633-633,[            IOUtils.closeQuietly(fileReader);],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/jmeter/util/JSR223BeanInfoSupport.java,,55-55,[        LANGUAGE_NAMES = new String[nameMap.size()][2];],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/util/JSR223TestElement.java,processFileOrScript,164-164,[                                    fileReader = new BufferedReader(new FileReader(scriptFile), ],,processFileOrScript,175-175,[                        fileReader = new BufferedReader(new FileReader(scriptFile), ],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/util/JSR223TestElement.java,,64-261,[            return LazyHolder.INSTANCE;,     },     ,     private static final long serialVersionUID = 233L;, ,     private String cacheKey = ""; // If not empty then script in ScriptText will be compiled and cached, ,     /**,      * Cache of compiled scripts,      */,     @SuppressWarnings("unchecked") // LRUMap does not support generics (yet),     private static final Map<String, CompiledScript> compiledScriptsCache = ,             Collections.synchronizedMap(,                     new LRUMap(JMeterUtils.getPropDefault("jsr223.compiled_scripts_cache_size", 100)));, ,     public JSR223TestElement() {,         super();,     }, ,     protected ScriptEngine getScriptEngine() throws ScriptException {,         final String lang = getScriptLanguage();, ,         ScriptEngine scriptEngine = getInstance().getEngineByName(lang);,         if (scriptEngine == null) {,             throw new ScriptException("Cannot find engine named: '"+lang+"', ensure you set language field in JSR223 Test Element:"+getName());,         }, ,         return scriptEngine;,     }, ,     /**,      * Populate variables to be passed to scripts,      * @param bindings Bindings,      */,     protected void populateBindings(Bindings bindings) {,         final String label = getName();,         final String fileName = getFilename();,         final String scriptParameters = getParameters();,         // Use actual class name for log,         final Logger logger = LoggingManager.getLoggerForShortName(getClass().getName());,         bindings.put("log", logger); // $NON-NLS-1$ (this name is fixed),         bindings.put("Label", label); // $NON-NLS-1$ (this name is fixed),         bindings.put("FileName", fileName); // $NON-NLS-1$ (this name is fixed),         bindings.put("Parameters", scriptParameters); // $NON-NLS-1$ (this name is fixed),         String [] args=JOrphanUtils.split(scriptParameters, " ");//$NON-NLS-1$,         bindings.put("args", args); // $NON-NLS-1$ (this name is fixed),         // Add variables for access to context and variables,         JMeterContext jmctx = JMeterContextService.getContext();,         bindings.put("ctx", jmctx); // $NON-NLS-1$ (this name is fixed),         JMeterVariables vars = jmctx.getVariables();,         bindings.put("vars", vars); // $NON-NLS-1$ (this name is fixed),         Properties props = JMeterUtils.getJMeterProperties();,         bindings.put("props", props); // $NON-NLS-1$ (this name is fixed),         // For use in debugging:,         bindings.put("OUT", System.out); // $NON-NLS-1$ (this name is fixed), ,         // Most subclasses will need these:,         Sampler sampler = jmctx.getCurrentSampler();,         bindings.put("sampler", sampler); // $NON-NLS-1$ (this name is fixed),         SampleResult prev = jmctx.getPreviousResult();,         bindings.put("prev", prev); // $NON-NLS-1$ (this name is fixed),     }, , ,     /**,      * This method will run inline script or file script with special behaviour for file script:,      * - If ScriptEngine implements Compilable script will be compiled and cached,      * - If not if will be run,      * @param scriptEngine ScriptEngine,      * @param bindings {@link Bindings} might be null,      * @return Object returned by script,      * @throws IOException when reading the script fails,      * @throws ScriptException when compiling or evaluation of the script fails,      */,     protected Object processFileOrScript(ScriptEngine scriptEngine, Bindings bindings) throws IOException, ScriptException {,         if (bindings == null) {,             bindings = scriptEngine.createBindings();,         },         populateBindings(bindings);,         File scriptFile = new File(getFilename()); ,         // Hack: bsh-2.0b5.jar BshScriptEngine implements Compilable but throws "java.lang.Error: unimplemented",         boolean supportsCompilable = scriptEngine instanceof Compilable ,                 && !(scriptEngine.getClass().getName().equals("bsh.engine.BshScriptEngine")); // $NON-NLS-1$,         if (!StringUtils.isEmpty(getFilename())) {,             if (scriptFile.exists() && scriptFile.canRead()) {,                 BufferedReader fileReader = null;,                 try {,                     if (supportsCompilable) {,                         String cacheKey = ,                                 getScriptLanguage()+"#"+ // $NON-NLS-1$,                                 scriptFile.getAbsolutePath()+"#"+  // $NON-NLS-1$,                                         scriptFile.lastModified();,                         CompiledScript compiledScript = ,                                 compiledScriptsCache.get(cacheKey);,                         if (compiledScript==null) {,                             synchronized (compiledScriptsCache) {,                                 compiledScript = ,                                         compiledScriptsCache.get(cacheKey);,                                 if (compiledScript==null) {,                                     // TODO Charset ?,                                     fileReader = new BufferedReader(new FileReader(scriptFile), ,                                             (int)scriptFile.length()); ,                                     compiledScript = ,                                             ((Compilable) scriptEngine).compile(fileReader);,                                     compiledScriptsCache.put(cacheKey, compiledScript);,                                 },                             },                         },                         return compiledScript.eval(bindings);,                     } else {,                         // TODO Charset ?,                         fileReader = new BufferedReader(new FileReader(scriptFile), ,                                 (int)scriptFile.length()); ,                         return scriptEngine.eval(fileReader, bindings);                    ,                     },                 } finally {,                     IOUtils.closeQuietly(fileReader);,                 },             }  else {,                 throw new ScriptException("Script file '"+scriptFile.getAbsolutePath()+"' does not exist or is unreadable for element:"+getName());,             },         } else if (!StringUtils.isEmpty(getScript())){,             if (supportsCompilable && !StringUtils.isEmpty(cacheKey)) {,                 CompiledScript compiledScript = ,                         compiledScriptsCache.get(cacheKey);,                 if (compiledScript==null) {,                     synchronized (compiledScriptsCache) {,                         compiledScript = ,                                 compiledScriptsCache.get(cacheKey);,                         if (compiledScript==null) {,                             compiledScript = ,                                     ((Compilable) scriptEngine).compile(getScript());,                             compiledScriptsCache.put(cacheKey, compiledScript);,                         },                     },                 },                 return compiledScript.eval(bindings);,             } else {,                 return scriptEngine.eval(getScript(), bindings);,             },         } else {,             throw new ScriptException("Both script file and script text are empty for element:"+getName());            ,         },     }, , ,     /**,      * @return the cacheKey,      */,     public String getCacheKey() {,         return cacheKey;,     }, ,     /**,      * @param cacheKey the cacheKey to set,      */,     public void setCacheKey(String cacheKey) {,         this.cacheKey = cacheKey;,     }, ,     /**,      * @see org.apache.jmeter.testelement.TestStateListener#testStarted(),      */,     @Override,     public void testStarted() {,         // NOOP,     }, ,     /**,      * @see org.apache.jmeter.testelement.TestStateListener#testStarted(java.lang.String),      */,     @Override,     public void testStarted(String host) {,         // NOOP   ,     }, ,     /**,      * @see org.apache.jmeter.testelement.TestStateListener#testEnded(),      */,     @Override,     public void testEnded() {,         testEnded("");,     }, ,     /**,      * @see org.apache.jmeter.testelement.TestStateListener#testEnded(java.lang.String),      */,     @Override,     public void testEnded(String host) {,         compiledScriptsCache.clear();,     },     public String getScriptLanguage() {,         return scriptLanguage;,     }, ,     public void setScriptLanguage(String s) {,         scriptLanguage = s;,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/util/JsseSSLManager.java,,119-122,[            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {,                 @Override,                 public boolean verify(String hostname, SSLSession session) {,                     return true;],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/jmeter/util/PropertiesBasedPrefixResolver.java,<clinit>,62-62,[                        properties.entrySet();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/util/SSLManager.java,,301-301,[        this.clientCertAliasVarName = clientCertAliasVarName;],,,121-121,[                this.keyStore = JmeterKeyStore.getInstance(fileType, keystoreAliasStartIndex, keystoreAliasEndIndex, clientCertAliasVarName);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/util/SSLManager.java,,300-300,[        this.keystoreAliasEndIndex = endIndex;],,,121-121,[                this.keyStore = JmeterKeyStore.getInstance(fileType, keystoreAliasStartIndex, keystoreAliasEndIndex, clientCertAliasVarName);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/util/SSLManager.java,,299-299,[        this.keystoreAliasStartIndex = startIndex;],,,121-121,[                this.keyStore = JmeterKeyStore.getInstance(fileType, keystoreAliasStartIndex, keystoreAliasEndIndex, clientCertAliasVarName);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/util/SSLManager.java,getKeyStore,142-142,[            } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/util/SSLManager.java,getTrustStore,230-230,[            } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/util/XPathUtil.java,formatXml,446-446,[        } catch (Exception e) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jmeter/util/keystore/JmeterKeyStore.java,getClientAliases,315-315,[            return null;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/AssertionVisualizer.java,,38-121,[public class AssertionVisualizer extends AbstractVisualizer implements Clearable {, ,     private static final long serialVersionUID = 240L;, ,     private JTextArea textArea;, ,     public AssertionVisualizer() {,         init();,         setName(getStaticLabel());,     }, ,     @Override,     public String getLabelResource() {,         return "assertion_visualizer_title"; // $NON-NLS-1$,     }, ,     @Override,     public void add(SampleResult sample) {,         final StringBuilder sb = new StringBuilder(100);,         sb.append(sample.getSampleLabel());,         sb.append(getAssertionResult(sample));,         sb.append("\n"); // $NON-NLS-1$,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 synchronized (textArea) {,                     textArea.append(sb.toString());,                     textArea.setCaretPosition(textArea.getText().length());,                 }                ,             },         });,     }, ,     @Override,     public void clearData() {,         textArea.setText(""); // $NON-NLS-1$,     }, ,     private String getAssertionResult(SampleResult res) {,         if (res != null) {,             StringBuilder display = new StringBuilder();,             AssertionResult assertionResults[] = res.getAssertionResults();,             for (AssertionResult item : assertionResults) {,                 if (item.isFailure() || item.isError()) {,                     display.append("\n\t"); // $NON-NLS-1$,                     display.append(item.getName() != null ? item.getName() + " : " : "");// $NON-NLS-1$,                     display.append(item.getFailureMessage());,                 },             },             return display.toString();,         },         return "";,     }, ,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         Border margin = new EmptyBorder(10, 10, 5, 10);, ,         this.setBorder(margin);, ,         // NAME,         this.add(makeTitlePanel(), BorderLayout.NORTH);, ,         // TEXTAREA LABEL,         JLabel textAreaLabel =,             new JLabel(JMeterUtils.getResString("assertion_textarea_label")); // $NON-NLS-1$,         Box mainPanel = Box.createVerticalBox();,         mainPanel.add(textAreaLabel);, ,         // TEXTAREA,         textArea = new JTextArea();,         textArea.setEditable(false);,         textArea.setLineWrap(false);,         JScrollPane areaScrollPane = new JScrollPane(textArea);, ,         areaScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);,         areaScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);, ,         areaScrollPane.setPreferredSize(new Dimension(mainPanel.getWidth(),mainPanel.getHeight()));,         mainPanel.add(areaScrollPane);,         this.add(mainPanel, BorderLayout.CENTER);,     }],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/visualizers/AxisGraph.java,getColor,184-184,[        return color;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/AxisGraph.java,setColor,191-191,[        this.color = color;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/AxisGraph.java,setData,123-123,[        this.data = data;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/AxisGraph.java,setLegendLabels,155-155,[        this.legendLabels = labels;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/AxisGraph.java,setXAxisLabels,147-147,[        this.xAxisLabels = labels;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/BSFListener.java,,31-78,[public class BSFListener extends BSFTestElement,     implements Cloneable, SampleListener, TestBean, Visualizer {, // N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 234L;, ,     @Override,     public void sampleOccurred(SampleEvent event) {,         BSFManager mgr =null;,         try {,             mgr = getManager();,             if (mgr == null) {,                 log.error("Problem creating BSF manager");,                 return;,             },             mgr.declareBean("sampleEvent", event, SampleEvent.class);,             SampleResult result = event.getResult();,             mgr.declareBean("sampleResult", result, SampleResult.class);,             processFileOrScript(mgr);,         } catch (BSFException e) {,             log.warn("Problem in BSF script "+e);,         } finally {,             if (mgr != null) {,                 mgr.terminate();,             },         },     }, ,     @Override,     public void sampleStarted(SampleEvent e) {,         // NOOP,     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,         // NOOP,     }, ,     @Override,     public void add(SampleResult sample) {,         // NOOP,     }, ,     @Override,     public boolean isStats() {,         return false;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/BeanShellListener.java,,32-84,[public class BeanShellListener extends BeanShellTestElement,     implements Cloneable, SampleListener, TestBean, Visualizer, UnsharedComponent  {,     // N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class,     // TODO - remove UnsharedComponent ? Probably does not make sense for a TestBean., ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 4;, ,     // can be specified in jmeter.properties,     private static final String INIT_FILE = "beanshell.listener.init"; //$NON-NLS-1$, ,     @Override,     protected String getInitFileProperty() {,         return INIT_FILE;,     }, ,     @Override,     public void sampleOccurred(SampleEvent se) {,         final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();,         if (bshInterpreter == null) {,             log.error("BeanShell not found");,             return;,         }, ,         SampleResult samp=se.getResult();,         try {,             bshInterpreter.set("sampleEvent", se);//$NON-NLS-1$,             bshInterpreter.set("sampleResult", samp);//$NON-NLS-1$,             processFileOrScript(bshInterpreter);,         } catch (JMeterException e) {,             log.warn("Problem in BeanShell script "+e);,         },     }, ,     @Override,     public void sampleStarted(SampleEvent e) {,         // NOOP,     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,         // NOOP,     }, ,     @Override,     public void add(SampleResult sample) {,         // NOOP,     }, ,     @Override,     public boolean isStats() { // Needed by Visualizer interface,         return false;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/ComparisonVisualizer.java,,45-173,[public class ComparisonVisualizer extends AbstractVisualizer implements Clearable {,     private static final long serialVersionUID = 240L;, ,     private JTree resultsTree;, ,     private DefaultTreeModel treeModel;, ,     private DefaultMutableTreeNode root;, ,     private JTextPane base, secondary;, ,     public ComparisonVisualizer() {,         super();,         init();,     }, ,     @Override,     public void add(final SampleResult sample) {,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 DefaultMutableTreeNode currNode = new DefaultMutableTreeNode(sample);,                 treeModel.insertNodeInto(currNode, root, root.getChildCount());,                 if (root.getChildCount() == 1) {,                     resultsTree.expandPath(new TreePath(root));,                 }                ,             },         });,     }, ,     @Override,     public String getLabelResource() {,         return "comparison_visualizer_title"; //$NON-NLS-1$,     }, ,     private void init() {,         setLayout(new BorderLayout());,         setBorder(makeBorder());,         add(makeTitlePanel(), BorderLayout.NORTH);,         JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);,         split.add(getTreePanel());,         split.add(getSideBySidePanel());,         add(split, BorderLayout.CENTER);,     }, ,     private JComponent getSideBySidePanel() {,         JPanel main = new JPanel(new GridLayout(1, 2));,         JScrollPane base = new JScrollPane(getBaseTextPane());,         base.setPreferredSize(base.getMinimumSize());,         JScrollPane secondary = new JScrollPane(getSecondaryTextPane());,         secondary.setPreferredSize(secondary.getMinimumSize());,         main.add(base);,         main.add(secondary);,         main.setPreferredSize(main.getMinimumSize());,         return main;,     }, ,     private JTextPane getBaseTextPane() {,         base = new JTextPane();,         base.setEditable(false);,         base.setBackground(getBackground());,         return base;,     }, ,     private JTextPane getSecondaryTextPane() {,         secondary = new JTextPane();,         secondary.setEditable(false);,         return secondary;,     }, ,     private JComponent getTreePanel() {,         root = new DefaultMutableTreeNode("Root"); //$NON-NLS-1$,         treeModel = new DefaultTreeModel(root);,         resultsTree = new JTree(treeModel);,         resultsTree.setCellRenderer(new TreeNodeRenderer());,         resultsTree.setCellRenderer(new TreeNodeRenderer());,         resultsTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);,         resultsTree.addTreeSelectionListener(new Selector());,         resultsTree.setRootVisible(false);,         resultsTree.setShowsRootHandles(true);, ,         JScrollPane treePane = new JScrollPane(resultsTree);,         treePane.setPreferredSize(new Dimension(150, 50));,         JPanel panel = new JPanel(new GridLayout(1, 1));,         panel.add(treePane);,         return panel;,     }, ,     private class Selector implements TreeSelectionListener {,         /**,          * {@inheritDoc},          */,         @Override,         public void valueChanged(TreeSelectionEvent e) {,             try {,                 DefaultMutableTreeNode node = (DefaultMutableTreeNode) resultsTree.getLastSelectedPathComponent();,                 SampleResult sr = (SampleResult) node.getUserObject();,                 AssertionResult[] results = sr.getAssertionResults();,                 CompareAssertionResult result = null;,                 for (AssertionResult r : results) {,                     if (r instanceof CompareAssertionResult) {,                         result = (CompareAssertionResult) r;,                         break;,                     },                 },                 if (result == null) {,                     result = new CompareAssertionResult(getName());,                 },                 base.setText(result.getBaseResult());,                 secondary.setText(result.getSecondaryResult());,             } catch (Exception err) {,                 base.setText(JMeterUtils.getResString("comparison_invalid_node") + err); //$NON-NLS-1$,                 secondary.setText(JMeterUtils.getResString("comparison_invalid_node") + err); //$NON-NLS-1$,             },             base.setCaretPosition(0);,             secondary.setCaretPosition(0);,         },     }, ,     @Override,     public void clearData() {,         while (root.getChildCount() > 0) {,             // the child to be removed will always be 0 'cos as the nodes are,             // removed the nth node will become (n-1)th,             treeModel.removeNodeFromParent((DefaultMutableTreeNode) root.getChildAt(0));,             base.setText(""); //$NON-NLS-1$,             secondary.setText(""); //$NON-NLS-1$,         },     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/SamplingStatCalculator.java,,33-294,[    private final StatCalculatorLong calculator = new StatCalculatorLong();, ,     private double maxThroughput;, ,     private long firstTime;, ,     private String label;, ,     private volatile Sample currentSample;, ,     public SamplingStatCalculator(){ // Only for use by test code,         this("");,     }, ,     public SamplingStatCalculator(String label) {,         this.label = label;,         init();,     }, ,     private void init() {,         firstTime = Long.MAX_VALUE;,         calculator.clear();,         maxThroughput = Double.MIN_VALUE;,         currentSample = new Sample();,     }, ,     /**,      * Clear the counters (useful for differential stats),      *,      */,     public synchronized void clear() {,         init();,     }, ,     public Sample getCurrentSample() {,         return currentSample;,     }, ,     /**,      * Get the elapsed time for the samples,      *,      * @return how long the samples took,      */,     public long getElapsed() {,         if (getCurrentSample().getEndTime() == 0) {,             return 0;// No samples collected ...,         },         return getCurrentSample().getEndTime() - firstTime;,     }, ,     /**,      * Returns the throughput associated to this sampler in requests per second.,      * May be slightly skewed because it takes the timestamps of the first and,      * last samples as the total time passed, and the test may actually have,      * started before that start time and ended after that end time.,      *,      * @return throughput associated with this sampler per second,      */,     public double getRate() {,         if (calculator.getCount() == 0) {,             return 0.0; // Better behaviour when howLong=0 or lastTime=0,         }, ,         return getCurrentSample().getThroughput();,     }, ,     /**,      * Throughput in bytes / second,      *,      * @return throughput in bytes/second,      */,     public double getBytesPerSecond() {,         // Code duplicated from getPageSize(),         double rate = 0;,         if (this.getElapsed() > 0 && calculator.getTotalBytes() > 0) {,             rate = calculator.getTotalBytes() / ((double) this.getElapsed() / 1000);,         },         if (rate < 0) {,             rate = 0;,         },         return rate;,     }, ,     /**,      * Throughput in kilobytes / second,      *,      * @return Throughput in kilobytes / second,      */,     public double getKBPerSecond() {,         return getBytesPerSecond() / 1024; // 1024=bytes per kb,     }, ,     /**,      * calculates the average page size, which means divide the bytes by number,      * of samples.,      *,      * @return average page size in bytes (0 if sample count is zero),      */,     public double getAvgPageBytes() {,         long count = calculator.getCount();,         if (count == 0) {,             return 0;,         },         return calculator.getTotalBytes() / (double) count;,     }, ,     /**,      * @return the label of this component,      */,     public String getLabel() {,         return label;,     }, ,     /**,      * Records a sample.,      *,      * @param res,      *            the sample to record,      * @return newly created sample with current statistics,      *,      */,     public Sample addSample(SampleResult res) {,         long rtime, cmean, cstdv, cmedian, cpercent, eCount, endTime;,         double throughput;,         boolean rbool;,         synchronized (calculator) {,             calculator.addValue(res.getTime(), res.getSampleCount());,             calculator.addBytes(res.getBytes());,             setStartTime(res);,             eCount = getCurrentSample().getErrorCount();,             eCount += res.getErrorCount();,             endTime = getEndTime(res);,             long howLongRunning = endTime - firstTime;,             throughput = ((double) calculator.getCount() / (double) howLongRunning) * 1000.0;,             if (throughput > maxThroughput) {,                 maxThroughput = throughput;,             }, ,             rtime = res.getTime();,             cmean = (long)calculator.getMean();,             cstdv = (long)calculator.getStandardDeviation();,             cmedian = calculator.getMedian().longValue();,             cpercent = calculator.getPercentPoint( 0.500 ).longValue();, // TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?,             rbool = res.isSuccessful();,         }, ,         long count = calculator.getCount();,         Sample s =,             new Sample( null, rtime, cmean, cstdv, cmedian, cpercent, throughput, eCount, rbool, count, endTime );,         currentSample = s;,         return s;,     }, ,     private long getEndTime(SampleResult res) {,         long endTime = res.getEndTime();,         long lastTime = getCurrentSample().getEndTime();,         if (lastTime < endTime) {,             lastTime = endTime;,         },         return lastTime;,     }, ,     /**,      * @param res,      */,     private void setStartTime(SampleResult res) {,         long startTime = res.getStartTime();,         if (firstTime > startTime) {,             // this is our first sample, set the start time to current timestamp,             firstTime = startTime;,         },     }, ,     /**,      * Returns the raw double value of the percentage of samples with errors,      * that were recorded. (Between 0.0 and 1.0),      *,      * @return the raw double value of the percentage of samples with errors,      *         that were recorded.,      */,     public double getErrorPercentage() {,         double rval = 0.0;, ,         if (calculator.getCount() == 0) {,             return rval;,         },         rval = (double) getCurrentSample().getErrorCount() / (double) calculator.getCount();,         return rval;,     }, ,     /**,      * For debugging purposes, only.,      */,     @Override,     public String toString() {,         StringBuilder mySB = new StringBuilder();, ,         mySB.append("Samples: " + this.getCount() + "  ");,         mySB.append("Avg: " + this.getMean() + "  ");,         mySB.append("Min: " + this.getMin() + "  ");,         mySB.append("Max: " + this.getMax() + "  ");,         mySB.append("Error Rate: " + this.getErrorPercentage() + "  ");,         mySB.append("Sample Rate: " + this.getRate());,         return mySB.toString();,     }, ,     /**,      * @return errorCount,      */,     public long getErrorCount() {,         return getCurrentSample().getErrorCount();,     }, ,     /**,      * @return Returns the maxThroughput.,      */,     public double getMaxThroughput() {,         return maxThroughput;,     }, ,     public Map<Number, Number[]> getDistribution() {,         return calculator.getDistribution();,     }, ,     public Number getPercentPoint(double percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public long getCount() {,         return calculator.getCount();,     }, ,     public Number getMax() {,         return calculator.getMax();,     }, ,     public double getMean() {,         return calculator.getMean();,     }, ,     public Number getMeanAsNumber() {,         return Long.valueOf((long) calculator.getMean());,     }, ,     public Number getMedian() {,         return calculator.getMedian();,     }, ,     public Number getMin() {,         if (calculator.getMin().longValue() < 0) {,             return Long.valueOf(0);,         },         return calculator.getMin();,     }, ,     public Number getPercentPoint(float percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public double getStandardDeviation() {,         return calculator.getStandardDeviation();],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/DistributionGraphVisualizer.java,,49-240,[public class DistributionGraphVisualizer extends AbstractVisualizer implements ImageVisualizer, GraphListener,,         Clearable {,     private static final long serialVersionUID = 240L;, ,     private final SamplingStatCalculator model;, ,     private JPanel graphPanel = null;, ,     private final DistributionGraph graph;, ,     private JTextField noteField;, ,     private static final int DELAY = 10;, ,     private int counter = 0;, ,     /**,      * Constructor for the GraphVisualizer object.,      */,     public DistributionGraphVisualizer() {,         model = new SamplingStatCalculator("Distribution");,         graph = new DistributionGraph(model);,         graph.setBackground(Color.white);,         init();,     }, ,     /**,      * Gets the Image attribute of the GraphVisualizer object.,      *,      * @return the Image value,      */,     @Override,     public Image getImage() {,         Image result = graph.createImage(graph.getWidth(), graph.getHeight());, ,         graph.paintComponent(result.getGraphics());, ,         return result;,     }, ,     @Override,     public synchronized void updateGui() {,         if (graph.getWidth() < 10) {,             graph.setPreferredSize(new Dimension(getWidth() - 40, getHeight() - 160));,         },         graphPanel.updateUI();,         graph.repaint();,     }, ,     @Override,     public synchronized void updateGui(Sample s) {,         // We have received one more sample,         if (DELAY == counter) {,             updateGui();,             counter = 0;,         } else {,             counter++;,         },     }, ,     @Override,     public void add(final SampleResult res) {,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 // made currentSample volatile,                 model.addSample(res);,                 updateGui(model.getCurrentSample());                ,             },         });,     }, ,     @Override,     public String getLabelResource() {,         return "distribution_graph_title"; // $NON-NLS-1$,     }, ,     @Override,     public synchronized void clearData() {,         this.graph.clearData();,         model.clear();,         repaint();,     }, ,     @Override,     public String toString() {,         return "Show the samples in a distribution graph";,     }, ,     /**,      * Initialize the GUI.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         Border margin = new EmptyBorder(10, 10, 5, 10);, ,         this.setBorder(margin);, ,         // Set up the graph with header, footer, Y axis and graph display,         JPanel lgraphPanel = new JPanel(new BorderLayout());,         lgraphPanel.add(createGraphPanel(), BorderLayout.CENTER);,         lgraphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);, ,         // Add the main panel and the graph,         this.add(makeTitlePanel(), BorderLayout.NORTH);,         this.add(lgraphPanel, BorderLayout.CENTER);,     }, ,     // Methods used in creating the GUI, ,     /**,      * Creates a scroll pane containing the actual graph of the results.,      *,      * @return a scroll pane containing the graph,      */,     private Component createGraphPanel() {,         graphPanel = new JPanel();,         graphPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED, Color.lightGray, Color.darkGray));,         graphPanel.add(graph);,         graphPanel.setBackground(Color.white);,         return graphPanel;,     }, ,     // /**,     // * Creates one of the fields used to display the graph's current,     // * values.,     // *,     // * @param color the color used to draw the value. By convention,     // * this is the same color that is used to draw the,     // * graph for this value and in the choose panel.,     // * @param length the number of digits which the field should be,     // * able to display,     // *,     // * @return a text field configured to display one of the,     // * current graph values,     // */,     // private JTextField createInfoField(Color color, int length),     // {,     // JTextField field = new JTextField(length);,     // field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,     // field.setEditable(false);,     // field.setForeground(color);,     // field.setBackground(getBackground());,     //,     // // The text field should expand horizontally, but have,     // // a fixed height,     // field.setMaximumSize(new Dimension(,     // field.getMaximumSize().width,,     // field.getPreferredSize().height));,     // return field;,     // }, ,     /**,      * Creates a label for one of the fields used to display the graph's current,      * values. Neither the label created by this method or the,      * <code>field</code> passed as a parameter is added to the GUI here.,      *,      * @param labelResourceName,      *            the name of the label resource. This is used to look up the,      *            label text using {@link JMeterUtils#getResString(String)}.,      * @param field,      *            the field this label is being created for.,      */,     private JLabel createInfoLabel(String labelResourceName, JTextField field) {,         JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));,         label.setForeground(field.getForeground());,         label.setLabelFor(field);,         return label;,     }, ,     /**,      * Creates the information Panel at the bottom,      *,      * @return the box containing the panel,      */,     private Box createGraphInfoPanel() {,         Box graphInfoPanel = Box.createHorizontalBox();,         this.noteField = new JTextField();,         graphInfoPanel.add(this.createInfoLabel("distribution_note1", this.noteField)); // $NON-NLS-1$,         return graphInfoPanel;,     }, ,     /**,      * Method implements Printable, which is suppose to return the correct,      * internal component. The Action class can then print or save the graphics,      * to a file.,      */,     @Override,     public JComponent getPrintableComponent() {,         return this.graphPanel;],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/SamplingStatCalculator.java,,33-294,[    private final StatCalculatorLong calculator = new StatCalculatorLong();, ,     private double maxThroughput;, ,     private long firstTime;, ,     private String label;, ,     private volatile Sample currentSample;, ,     public SamplingStatCalculator(){ // Only for use by test code,         this("");,     }, ,     public SamplingStatCalculator(String label) {,         this.label = label;,         init();,     }, ,     private void init() {,         firstTime = Long.MAX_VALUE;,         calculator.clear();,         maxThroughput = Double.MIN_VALUE;,         currentSample = new Sample();,     }, ,     /**,      * Clear the counters (useful for differential stats),      *,      */,     public synchronized void clear() {,         init();,     }, ,     public Sample getCurrentSample() {,         return currentSample;,     }, ,     /**,      * Get the elapsed time for the samples,      *,      * @return how long the samples took,      */,     public long getElapsed() {,         if (getCurrentSample().getEndTime() == 0) {,             return 0;// No samples collected ...,         },         return getCurrentSample().getEndTime() - firstTime;,     }, ,     /**,      * Returns the throughput associated to this sampler in requests per second.,      * May be slightly skewed because it takes the timestamps of the first and,      * last samples as the total time passed, and the test may actually have,      * started before that start time and ended after that end time.,      *,      * @return throughput associated with this sampler per second,      */,     public double getRate() {,         if (calculator.getCount() == 0) {,             return 0.0; // Better behaviour when howLong=0 or lastTime=0,         }, ,         return getCurrentSample().getThroughput();,     }, ,     /**,      * Throughput in bytes / second,      *,      * @return throughput in bytes/second,      */,     public double getBytesPerSecond() {,         // Code duplicated from getPageSize(),         double rate = 0;,         if (this.getElapsed() > 0 && calculator.getTotalBytes() > 0) {,             rate = calculator.getTotalBytes() / ((double) this.getElapsed() / 1000);,         },         if (rate < 0) {,             rate = 0;,         },         return rate;,     }, ,     /**,      * Throughput in kilobytes / second,      *,      * @return Throughput in kilobytes / second,      */,     public double getKBPerSecond() {,         return getBytesPerSecond() / 1024; // 1024=bytes per kb,     }, ,     /**,      * calculates the average page size, which means divide the bytes by number,      * of samples.,      *,      * @return average page size in bytes (0 if sample count is zero),      */,     public double getAvgPageBytes() {,         long count = calculator.getCount();,         if (count == 0) {,             return 0;,         },         return calculator.getTotalBytes() / (double) count;,     }, ,     /**,      * @return the label of this component,      */,     public String getLabel() {,         return label;,     }, ,     /**,      * Records a sample.,      *,      * @param res,      *            the sample to record,      * @return newly created sample with current statistics,      *,      */,     public Sample addSample(SampleResult res) {,         long rtime, cmean, cstdv, cmedian, cpercent, eCount, endTime;,         double throughput;,         boolean rbool;,         synchronized (calculator) {,             calculator.addValue(res.getTime(), res.getSampleCount());,             calculator.addBytes(res.getBytes());,             setStartTime(res);,             eCount = getCurrentSample().getErrorCount();,             eCount += res.getErrorCount();,             endTime = getEndTime(res);,             long howLongRunning = endTime - firstTime;,             throughput = ((double) calculator.getCount() / (double) howLongRunning) * 1000.0;,             if (throughput > maxThroughput) {,                 maxThroughput = throughput;,             }, ,             rtime = res.getTime();,             cmean = (long)calculator.getMean();,             cstdv = (long)calculator.getStandardDeviation();,             cmedian = calculator.getMedian().longValue();,             cpercent = calculator.getPercentPoint( 0.500 ).longValue();, // TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?,             rbool = res.isSuccessful();,         }, ,         long count = calculator.getCount();,         Sample s =,             new Sample( null, rtime, cmean, cstdv, cmedian, cpercent, throughput, eCount, rbool, count, endTime );,         currentSample = s;,         return s;,     }, ,     private long getEndTime(SampleResult res) {,         long endTime = res.getEndTime();,         long lastTime = getCurrentSample().getEndTime();,         if (lastTime < endTime) {,             lastTime = endTime;,         },         return lastTime;,     }, ,     /**,      * @param res,      */,     private void setStartTime(SampleResult res) {,         long startTime = res.getStartTime();,         if (firstTime > startTime) {,             // this is our first sample, set the start time to current timestamp,             firstTime = startTime;,         },     }, ,     /**,      * Returns the raw double value of the percentage of samples with errors,      * that were recorded. (Between 0.0 and 1.0),      *,      * @return the raw double value of the percentage of samples with errors,      *         that were recorded.,      */,     public double getErrorPercentage() {,         double rval = 0.0;, ,         if (calculator.getCount() == 0) {,             return rval;,         },         rval = (double) getCurrentSample().getErrorCount() / (double) calculator.getCount();,         return rval;,     }, ,     /**,      * For debugging purposes, only.,      */,     @Override,     public String toString() {,         StringBuilder mySB = new StringBuilder();, ,         mySB.append("Samples: " + this.getCount() + "  ");,         mySB.append("Avg: " + this.getMean() + "  ");,         mySB.append("Min: " + this.getMin() + "  ");,         mySB.append("Max: " + this.getMax() + "  ");,         mySB.append("Error Rate: " + this.getErrorPercentage() + "  ");,         mySB.append("Sample Rate: " + this.getRate());,         return mySB.toString();,     }, ,     /**,      * @return errorCount,      */,     public long getErrorCount() {,         return getCurrentSample().getErrorCount();,     }, ,     /**,      * @return Returns the maxThroughput.,      */,     public double getMaxThroughput() {,         return maxThroughput;,     }, ,     public Map<Number, Number[]> getDistribution() {,         return calculator.getDistribution();,     }, ,     public Number getPercentPoint(double percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public long getCount() {,         return calculator.getCount();,     }, ,     public Number getMax() {,         return calculator.getMax();,     }, ,     public double getMean() {,         return calculator.getMean();,     }, ,     public Number getMeanAsNumber() {,         return Long.valueOf((long) calculator.getMean());,     }, ,     public Number getMedian() {,         return calculator.getMedian();,     }, ,     public Number getMin() {,         if (calculator.getMin().longValue() < 0) {,             return Long.valueOf(0);,         },         return calculator.getMin();,     }, ,     public Number getPercentPoint(float percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public double getStandardDeviation() {,         return calculator.getStandardDeviation();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/CachingStatCalculator.java,,32-64,[    private final List<Sample> storedValues = Collections.synchronizedList(new ArrayList<Sample>());, ,     public CachingStatCalculator(String string) {,         super(string);,     }, ,     public List<Sample> getSamples() {,         return storedValues;,     }, ,     public Sample getSample(int index) {,         synchronized( storedValues ){,             if (index < storedValues.size()) {,                 return storedValues.get(index);,             },         },         return null;,     }, ,     @Override,     public synchronized void clear() {,         super.clear();,         storedValues.clear();,     },     /**,      * Records a sample.,      *,      */,     @Override,     public Sample addSample(SampleResult res) {,         final Sample sample = super.addSample(res);,         storedValues.add(sample);,         return sample;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/GraphVisualizer.java,,57-461,[public class GraphVisualizer extends AbstractVisualizer implements ImageVisualizer, ItemListener, Clearable {, ,     private static final long serialVersionUID = 240L;, ,     private static final String ZERO = "0";  //$NON-NLS-1$, ,     private final NumberFormat nf = NumberFormat.getInstance(); // OK, because used in synchronised method, ,     private final CachingStatCalculator model;, ,     private JTextField maxYField = null;, ,     private JTextField minYField = null;, ,     private JTextField noSamplesField = null;, ,     private final String minute = JMeterUtils.getResString("minute"); // $NON-NLS-1$, ,     private final Graph graph;, ,     private JCheckBox data;, ,     private JCheckBox average;, ,     private JCheckBox deviation;, ,     private JCheckBox throughput;, ,     private JCheckBox median;, ,     private JTextField dataField;, ,     private JTextField averageField;, ,     private JTextField deviationField;, ,     private JTextField throughputField;, ,     private JTextField medianField;, ,     /**,      * Constructor for the GraphVisualizer object.,      */,     public GraphVisualizer() {,         model = new CachingStatCalculator("Graph");,         graph = new Graph(model);,         init();,     }, ,     /**,      * Gets the Image attribute of the GraphVisualizer object.,      *,      * @return the Image value,      */,     @Override,     public Image getImage() {,         Image result = graph.createImage(graph.getWidth(), graph.getHeight());, ,         graph.paintComponent(result.getGraphics());, ,         return result;,     }, ,     public synchronized void updateGui(Sample s) {,         // We have received one more sample,         graph.updateGui(s);,         noSamplesField.setText(Long.toString(s.getCount()));,         dataField.setText(Long.toString(s.getData()));,         averageField.setText(Long.toString(s.getAverage()));,         deviationField.setText(Long.toString(s.getDeviation()));,         throughputField.setText(nf.format(60 * s.getThroughput()) + "/" + minute); // $NON-NLS-1$,         medianField.setText(Long.toString(s.getMedian()));,         updateYAxis();,     }, ,     @Override,     public void add(final SampleResult res) {,         JMeterUtils.runSafe(new Runnable() {            ,             @Override,             public void run() {,                 updateGui(model.addSample(res));,             },         });,     }, ,     @Override,     public String getLabelResource() {,         return "graph_results_title"; // $NON-NLS-1$,     }, ,     @Override,     public void itemStateChanged(ItemEvent e) {,         if (e.getItem() == data) {,             this.graph.enableData(e.getStateChange() == ItemEvent.SELECTED);,         } else if (e.getItem() == average) {,             this.graph.enableAverage(e.getStateChange() == ItemEvent.SELECTED);,         } else if (e.getItem() == deviation) {,             this.graph.enableDeviation(e.getStateChange() == ItemEvent.SELECTED);,         } else if (e.getItem() == throughput) {,             this.graph.enableThroughput(e.getStateChange() == ItemEvent.SELECTED);,         } else if (e.getItem() == median) {,             this.graph.enableMedian(e.getStateChange() == ItemEvent.SELECTED);,         },         this.graph.repaint();,     }, ,     @Override,     public void clearData() {,         graph.clearData();,         model.clear();,         dataField.setText(ZERO);,         averageField.setText(ZERO);,         deviationField.setText(ZERO);,         throughputField.setText("0/" + minute); //$NON-NLS-1$,         medianField.setText(ZERO);,         noSamplesField.setText(ZERO);,         updateYAxis();,         repaint();,     }, ,     @Override,     public String toString() {,         return "Show the samples analysis as dot plots";,     }, ,     /**,      * Update the max and min value of the Y axis.,      */,     private void updateYAxis() {,         maxYField.setText(Long.toString(graph.getGraphMax()));,         minYField.setText(ZERO);,     }, ,     /**,      * Initialize the GUI.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         Border margin = new EmptyBorder(10, 10, 5, 10);, ,         this.setBorder(margin);, ,         // Set up the graph with header, footer, Y axis and graph display,         JPanel graphPanel = new JPanel(new BorderLayout());,         graphPanel.add(createYAxis(), BorderLayout.WEST);,         graphPanel.add(createChoosePanel(), BorderLayout.NORTH);,         graphPanel.add(createGraphPanel(), BorderLayout.CENTER);,         graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);, ,         // Add the main panel and the graph,         this.add(makeTitlePanel(), BorderLayout.NORTH);,         this.add(graphPanel, BorderLayout.CENTER);,     }, ,     // Methods used in creating the GUI, ,     /**,      * Creates the panel containing the graph's Y axis labels.,      *,      * @return the Y axis panel,      */,     private JPanel createYAxis() {,         JPanel graphYAxisPanel = new JPanel();, ,         graphYAxisPanel.setLayout(new BorderLayout());, ,         maxYField = createYAxisField(5);,         minYField = createYAxisField(3);, ,         graphYAxisPanel.add(createYAxisPanel("graph_results_ms", maxYField), BorderLayout.NORTH); // $NON-NLS-1$,         graphYAxisPanel.add(createYAxisPanel("graph_results_ms", minYField), BorderLayout.SOUTH); // $NON-NLS-1$, ,         return graphYAxisPanel;,     }, ,     /**,      * Creates a text field to be used for the value of a Y axis label. These,      * fields hold the minimum and maximum values for the graph. The units are,      * kept in a separate label outside of this field.,      *,      * @param length,      *            the number of characters which the field will use to calculate,      *            its preferred width. This should be set to the maximum number,      *            of digits that are expected to be necessary to hold the label,      *            value.,      *,      * @see #createYAxisPanel(String, JTextField),      *,      * @return a text field configured to be used in the Y axis,      */,     private JTextField createYAxisField(int length) {,         JTextField field = new JTextField(length);,         field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));,         field.setEditable(false);,         field.setForeground(Color.black);,         field.setBackground(getBackground());,         field.setHorizontalAlignment(SwingConstants.RIGHT);,         return field;,     }, ,     /**,      * Creates a panel for an entire Y axis label. This includes the dynamic,      * value as well as the unit label.,      *,      * @param labelResourceName,      *            the name of the label resource. This is used to look up the,      *            label text using {@link JMeterUtils#getResString(String)}.,      *,      * @return a panel containing both the dynamic and static parts of a Y axis,      *         label,      */,     private JPanel createYAxisPanel(String labelResourceName, JTextField field) {,         JPanel panel = new JPanel(new FlowLayout());,         JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));, ,         panel.add(field);,         panel.add(label);,         return panel;,     }, ,     /**,      * Creates a panel which allows the user to choose which graphs to display.,      * This panel consists of a check box for each type of graph (current,      * sample, average, deviation, and throughput).,      *,      * @return a panel allowing the user to choose which graphs to display,      */,     private JPanel createChoosePanel() {,         JPanel chooseGraphsPanel = new JPanel();, ,         chooseGraphsPanel.setLayout(new FlowLayout());,         JLabel selectGraphsLabel = new JLabel(JMeterUtils.getResString("graph_choose_graphs")); //$NON-NLS-1$,         data = createChooseCheckBox("graph_results_data", Color.black); // $NON-NLS-1$,         average = createChooseCheckBox("graph_results_average", Color.blue); // $NON-NLS-1$,         deviation = createChooseCheckBox("graph_results_deviation", Color.red); // $NON-NLS-1$,         throughput = createChooseCheckBox("graph_results_throughput", JMeterColor.dark_green); // $NON-NLS-1$,         median = createChooseCheckBox("graph_results_median", JMeterColor.purple); // $NON-NLS-1$, ,         chooseGraphsPanel.add(selectGraphsLabel);,         chooseGraphsPanel.add(data);,         chooseGraphsPanel.add(average);,         chooseGraphsPanel.add(median);,         chooseGraphsPanel.add(deviation);,         chooseGraphsPanel.add(throughput);,         return chooseGraphsPanel;,     }, ,     /**,      * Creates a check box configured to be used to in the choose panel allowing,      * the user to select whether or not a particular kind of graph data will be,      * displayed.,      *,      * @param labelResourceName,      *            the name of the label resource. This is used to look up the,      *            label text using {@link JMeterUtils#getResString(String)}.,      * @param color,      *            the color used for the checkbox text. By convention this is,      *            the same color that is used to draw the graph and for the,      *            corresponding info field.,      *,      * @return a checkbox allowing the user to select whether or not a kind of,      *         graph data will be displayed,      */,     private JCheckBox createChooseCheckBox(String labelResourceName, Color color) {,         JCheckBox checkBox = new JCheckBox(JMeterUtils.getResString(labelResourceName));,         checkBox.setSelected(true);,         checkBox.addItemListener(this);,         checkBox.setForeground(color);,         return checkBox;,     }, ,     /**,      * Creates a scroll pane containing the actual graph of the results.,      *,      * @return a scroll pane containing the graph,      */,     private Component createGraphPanel() {,         JScrollPane graphScrollPanel = makeScrollPane(graph, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,,                 ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);,         graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));,         graphScrollPanel.setPreferredSize(graphScrollPanel.getMinimumSize());, ,         return graphScrollPanel;,     }, ,     /**,      * Creates a panel which numerically displays the current graph values.,      *,      * @return a panel showing the current graph values,      */,     private Box createGraphInfoPanel() {,         Box graphInfoPanel = Box.createHorizontalBox();, ,         noSamplesField = createInfoField(Color.black, 6);,         dataField = createInfoField(Color.black, 5);,         averageField = createInfoField(Color.blue, 5);,         deviationField = createInfoField(Color.red, 5);,         throughputField = createInfoField(JMeterColor.dark_green, 15);,         medianField = createInfoField(JMeterColor.purple, 5);, ,         graphInfoPanel.add(createInfoColumn(createInfoLabel("graph_results_no_samples", noSamplesField), // $NON-NLS-1$,                 noSamplesField, createInfoLabel("graph_results_deviation", deviationField), deviationField)); // $NON-NLS-1$,         graphInfoPanel.add(Box.createHorizontalGlue());, ,         graphInfoPanel.add(createInfoColumn(createInfoLabel("graph_results_latest_sample", dataField), dataField, // $NON-NLS-1$,                 createInfoLabel("graph_results_throughput", throughputField), throughputField)); // $NON-NLS-1$,         graphInfoPanel.add(Box.createHorizontalGlue());, ,         graphInfoPanel.add(createInfoColumn(createInfoLabel("graph_results_average", averageField), averageField, // $NON-NLS-1$,                 createInfoLabel("graph_results_median", medianField), medianField)); // $NON-NLS-1$,         graphInfoPanel.add(Box.createHorizontalGlue());,         return graphInfoPanel;,     }, ,     /**,      * Creates one of the fields used to display the graph's current values.,      *,      * @param color,      *            the color used to draw the value. By convention this is the,      *            same color that is used to draw the graph for this value and,      *            in the choose panel.,      * @param length,      *            the number of digits which the field should be able to display,      *,      * @return a text field configured to display one of the current graph,      *         values,      */,     private JTextField createInfoField(Color color, int length) {,         JTextField field = new JTextField(length);,         field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,         field.setEditable(false);,         field.setForeground(color);,         field.setBackground(getBackground());, ,         // The text field should expand horizontally, but have,         // a fixed height,         field.setMaximumSize(new Dimension(field.getMaximumSize().width, field.getPreferredSize().height));,         return field;,     }, ,     /**,      * Creates a label for one of the fields used to display the graph's current,      * values. Neither the label created by this method or the,      * <code>field</code> passed as a parameter is added to the GUI here.,      *,      * @param labelResourceName,      *            the name of the label resource. This is used to look up the,      *            label text using {@link JMeterUtils#getResString(String)}.,      * @param field,      *            the field this label is being created for.,      */,     private JLabel createInfoLabel(String labelResourceName, JTextField field) {,         JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));,         label.setForeground(field.getForeground());,         label.setLabelFor(field);,         return label;,     }, ,     /**,      * Creates a panel containing two pairs of labels and fields for displaying,      * the current graph values. This method exists to help with laying out the,      * fields in columns. If one or more components are null then these,      * components will be represented by blank space.,      *,      * @param label1,      *            the label for the first field. This label will be placed in,      *            the upper left section of the panel. If this parameter is,      *            null, this section of the panel will be left blank.,      * @param field1,      *            the field corresponding to the first label. This field will be,      *            placed in the upper right section of the panel. If this,      *            parameter is null, this section of the panel will be left,      *            blank.,      * @param label2,      *            the label for the second field. This label will be placed in,      *            the lower left section of the panel. If this parameter is,      *            null, this section of the panel will be left blank.,      * @param field2,      *            the field corresponding to the second label. This field will,      *            be placed in the lower right section of the panel. If this,      *            parameter is null, this section of the panel will be left,      *            blank.,      */,     private Box createInfoColumn(JLabel label1, JTextField field1, JLabel label2, JTextField field2) {,         // This column actually consists of a row with two sub-columns,         // The first column contains the labels, and the second,         // column contains the fields.,         Box row = Box.createHorizontalBox();,         Box col = Box.createVerticalBox();,         col.add(label1 != null ? label1 : Box.createVerticalGlue());,         col.add(label2 != null ? label2 : Box.createVerticalGlue());,         row.add(col);, ,         row.add(Box.createHorizontalStrut(5));, ,         col = Box.createVerticalBox();,         col.add(field1 != null ? field1 : Box.createVerticalGlue());,         col.add(field2 != null ? field2 : Box.createVerticalGlue());,         row.add(col);, ,         row.add(Box.createHorizontalStrut(5));, ,         return row;],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/CachingStatCalculator.java,,32-64,[    private final List<Sample> storedValues = Collections.synchronizedList(new ArrayList<Sample>());, ,     public CachingStatCalculator(String string) {,         super(string);,     }, ,     public List<Sample> getSamples() {,         return storedValues;,     }, ,     public Sample getSample(int index) {,         synchronized( storedValues ){,             if (index < storedValues.size()) {,                 return storedValues.get(index);,             },         },         return null;,     }, ,     @Override,     public synchronized void clear() {,         super.clear();,         storedValues.clear();,     },     /**,      * Records a sample.,      *,      */,     @Override,     public Sample addSample(SampleResult res) {,         final Sample sample = super.addSample(res);,         storedValues.add(sample);,         return sample;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/JSR223Listener.java,,35-73,[public class JSR223Listener extends JSR223TestElement,     implements Cloneable, SampleListener, TestBean, Visualizer {, // N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final long serialVersionUID = 234L;, ,     @Override,     public void sampleOccurred(SampleEvent event) {,         try {,             ScriptEngine scriptEngine = getScriptEngine();,             Bindings bindings = scriptEngine.createBindings();,             bindings.put("sampleEvent", event);,             bindings.put("sampleResult", event.getResult());,             processFileOrScript(scriptEngine, bindings);,         } catch (ScriptException | IOException e) {,             log.error("Problem in JSR223 script "+getName(), e);,         },     }, ,     @Override,     public void sampleStarted(SampleEvent e) {,         // NOOP,     }, ,     @Override,     public void sampleStopped(SampleEvent e) {,         // NOOP,     }, ,     @Override,     public void add(SampleResult sample) {,         // NOOP,     }, ,     @Override,     public boolean isStats() {,         return false;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/LineGraph.java,setData,100-100,[        this.data = data;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/LineGraph.java,setXAxisLabels,116-116,[        this.xAxisLabels = labels;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/LineGraph.java,setYAxisLabels,120-120,[        this.yAxisLabel = label;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/visualizers/MailerVisualizer.java,configure,362-362,[        updateVisualizer(((MailerResultCollector) el).getMailerModel());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/visualizers/MailerVisualizer.java,modifyTestElement,385-385,[        MailerModel mailerModel = ((MailerResultCollector) c).getMailerModel();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/visualizers/MailerVisualizer.java,actionPerformed,335-335,[                MailerModel model = ((MailerResultCollector) testElement).getMailerModel();],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/visualizers/MailerVisualizer.java,clearData,116-116,[            MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/MailerVisualizer.java,,65-447,[public class MailerVisualizer extends AbstractVisualizer implements ActionListener, Clearable, ChangeListener {,     private static final long serialVersionUID = 240L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private JButton testerButton;, ,     private JTextField addressField;, ,     private JTextField fromField;, ,     private JTextField smtpHostField;, ,     private JTextField smtpPortField;, ,     private JTextField failureSubjectField;, ,     private JTextField successSubjectField;, ,     private JTextField failureField;, ,     private JTextField failureLimitField;, ,     private JTextField successLimitField;, ,     private JTextField smtpLoginField;, ,     private JTextField smtpPasswordField;, ,     private JComboBox<String> authTypeCombo;, ,     /**,      * Constructs the MailerVisualizer and initializes its GUI.,      */,     public MailerVisualizer() {,         super();,         setModel(new MailerResultCollector());,         // initialize GUI.,         initGui();,     }, ,     public JPanel getControlPanel() {,         return this;,     }, ,     /**,      * Clears any stored sampling-informations.,      */,     @Override,     public synchronized void clearData() {,         if (getModel() != null) {,             MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();,             model.clear();,             updateVisualizer(model);,         },     }, ,     @Override,     public void add(final SampleResult res) {,         if (getModel() != null) {,             JMeterUtils.runSafe(new Runnable() {,                 @Override,                 public void run() {,                     MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();,                     // method called by add is synchronized,                     model.add(res);//this is a different model from the one used by the result collector,                     updateVisualizer(model);                    ,                 },             });,         },     }, ,     @Override,     public String toString() {,         return JMeterUtils.getResString("mailer_string"); // $NON-NLS-1$,     }, ,     /**,      * Initializes the GUI. Lays out components and adds them to the container.,      */,     private void initGui() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         JPanel mainPanel = new VerticalPanel();,         Border margin = new EmptyBorder(5, 10, 5, 10);,         this.setBorder(margin);, ,         mainPanel.add(makeTitlePanel());,         ,         JPanel attributePane = new VerticalPanel();,         attributePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("mailer_title_settings"))); // $NON-NLS-1$,         ,         // Settings panes,         attributePane.add(createMailingSettings());      ,         attributePane.add(createSmtpSettings());,         ,         // Test mail button,         JPanel testerPanel = new JPanel(new BorderLayout());,         testerButton = new JButton(JMeterUtils.getResString("mailer_test_mail")); // $NON-NLS-1$,         testerButton.addActionListener(this);,         testerButton.setEnabled(true);,         testerPanel.add(testerButton, BorderLayout.EAST);,         attributePane.add(testerPanel);,         mainPanel.add(attributePane);,         mainPanel.add(Box.createRigidArea(new Dimension(0,5)));, ,         // Failures count,         JPanel mailerPanel = new JPanel(new BorderLayout());,         mailerPanel.add(new JLabel(JMeterUtils.getResString("mailer_failures")), BorderLayout.WEST); // $NON-NLS-1$,         failureField = new JTextField(6);,         failureField.setEditable(false);,         mailerPanel.add(failureField, BorderLayout.CENTER);,         mainPanel.add(mailerPanel);, ,         this.add(mainPanel, BorderLayout.CENTER);,     },     ,     private JPanel createMailingSettings() {,         JPanel settingsPane = new JPanel(new BorderLayout());,         settingsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("mailer_title_message"))); // $NON-NLS-1$,         ,         JPanel headerPane = new JPanel(new BorderLayout());,         headerPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));,         JPanel fromPane = new JPanel(new BorderLayout());,         fromPane.add(new JLabel(JMeterUtils.getResString("mailer_from")), BorderLayout.WEST); // $NON-NLS-1$,         fromField = new JTextField(25);,         fromField.setEditable(true);,         fromPane.add(fromField, BorderLayout.CENTER);,         fromPane.add(Box.createRigidArea(new Dimension(5,0)), BorderLayout.EAST);,         headerPane.add(fromPane, BorderLayout.WEST);,         JPanel addressPane = new JPanel(new BorderLayout());,         addressPane.add(new JLabel(JMeterUtils.getResString("mailer_addressees")), BorderLayout.WEST); // $NON-NLS-1$,         addressField = new JTextField(10);,         addressField.setEditable(true);,         addressPane.add(addressField, BorderLayout.CENTER);,         headerPane.add(addressPane, BorderLayout.CENTER);,         ,         JPanel successPane = new JPanel(new BorderLayout());,         successPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));,         JPanel succesSubjectPane = new JPanel(new BorderLayout());,         succesSubjectPane.add(new JLabel(JMeterUtils.getResString("mailer_success_subject")), BorderLayout.WEST); // $NON-NLS-1$,         successSubjectField = new JTextField(10);,         successSubjectField.setEditable(true);,         succesSubjectPane.add(successSubjectField, BorderLayout.CENTER);,         succesSubjectPane.add(Box.createRigidArea(new Dimension(5,0)), BorderLayout.EAST);,         successPane.add(succesSubjectPane, BorderLayout.CENTER);,         JPanel successLimitPane = new JPanel(new BorderLayout());,         successLimitPane.add(new JLabel(JMeterUtils.getResString("mailer_success_limit")), BorderLayout.WEST); // $NON-NLS-1$,         successLimitField = new JTextField("2", 5); // $NON-NLS-1$,         successLimitField.setEditable(true);,         successLimitPane.add(successLimitField, BorderLayout.CENTER);,         successPane.add(successLimitPane, BorderLayout.EAST);,         ,         JPanel failurePane = new JPanel(new BorderLayout());,         failurePane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));,         JPanel failureSubjectPane = new JPanel(new BorderLayout());,         failureSubjectPane.add(new JLabel(JMeterUtils.getResString("mailer_failure_subject")), BorderLayout.WEST); // $NON-NLS-1$,         failureSubjectField = new JTextField(10);,         failureSubjectField.setEditable(true);,         failureSubjectPane.add(failureSubjectField, BorderLayout.CENTER);,         failureSubjectPane.add(Box.createRigidArea(new Dimension(5,0)), BorderLayout.EAST);,         failurePane.add(failureSubjectPane, BorderLayout.CENTER);,         JPanel failureLimitPane = new JPanel(new BorderLayout());,         failureLimitPane.add(new JLabel(JMeterUtils.getResString("mailer_failure_limit")), BorderLayout.WEST); // $NON-NLS-1$,         failureLimitField = new JTextField("2", 5); // $NON-NLS-1$,         failureLimitField.setEditable(true);,         failureLimitPane.add(failureLimitField, BorderLayout.CENTER);,         failurePane.add(failureLimitPane, BorderLayout.EAST);,         ,         settingsPane.add(headerPane, BorderLayout.NORTH);,         settingsPane.add(successPane, BorderLayout.CENTER);,         settingsPane.add(failurePane, BorderLayout.SOUTH);,         ,         return settingsPane;,     }, ,     private JPanel createSmtpSettings() {,         JPanel settingsPane = new JPanel(new BorderLayout());,         settingsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("mailer_title_smtpserver"))); // $NON-NLS-1$,         ,         JPanel hostPane = new JPanel(new BorderLayout());,         hostPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));,         JPanel smtpHostPane = new JPanel(new BorderLayout());,         smtpHostPane.add(new JLabel(JMeterUtils.getResString("mailer_host")), BorderLayout.WEST); // $NON-NLS-1$,         smtpHostField = new JTextField(10);,         smtpHostField.setEditable(true);,         smtpHostPane.add(smtpHostField, BorderLayout.CENTER);,         smtpHostPane.add(Box.createRigidArea(new Dimension(5,0)), BorderLayout.EAST);,         hostPane.add(smtpHostPane, BorderLayout.CENTER);,         JPanel smtpPortPane = new JPanel(new BorderLayout());,         smtpPortPane.add(new JLabel(JMeterUtils.getResString("mailer_port")), BorderLayout.WEST); // $NON-NLS-1$,         smtpPortField = new JTextField(10);,         smtpPortField.setEditable(true);,         smtpPortPane.add(smtpPortField, BorderLayout.CENTER);,         hostPane.add(smtpPortPane, BorderLayout.EAST);, ,         JPanel authPane = new JPanel(new BorderLayout());,         hostPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));,         JPanel smtpLoginPane = new JPanel(new BorderLayout());,         smtpLoginPane.add(new JLabel(JMeterUtils.getResString("mailer_login")), BorderLayout.WEST); // $NON-NLS-1$,         smtpLoginField = new JTextField(10);,         smtpLoginField.setEditable(true);,         smtpLoginPane.add(smtpLoginField, BorderLayout.CENTER);,         smtpLoginPane.add(Box.createRigidArea(new Dimension(5,0)), BorderLayout.EAST);,         authPane.add(smtpLoginPane, BorderLayout.CENTER);,         JPanel smtpPasswordPane = new JPanel(new BorderLayout());,         smtpPasswordPane.add(new JLabel(JMeterUtils.getResString("mailer_password")), BorderLayout.WEST); // $NON-NLS-1$,         smtpPasswordField = new JPasswordField(10);,         smtpPasswordField.setEditable(true);,         smtpPasswordPane.add(smtpPasswordField, BorderLayout.CENTER);,         smtpPasswordPane.add(Box.createRigidArea(new Dimension(5,0)), BorderLayout.EAST);,         authPane.add(smtpPasswordPane, BorderLayout.EAST);, ,         JPanel authTypePane = new JPanel(new BorderLayout());,         authTypePane.add(new JLabel(JMeterUtils.getResString("mailer_connection_security")), BorderLayout.WEST); // $NON-NLS-1$,         authTypeCombo = new JComboBox<>(new String[] { ,                 MailerModel.MailAuthType.NONE.toString(), ,                 MailerModel.MailAuthType.SSL.toString(),,                 MailerModel.MailAuthType.TLS.toString()});,         authTypeCombo.setFont(new Font("SansSerif", Font.PLAIN, 10)); // $NON-NLS-1$,         authTypePane.add(authTypeCombo, BorderLayout.CENTER);,         ,         JPanel credPane = new JPanel(new BorderLayout());,         credPane.add(authPane, BorderLayout.CENTER);,         credPane.add(authTypePane, BorderLayout.EAST);,         ,         settingsPane.add(hostPane, BorderLayout.NORTH);,         settingsPane.add(credPane, BorderLayout.CENTER);,         ,         return settingsPane;,     }, ,     @Override,     public String getLabelResource() {,         return "mailer_visualizer_title"; //$NON-NLS-1$,     }, ,     /**,      * Returns a String for the title of the attributes-panel as set up in the,      * properties-file using the lookup-constant "mailer_attributes_panel".,      *,      * @return The title of the component.,      */,     public String getAttributesTitle() {,         return JMeterUtils.getResString("mailer_attributes_panel"); //$NON-NLS-1$,     }, ,     // ////////////////////////////////////////////////////////////,     //,     // Implementation of the ActionListener-Interface.,     //,     // ////////////////////////////////////////////////////////////, ,     /**,      * Reacts on an ActionEvent (like pressing a button).,      *,      * @param e,      *            The ActionEvent with information about the event and its,      *            source.,      */,     @Override,     public void actionPerformed(ActionEvent e) {,         if (e.getSource() == testerButton) {,             ResultCollector testElement = getModel();,             modifyTestElement(testElement);,             try {,                 MailerModel model = ((MailerResultCollector) testElement).getMailerModel();,                 model.sendTestMail();,                 displayMessage(JMeterUtils.getResString("mail_sent"), false); //$NON-NLS-1$,             } catch (AddressException ex) {,                 log.error("Invalid mail address ", ex);,                 displayMessage(JMeterUtils.getResString("invalid_mail_address") //$NON-NLS-1$,                         + "\n" + ex.getMessage(), true); //$NON-NLS-1$,             } catch (MessagingException ex) {,                 log.error("Couldn't send mail...", ex);,                 displayMessage(JMeterUtils.getResString("invalid_mail") //$NON-NLS-1$,                         + "\n" + ex.getMessage(), true); //$NON-NLS-1$,             },         },     }, ,     // ////////////////////////////////////////////////////////////,     //,     // Methods used to store and retrieve the MailerVisualizer.,     //,     // ////////////////////////////////////////////////////////////, ,     /**,      * Restores MailerVisualizer.,      */,     @Override,     public void configure(TestElement el) {,         super.configure(el);,         updateVisualizer(((MailerResultCollector) el).getMailerModel());,     }, ,     /**,      * Makes MailerVisualizer storable.,      */,     @Override,     public TestElement createTestElement() {,         ResultCollector model = getModel();,         if (model == null) {,             model = new MailerResultCollector();,             setModel(model);,         },         modifyTestElement(model);,         return model;,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void modifyTestElement(TestElement c) {,         super.modifyTestElement(c);,         MailerModel mailerModel = ((MailerResultCollector) c).getMailerModel();,         mailerModel.setFailureLimit(failureLimitField.getText());,         mailerModel.setFailureSubject(failureSubjectField.getText());,         mailerModel.setFromAddress(fromField.getText());,         mailerModel.setSmtpHost(smtpHostField.getText());,         mailerModel.setSmtpPort(smtpPortField.getText());,         mailerModel.setLogin(smtpLoginField.getText());,         mailerModel.setPassword(smtpPasswordField.getText());,         mailerModel.setMailAuthType(,                 authTypeCombo.getSelectedItem().toString());,         mailerModel.setSuccessLimit(successLimitField.getText());,         mailerModel.setSuccessSubject(successSubjectField.getText());,         mailerModel.setToAddress(addressField.getText());,     }, ,     /**,      * Notifies this Visualizer about model-changes. Causes the Visualizer to,      * query the model about its new state.,      */,     private void updateVisualizer(MailerModel model) {,         addressField.setText(model.getToAddress());,         fromField.setText(model.getFromAddress());,         smtpHostField.setText(model.getSmtpHost());,         smtpPortField.setText(model.getSmtpPort());,         smtpLoginField.setText(model.getLogin());,         smtpPasswordField.setText(model.getPassword());,         authTypeCombo.setSelectedItem(model.getMailAuthType().toString());,         successSubjectField.setText(model.getSuccessSubject());,         failureSubjectField.setText(model.getFailureSubject());,         failureLimitField.setText(String.valueOf(model.getFailureLimit()));,         failureField.setText(String.valueOf(model.getFailureCount()));,         successLimitField.setText(String.valueOf(model.getSuccessLimit()));,         repaint();,     }, ,     /**,      * Shows a message using a DialogBox.,      */,     private void displayMessage(String message, boolean isError) {,         int type = 0;, ,         if (isError) {,             type = JOptionPane.ERROR_MESSAGE;,         } else {,             type = JOptionPane.INFORMATION_MESSAGE;,         },         JOptionPane.showMessageDialog(null, message, isError ? ,                 JMeterUtils.getResString("mailer_msg_title_error") :  // $NON-NLS-1$,                     JMeterUtils.getResString("mailer_msg_title_information"), type); // $NON-NLS-1$,     }, ,     /**,      * {@inheritDoc},      */,     @Override,     public void stateChanged(ChangeEvent e) {,         if (e.getSource() instanceof MailerModel) {,             MailerModel testModel = (MailerModel) e.getSource();,             updateVisualizer(testModel);,         } else {,             super.stateChanged(e);,         },     }],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jmeter/visualizers/MailerVisualizer.java,run,128-128,[                    MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/jmeter/visualizers/MonitorGraph.java,,52-52,[    private final boolean drawXgrid = true;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/jmeter/visualizers/MonitorGraph.java,,49-49,[    private final boolean drawYgrid = true;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/MonitorHealthVisualizer.java,,50-193,[    private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String CONNECTOR_PREFIX = "connector.prefix"; // $NON-NLS-1$,     private static final String CONNECTOR_PREFIX_DEFAULT = ""; // $NON-NLS-1$, ,     private static final String BUFFER = "monitor.buffer.size"; // $NON-NLS-1$, ,     private MonitorTabPane tabPane;, ,     private MonitorHealthPanel healthPane;, ,     private MonitorPerformancePanel perfPane;, ,     private MonitorAccumModel model;, ,     private MonitorGraph graph;, ,     private JLabeledTextField prefixField;, ,     /**,      * Constructor for the GraphVisualizer object.,      */,     public MonitorHealthVisualizer() {,         this.isStats = true;,         initModel();,         init();,     }, ,     @Override,     public void configure(TestElement el) {,         super.configure(el);,         prefixField.setText(el.getPropertyAsString(CONNECTOR_PREFIX, CONNECTOR_PREFIX_DEFAULT));,         model.setPrefix(prefixField.getText());,     }, ,     @Override,     public void modifyTestElement(TestElement c) {,         super.modifyTestElement(c);,         c.setProperty(CONNECTOR_PREFIX,prefixField.getText(),CONNECTOR_PREFIX_DEFAULT);,         model.setPrefix(prefixField.getText());,     }, ,     private void initModel() {,         model = new MonitorAccumModel();,         graph = new MonitorGraph(model);,         model.setBufferSize(JMeterUtils.getPropDefault(BUFFER, 800));,     }, ,     @Override,     public String getLabelResource() {,         return "monitor_health_title"; // $NON-NLS-1$,     }, ,     /**,      * Because of the unique requirements of a monitor We have to handle the,      * results differently than normal GUI components. A monitor should be able,      * to run for a very long time without eating up all the memory.,      */,     @Override,     public void add(SampleResult res) {,         model.addSample(res);,         try {,             collector.recordStats(this.model.getLastSample().cloneMonitorStats());,         } catch (Exception e) {,             // for now just swallow the exception,             log.debug("StatsModel was null", e);,         },     }, ,     @Override,     public Image getImage() {,         Image result = graph.createImage(this.getWidth(), this.getHeight());,         Graphics image = result.getGraphics();,         graph.paintComponent(image);,         return result;,     }, ,     @Override,     public void itemStateChanged(ItemEvent e) {,     }, ,     @Override,     public synchronized void updateGui() {,         this.repaint();,     }, ,     @Override,     public synchronized void updateGui(Sample s) {,         this.repaint();,     }, ,     /**,      * Initialize the GUI.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         Border margin = new EmptyBorder(10, 10, 5, 10);,         this.setBorder(margin);, ,         // Add the main panel and the graph,         this.add(this.makeTitlePanel(), BorderLayout.NORTH);,         this.createTabs();,         prefixField = new JLabeledTextField(JMeterUtils.getResString("monitor_label_prefix")); // $NON-NLS-1$,         add(prefixField, BorderLayout.SOUTH);,     }, ,     private void createTabs() {,         tabPane = new MonitorTabPane();,         createHealthPane(tabPane);,         createPerformancePane(tabPane);,         this.add(tabPane, BorderLayout.CENTER);,     }, ,     /**,      * Create the JPanel,      *,      * @param pane,      */,     private void createHealthPane(MonitorTabPane pane) {,         healthPane = new MonitorHealthPanel(model);,         pane.addTab(JMeterUtils.getResString("monitor_health_tab_title"), healthPane); // $NON-NLS-1$,     }, ,     /**,      * Create the JSplitPane for the performance history,      *,      * @param pane,      */,     private void createPerformancePane(MonitorTabPane pane) {,         perfPane = new MonitorPerformancePanel(model, graph);,         pane.addTab(JMeterUtils.getResString("monitor_performance_tab_title"), perfPane); // $NON-NLS-1$,     }, ,     /**,      * Clears the MonitorAccumModel.,      */,     @Override,     public void clearData() {,         this.model.clearData();,         this.healthPane.clearData();,         this.perfPane.clearData();,     }],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/jmeter/visualizers/MonitorModel.java,clone,115-115,[        return new MonitorModel(cloneMonitorStats());],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/visualizers/MonitorModel.java,getCpuload,51-51,[        return this.current.getCpuLoad();],,getCpuLoad,156-156,[        return this.getPropertyAsInt(CPULOAD);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/visualizers/MonitorModel.java,getMemload,55-55,[        return this.current.getMemLoad();],,getMemLoad,160-160,[        return this.getPropertyAsInt(MEMLOAD);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/jmeter/visualizers/MonitorModel.java,getThreadload,59-59,[        return this.current.getThreadLoad();],,getThreadLoad,164-164,[        return this.getPropertyAsInt(THREADLOAD);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/MonitorStats.java,,58-180,[        super();,     }, ,     /**,      * Default constructor,      *,      * @param health,      *            Health of the server. Has to be one of {@link Stats#HEALTHY,      *            HEALTHY}, {@link Stats#ACTIVE ACTIVE}, {@link Stats#WARNING,      *            WARNING} or {@link Stats#DEAD DEAD},      * @param load,      *            load of the server as integer from a range in between 1 and,      *            100,      * @param cpuload,      *            cpu load of the server as integer from range between 1 and 100,      * @param memload,      *            load of the server as integer from a range in between 1 and,      *            100,      * @param threadload,      *            thread load of the server as an integer from a range in,      *            between 1 and 100,      * @param host,      *            name of the host from which the status was taken,      * @param port,      *            port from which the status was taken,      * @param protocol,      *            over which the status was taken,      * @param time,      *            time in milliseconds when this status was created,      */,     public MonitorStats(int health, int load, int cpuload, int memload, int threadload, String host, String port,,             String protocol, long time) {,         this.setHealth(health);,         this.setLoad(load);,         this.setCpuLoad(cpuload);,         this.setMemLoad(memload);,         this.setThreadLoad(threadload);,         this.setHost(host);,         this.setPort(port);,         this.setProtocol(protocol);,         this.setTimeStamp(time);,     }, ,     /**,      * For convienance, this method returns the protocol, host and port as a,      * URL.,      *,      * @return protocol://host:port,      */,     public String getURL() {,         return this.getProtocol() + "://" + this.getHost() + ":" + this.getPort();,     }, ,     public void setHealth(int health) {,         this.setProperty(HEALTH, String.valueOf(health));,     }, ,     public void setLoad(int load) {,         this.setProperty(LOAD, String.valueOf(load));,     }, ,     public void setCpuLoad(int load) {,         this.setProperty(CPULOAD, String.valueOf(load));,     }, ,     public void setMemLoad(int load) {,         this.setProperty(MEMLOAD, String.valueOf(load));,     }, ,     public void setThreadLoad(int load) {,         this.setProperty(THREADLOAD, String.valueOf(load));,     }, ,     public void setHost(String host) {,         this.setProperty(HOST, host);,     }, ,     public void setPort(String port) {,         this.setProperty(PORT, port);,     }, ,     public void setProtocol(String protocol) {,         this.setProperty(PROTOCOL, protocol);,     }, ,     public void setTimeStamp(long time) {,         this.setProperty(TIMESTAMP, String.valueOf(time));,     }, ,     public int getHealth() {,         return this.getPropertyAsInt(HEALTH);,     }, ,     public int getLoad() {,         return this.getPropertyAsInt(LOAD);,     }, ,     public int getCpuLoad() {,         return this.getPropertyAsInt(CPULOAD);,     }, ,     public int getMemLoad() {,         return this.getPropertyAsInt(MEMLOAD);,     }, ,     public int getThreadLoad() {,         return this.getPropertyAsInt(THREADLOAD);,     }, ,     public String getHost() {,         return this.getPropertyAsString(HOST);,     }, ,     public String getPort() {,         return this.getPropertyAsString(PORT);,     }, ,     public String getProtocol() {,         return this.getPropertyAsString(PROTOCOL);,     }, ,     public long getTimeStamp() {,         return this.getPropertyAsLong(TIMESTAMP);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/jmeter/visualizers/PropertyControlGui.java,,153-159,[        Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){,             @Override,             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {,                 String m1, m2;,                 m1 = (String) o1.getKey();,                 m2 = (String) o2.getKey();,                 return m1.compareTo(m2);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/RenderAsCssJQuery.java,setupTabPane,162-162,[        if (rightSide.indexOfTab(JMeterUtils.getResString("cssjquery_tester_title")) < 0) { // $NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RenderAsDocument.java,,28-55,[public class RenderAsDocument extends SamplerResultTab implements ResultRenderer {, ,     private static final Logger log = LoggingManager.getLoggerForClass();,     ,     /** {@inheritDoc} */,     @Override,     public void renderResult(SampleResult sampleResult) {,         try {,             showDocumentResponse(sampleResult);,         } catch (Exception e) {,             results.setText(e.toString());,             log.error("Error:", e); // $NON-NLS-1$,         },     }, ,     private void showDocumentResponse(SampleResult sampleResult) {,         String response = Document.getTextFromDocument(sampleResult.getResponseData());, ,         results.setContentType("text/plain"); // $NON-NLS-1$,         results.setText(response);,         results.setCaretPosition(0);,         resultsScrollPane.setViewportView(results);,     }, ,     /** {@inheritDoc} */,     @Override,     public String toString() {,         return JMeterUtils.getResString("view_results_render_document"); // $NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RenderAsHTML.java,,38-156,[public class RenderAsHTML extends SamplerResultTab implements ResultRenderer {,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final String TEXT_HTML = "text/html"; // $NON-NLS-1$, ,     // Keep copies of the two editors needed,     private static final EditorKit customisedEditor = new LocalHTMLEditorKit();, ,     private static final EditorKit defaultHtmlEditor = JEditorPane.createEditorKitForContentType(TEXT_HTML);, ,     /** {@inheritDoc} */,     @Override,     public void renderResult(SampleResult sampleResult) {,         // get the text response and image icon,         // to determine which is NOT null,         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);,         showRenderedResponse(response, sampleResult);,     }, ,     protected void showRenderedResponse(String response, SampleResult res) {,         showRenderedResponse(response, res, false);,     }, ,     protected void showRenderedResponse(String response, SampleResult res, boolean embedded) {,         if (response == null) {,             results.setText("");,             return;,         }, ,         int htmlIndex = response.indexOf("<HTML"); // could be <HTML lang=""> // $NON-NLS-1$, ,         // Look for a case variation,         if (htmlIndex < 0) {,             htmlIndex = response.indexOf("<html"); // ditto // $NON-NLS-1$,         }, ,         // If we still can't find it, just try using all of the text,         if (htmlIndex < 0) {,             htmlIndex = 0;,         }, ,         String html = response.substring(htmlIndex);, ,         /*,          * To disable downloading and rendering of images and frames, enable the,          * editor-kit. The Stream property can then be,          */,         // Must be done before setContentType,         results.setEditorKitForContentType(TEXT_HTML, embedded ? defaultHtmlEditor : customisedEditor);, ,         results.setContentType(TEXT_HTML);, ,         if (embedded) {,             // Allow JMeter to render frames (and relative images),             // Must be done after setContentType [Why?],             results.getDocument().putProperty(Document.StreamDescriptionProperty, res.getURL());,         },         /*,          * Get round problems parsing <META http-equiv='content-type',          * content='text/html; charset=utf-8'> See,          * http://bz.apache.org/bugzilla/show_bug.cgi?id=23315,          *,          * Is this due to a bug in Java?,          */,         results.getDocument().putProperty("IgnoreCharsetDirective", Boolean.TRUE); // $NON-NLS-1$, ,         try {,             results.setText(html); // Bug can generate RTE,         } catch (RuntimeException rte) {,             results.setText("Failed to parse HTML: " + rte.getMessage());,         },         results.setCaretPosition(0);,         try {,             resultsScrollPane.setViewportView(results);,         } catch (NumberFormatException e) {,             // Java Bug : http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=9001188.,             // See https://bz.apache.org/bugzilla/show_bug.cgi?id=54586,             log.warn("An error occured rendering html code", e);,             results.setText("Failed to render HTML: " + e.getMessage() +", use Text renderer");            ,         },     }, ,     private static class LocalHTMLEditorKit extends HTMLEditorKit {, ,         private static final long serialVersionUID = -3399554318202905392L;, ,         private static final ViewFactory defaultFactory = new LocalHTMLFactory();, ,         @Override,         public ViewFactory getViewFactory() {,             return defaultFactory;,         }, ,         private static class LocalHTMLFactory extends javax.swing.text.html.HTMLEditorKit.HTMLFactory {,             /*,              * Provide dummy implementations to suppress download and display of,              * related resources: - FRAMEs - IMAGEs TODO create better dummy,              * displays TODO suppress LINK somehow,              */,             @Override,             public View create(Element elem) {,                 Object o = elem.getAttributes().getAttribute(StyleConstants.NameAttribute);,                 if (o instanceof HTML.Tag) {,                     HTML.Tag kind = (HTML.Tag) o;,                     if (kind == HTML.Tag.FRAME) {,                         return new ComponentView(elem);,                     } else if (kind == HTML.Tag.IMG) {,                         return new ComponentView(elem);,                     },                 },                 return super.create(elem);,             },         },     }, ,     /** {@inheritDoc} */,     @Override,     public String toString() {,         return JMeterUtils.getResString("view_results_render_html"); // $NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RenderAsHTMLWithEmbedded.java,,25-38,[public class RenderAsHTMLWithEmbedded extends RenderAsHTML,     implements ResultRenderer {, ,     /** {@inheritDoc} */,     @Override,     protected void showRenderedResponse(String response, SampleResult res) {,         // enable embedded html resources,         showRenderedResponse(response, res, true);,     }, ,     /** {@inheritDoc} */,     @Override,     public String toString() {,         return JMeterUtils.getResString("view_results_render_html_embedded"); // $NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RenderAsJSON.java,,28-131,[public class RenderAsJSON extends SamplerResultTab implements ResultRenderer {,     private static final String TAB_SEPARATOR = ":   "; //$NON-NLS-1$, ,     private static final String ESC_CHAR_REGEX = "\\\\[\"\\\\/bfnrt]|\\\\u[0-9A-Fa-f]{4}"; // $NON-NLS-1$, ,     private static final String NORMAL_CHARACTER_REGEX = "[^\"\\\\]";  // $NON-NLS-1$, ,     private static final String STRING_REGEX = "\"(" + ESC_CHAR_REGEX + "|" + NORMAL_CHARACTER_REGEX + ")*+\""; // $NON-NLS-1$, ,     // This 'other value' regex is deliberately weak, even accepting an empty string, to be useful when reporting malformed data.,     private static final String OTHER_VALUE_REGEX = "[^\\{\\[\\]\\}\\,]*"; // $NON-NLS-1$, ,     private static final String VALUE_OR_PAIR_REGEX = "((" + STRING_REGEX + "\\s*:)?\\s*(" + STRING_REGEX + "|" + OTHER_VALUE_REGEX + ")\\s*,?\\s*)"; // $NON-NLS-1$, ,     private static final Pattern VALUE_OR_PAIR_PATTERN = Pattern.compile(VALUE_OR_PAIR_REGEX);, ,     /** {@inheritDoc} */,     @Override,     public void renderResult(SampleResult sampleResult) {,         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);,         showRenderJSONResponse(response);,     }, ,     private void showRenderJSONResponse(String response) {,         results.setContentType("text/plain"); // $NON-NLS-1$,         results.setText(response == null ? "" : prettyJSON(response));,         results.setCaretPosition(0);,         resultsScrollPane.setViewportView(results);,     }, ,     // It might be useful also to make this available in the 'Request' tab, for,     // when posting JSON.,     /**,      * Pretty-print JSON text,      * @param json input text,      * @return prettyfied json,      */,     public static String prettyJSON(String json) {,         return prettyJSON(json, RenderAsJSON.TAB_SEPARATOR);,     },     ,     /**,      * Pretty-print JSON text,      * @param json input text,      * @param tabSeparator String tab separator,      * @return prettyfied json,      */,     public static String prettyJSON(String json, String tabSeparator) {,         StringBuilder pretty = new StringBuilder(json.length() * 2); // Educated guess, ,         final String tab = tabSeparator; // $NON-NLS-1$,         StringBuilder index = new StringBuilder();,         String nl = ""; // $NON-NLS-1$, ,         Matcher valueOrPair = VALUE_OR_PAIR_PATTERN.matcher(json);, ,         boolean misparse = false;, ,         for (int i = 0; i < json.length(); ) {,             final char currentChar = json.charAt(i);,             if ((currentChar == '{') || (currentChar == '[')) {,                 pretty.append(nl).append(index).append(currentChar);,                 i++;,                 index.append(tab);,                 misparse = false;,             },             else if ((currentChar == '}') || (currentChar == ']')) {,                 if (index.length() > 0) {,                     index.delete(0, tab.length());,                 },                 pretty.append(nl).append(index).append(currentChar);,                 i++;,                 int j = i;,                 while ((j < json.length()) && Character.isWhitespace(json.charAt(j))) {,                     j++;,                 },                 if ((j < json.length()) && (json.charAt(j) == ',')) {,                     pretty.append(","); // $NON-NLS-1$,                     i=j+1;,                 },                 misparse = false;,             },             else if (valueOrPair.find(i) && valueOrPair.group().length() > 0) {,                 pretty.append(nl).append(index).append(valueOrPair.group());,                 i=valueOrPair.end();,                 misparse = false;,             },             else {,                 if (!misparse) {,                     pretty.append(nl).append("- Parse failed from:");,                 },                 pretty.append(currentChar);,                 i++;,                 misparse = true;,             },             nl = "\n"; // $NON-NLS-1$,         },         return pretty.toString();,     }, ,     /** {@inheritDoc} */,     @Override,     public String toString() {,         return JMeterUtils.getResString("view_results_render_json"); // $NON-NLS-1$],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/RenderAsRegexp.java,setupTabPane,160-160,[        if (rightSide.indexOfTab(JMeterUtils.getResString("regexp_tester_title")) < 0) { // $NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RenderAsText.java,,25-47,[public class RenderAsText extends SamplerResultTab implements ResultRenderer {, ,     /** {@inheritDoc} */,     @Override,     public void renderResult(SampleResult sampleResult) {,         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);,         showTextResponse(response);,     }, ,     private void showTextResponse(String response) {,         results.setContentType("text/plain"); // $NON-NLS-1$,         results.setText(response == null ? "" : response); // $NON-NLS-1$,         results.setCaretPosition(0);,         resultsScrollPane.setViewportView(results);,         // Bug 55111 - Refresh JEditor pane size depending on the presence or absence of scrollbars,         resultsScrollPane.setPreferredSize(resultsScrollPane.getMinimumSize());,         results.revalidate();,     }, ,     /** {@inheritDoc} */,     @Override,     public String toString() {,         return JMeterUtils.getResString("view_results_render_text"); // $NON-NLS-1$],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RenderAsXML.java,,47-232,[public class RenderAsXML extends SamplerResultTab,     implements ResultRenderer {, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private static final byte[] XML_PFX = {'<','?','x','m','l',' '};//"<?xml ", ,     public RenderAsXML(){,         activateSearchExtension = false; // TODO work out how to search the XML pane,     }, ,     /** {@inheritDoc} */,     @Override,     public void renderResult(SampleResult sampleResult) {,         showRenderXMLResponse(sampleResult);,     }, ,     private void showRenderXMLResponse(SampleResult res) {,         results.setContentType("text/xml"); // $NON-NLS-1$,         results.setCaretPosition(0);,         byte[] source = res.getResponseData();,         final ByteArrayInputStream baIS = new ByteArrayInputStream(source);,         for(int i=0; i<source.length-XML_PFX.length; i++){,             if (JOrphanUtils.startsWith(source, XML_PFX, i)){,                 baIS.skip(i);// Skip the leading bytes (if any),                 break;,             },         }, ,         // there is also a javax.swing.text.Document class.,         org.w3c.dom.Document document = null;, ,         StringWriter sw = new StringWriter();,         Tidy tidy = XPathUtil.makeTidyParser(true, true, true, sw);,         document = tidy.parseDOM(baIS, null);,         document.normalize();,         if (tidy.getParseErrors() > 0) {,             showErrorMessageDialog(sw.toString(),,                     "Tidy: " + tidy.getParseErrors() + " errors, " + tidy.getParseWarnings() + " warnings",,                     JOptionPane.WARNING_MESSAGE);,         }, ,         JPanel domTreePanel = new DOMTreePanel(document);,         resultsScrollPane.setViewportView(domTreePanel);,     }, ,     /* (non-Javadoc),      * @see org.apache.jmeter.visualizers.SamplerResultTab#clearData(),      */,     @Override,     public void clearData() {,         super.clearData();,         resultsScrollPane.setViewportView(null); // clear result tab on Ctrl-E,     }, ,     /*,      *,      * A Dom tree panel for to display response as tree view author <a,      * href="mailto:d.maung@mdl.com">Dave Maung</a> ,      * TODO implement to find any nodes in the tree using TreePath.,      *,      */,     private static class DOMTreePanel extends JPanel {, ,         private static final long serialVersionUID = 6871690021183779153L;, ,         private JTree domJTree;, ,         public DOMTreePanel(org.w3c.dom.Document document) {,             super(new GridLayout(1, 0));,             try {,                 Node firstElement = getFirstElement(document);,                 DefaultMutableTreeNode top = new XMLDefaultMutableTreeNode(firstElement);,                 domJTree = new JTree(top);, ,                 domJTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);,                 domJTree.setShowsRootHandles(true);,                 JScrollPane domJScrollPane = new JScrollPane(domJTree);,                 domJTree.setAutoscrolls(true);,                 this.add(domJScrollPane);,                 ToolTipManager.sharedInstance().registerComponent(domJTree);,                 domJTree.setCellRenderer(new DomTreeRenderer());,             } catch (SAXException e) {,                 log.warn("Error trying to parse document", e);,             }, ,         }, ,         /**,          * Skip all DTD nodes, all prolog nodes. They dont support in tree view,          * We let user to insert them however in DOMTreeView, we dont display it,          *,          * @param root,          * @return,          */,         private Node getFirstElement(Node parent) {,             NodeList childNodes = parent.getChildNodes();,             Node toReturn = parent; // Must return a valid node, or may generate an NPE,             for (int i = 0; i < childNodes.getLength(); i++) {,                 Node childNode = childNodes.item(i);,                 toReturn = childNode;,                 if (childNode.getNodeType() == Node.ELEMENT_NODE){,                     break;,                 }, ,             },             return toReturn;,         }, ,         /**,          * This class is to view as tooltext. This is very useful, when the,          * contents has long string and does not fit in the view. it will also,          * automatically wrap line for each 100 characters since tool tip,          * support html. author <a href="mailto:d.maung@mdl.com">Dave Maung</a>,          */,         private static class DomTreeRenderer extends DefaultTreeCellRenderer {, ,             private static final long serialVersionUID = 240210061375790195L;, ,             @Override,             public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded,,                     boolean leaf, int row, boolean phasFocus) {,                 super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, phasFocus);, ,                 DefaultMutableTreeNode valueTreeNode = (DefaultMutableTreeNode) value;,                 setToolTipText(getHTML(valueTreeNode.toString(), "<br>", 100)); // $NON-NLS-1$,                 return this;,             }, ,             /**,              * get the html,              *,              * @param str,              * @param separator,              * @param maxChar,              * @return,              */,             private String getHTML(String str, String separator, int maxChar) {,                 StringBuilder strBuf = new StringBuilder("<html><body bgcolor=\"yellow\"><b>"); // $NON-NLS-1$,                 char[] chars = str.toCharArray();,                 for (int i = 0; i < chars.length; i++) {, ,                     if (i % maxChar == 0 && i != 0) {,                         strBuf.append(separator);,                     },                     strBuf.append(encode(chars[i]));, ,                 },                 strBuf.append("</b></body></html>"); // $NON-NLS-1$,                 return strBuf.toString();, ,             }, ,             private String encode(char c) {,                 String toReturn = String.valueOf(c);,                 switch (c) {,                 case '<': // $NON-NLS-1$,                     toReturn = "&lt;"; // $NON-NLS-1$,                     break;,                 case '>': // $NON-NLS-1$,                     toReturn = "&gt;"; // $NON-NLS-1$,                     break;,                 case '\'': // $NON-NLS-1$,                     toReturn = "&apos;"; // $NON-NLS-1$,                     break;,                 case '\"': // $NON-NLS-1$,                     toReturn = "&quot;"; // $NON-NLS-1$,                     break;,                 default:,                     // ignored,                     break;, ,                 },                 return toReturn;,             },         },     }, ,     private static void showErrorMessageDialog(String message, String title, int messageType) {,         JOptionPane.showMessageDialog(null, message, title, messageType);,     }, ,     /** {@inheritDoc} */,     @Override,     public String toString() {,         return JMeterUtils.getResString("view_results_render_xml"); // $NON-NLS-1$],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/visualizers/RenderAsXPath.java,process,148-148,[        } catch (Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/RenderAsXPath.java,setupTabPane,206-206,[        if (rightSide.indexOfTab(JMeterUtils.getResString("xpath_tester_title")) < 0) { // $NON-NLS-1$],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/visualizers/RequestPanel.java,<init>,72-72,[            } catch (Exception e) {],,
MALICIOUS_CODE,EI_EXPOSE_REP,org/apache/jmeter/visualizers/RespTimeGraphChart.java,getColor,187-187,[        return color;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/RespTimeGraphChart.java,setColor,194-194,[        this.color = color;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/RespTimeGraphChart.java,setData,127-127,[        this.data = data;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/RespTimeGraphChart.java,setLegendLabels,151-151,[        this.legendLabels = labels;],,
MALICIOUS_CODE,EI_EXPOSE_REP2,org/apache/jmeter/visualizers/RespTimeGraphChart.java,setXAxisLabels,143-143,[        this.xAxisLabels = labels;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java,,77-965,[public class RespTimeGraphVisualizer extends AbstractVisualizer implements ActionListener, Clearable {, ,     private static final long serialVersionUID = 280L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     private final Font FONT_SMALL = new Font("SansSerif", Font.PLAIN, 10);, ,     //+ JMX property names; do not change, ,     public static final String INTERVAL = "RespTimeGraph.interval"; // $NON-NLS-1$, ,     public static final String SERIES_SELECTION = "RespTimeGraph.seriesselection"; // $NON-NLS-1$, ,     public static final String SERIES_SELECTION_MATCH_LABEL = "RespTimeGraph.seriesselectionmatchlabel"; // $NON-NLS-1$, ,     public static final String SERIES_SELECTION_CASE_SENSITIVE = "RespTimeGraph.seriesselectioncasesensitive"; // $NON-NLS-1$, ,     public static final String SERIES_SELECTION_REGEXP = "RespTimeGraph.seriesselectionregexp"; // $NON-NLS-1$,     ,     public static final String GRAPH_TITLE = "RespTimeGraph.graphtitle"; // $NON-NLS-1$, ,     public static final String GRAPH_TITLE_FONT_NAME = "RespTimeGraph.graphtitlefontname"; // $NON-NLS-1$, ,     public static final String GRAPH_TITLE_FONT_SIZE = "RespTimeGraph.graphtitlefondsize"; // $NON-NLS-1$, ,     public static final String GRAPH_TITLE_FONT_STYLE = "RespTimeGraph.graphtitlefontstyle"; // $NON-NLS-1$, ,     public static final String LINE_STROKE_WIDTH = "RespTimeGraph.linestrockwidth"; // $NON-NLS-1$, ,     public static final String LINE_SHAPE_POINT = "RespTimeGraph.lineshapepoint"; // $NON-NLS-1$, ,     public static final String GRAPH_SIZE_DYNAMIC = "RespTimeGraph.graphsizedynamic"; // $NON-NLS-1$, ,     public static final String GRAPH_SIZE_WIDTH = "RespTimeGraph.graphsizewidth"; // $NON-NLS-1$, ,     public static final String GRAPH_SIZE_HEIGHT = "RespTimeGraph.graphsizeheight"; // $NON-NLS-1$, ,     public static final String XAXIS_TIME_FORMAT = "RespTimeGraph.xaxistimeformat"; // $NON-NLS-1$, ,     public static final String YAXIS_SCALE_MAX_VALUE = "RespTimeGraph.yaxisscalemaxvalue"; // $NON-NLS-1$, ,     public static final String YAXIS_INCREMENT_SCALE = "RespTimeGraph.yaxisscaleincrement"; // $NON-NLS-1$, ,     public static final String YAXIS_NUMBER_GROUPING = "RespTimeGraph.yaxisnumbergrouping"; // $NON-NLS-1$, ,     public static final String LEGEND_PLACEMENT = "RespTimeGraph.legendplacement"; // $NON-NLS-1$, ,     public static final String LEGEND_FONT = "RespTimeGraph.legendfont"; // $NON-NLS-1$, ,     public static final String LEGEND_SIZE = "RespTimeGraph.legendsize"; // $NON-NLS-1$, ,     public static final String LEGEND_STYLE = "RespTimeGraph.legendstyle"; // $NON-NLS-1$, ,     //- JMX property names, ,     public static final int DEFAULT_INTERVAL = 10000; // in milli-seconds // TODO: properties?, ,     public static final boolean DEFAULT_SERIES_SELECTION = false;,     ,     public static final boolean DEFAULT_CASE_SENSITIVE = false;,     ,     public static final boolean DEFAULT_REGEXP = true;,     ,     public static final int DEFAULT_TITLE_FONT_NAME = 0; // default: sans serif,     ,     public static final int DEFAULT_TITLE_FONT_SIZE = 6; // default: 16, ,     public static final int DEFAULT_TITLE_FONT_STYLE = 1; // default: bold, ,     public static final int DEFAULT_STROKE_WIDTH_LIST = 4; // default: 3.0f,     ,     public static final int DEFAULT_LINE_SHAPE_POINT = 0; // default: circle, ,     public static final boolean DEFAULT_DYNAMIC_GRAPH_SIZE = true; // default: true, ,     public static final String DEFAULT_XAXIS_TIME_FORMAT = "HH:mm:ss"; // $NON-NLS-1$,     ,     public static final boolean DEFAULT_NUMBER_SHOW_GROUPING = true;,     ,     public static final int DEFAULT_LEGEND_PLACEMENT = 0; // default: bottom, ,     public static final int DEFAULT_LEGEND_FONT = 0; // default: sans serif,     ,     public static final int DEFAULT_LEGEND_SIZE = 2; // default: 10, ,     public static final int DEFAULT_LEGEND_STYLE = 0; // default: normal, ,     /**,      * Lock used to protect list update,      */,     private final transient Object lock = new Object();,     /**,      * Lock used to protect refresh interval,      */,     private final transient Object lockInterval = new Object();, ,     private static final String Y_AXIS_LABEL = JMeterUtils.getResString("aggregate_graph_response_time");//$NON-NLS-1$, ,     private static final String Y_AXIS_TITLE = JMeterUtils.getResString("aggregate_graph_ms"); //$NON-NLS-1$, ,     private RespTimeGraphChart graphPanel = null;, ,     private final JTabbedPane tabbedGraph = new JTabbedPane(SwingConstants.TOP);,     ,     private boolean saveGraphToFile = false;, ,     private static final int DEFAULT_WIDTH = 400;, ,     private static final int DEFAULT_HEIGTH = 300;,     ,     private int intervalValue = DEFAULT_INTERVAL;, ,     private final JLabeledTextField intervalField =,             new JLabeledTextField(JMeterUtils.getResString("graph_resp_time_interval_label"), 7); //$NON-NLS-1$, ,     private final JButton intervalButton = new JButton(JMeterUtils.getResString("graph_resp_time_interval_reload")); // $NON-NLS-1$, ,     private final JButton displayButton =,             new JButton(JMeterUtils.getResString("aggregate_graph_display")); //$NON-NLS-1$,     ,     private final JButton saveGraph =,             new JButton(JMeterUtils.getResString("aggregate_graph_save")); //$NON-NLS-1$, ,     private final JCheckBox samplerSelection = new JCheckBox(JMeterUtils.getResString("graph_resp_time_series_selection"), false); //$NON-NLS-1$, ,     private final JTextField samplerMatchLabel = new JTextField();, ,     private final JButton applyFilterBtn = new JButton(JMeterUtils.getResString("graph_apply_filter")); // $NON-NLS-1$, ,     private final JCheckBox caseChkBox = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_case"), false); // $NON-NLS-1$, ,     private final JCheckBox regexpChkBox = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_regexp"), true); // $NON-NLS-1$, ,     private final JComboBox<String> titleFontNameList = new JComboBox<>(StatGraphProperties.getFontNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private final JComboBox<String> titleFontSizeList = new JComboBox<>(StatGraphProperties.fontSize);, ,     private final JComboBox<String> titleFontStyleList = new JComboBox<>(StatGraphProperties.getFontStyleMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private final JComboBox<String> fontNameList = new JComboBox<>(StatGraphProperties.getFontNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private final JComboBox<String> fontSizeList = new JComboBox<>(StatGraphProperties.fontSize);, ,     private final JComboBox<String> fontStyleList = new JComboBox<>(StatGraphProperties.getFontStyleMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private final JComboBox<String> legendPlacementList = new JComboBox<>(StatGraphProperties.getPlacementNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));,     ,     private final JComboBox<String> pointShapeLine = new JComboBox<>(StatGraphProperties.getPointShapeMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private final JComboBox<String> strokeWidthList = new JComboBox<>(StatGraphProperties.strokeWidth);, ,     private final JCheckBox numberShowGrouping = new JCheckBox(JMeterUtils.getResString("aggregate_graph_number_grouping"), // $NON-NLS-1$,             DEFAULT_NUMBER_SHOW_GROUPING); // Default checked, ,     private final JButton syncWithName =,             new JButton(JMeterUtils.getResString("aggregate_graph_sync_with_name"));  //$NON-NLS-1$, ,     private final JLabeledTextField graphTitle =,             new JLabeledTextField(JMeterUtils.getResString("graph_resp_time_title_label")); //$NON-NLS-1$, ,     private final JLabeledTextField xAxisTimeFormat =,             new JLabeledTextField(JMeterUtils.getResString("graph_resp_time_xaxis_time_format"), 10); //$NON-NLS-1$ $NON-NLS-2$, ,     private final JLabeledTextField maxValueYAxisLabel =,             new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_yaxis_max_value"), 5); //$NON-NLS-1$, ,     /**,      * checkbox for use dynamic graph size,      */,     private final JCheckBox dynamicGraphSize = new JCheckBox(JMeterUtils.getResString("aggregate_graph_dynamic_size")); // $NON-NLS-1$, ,     private final JLabeledTextField graphWidth =,             new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_width"), 6); //$NON-NLS-1$,     private final JLabeledTextField graphHeight =,             new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_height"), 6); //$NON-NLS-1$, ,     private final JLabeledTextField incrScaleYAxis =,             new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_increment_scale"), 5); //$NON-NLS-1$, ,     private long minStartTime = Long.MAX_VALUE;, ,     private long maxStartTime = Long.MIN_VALUE;, ,     /**,      * We want to retain insertion order, so LinkedHashMap is necessary,      */,     private final Map<String, RespTimeGraphLineBean> seriesNames = new LinkedHashMap<>();, ,     /**,      * We want to retain insertion order, so LinkedHashMap is necessary,      */,     private final Map<String, Map<Long, StatCalculatorLong>> pList = new LinkedHashMap<>();, ,     private long durationTest = 0;,     ,     private int colorIdx = 0;, ,     private Pattern pattern = null;, ,     private transient Matcher matcher = null;, ,     private final List<Color> listColors = Colors.getColors();, ,     private final List<RespTimeGraphDataBean> internalList = new ArrayList<>(); // internal list of all results, ,     public RespTimeGraphVisualizer() {,         init();,     }, ,     @Override,     public void add(final SampleResult sampleResult) {,         final String sampleLabel = sampleResult.getSampleLabel();,         // Make a internal list of all results to allow reload data with filter or interval,         synchronized (lockInterval) {,             internalList.add(new RespTimeGraphDataBean(sampleResult.getStartTime(), sampleResult.getTime(), sampleLabel));,         }, ,         // Sampler selection,         if (samplerSelection.isSelected() && pattern != null) {,             matcher = pattern.matcher(sampleLabel);,         },         if ((matcher == null) || (matcher.find())) {,             final long startTimeMS = sampleResult.getStartTime();,             final long startTimeInterval = startTimeMS / intervalValue;,             JMeterUtils.runSafe(new Runnable() {,                 @Override,                 public void run() {,                     synchronized (lock) {,                         // Use for x-axis scale,                         if (startTimeInterval < minStartTime) {,                             minStartTime = startTimeInterval;,                         } else if (startTimeInterval > maxStartTime) {,                             maxStartTime = startTimeInterval;,                         },                         // Generate x-axis label and associated color,                         if (!seriesNames.containsKey(sampleLabel)) {,                             seriesNames.put(sampleLabel, ,                                     new RespTimeGraphLineBean(sampleLabel, listColors.get(colorIdx++)));,                             // reset colors index,                             if (colorIdx >= listColors.size()) {,                                 colorIdx = 0;,                             },                         },                         // List of value by sampler,                         Map<Long, StatCalculatorLong> subList = pList.get(sampleLabel);,                         final Long startTimeIntervalLong = Long.valueOf(startTimeInterval);,                         if (subList != null) {,                             long respTime = sampleResult.getTime();,                             StatCalculatorLong value = subList.get(startTimeIntervalLong);,                             if (value==null) {,                                 value = new StatCalculatorLong();,                                 subList.put(startTimeIntervalLong, value);,                             },                             value.addValue(respTime, 1);,                         } else {,                             // We want to retain insertion order, so LinkedHashMap is necessary,                             Map<Long, StatCalculatorLong> newSubList = new LinkedHashMap<>(5);,                             StatCalculatorLong helper = new StatCalculatorLong();,                             helper.addValue(Long.valueOf(sampleResult.getTime()),1);,                             newSubList.put(startTimeIntervalLong,  helper);,                             pList.put(sampleLabel, newSubList);,                         },                     },                 },             });,         },     }, ,     public void makeGraph() {,         Dimension size = graphPanel.getSize();,         // canvas size,         int width = (int) size.getWidth();,         int height = (int) size.getHeight();,         if (!dynamicGraphSize.isSelected()) {,             String wstr = graphWidth.getText();,             String hstr = graphHeight.getText();,             if (wstr.length() != 0) {,                 width = Integer.parseInt(wstr);,             },             if (hstr.length() != 0) {,                 height = Integer.parseInt(hstr);,             },         }, ,         String yAxisStr = maxValueYAxisLabel.getText();,         int maxYAxisScale = yAxisStr.length() == 0 ? 0 : Integer.parseInt(yAxisStr);, ,         graphPanel.setData(this.getData());,         graphPanel.setTitle(graphTitle.getText());,         graphPanel.setMaxYAxisScale(maxYAxisScale);, ,         graphPanel.setYAxisLabels(Y_AXIS_LABEL);,         graphPanel.setYAxisTitle(Y_AXIS_TITLE);,         graphPanel.setXAxisLabels(getXAxisLabels());,         graphPanel.setLegendLabels(getLegendLabels());,         graphPanel.setColor(getLinesColors());,         graphPanel.setShowGrouping(numberShowGrouping.isSelected());,         graphPanel.setLegendPlacement(StatGraphProperties.getPlacementNameMap(),                 .get(legendPlacementList.getSelectedItem()).intValue());,         graphPanel.setPointShape(StatGraphProperties.getPointShapeMap().get(pointShapeLine.getSelectedItem()));,         graphPanel.setStrokeWidth(Float.parseFloat((String) strokeWidthList.getSelectedItem()));, ,         graphPanel.setTitleFont(new Font(StatGraphProperties.getFontNameMap().get(titleFontNameList.getSelectedItem()),,                 StatGraphProperties.getFontStyleMap().get(titleFontStyleList.getSelectedItem()).intValue(),,                 Integer.parseInt((String) titleFontSizeList.getSelectedItem())));,         graphPanel.setLegendFont(new Font(StatGraphProperties.getFontNameMap().get(fontNameList.getSelectedItem()),,                 StatGraphProperties.getFontStyleMap().get(fontStyleList.getSelectedItem()).intValue(),,                 Integer.parseInt((String) fontSizeList.getSelectedItem())));, ,         graphPanel.setHeight(height);,         graphPanel.setWidth(width);,         graphPanel.setIncrYAxisScale(getIncrScaleYAxis());,         // Draw the graph,         graphPanel.repaint();,     }, ,     /**,      * Generate the data for the jChart API,      * @return array of array of data to draw,      */,     public double[][] getData() {,         int size = pList.size();,         int max = (int) durationTest; // Test can't have a duration more than 2^31 secs (cast from long to int), ,         double[][] data = new double[size][max];, ,         double nanLast = 0;,         double nanBegin = 0;,         List<Double> nanList = new ArrayList<>();,         int s = 0;,         for (Map<Long, StatCalculatorLong> subList : pList.values()) {,             int idx = 0;,             while (idx < durationTest) {,                 long keyShift = minStartTime + idx;,                 StatCalculatorLong value = subList.get(Long.valueOf(keyShift));,                 if (value != null) {,                     nanLast = value.getMean();,                     data[s][idx] = nanLast;,                     // Calculate intermediate values (if needed),                     int nlsize = nanList.size();,                     if (nlsize > 0) {,                         double valPrev = nanBegin;,                         for (int cnt = 0; cnt < nlsize; cnt++) {,                             int pos = idx - (nlsize - cnt);,                             if (pos < 0) { pos = 0; },                             valPrev = (valPrev + ((nanLast - nanBegin) / (nlsize + 2)));,                             data[s][pos] = valPrev;,                         },                         nanList.clear();,                     },                 } else {,                     nanList.add(Double.valueOf(Double.NaN));,                     nanBegin = nanLast;,                     data[s][idx] = Double.NaN;,                 },                 // log.debug("data["+s+"]["+idx+"]: " + data[s][idx]);,                 idx++;,             },             s++;,         },         return data;,     }, ,     @Override,     public String getLabelResource() {,         return "graph_resp_time_title"; // $NON-NLS-1$,     }, ,     @Override,     public void clearData() {,         synchronized (lock) {,             internalList.clear();,             seriesNames.clear();,             pList.clear();,             minStartTime = Long.MAX_VALUE;,             maxStartTime = Long.MIN_VALUE;,             durationTest = 0;,             colorIdx = 0;,         },         tabbedGraph.setSelectedIndex(0);,     }, ,     /**,      * Initialize the GUI.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         JPanel mainPanel = new JPanel();,         Border margin = new EmptyBorder(10, 10, 5, 10);,         Border margin2 = new EmptyBorder(10, 10, 5, 10);, ,         mainPanel.setBorder(margin);,         mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));,         mainPanel.add(makeTitlePanel());, ,         JPanel settingsPane = new VerticalPanel();,         settingsPane.setBorder(margin2);, ,         graphPanel = new RespTimeGraphChart();,         graphPanel.setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGTH));, ,         settingsPane.add(createGraphActionsPane());,         settingsPane.add(createGraphSettingsPane());,         settingsPane.add(createGraphTitlePane());,         settingsPane.add(createLinePane());,         settingsPane.add(createGraphDimensionPane());,         JPanel axisPane = new JPanel(new BorderLayout());,         axisPane.add(createGraphXAxisPane(), BorderLayout.WEST);,         axisPane.add(createGraphYAxisPane(), BorderLayout.CENTER);,         settingsPane.add(axisPane);,         settingsPane.add(createLegendPane());, ,         tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_settings"), settingsPane); //$NON-NLS-1$,         tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_graph"), graphPanel); //$NON-NLS-1$,         ,         // If clic on the Graph tab, make the graph (without apply interval or filter),         ChangeListener changeListener = new ChangeListener() {,             @Override,             public void stateChanged(ChangeEvent changeEvent) {,                 JTabbedPane srcTab = (JTabbedPane) changeEvent.getSource();,                 int index = srcTab.getSelectedIndex();,                 if (srcTab.getTitleAt(index).equals(JMeterUtils.getResString("aggregate_graph_tab_graph"))) { //$NON-NLS-1$,                     actionMakeGraph();,                 },             },         };,         tabbedGraph.addChangeListener(changeListener);, ,         this.add(mainPanel, BorderLayout.NORTH);,         this.add(tabbedGraph, BorderLayout.CENTER);, ,     }, ,     @Override,     public void actionPerformed(ActionEvent event) {,         boolean forceReloadData = false;,         final Object eventSource = event.getSource();,         if (eventSource == displayButton) {,             actionMakeGraph();,         } else if (eventSource == saveGraph) {,             saveGraphToFile = true;,             try {,                 ActionRouter.getInstance().getAction(,                         ActionNames.SAVE_GRAPHICS,SaveGraphics.class.getName()).doAction(,                                 new ActionEvent(this,event.getID(),ActionNames.SAVE_GRAPHICS));,             } catch (Exception e) {,                 log.error(e.getMessage());,             },         } else if (eventSource == syncWithName) {,             graphTitle.setText(namePanel.getName());,         } else if (eventSource == dynamicGraphSize) {,                 enableDynamicGraph(dynamicGraphSize.isSelected());,         } else if (eventSource == samplerSelection) {,             enableSamplerSelection(samplerSelection.isSelected());,             if (!samplerSelection.isSelected()) {,                 // Force reload data,                 forceReloadData = true;,             },         },         // Not 'else if' because forceReloadData ,         if (eventSource == applyFilterBtn || eventSource == intervalButton || forceReloadData) {,             if (eventSource == intervalButton) {,                 intervalValue = Integer.parseInt(intervalField.getText());,             },             if (eventSource == applyFilterBtn && samplerSelection.isSelected() && samplerMatchLabel.getText() != null,                     && samplerMatchLabel.getText().length() > 0) {,                 pattern = createPattern(samplerMatchLabel.getText());,             } else if (forceReloadData) {,                 pattern = null;,                 matcher = null;,             },             if (getFile() != null && getFile().length() > 0) {,                 // Reload data from file,                 clearData();,                 FilePanel filePanel = (FilePanel) getFilePanel();,                 filePanel.actionPerformed(event);,             } else {,                 // Reload data form internal list of results,                 synchronized (lockInterval) {,                     if (internalList.size() >= 2) {,                         List<RespTimeGraphDataBean> tempList = new ArrayList<>();,                         tempList.addAll(internalList);,                         this.clearData();,                         for (RespTimeGraphDataBean data : tempList) {,                             SampleResult sr = new SampleResult(data.getStartTime(), data.getTime());,                             sr.setSampleLabel(data.getSamplerLabel());,                             this.add(sr);,                         },                     },                 },             },         } ,     }, ,     private void actionMakeGraph() {,         String msgErr = null;,         // Calculate the test duration. Needs to xAxis Labels and getData.,         durationTest = maxStartTime - minStartTime;,         if (seriesNames.size() <= 0) {,             msgErr = JMeterUtils.getResString("aggregate_graph_no_values_to_graph"); // $NON-NLS-1$,         } else   if (durationTest < 1) {,             msgErr = JMeterUtils.getResString("graph_resp_time_not_enough_data"); // $NON-NLS-1$,         },         if (msgErr == null) {,             makeGraph();,             tabbedGraph.setSelectedIndex(1);,         } else {,             tabbedGraph.setSelectedIndex(0);,             JOptionPane.showMessageDialog(null, msgErr, msgErr, JOptionPane.WARNING_MESSAGE);,         },     }, ,     @Override,     public JComponent getPrintableComponent() {,         if (saveGraphToFile == true) {,             saveGraphToFile = false;,             graphPanel.setBounds(graphPanel.getLocation().x,graphPanel.getLocation().y,,                     graphPanel.width,graphPanel.height);,             return graphPanel;,         },         return this;,     }, ,     @Override,     public void configure(TestElement te) {,         super.configure(te);,         intervalField.setText(te.getPropertyAsString(INTERVAL, String.valueOf(DEFAULT_INTERVAL)));,         samplerSelection.setSelected(te.getPropertyAsBoolean(SERIES_SELECTION, DEFAULT_SERIES_SELECTION));,         samplerMatchLabel.setText(te.getPropertyAsString(SERIES_SELECTION_MATCH_LABEL, "")); //$NON-NLS-1$,         caseChkBox.setSelected(te.getPropertyAsBoolean(SERIES_SELECTION_CASE_SENSITIVE, DEFAULT_CASE_SENSITIVE));,         regexpChkBox.setSelected(te.getPropertyAsBoolean(SERIES_SELECTION_REGEXP, DEFAULT_REGEXP));,         graphTitle.setText(te.getPropertyAsString(GRAPH_TITLE, "")); //$NON-NLS-1$,         titleFontNameList.setSelectedIndex(te.getPropertyAsInt(GRAPH_TITLE_FONT_NAME, DEFAULT_TITLE_FONT_NAME));,         titleFontSizeList.setSelectedIndex(te.getPropertyAsInt(GRAPH_TITLE_FONT_SIZE, DEFAULT_TITLE_FONT_SIZE));,         titleFontStyleList.setSelectedIndex(te.getPropertyAsInt(GRAPH_TITLE_FONT_STYLE, DEFAULT_TITLE_FONT_STYLE));,         strokeWidthList.setSelectedIndex(te.getPropertyAsInt(LINE_STROKE_WIDTH, DEFAULT_STROKE_WIDTH_LIST));,         pointShapeLine.setSelectedIndex(te.getPropertyAsInt(LINE_SHAPE_POINT, DEFAULT_LINE_SHAPE_POINT));,         dynamicGraphSize.setSelected(te.getPropertyAsBoolean(GRAPH_SIZE_DYNAMIC, DEFAULT_DYNAMIC_GRAPH_SIZE));,         graphWidth.setText(te.getPropertyAsString(GRAPH_SIZE_WIDTH, "")); //$NON-NLS-1$,         graphHeight.setText(te.getPropertyAsString(GRAPH_SIZE_HEIGHT, "")); //$NON-NLS-1$,         xAxisTimeFormat.setText(te.getPropertyAsString(XAXIS_TIME_FORMAT, DEFAULT_XAXIS_TIME_FORMAT));,         maxValueYAxisLabel.setText(te.getPropertyAsString(YAXIS_SCALE_MAX_VALUE, "")); //$NON-NLS-1$,         incrScaleYAxis.setText(te.getPropertyAsString(YAXIS_INCREMENT_SCALE, "")); //$NON-NLS-1$,         numberShowGrouping.setSelected(te.getPropertyAsBoolean(YAXIS_NUMBER_GROUPING, DEFAULT_NUMBER_SHOW_GROUPING));,         legendPlacementList.setSelectedIndex(te.getPropertyAsInt(LEGEND_PLACEMENT, DEFAULT_LEGEND_PLACEMENT));,         fontNameList.setSelectedIndex(te.getPropertyAsInt(LEGEND_FONT, DEFAULT_LEGEND_FONT));,         fontSizeList.setSelectedIndex(te.getPropertyAsInt(LEGEND_SIZE, DEFAULT_LEGEND_SIZE));,         fontStyleList.setSelectedIndex(te.getPropertyAsInt(LEGEND_STYLE, DEFAULT_LEGEND_STYLE));,         ,         enableSamplerSelection(samplerSelection.isSelected());,         enableDynamicGraph(dynamicGraphSize.isSelected());,     }, ,     @Override,     public void modifyTestElement(TestElement te) {,         super.modifyTestElement(te);,         te.setProperty(INTERVAL, intervalField.getText(), String.valueOf(DEFAULT_INTERVAL));,         te.setProperty(SERIES_SELECTION, samplerSelection.isSelected(), DEFAULT_SERIES_SELECTION);,         te.setProperty(SERIES_SELECTION_MATCH_LABEL, samplerMatchLabel.getText(), ""); //$NON-NLS-1$,         te.setProperty(SERIES_SELECTION_CASE_SENSITIVE, caseChkBox.isSelected(), DEFAULT_CASE_SENSITIVE);,         te.setProperty(SERIES_SELECTION_REGEXP, regexpChkBox.isSelected(), DEFAULT_REGEXP);,         te.setProperty(GRAPH_TITLE, graphTitle.getText(), ""); //$NON-NLS-1$,         te.setProperty(GRAPH_TITLE_FONT_NAME, titleFontNameList.getSelectedIndex(), DEFAULT_TITLE_FONT_NAME);,         te.setProperty(GRAPH_TITLE_FONT_SIZE, titleFontSizeList.getSelectedIndex(), DEFAULT_TITLE_FONT_SIZE);,         te.setProperty(GRAPH_TITLE_FONT_STYLE, titleFontStyleList.getSelectedIndex(), DEFAULT_TITLE_FONT_STYLE);,         te.setProperty(LINE_STROKE_WIDTH, strokeWidthList.getSelectedIndex(), DEFAULT_STROKE_WIDTH_LIST);,         te.setProperty(LINE_SHAPE_POINT, pointShapeLine.getSelectedIndex(), DEFAULT_LINE_SHAPE_POINT);,         te.setProperty(GRAPH_SIZE_DYNAMIC, dynamicGraphSize.isSelected(), DEFAULT_DYNAMIC_GRAPH_SIZE);,         te.setProperty(GRAPH_SIZE_WIDTH, graphWidth.getText(), ""); //$NON-NLS-1$,         te.setProperty(GRAPH_SIZE_HEIGHT, graphHeight.getText(), ""); //$NON-NLS-1$,         te.setProperty(XAXIS_TIME_FORMAT, xAxisTimeFormat.getText(), DEFAULT_XAXIS_TIME_FORMAT);,         te.setProperty(YAXIS_SCALE_MAX_VALUE, maxValueYAxisLabel.getText(), ""); //$NON-NLS-1$,         te.setProperty(YAXIS_INCREMENT_SCALE, incrScaleYAxis.getText(), ""); //$NON-NLS-1$,         te.setProperty(YAXIS_NUMBER_GROUPING, numberShowGrouping.isSelected(), DEFAULT_NUMBER_SHOW_GROUPING);,         te.setProperty(LEGEND_PLACEMENT, legendPlacementList.getSelectedIndex(), DEFAULT_LEGEND_PLACEMENT);,         te.setProperty(LEGEND_FONT, fontNameList.getSelectedIndex(), DEFAULT_LEGEND_FONT);,         te.setProperty(LEGEND_SIZE, fontSizeList.getSelectedIndex(), DEFAULT_LEGEND_SIZE);,         te.setProperty(LEGEND_STYLE, fontStyleList.getSelectedIndex(), DEFAULT_LEGEND_STYLE);,         ,         // Update sub-element visibility and data reload if need,         enableSamplerSelection(samplerSelection.isSelected());,         enableDynamicGraph(dynamicGraphSize.isSelected());,     }, ,     /**,      * Implements JMeterGUIComponent.clearGui,      */,     @Override,     public void clearGui() {,         super.clearGui();,         intervalField.setText(String.valueOf(DEFAULT_INTERVAL));,         samplerSelection.setSelected(DEFAULT_SERIES_SELECTION);,         samplerMatchLabel.setText( ""); //$NON-NLS-1$,         caseChkBox.setSelected(DEFAULT_CASE_SENSITIVE);,         regexpChkBox.setSelected(DEFAULT_REGEXP);,         graphTitle.setText(""); //$NON-NLS-1$,         titleFontNameList.setSelectedIndex(DEFAULT_TITLE_FONT_NAME);,         titleFontSizeList.setSelectedIndex(DEFAULT_TITLE_FONT_SIZE);,         titleFontStyleList.setSelectedIndex(DEFAULT_TITLE_FONT_STYLE);,         strokeWidthList.setSelectedIndex(DEFAULT_STROKE_WIDTH_LIST);,         pointShapeLine.setSelectedIndex(DEFAULT_LINE_SHAPE_POINT);,         dynamicGraphSize.setSelected(DEFAULT_DYNAMIC_GRAPH_SIZE);,         graphWidth.setText(""); //$NON-NLS-1$,         graphHeight.setText(""); //$NON-NLS-1$,         xAxisTimeFormat.setText(DEFAULT_XAXIS_TIME_FORMAT);,         maxValueYAxisLabel.setText(""); //$NON-NLS-1$,         incrScaleYAxis.setText(""); //$NON-NLS-1$,         numberShowGrouping.setSelected(DEFAULT_NUMBER_SHOW_GROUPING);,         legendPlacementList.setSelectedIndex(DEFAULT_LEGEND_PLACEMENT);,         fontNameList.setSelectedIndex(DEFAULT_LEGEND_FONT);,         fontSizeList.setSelectedIndex(DEFAULT_LEGEND_SIZE);,         fontStyleList.setSelectedIndex(DEFAULT_LEGEND_STYLE);,     }, ,     private JPanel createGraphActionsPane() {,         JPanel buttonPanel = new JPanel(new BorderLayout());,         JPanel displayPane = new JPanel();,         displayPane.add(displayButton);,         displayButton.addActionListener(this);,         buttonPanel.add(displayPane, BorderLayout.WEST);, ,         JPanel savePane = new JPanel();,         savePane.add(saveGraph);,         saveGraph.addActionListener(this);,         syncWithName.addActionListener(this);,         buttonPanel.add(savePane, BorderLayout.EAST);, ,         return buttonPanel;,     }, ,     public String[] getXAxisLabels() {,         SimpleDateFormat formatter = new SimpleDateFormat(xAxisTimeFormat.getText()); //$NON-NLS-1$ ,         String[] xAxisLabels = new String[(int) durationTest]; // Test can't have a duration more than 2^31 secs (cast from long to int),         for (int j = 0; j < durationTest; j++) {,             xAxisLabels[j] = formatter.format(new Date((minStartTime + j) * intervalValue));,         },         return xAxisLabels;,     }, ,     private String[] getLegendLabels() {,         String[] legends = new String[seriesNames.size()];,         int i = 0;,         for (Map.Entry<String, RespTimeGraphLineBean> entry : seriesNames.entrySet()) {,             RespTimeGraphLineBean val = entry.getValue();,             legends[i] = val.getLabel();,             i++;,         },         return legends;,     }, ,     private Color[] getLinesColors() {,         Color[] linesColors = new Color[seriesNames.size()];,         int i = 0;,         for (Map.Entry<String, RespTimeGraphLineBean> entry : seriesNames.entrySet()) {,             RespTimeGraphLineBean val = entry.getValue();,             linesColors[i] = val.getLineColor();,             i++;,         },         return linesColors;,     }, ,     private int getIncrScaleYAxis() {,         int incrYAxisScale = 0;,         String iyas = incrScaleYAxis.getText();,         if (iyas.length() != 0) {,             incrYAxisScale = Integer.parseInt(iyas);,         },         return incrYAxisScale;,     }, ,     private JPanel createGraphSettingsPane() {,         JPanel settingsPane = new JPanel(new BorderLayout());,         settingsPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("graph_resp_time_settings_pane"))); // $NON-NLS-1$,         ,         JPanel intervalPane = new JPanel();,         intervalPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         intervalField.setText(String.valueOf(DEFAULT_INTERVAL));,         intervalPane.add(intervalField);,         ,         // Button,         intervalButton.setFont(FONT_SMALL);,         intervalButton.addActionListener(this);,         intervalPane.add(intervalButton);, ,         settingsPane.add(intervalPane, BorderLayout.NORTH);,         settingsPane.add(createGraphSelectionSubPane(), BorderLayout.SOUTH);, ,         return settingsPane;,     }, ,     private JPanel createGraphSelectionSubPane() {,         // Search field,         JPanel searchPanel = new JPanel();,         searchPanel.setLayout(new BoxLayout(searchPanel, BoxLayout.X_AXIS));,         searchPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 0));, ,         searchPanel.add(samplerSelection);,         samplerMatchLabel.setEnabled(false);,         applyFilterBtn.setEnabled(false);,         caseChkBox.setEnabled(false);,         regexpChkBox.setEnabled(false);,         samplerSelection.addActionListener(this);, ,         searchPanel.add(samplerMatchLabel);,         searchPanel.add(Box.createRigidArea(new Dimension(5,0)));, ,         // Button,         applyFilterBtn.setFont(FONT_SMALL);,         applyFilterBtn.addActionListener(this);,         searchPanel.add(applyFilterBtn);, ,         // checkboxes,         caseChkBox.setFont(FONT_SMALL);,         searchPanel.add(caseChkBox);,         regexpChkBox.setFont(FONT_SMALL);,         searchPanel.add(regexpChkBox);, ,         return searchPanel;,     }, ,     private JPanel createGraphTitlePane() {,         JPanel titleNamePane = new JPanel(new BorderLayout());,         syncWithName.setFont(FONT_SMALL);,         titleNamePane.add(graphTitle, BorderLayout.CENTER);,         titleNamePane.add(syncWithName, BorderLayout.EAST);, ,         JPanel titleStylePane = new JPanel();,         titleStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));,         titleStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_font"), //$NON-NLS-1$,                 titleFontNameList));,         titleFontNameList.setSelectedIndex(DEFAULT_TITLE_FONT_NAME);,         titleStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_size"), //$NON-NLS-1$,                 titleFontSizeList));,         titleFontSizeList.setSelectedItem(StatGraphProperties.fontSize[DEFAULT_TITLE_FONT_SIZE]);,         titleStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_style"), //$NON-NLS-1$,                 titleFontStyleList));,         titleFontStyleList.setSelectedIndex(DEFAULT_TITLE_FONT_STYLE);, ,         JPanel titlePane = new JPanel(new BorderLayout());,         titlePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_title_group"))); // $NON-NLS-1$,         titlePane.add(titleNamePane, BorderLayout.NORTH);,         titlePane.add(titleStylePane, BorderLayout.SOUTH);,         return titlePane;,     }, ,     private JPanel createLinePane() {       ,         JPanel lineStylePane = new JPanel();,         lineStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         lineStylePane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("graph_resp_time_settings_line"))); // $NON-NLS-1$,         lineStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("graph_resp_time_stroke_width"), //$NON-NLS-1$,                 strokeWidthList));,         strokeWidthList.setSelectedItem(StatGraphProperties.strokeWidth[DEFAULT_STROKE_WIDTH_LIST]);,         lineStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("graph_resp_time_shape_label"), //$NON-NLS-1$,                 pointShapeLine));,         pointShapeLine.setSelectedIndex(DEFAULT_LINE_SHAPE_POINT);,         return lineStylePane;,     }, ,     private JPanel createGraphDimensionPane() {,         JPanel dimensionPane = new JPanel();,         dimensionPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         dimensionPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_dimension"))); // $NON-NLS-1$, ,         dimensionPane.add(dynamicGraphSize);,         dynamicGraphSize.setSelected(DEFAULT_DYNAMIC_GRAPH_SIZE);,         graphWidth.setEnabled(false);,         graphHeight.setEnabled(false);,         dynamicGraphSize.addActionListener(this);,         dimensionPane.add(Box.createRigidArea(new Dimension(10,0)));,         dimensionPane.add(graphWidth);,         dimensionPane.add(Box.createRigidArea(new Dimension(5,0)));,         dimensionPane.add(graphHeight);,         return dimensionPane;,     }, ,     /**,      * Create pane for X Axis options,      * @return X Axis pane,      */,     private JPanel createGraphXAxisPane() {,         JPanel xAxisPane = new JPanel();,         xAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         xAxisPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_xaxis_group"))); // $NON-NLS-1$,         xAxisTimeFormat.setText(DEFAULT_XAXIS_TIME_FORMAT); // $NON-NLS-1$,         xAxisPane.add(xAxisTimeFormat);,         return xAxisPane;,     }, ,     /**,      * Create pane for Y Axis options,      * @return Y Axis pane,      */,     private JPanel createGraphYAxisPane() {,         JPanel yAxisPane = new JPanel();,         yAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         yAxisPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_yaxis_group"))); // $NON-NLS-1$,         yAxisPane.add(maxValueYAxisLabel);,         yAxisPane.add(incrScaleYAxis);,         yAxisPane.add(numberShowGrouping);,         return yAxisPane;,     }, ,     /**,      * Create pane for legend settings,      * @return Legend pane,      */,     private JPanel createLegendPane() {,         JPanel legendPanel = new JPanel();,         legendPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         legendPanel.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_legend"))); // $NON-NLS-1$, ,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_legend_placement"), //$NON-NLS-1$,                 legendPlacementList));,         legendPlacementList.setSelectedIndex(DEFAULT_LEGEND_PLACEMENT);,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_font"), //$NON-NLS-1$,                 fontNameList));,         fontNameList.setSelectedIndex(DEFAULT_LEGEND_FONT);,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_size"), //$NON-NLS-1$,                 fontSizeList));,         fontSizeList.setSelectedItem(StatGraphProperties.fontSize[DEFAULT_LEGEND_SIZE]);,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_style"), //$NON-NLS-1$,                 fontStyleList));,         fontStyleList.setSelectedIndex(DEFAULT_LEGEND_STYLE);, ,         return legendPanel;,     }, ,     /**,      * @param textToFind,      * @return pattern ready to search,      */,     private Pattern createPattern(String textToFind) {,         String textToFindQ = Pattern.quote(textToFind);,         if (regexpChkBox.isSelected()) {,             textToFindQ = textToFind;,         },         Pattern pattern = null;,         try {,             if (caseChkBox.isSelected()) {,                 pattern = Pattern.compile(textToFindQ);,             } else {,                 pattern = Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);,             },         } catch (PatternSyntaxException pse) {,             return null;,         },         return pattern;,     },     ,     private void enableDynamicGraph(boolean enable) {,         // if use dynamic graph size is checked, we disable the dimension fields,         if (enable) {,             graphWidth.setEnabled(false);,             graphHeight.setEnabled(false);,         } else {,             graphWidth.setEnabled(true);,             graphHeight.setEnabled(true);,         },     }, ,     private void enableSamplerSelection(boolean enable) {,         if (enable) {,             samplerMatchLabel.setEnabled(true);,             applyFilterBtn.setEnabled(true);,             caseChkBox.setEnabled(true);,             regexpChkBox.setEnabled(true);,         } else {,             samplerMatchLabel.setEnabled(false);,             applyFilterBtn.setEnabled(false);,             caseChkBox.setEnabled(false);,             regexpChkBox.setEnabled(false);,         },     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/RespTimeGraphDataBean.java,,45-91,[        super();,         this.startTime = startTime;,         this.time = time;,         this.samplerLabel = samplerLabel;,     }, ,     /**,      * @return the startTime,      */,     public long getStartTime() {,         return startTime;,     }, ,     /**,      * @param startTime the startTime to set,      */,     public void setStartTime(long startTime) {,         this.startTime = startTime;,     }, ,     /**,      * @return the time,      */,     public long getTime() {,         return time;,     }, ,     /**,      * @param time the time to set,      */,     public void setTime(long time) {,         this.time = time;,     }, ,     /**,      * @return the samplerLabel,      */,     public String getSamplerLabel() {,         return samplerLabel;,     }, ,     /**,      * @param samplerLabel the samplerLabel to set,      */,     public void setSamplerLabel(String samplerLabel) {,         this.samplerLabel = samplerLabel;,     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jorphan/math/StatCalculatorLong.java,,24-56,[public class StatCalculatorLong extends StatCalculator<Long> {, ,     public StatCalculatorLong() {,         super(Long.valueOf(0L), Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE));,     }, ,     /**,      * Add a single value (normally elapsed time),      * ,      * @param val the value to add, which should correspond with a single sample,      */,     public void addValue(long val){,         super.addValue(Long.valueOf(val));,     }, ,     /**,      * Update the calculator with the value for an aggregated sample.,      * ,      * @param val the aggregate value, normally the elapsed time,      * @param sampleCount the number of samples contributing to the aggregate value,      */,     public void addValue(long val, int sampleCount){,         super.addValue(Long.valueOf(val), sampleCount);,     }, ,     @Override,     protected Long divide(Long val, int n) {,         return Long.valueOf(val.longValue() / n);,     }, ,     @Override,     protected Long divide(Long val, long n) {,         return Long.valueOf(val.longValue() / n);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/RespTimeGraphLineBean.java,,38-69,[        super();,         this.label = label;,         this.lineColor = lineColor;,     }, ,     /**,      * @return the label,      */,     public String getLabel() {,         return label;,     }, ,     /**,      * @param label the label to set,      */,     public void setLabel(String label) {,         this.label = label;,     }, ,     /**,      * @return the lineColor,      */,     public Color getLineColor() {,         return lineColor;,     }, ,     /**,      * @param lineColor the lineColor to set,      */,     public void setLineColor(Color lineColor) {,         this.lineColor = lineColor;,     }],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/jmeter/visualizers/SamplerResultTab.java,setupTabPane,285-285,[                statsBuff = null; // Done],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/SamplerResultTab.java,init,205-205,[        rightSide.addTab(JMeterUtils.getResString("view_results_tab_sampler"), createResponseMetadataPanel()); // $NON-NLS-1$],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/SamplerResultTab.java,setupTabPaneForAssertionResult,366-366,[        rightSide.setTitleAt(0, JMeterUtils.getResString("view_results_tab_assertion")); //$NON-NLS-1$],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/SamplerResultTab.java,setupTabPaneForSampleResult,342-342,[        rightSide.setTitleAt(0, JMeterUtils.getResString("view_results_tab_sampler")); //$NON-NLS-1$],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/visualizers/SearchTextExtension.java,executeAndShowTextFind,131-131,[                if ((matcher != null) && (matcher.find())) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/SearchTextExtension.java,resetTextToFind,276-276,[            results.setCaretPosition(0);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/SearchTextExtension.java,executeAndShowTextFind,132-132,[                    selection.removeAllHighlights();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/SearchTextExtension.java,resetTextToFind,275-275,[            selection.removeAllHighlights();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/jmeter/visualizers/ServerPanel.java,getHealthyImageIcon,137-148,[        switch (health) {,         case Stats.HEALTHY:,             i = HEALTHY;,             break;,         case Stats.ACTIVE:,             i = ACTIVE;,             break;,         case Stats.WARNING:,             i = WARNING;,             break;,         case Stats.DEAD:,             i = DEAD;],,
STYLE,FE_FLOATING_POINT_EQUALITY,org/apache/jmeter/visualizers/Spline3.java,value,341-341,[        if (t == (_m - 1)) {],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/jmeter/visualizers/SplineModel.java,add,116-116,[        if ((n % (numberOfNodes * refreshPeriod)) == 0) {],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/jmeter/visualizers/SplineModel.java,,29-29,[    protected final boolean SHOW_INCOMING_SAMPLES = true;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/jmeter/visualizers/SplineVisualizer.java,,65-65,[    protected final boolean FILL_UP_WITH_ZEROS = false;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/jmeter/visualizers/SplineVisualizer.java,,63-63,[    protected final int NUMBERS_TO_DISPLAY = 4;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/jmeter/visualizers/StatGraphProperties.java,,33-33,[    public static final String[] fontSize = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "24", "28", "32"};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/jmeter/visualizers/StatGraphProperties.java,,35-35,[    public static final String[] strokeWidth = { "1.0f", "1.5f", "2.0f", "2.5f", "3.0f", "3.5f", "4.0f", "4.5f", "5.0f", "5.5f", "6.0f", "6.5f"};],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/visualizers/StatGraphVisualizer.java,actionPerformed,640-640,[                writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/jmeter/visualizers/StatGraphVisualizer.java,<clinit>,103-103,[    private static final Float pct1Value = new Float(Float.parseFloat(pct1Label)/100);],,<clinit>,104-104,[    private static final Float pct2Value =  new Float(Float.parseFloat(pct2Label)/100);],,<clinit>,105-105,[    private static final Float pct3Value =  new Float(Float.parseFloat(pct3Label)/100);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jmeter/visualizers/StatGraphVisualizer.java,getAxisLabels,553-553,[        return null;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/StatGraphVisualizer.java,,96-978,[public class StatGraphVisualizer extends AbstractVisualizer implements Clearable, ActionListener {,     private static final long serialVersionUID = 240L;, ,     private static final String pct1Label = JMeterUtils.getPropDefault("aggregate_rpt_pct1", "90");,     private static final String pct2Label = JMeterUtils.getPropDefault("aggregate_rpt_pct2", "95");,     private static final String pct3Label = JMeterUtils.getPropDefault("aggregate_rpt_pct3", "99");,     ,     private static final Float pct1Value = new Float(Float.parseFloat(pct1Label)/100);,     private static final Float pct2Value =  new Float(Float.parseFloat(pct2Label)/100);,     private static final Float pct3Value =  new Float(Float.parseFloat(pct3Label)/100);, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     static final String[] COLUMNS = { ,             "sampler_label",                  //$NON-NLS-1$,             "aggregate_report_count",         //$NON-NLS-1$,             "average",                        //$NON-NLS-1$,             "aggregate_report_median",        //$NON-NLS-1$,             "aggregate_report_xx_pct1_line",      //$NON-NLS-1$,             "aggregate_report_xx_pct2_line",      //$NON-NLS-1$,             "aggregate_report_xx_pct3_line",      //$NON-NLS-1$,             "aggregate_report_min",           //$NON-NLS-1$,             "aggregate_report_max",           //$NON-NLS-1$,             "aggregate_report_error%",        //$NON-NLS-1$,             "aggregate_report_rate",          //$NON-NLS-1$,             "aggregate_report_bandwidth" };   //$NON-NLS-1$,     ,     static final Object[][] COLUMNS_MSG_PARAMETERS = { null, //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             new Object[]{pct1Label},                      //$NON-NLS-1$,             new Object[]{pct2Label},                      //$NON-NLS-1$,             new Object[]{pct3Label},                      //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             null,                             //$NON-NLS-1$,             null };                           //$NON-NLS-1$, ,     private final String[] GRAPH_COLUMNS = {"average",//$NON-NLS-1$,             "aggregate_report_median",        //$NON-NLS-1$,             "aggregate_report_xx_pct1_line",      //$NON-NLS-1$,             "aggregate_report_xx_pct2_line",      //$NON-NLS-1$,             "aggregate_report_xx_pct3_line",      //$NON-NLS-1$,             "aggregate_report_min",           //$NON-NLS-1$,             "aggregate_report_max"};          //$NON-NLS-1$, ,     private final String TOTAL_ROW_LABEL =,         JMeterUtils.getResString("aggregate_report_total_label");       //$NON-NLS-1$, ,     private Font FONT_SMALL = new Font("SansSerif", Font.PLAIN, 10); // $NON-NLS-1$, ,     private JTable myJTable;, ,     private JScrollPane myScrollPane;, ,     private transient ObjectTableModel model;, ,     /**,      * Lock used to protect tableRows update + model update,      */,     private final transient Object lock = new Object();,     ,     private final Map<String, SamplingStatCalculator> tableRows = new ConcurrentHashMap<>();, ,     private AxisGraph graphPanel = null;, ,     private JPanel settingsPane = null;, ,     private JSplitPane spane = null;, ,     //NOT USED protected double[][] data = null;, ,     private JTabbedPane tabbedGraph = new JTabbedPane(SwingConstants.TOP);, ,     private JButton displayButton =,         new JButton(JMeterUtils.getResString("aggregate_graph_display"));                //$NON-NLS-1$, ,     private JButton saveGraph =,         new JButton(JMeterUtils.getResString("aggregate_graph_save"));                    //$NON-NLS-1$, ,     private JButton saveTable =,         new JButton(JMeterUtils.getResString("aggregate_graph_save_table"));            //$NON-NLS-1$, ,     private JButton chooseForeColor =,         new JButton(JMeterUtils.getResString("aggregate_graph_choose_foreground_color"));            //$NON-NLS-1$, ,     private JButton syncWithName =,         new JButton(JMeterUtils.getResString("aggregate_graph_sync_with_name"));            //$NON-NLS-1$, ,     private JCheckBox saveHeaders = // should header be saved with the data?,         new JCheckBox(JMeterUtils.getResString("aggregate_graph_save_table_header"));    //$NON-NLS-1$, ,     private JLabeledTextField graphTitle =,         new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_user_title"));    //$NON-NLS-1$, ,     private JLabeledTextField maxLengthXAxisLabel =,         new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_max_length_xaxis_label"), 8);//$NON-NLS-1$, ,     private JLabeledTextField maxValueYAxisLabel =,         new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_yaxis_max_value"), 8);//$NON-NLS-1$, ,     /**,      * checkbox for use dynamic graph size,      */,     private JCheckBox dynamicGraphSize = new JCheckBox(JMeterUtils.getResString("aggregate_graph_dynamic_size")); // $NON-NLS-1$, ,     private JLabeledTextField graphWidth =,         new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_width"), 6);        //$NON-NLS-1$,     private JLabeledTextField graphHeight =,         new JLabeledTextField(JMeterUtils.getResString("aggregate_graph_height"), 6);        //$NON-NLS-1$, ,     private String yAxisLabel = JMeterUtils.getResString("aggregate_graph_response_time");//$NON-NLS-1$, ,     private String yAxisTitle = JMeterUtils.getResString("aggregate_graph_ms");        //$NON-NLS-1$, ,     private boolean saveGraphToFile = false;, ,     private int defaultWidth = 400;, ,     private int defaultHeight = 300;, ,     private JComboBox<String> columnsList = new JComboBox<>(GRAPH_COLUMNS);, ,     private List<BarGraph> eltList = new ArrayList<>();, ,     private JCheckBox columnSelection = new JCheckBox(JMeterUtils.getResString("aggregate_graph_column_selection"), false); //$NON-NLS-1$, ,     private JTextField columnMatchLabel = new JTextField();, ,     private JButton applyFilterBtn = new JButton(JMeterUtils.getResString("graph_apply_filter")); // $NON-NLS-1$, ,     private JCheckBox caseChkBox = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_case"), false); // $NON-NLS-1$, ,     private JCheckBox regexpChkBox = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_regexp"), true); // $NON-NLS-1$, ,     private JComboBox<String> titleFontNameList = new JComboBox<>(StatGraphProperties.getFontNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JComboBox<String> titleFontSizeList = new JComboBox<>(StatGraphProperties.fontSize);, ,     private JComboBox<String> titleFontStyleList = new JComboBox<>(StatGraphProperties.getFontStyleMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JComboBox<String> valueFontNameList = new JComboBox<>(StatGraphProperties.getFontNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JComboBox<String> valueFontSizeList = new JComboBox<>(StatGraphProperties.fontSize);, ,     private JComboBox<String> valueFontStyleList = new JComboBox<>(StatGraphProperties.getFontStyleMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JComboBox<String> fontNameList = new JComboBox<>(StatGraphProperties.getFontNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JComboBox<String> fontSizeList = new JComboBox<>(StatGraphProperties.fontSize);, ,     private JComboBox<String> fontStyleList = new JComboBox<>(StatGraphProperties.getFontStyleMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JComboBox<String> legendPlacementList = new JComboBox<>(StatGraphProperties.getPlacementNameMap().keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY));, ,     private JCheckBox drawOutlinesBar = new JCheckBox(JMeterUtils.getResString("aggregate_graph_draw_outlines"), true); // Default checked // $NON-NLS-1$, ,     private JCheckBox numberShowGrouping = new JCheckBox(JMeterUtils.getResString("aggregate_graph_number_grouping"), true); // Default checked // $NON-NLS-1$,     ,     private JCheckBox valueLabelsVertical = new JCheckBox(JMeterUtils.getResString("aggregate_graph_value_labels_vertical"), true); // Default checked // $NON-NLS-1$, ,     private Color colorBarGraph = Color.YELLOW;, ,     private Color colorForeGraph = Color.BLACK;,     ,     private int nbColToGraph = 1;, ,     private Pattern pattern = null;, ,     private transient Matcher matcher = null;, ,     public StatGraphVisualizer() {,         super();,         model = createObjectTableModel();,         eltList.add(new BarGraph(JMeterUtils.getResString("average"), true, new Color(202, 0, 0)));,         eltList.add(new BarGraph(JMeterUtils.getResString("aggregate_report_median"), false, new Color(49, 49, 181)));,         eltList.add(new BarGraph(MessageFormat.format(JMeterUtils.getResString("aggregate_report_xx_pct1_line"),new Object[]{pct1Label}), false, new Color(42, 121, 42)));,         eltList.add(new BarGraph(MessageFormat.format(JMeterUtils.getResString("aggregate_report_xx_pct2_line"),new Object[]{pct2Label}), false, new Color(242, 226, 8)));,         eltList.add(new BarGraph(MessageFormat.format(JMeterUtils.getResString("aggregate_report_xx_pct3_line"),new Object[]{pct3Label}), false, new Color(202, 10 , 232)));,         eltList.add(new BarGraph(JMeterUtils.getResString("aggregate_report_min"), false, Color.LIGHT_GRAY));,         eltList.add(new BarGraph(JMeterUtils.getResString("aggregate_report_max"), false, Color.DARK_GRAY));,         clearData();,         init();,     }, ,     /**,      * Creates that Table model ,      * @return ObjectTableModel,      */,     static ObjectTableModel createObjectTableModel() {,         return new ObjectTableModel(COLUMNS,,                 SamplingStatCalculator.class,,                 new Functor[] {,                 new Functor("getLabel"),                    //$NON-NLS-1$,                 new Functor("getCount"),                    //$NON-NLS-1$,                 new Functor("getMeanAsNumber"),                //$NON-NLS-1$,                 new Functor("getMedian"),                    //$NON-NLS-1$,                 new Functor("getPercentPoint",                //$NON-NLS-1$,                         new Object[] { pct1Value }),,                 new Functor("getPercentPoint",                //$NON-NLS-1$,                         new Object[] { pct2Value }),,                 new Functor("getPercentPoint",                //$NON-NLS-1$,                         new Object[] { pct3Value }),,                 new Functor("getMin"),                        //$NON-NLS-1$,                 new Functor("getMax"),                         //$NON-NLS-1$,                 new Functor("getErrorPercentage"),            //$NON-NLS-1$,                 new Functor("getRate"),                        //$NON-NLS-1$,                 new Functor("getKBPerSecond") },            //$NON-NLS-1$,                 new Functor[] { null, null, null, null, null, null, null, null, null, null, null, null },,                 new Class[] { String.class, Long.class, Long.class, Long.class, Long.class, ,                             Long.class, Long.class, Long.class, Long.class, String.class, ,                             String.class, String.class });,     }, ,     // Column formats,     static final Format[] FORMATS =,         new Format[]{,             null, // Label,             null, // count,             null, // Mean,             null, // median,             null, // 90%,             null, // 95%,             null, // 99%,             null, // Min,             null, // Max,             new DecimalFormat("#0.00%"), // Error %age //$NON-NLS-1$,             new DecimalFormat("#.0"),      // Throughput //$NON-NLS-1$,             new DecimalFormat("#.0")    // pageSize   //$NON-NLS-1$,         };,     ,     // Column renderers,     static final TableCellRenderer[] RENDERERS =,         new TableCellRenderer[]{,             null, // Label,             null, // count,             null, // Mean,             null, // median,             null, // 90%,             null, // 95%,             null, // 99%,             null, // Min,             null, // Max,             new NumberRenderer("#0.00%"), // Error %age //$NON-NLS-1$,             new RateRenderer("#.0"),      // Throughput //$NON-NLS-1$,             new NumberRenderer("#.0"),    // pageSize   //$NON-NLS-1$,         };, ,     public static boolean testFunctors(){,         StatGraphVisualizer instance = new StatGraphVisualizer();,         return instance.model.checkFunctors(null,instance.getClass());,     }, ,     @Override,     public String getLabelResource() {,         return "aggregate_graph_title";                        //$NON-NLS-1$,     }, ,     @Override,     public void add(final SampleResult res) {,         final String sampleLabel = res.getSampleLabel();,         // Sampler selection,         if (columnSelection.isSelected() && pattern != null) {,             matcher = pattern.matcher(sampleLabel);,         },         if ((matcher == null) || (matcher.find())) {,             JMeterUtils.runSafe(new Runnable() {,                 @Override,                 public void run() {,                     SamplingStatCalculator row = null;,                     synchronized (lock) {,                         row = tableRows.get(sampleLabel);,                         if (row == null) {,                             row = new SamplingStatCalculator(sampleLabel);,                             tableRows.put(row.getLabel(), row);,                             model.insertRow(row, model.getRowCount() - 1);,                         },                     },                     row.addSample(res);,                     tableRows.get(TOTAL_ROW_LABEL).addSample(res);,                     model.fireTableDataChanged();                    ,                 },             });,         },     }, ,     /**,      * Clears this visualizer and its model, and forces a repaint of the table.,      */,     @Override,     public void clearData() {,         synchronized (lock) {,             model.clearData();,             tableRows.clear();,             tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));,             model.addRow(tableRows.get(TOTAL_ROW_LABEL));,         },     }, ,     /**,      * Main visualizer setup.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         JPanel mainPanel = new JPanel();,         Border margin = new EmptyBorder(10, 10, 5, 10);,         Border margin2 = new EmptyBorder(10, 10, 5, 10);, ,         mainPanel.setBorder(margin);,         mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));,         mainPanel.add(makeTitlePanel());, ,         myJTable = new JTable(model);,         // Fix centering of titles,         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(COLUMNS_MSG_PARAMETERS));,         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));,         RendererUtils.applyRenderers(myJTable, RENDERERS);,         myScrollPane = new JScrollPane(myJTable);, ,         settingsPane = new VerticalPanel();,         settingsPane.setBorder(margin2);, ,         graphPanel = new AxisGraph();,         graphPanel.setPreferredSize(new Dimension(defaultWidth, defaultHeight));, ,         settingsPane.add(createGraphActionsPane());,         settingsPane.add(createGraphColumnPane());,         settingsPane.add(createGraphTitlePane());,         settingsPane.add(createGraphDimensionPane());,         JPanel axisPane = new JPanel(new BorderLayout());,         axisPane.add(createGraphXAxisPane(), BorderLayout.WEST);,         axisPane.add(createGraphYAxisPane(), BorderLayout.CENTER);,         settingsPane.add(axisPane);,         settingsPane.add(createLegendPane());, ,         tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_settings"), settingsPane); //$NON-NLS-1$,         tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_graph"), graphPanel); //$NON-NLS-1$, ,         // If clic on the Graph tab, make the graph (without apply interval or filter),         ChangeListener changeListener = new ChangeListener() {,             @Override,             public void stateChanged(ChangeEvent changeEvent) {,                 JTabbedPane srcTab = (JTabbedPane) changeEvent.getSource();,                 int index = srcTab.getSelectedIndex();,                 if (srcTab.getTitleAt(index).equals(JMeterUtils.getResString("aggregate_graph_tab_graph"))) { //$NON-NLS-1$,                     actionMakeGraph();,                 },             },         };,         tabbedGraph.addChangeListener(changeListener);, ,         spane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);,         spane.setLeftComponent(myScrollPane);,         spane.setRightComponent(tabbedGraph);,         spane.setResizeWeight(.2);,         spane.setBorder(null); // see bug jdk 4131528,         spane.setContinuousLayout(true);, ,         this.add(mainPanel, BorderLayout.NORTH);,         this.add(spane, BorderLayout.CENTER);,     }, ,     public void makeGraph() {,         nbColToGraph = getNbColumns();,         Dimension size = graphPanel.getSize();,         String lstr = maxLengthXAxisLabel.getText();,         // canvas size,         int width = (int) size.getWidth();,         int height = (int) size.getHeight();,         if (!dynamicGraphSize.isSelected()) {,             String wstr = graphWidth.getText();,             String hstr = graphHeight.getText();,             if (wstr.length() != 0) {,                 width = Integer.parseInt(wstr);,             },             if (hstr.length() != 0) {,                 height = Integer.parseInt(hstr);,             },         }, ,         if (lstr.length() == 0) {,             lstr = "20";//$NON-NLS-1$,         },         int maxLength = Integer.parseInt(lstr);,         String yAxisStr = maxValueYAxisLabel.getText();,         int maxYAxisScale = yAxisStr.length() == 0 ? 0 : Integer.parseInt(yAxisStr);, ,         graphPanel.setData(this.getData());,         graphPanel.setTitle(graphTitle.getText());,         graphPanel.setMaxLength(maxLength);,         graphPanel.setMaxYAxisScale(maxYAxisScale);,         graphPanel.setXAxisLabels(getAxisLabels());,         graphPanel.setXAxisTitle(JMeterUtils.getResString((String) columnsList.getSelectedItem()));,         graphPanel.setYAxisLabels(this.yAxisLabel);,         graphPanel.setYAxisTitle(this.yAxisTitle);,         graphPanel.setLegendLabels(getLegendLabels());,         graphPanel.setColor(getBackColors());,         graphPanel.setForeColor(colorForeGraph);,         graphPanel.setOutlinesBarFlag(drawOutlinesBar.isSelected());,         graphPanel.setShowGrouping(numberShowGrouping.isSelected());,         graphPanel.setValueOrientation(valueLabelsVertical.isSelected());,         graphPanel.setLegendPlacement(StatGraphProperties.getPlacementNameMap(),                 .get(legendPlacementList.getSelectedItem()).intValue());, ,         graphPanel.setTitleFont(new Font(StatGraphProperties.getFontNameMap().get(titleFontNameList.getSelectedItem()),,                 StatGraphProperties.getFontStyleMap().get(titleFontStyleList.getSelectedItem()).intValue(),,                 Integer.parseInt((String) titleFontSizeList.getSelectedItem())));,         graphPanel.setLegendFont(new Font(StatGraphProperties.getFontNameMap().get(fontNameList.getSelectedItem()),,                 StatGraphProperties.getFontStyleMap().get(fontStyleList.getSelectedItem()).intValue(),,                 Integer.parseInt((String) fontSizeList.getSelectedItem())));,         graphPanel.setValueFont(new Font(StatGraphProperties.getFontNameMap().get(valueFontNameList.getSelectedItem()),,                 StatGraphProperties.getFontStyleMap().get(valueFontStyleList.getSelectedItem()).intValue(),,                 Integer.parseInt((String) valueFontSizeList.getSelectedItem())));, ,         graphPanel.setHeight(height);,         graphPanel.setWidth(width);,         spane.repaint();,     }, ,     public double[][] getData() {,         if (model.getRowCount() > 1) {,             int count = model.getRowCount() -1;,             ,             int size = nbColToGraph;,             double[][] data = new double[size][count];,             int s = 0;,             int cpt = 0;,             for (BarGraph bar : eltList) {,                 if (bar.getChkBox().isSelected()) {,                     int col = model.findColumn(columnsList.getItemAt(cpt));,                     for (int idx=0; idx < count; idx++) {,                         data[s][idx] = ((Number)model.getValueAt(idx,col)).doubleValue();,                     },                     s++;,                 },                 cpt++;,             },             return data;,         },         // API expects null, not empty array,         return null;,     }, ,     public String[] getAxisLabels() {,         if (model.getRowCount() > 1) {,             int count = model.getRowCount() -1;,             String[] labels = new String[count];,             for (int idx=0; idx < count; idx++) {,                 labels[idx] = (String)model.getValueAt(idx,0);,             },             return labels;,         },         // API expects null, not empty array,         return null;,     }, ,     private String[] getLegendLabels() {,         String[] legends = new String[nbColToGraph];,         int i = 0;,         for (BarGraph bar : eltList) {,             if (bar.getChkBox().isSelected()) {,                 legends[i] = bar.getLabel();,                 i++;,             },         },         return legends;,     }, ,     private Color[] getBackColors() {,         Color[] backColors = new Color[nbColToGraph];,         int i = 0;,         for (BarGraph bar : eltList) {,             if (bar.getChkBox().isSelected()) {,                 backColors[i] = bar.getBackColor();,                 i++;,             },         },         return backColors;,     }, ,     private int getNbColumns() {,         int i = 0;,         for (BarGraph bar : eltList) {,             if (bar.getChkBox().isSelected()) {,                 i++;,             },         },         return i;,     },     ,     /**,      * We use this method to get the data, since we are using,      * ObjectTableModel, so the calling getDataVector doesn't,      * work as expected.,      * @param model {@link ObjectTableModel},      * @param formats Array of {@link Format} array can contain null formatters in this case value is added as is,      * @return the data from the model,      */,     public static List<List<Object>> getAllTableData(ObjectTableModel model, Format[] formats) {,         List<List<Object>> data = new ArrayList<>();,         if (model.getRowCount() > 0) {,             for (int rw=0; rw < model.getRowCount(); rw++) {,                 int cols = model.getColumnCount();,                 List<Object> column = new ArrayList<>();,                 data.add(column);,                 for (int idx=0; idx < cols; idx++) {,                     Object val = model.getValueAt(rw,idx);,                     if(formats[idx] != null) {,                         column.add(formats[idx].format(val));,                     } else {,                         column.add(val);,                     },                 },             },         },         return data;,     }, ,     @Override,     public void actionPerformed(ActionEvent event) {,         boolean forceReloadData = false;,         final Object eventSource = event.getSource();,         if (eventSource == displayButton) {,             actionMakeGraph();,         } else if (eventSource == saveGraph) {,             saveGraphToFile = true;,             try {,                 ActionRouter.getInstance().getAction(,                         ActionNames.SAVE_GRAPHICS,SaveGraphics.class.getName()).doAction(,                                 new ActionEvent(this,event.getID(),ActionNames.SAVE_GRAPHICS));,             } catch (Exception e) {,                 log.error(e.getMessage());,             },         } else if (eventSource == saveTable) {,             JFileChooser chooser = FileDialoger.promptToSaveFile("statistics.csv");    //$NON-NLS-1$,             if (chooser == null) {,                 return;,             },             FileWriter writer = null;,             try {,                 writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?,                 CSVSaveService.saveCSVStats(getAllTableData(model, FORMATS),writer,saveHeaders.isSelected() ? getLabels(COLUMNS) : null);,             } catch (IOException e) {,                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");,             } finally {,                 JOrphanUtils.closeQuietly(writer);,             },         } else if (eventSource == chooseForeColor) {,             Color color = JColorChooser.showDialog(,                     null,,                     JMeterUtils.getResString("aggregate_graph_choose_color"), //$NON-NLS-1$,                     colorBarGraph);,             if (color != null) {,                 colorForeGraph = color;,             },         } else if (eventSource == syncWithName) {,             graphTitle.setText(namePanel.getName());,         } else if (eventSource == dynamicGraphSize) {,             // if use dynamic graph size is checked, we disable the dimension fields,             if (dynamicGraphSize.isSelected()) {,                 graphWidth.setEnabled(false);,                 graphHeight.setEnabled(false);,             } else {,                 graphWidth.setEnabled(true);,                 graphHeight.setEnabled(true);,             },         } else if (eventSource == columnSelection) {,             if (columnSelection.isSelected()) {,                 columnMatchLabel.setEnabled(true);,                 applyFilterBtn.setEnabled(true);,                 caseChkBox.setEnabled(true);,                 regexpChkBox.setEnabled(true);,             } else {,                 columnMatchLabel.setEnabled(false);,                 applyFilterBtn.setEnabled(false);,                 caseChkBox.setEnabled(false);,                 regexpChkBox.setEnabled(false);,                 // Force reload data,                 forceReloadData = true;,             },         },         // Not 'else if' because forceReloadData ,         if (eventSource == applyFilterBtn || forceReloadData) {,             if (columnSelection.isSelected() && columnMatchLabel.getText() != null,                     && columnMatchLabel.getText().length() > 0) {,                 pattern = createPattern(columnMatchLabel.getText());,             } else if (forceReloadData) {,                 pattern = null;,                 matcher = null;,             },             if (getFile() != null && getFile().length() > 0) {,                 clearData();,                 FilePanel filePanel = (FilePanel) getFilePanel();,                 filePanel.actionPerformed(event);,             },         } else if (eventSource instanceof JButton) {,             // Changing color for column,             JButton btn = ((JButton) eventSource);,             if (btn.getName() != null) {,                 try {,                     BarGraph bar = eltList.get(Integer.parseInt(btn.getName()));,                     Color color = JColorChooser.showDialog(null, bar.getLabel(), bar.getBackColor());,                     if (color != null) {,                         bar.setBackColor(color);,                         btn.setBackground(bar.getBackColor());,                     },                 } catch (NumberFormatException nfe) { } // nothing to do,             },         },     }, ,     /**,      * ,      * @param keys I18N keys,      * @return labels,      */,     static String[] getLabels(String[] keys) {,         String[] labels = new String[keys.length];,         for (int i = 0; i < labels.length; i++) {,             labels[i]=MessageFormat.format(JMeterUtils.getResString(keys[i]), COLUMNS_MSG_PARAMETERS[i]);,         },         return labels;,     }, ,     private void actionMakeGraph() {,         if (model.getRowCount() > 1) {,             makeGraph();,             tabbedGraph.setSelectedIndex(1);,         } else {,             JOptionPane.showMessageDialog(null, JMeterUtils,                     .getResString("aggregate_graph_no_values_to_graph"), // $NON-NLS-1$,                     JMeterUtils.getResString("aggregate_graph_no_values_to_graph"), // $NON-NLS-1$,                     JOptionPane.WARNING_MESSAGE);,         },     },     @Override,     public JComponent getPrintableComponent() {,         if (saveGraphToFile == true) {,             saveGraphToFile = false;,             graphPanel.setBounds(graphPanel.getLocation().x,graphPanel.getLocation().y,,                     graphPanel.width,graphPanel.height);,             return graphPanel;,         },         return this;,     }, ,     private JPanel createGraphActionsPane() {,         JPanel buttonPanel = new JPanel(new BorderLayout());,         JPanel displayPane = new JPanel();,         displayPane.add(displayButton);,         displayButton.addActionListener(this);,         buttonPanel.add(displayPane, BorderLayout.WEST);, ,         JPanel savePane = new JPanel();,         savePane.add(saveGraph);,         savePane.add(saveTable);,         savePane.add(saveHeaders);,         saveGraph.addActionListener(this);,         saveTable.addActionListener(this);,         syncWithName.addActionListener(this);,         buttonPanel.add(savePane, BorderLayout.EAST);, ,         return buttonPanel;,     }, ,     private JPanel createGraphColumnPane() {,         JPanel colPanel = new JPanel();,         colPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));, ,         JLabel label = new JLabel(JMeterUtils.getResString("aggregate_graph_columns_to_display")); //$NON-NLS-1$,         colPanel.add(label);,         for (BarGraph bar : eltList) {,             colPanel.add(bar.getChkBox());,             colPanel.add(createColorBarButton(bar, eltList.indexOf(bar)));,         },         colPanel.add(Box.createRigidArea(new Dimension(5,0)));,         chooseForeColor.setFont(FONT_SMALL);,         colPanel.add(chooseForeColor);,         chooseForeColor.addActionListener(this);, ,         JPanel optionsPanel = new JPanel();,         optionsPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         optionsPanel.add(createGraphFontValuePane());,         optionsPanel.add(drawOutlinesBar);,         optionsPanel.add(numberShowGrouping);,         optionsPanel.add(valueLabelsVertical);,         ,         JPanel barPane = new JPanel(new BorderLayout());,         barPane.add(colPanel, BorderLayout.NORTH);,         barPane.add(Box.createRigidArea(new Dimension(0,3)), BorderLayout.CENTER);,         barPane.add(optionsPanel, BorderLayout.SOUTH);, ,         JPanel columnPane = new JPanel(new BorderLayout());,         columnPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_column_settings"))); // $NON-NLS-1$,         columnPane.add(barPane, BorderLayout.NORTH);,         columnPane.add(Box.createRigidArea(new Dimension(0,3)), BorderLayout.CENTER);,         columnPane.add(createGraphSelectionSubPane(), BorderLayout.SOUTH);,         ,         return columnPane;,     }, ,     private JButton createColorBarButton(BarGraph barGraph, int index) {,         // Button,         JButton colorBtn = new JButton();,         colorBtn.setName(String.valueOf(index));,         colorBtn.setFont(FONT_SMALL);,         colorBtn.addActionListener(this);,         colorBtn.setBackground(barGraph.getBackColor());,         return colorBtn;,     }, ,     private JPanel createGraphSelectionSubPane() {,         Font font = new Font("SansSerif", Font.PLAIN, 10);,         // Search field,         JPanel searchPanel = new JPanel();,         searchPanel.setLayout(new BoxLayout(searchPanel, BoxLayout.X_AXIS));,         searchPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 0));, ,         searchPanel.add(columnSelection);,         columnMatchLabel.setEnabled(false);,         applyFilterBtn.setEnabled(false);,         caseChkBox.setEnabled(false);,         regexpChkBox.setEnabled(false);,         columnSelection.addActionListener(this);, ,         searchPanel.add(columnMatchLabel);,         searchPanel.add(Box.createRigidArea(new Dimension(5,0)));, ,         // Button,         applyFilterBtn.setFont(font);,         applyFilterBtn.addActionListener(this);,         searchPanel.add(applyFilterBtn);, ,         // checkboxes,         caseChkBox.setFont(font);,         searchPanel.add(caseChkBox);,         regexpChkBox.setFont(font);,         searchPanel.add(regexpChkBox);, ,         return searchPanel;,     }, ,     private JPanel createGraphTitlePane() {,         JPanel titleNamePane = new JPanel(new BorderLayout());,         syncWithName.setFont(new Font("SansSerif", Font.PLAIN, 10));,         titleNamePane.add(graphTitle, BorderLayout.CENTER);,         titleNamePane.add(syncWithName, BorderLayout.EAST);,         ,         JPanel titleStylePane = new JPanel();,         titleStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));,         titleStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_font"), //$NON-NLS-1$,                 titleFontNameList));,         titleFontNameList.setSelectedIndex(0); // default: sans serif,         titleStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_size"), //$NON-NLS-1$,                 titleFontSizeList));,         titleFontSizeList.setSelectedItem(StatGraphProperties.fontSize[6]); // default: 16,         titleStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_style"), //$NON-NLS-1$,                 titleFontStyleList));,         titleFontStyleList.setSelectedItem(JMeterUtils.getResString("fontstyle.bold"));  // $NON-NLS-1$ // default: bold, ,         JPanel titlePane = new JPanel(new BorderLayout());,         titlePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_title_group"))); // $NON-NLS-1$,         titlePane.add(titleNamePane, BorderLayout.NORTH);,         titlePane.add(titleStylePane, BorderLayout.SOUTH);,         return titlePane;,     }, ,     private JPanel createGraphFontValuePane() {       ,         JPanel fontValueStylePane = new JPanel();,         fontValueStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         fontValueStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_value_font"), //$NON-NLS-1$,                 valueFontNameList));,         valueFontNameList.setSelectedIndex(0); // default: sans serif,         fontValueStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_size"), //$NON-NLS-1$,                 valueFontSizeList));,         valueFontSizeList.setSelectedItem(StatGraphProperties.fontSize[2]); // default: 10,         fontValueStylePane.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_style"), //$NON-NLS-1$,                 valueFontStyleList));,         valueFontStyleList.setSelectedItem(JMeterUtils.getResString("fontstyle.normal")); // default: normal //$NON-NLS-1$, ,         return fontValueStylePane;,     }, ,     private JPanel createGraphDimensionPane() {,         JPanel dimensionPane = new JPanel();,         dimensionPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         dimensionPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_dimension"))); // $NON-NLS-1$, ,         dimensionPane.add(dynamicGraphSize);,         dynamicGraphSize.setSelected(true); // default option,         graphWidth.setEnabled(false);,         graphHeight.setEnabled(false);,         dynamicGraphSize.addActionListener(this);,         dimensionPane.add(Box.createRigidArea(new Dimension(10,0)));,         dimensionPane.add(graphWidth);,         dimensionPane.add(Box.createRigidArea(new Dimension(5,0)));,         dimensionPane.add(graphHeight);,         return dimensionPane;,     }, ,     /**,      * Create pane for X Axis options,      * @return X Axis pane,      */,     private JPanel createGraphXAxisPane() {,         JPanel xAxisPane = new JPanel();,         xAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         xAxisPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_xaxis_group"))); // $NON-NLS-1$,         xAxisPane.add(maxLengthXAxisLabel);,         return xAxisPane;,     }, ,     /**,      * Create pane for Y Axis options,      * @return Y Axis pane,      */,     private JPanel createGraphYAxisPane() {,         JPanel yAxisPane = new JPanel();,         yAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         yAxisPane.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_yaxis_group"))); // $NON-NLS-1$,         yAxisPane.add(maxValueYAxisLabel);,         return yAxisPane;,     }, ,     /**,      * Create pane for legend settings,      * @return Legend pane,      */,     private JPanel createLegendPane() {,         JPanel legendPanel = new JPanel();,         legendPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));,         legendPanel.setBorder(BorderFactory.createTitledBorder(,                 BorderFactory.createEtchedBorder(),,                 JMeterUtils.getResString("aggregate_graph_legend"))); // $NON-NLS-1$, ,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_legend_placement"), //$NON-NLS-1$,                 legendPlacementList));,         legendPlacementList.setSelectedItem(JMeterUtils.getResString("aggregate_graph_legend.placement.bottom"));  // $NON-NLS-1$ // default: bottom,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_font"), //$NON-NLS-1$,                 fontNameList));,         fontNameList.setSelectedIndex(0); // default: sans serif,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_size"), //$NON-NLS-1$,                 fontSizeList));,         fontSizeList.setSelectedItem(StatGraphProperties.fontSize[2]); // default: 10,         legendPanel.add(GuiUtils.createLabelCombo(JMeterUtils.getResString("aggregate_graph_style"), //$NON-NLS-1$,                 fontStyleList));,         fontStyleList.setSelectedItem(JMeterUtils.getResString("fontstyle.normal"));  // $NON-NLS-1$ // default: normal, ,         return legendPanel;,     }, ,     /**,      * @param textToFind,      * @return pattern ready to search,      */,     private Pattern createPattern(String textToFind) {,         String textToFindQ = Pattern.quote(textToFind);,         if (regexpChkBox.isSelected()) {,             textToFindQ = textToFind;,         },         Pattern pattern = null;,         try {,             if (caseChkBox.isSelected()) {,                 pattern = Pattern.compile(textToFindQ);,             } else {,                 pattern = Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);,             },         } catch (PatternSyntaxException pse) {,             return null;,         },         return pattern;],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/BarGraph.java,,40-86,[        super();,         this.label = label;,         this.chkBox = new JCheckBox(this.label, checked);,         this.backColor = backColor;,     }, ,     /**,      * @return the label,      */,     public String getLabel() {,         return label;,     }, ,     /**,      * @param label the label to set,      */,     public void setLabel(String label) {,         this.label = label;,     }, ,     /**,      * @return the chkBox,      */,     public JCheckBox getChkBox() {,         return chkBox;,     }, ,     /**,      * @param chkBox the chkBox to set,      */,     public void setChkBox(JCheckBox chkBox) {,         this.chkBox = chkBox;,     }, ,     /**,      * @return the backColor,      */,     public Color getBackColor() {,         return backColor;,     }, ,     /**,      * @param backColor the backColor to set,      */,     public void setBackColor(Color backColor) {,         this.backColor = backColor;,     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/SamplingStatCalculator.java,,33-294,[    private final StatCalculatorLong calculator = new StatCalculatorLong();, ,     private double maxThroughput;, ,     private long firstTime;, ,     private String label;, ,     private volatile Sample currentSample;, ,     public SamplingStatCalculator(){ // Only for use by test code,         this("");,     }, ,     public SamplingStatCalculator(String label) {,         this.label = label;,         init();,     }, ,     private void init() {,         firstTime = Long.MAX_VALUE;,         calculator.clear();,         maxThroughput = Double.MIN_VALUE;,         currentSample = new Sample();,     }, ,     /**,      * Clear the counters (useful for differential stats),      *,      */,     public synchronized void clear() {,         init();,     }, ,     public Sample getCurrentSample() {,         return currentSample;,     }, ,     /**,      * Get the elapsed time for the samples,      *,      * @return how long the samples took,      */,     public long getElapsed() {,         if (getCurrentSample().getEndTime() == 0) {,             return 0;// No samples collected ...,         },         return getCurrentSample().getEndTime() - firstTime;,     }, ,     /**,      * Returns the throughput associated to this sampler in requests per second.,      * May be slightly skewed because it takes the timestamps of the first and,      * last samples as the total time passed, and the test may actually have,      * started before that start time and ended after that end time.,      *,      * @return throughput associated with this sampler per second,      */,     public double getRate() {,         if (calculator.getCount() == 0) {,             return 0.0; // Better behaviour when howLong=0 or lastTime=0,         }, ,         return getCurrentSample().getThroughput();,     }, ,     /**,      * Throughput in bytes / second,      *,      * @return throughput in bytes/second,      */,     public double getBytesPerSecond() {,         // Code duplicated from getPageSize(),         double rate = 0;,         if (this.getElapsed() > 0 && calculator.getTotalBytes() > 0) {,             rate = calculator.getTotalBytes() / ((double) this.getElapsed() / 1000);,         },         if (rate < 0) {,             rate = 0;,         },         return rate;,     }, ,     /**,      * Throughput in kilobytes / second,      *,      * @return Throughput in kilobytes / second,      */,     public double getKBPerSecond() {,         return getBytesPerSecond() / 1024; // 1024=bytes per kb,     }, ,     /**,      * calculates the average page size, which means divide the bytes by number,      * of samples.,      *,      * @return average page size in bytes (0 if sample count is zero),      */,     public double getAvgPageBytes() {,         long count = calculator.getCount();,         if (count == 0) {,             return 0;,         },         return calculator.getTotalBytes() / (double) count;,     }, ,     /**,      * @return the label of this component,      */,     public String getLabel() {,         return label;,     }, ,     /**,      * Records a sample.,      *,      * @param res,      *            the sample to record,      * @return newly created sample with current statistics,      *,      */,     public Sample addSample(SampleResult res) {,         long rtime, cmean, cstdv, cmedian, cpercent, eCount, endTime;,         double throughput;,         boolean rbool;,         synchronized (calculator) {,             calculator.addValue(res.getTime(), res.getSampleCount());,             calculator.addBytes(res.getBytes());,             setStartTime(res);,             eCount = getCurrentSample().getErrorCount();,             eCount += res.getErrorCount();,             endTime = getEndTime(res);,             long howLongRunning = endTime - firstTime;,             throughput = ((double) calculator.getCount() / (double) howLongRunning) * 1000.0;,             if (throughput > maxThroughput) {,                 maxThroughput = throughput;,             }, ,             rtime = res.getTime();,             cmean = (long)calculator.getMean();,             cstdv = (long)calculator.getStandardDeviation();,             cmedian = calculator.getMedian().longValue();,             cpercent = calculator.getPercentPoint( 0.500 ).longValue();, // TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?,             rbool = res.isSuccessful();,         }, ,         long count = calculator.getCount();,         Sample s =,             new Sample( null, rtime, cmean, cstdv, cmedian, cpercent, throughput, eCount, rbool, count, endTime );,         currentSample = s;,         return s;,     }, ,     private long getEndTime(SampleResult res) {,         long endTime = res.getEndTime();,         long lastTime = getCurrentSample().getEndTime();,         if (lastTime < endTime) {,             lastTime = endTime;,         },         return lastTime;,     }, ,     /**,      * @param res,      */,     private void setStartTime(SampleResult res) {,         long startTime = res.getStartTime();,         if (firstTime > startTime) {,             // this is our first sample, set the start time to current timestamp,             firstTime = startTime;,         },     }, ,     /**,      * Returns the raw double value of the percentage of samples with errors,      * that were recorded. (Between 0.0 and 1.0),      *,      * @return the raw double value of the percentage of samples with errors,      *         that were recorded.,      */,     public double getErrorPercentage() {,         double rval = 0.0;, ,         if (calculator.getCount() == 0) {,             return rval;,         },         rval = (double) getCurrentSample().getErrorCount() / (double) calculator.getCount();,         return rval;,     }, ,     /**,      * For debugging purposes, only.,      */,     @Override,     public String toString() {,         StringBuilder mySB = new StringBuilder();, ,         mySB.append("Samples: " + this.getCount() + "  ");,         mySB.append("Avg: " + this.getMean() + "  ");,         mySB.append("Min: " + this.getMin() + "  ");,         mySB.append("Max: " + this.getMax() + "  ");,         mySB.append("Error Rate: " + this.getErrorPercentage() + "  ");,         mySB.append("Sample Rate: " + this.getRate());,         return mySB.toString();,     }, ,     /**,      * @return errorCount,      */,     public long getErrorCount() {,         return getCurrentSample().getErrorCount();,     }, ,     /**,      * @return Returns the maxThroughput.,      */,     public double getMaxThroughput() {,         return maxThroughput;,     }, ,     public Map<Number, Number[]> getDistribution() {,         return calculator.getDistribution();,     }, ,     public Number getPercentPoint(double percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public long getCount() {,         return calculator.getCount();,     }, ,     public Number getMax() {,         return calculator.getMax();,     }, ,     public double getMean() {,         return calculator.getMean();,     }, ,     public Number getMeanAsNumber() {,         return Long.valueOf((long) calculator.getMean());,     }, ,     public Number getMedian() {,         return calculator.getMedian();,     }, ,     public Number getMin() {,         if (calculator.getMin().longValue() < 0) {,             return Long.valueOf(0);,         },         return calculator.getMin();,     }, ,     public Number getPercentPoint(float percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public double getStandardDeviation() {,         return calculator.getStandardDeviation();],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/visualizers/StatVisualizer.java,actionPerformed,213-213,[                writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/StatVisualizer.java,,59-222,[public class StatVisualizer extends AbstractVisualizer implements Clearable, ActionListener {, ,     private static final long serialVersionUID = 240L;, ,     private static final String USE_GROUP_NAME = "useGroupName"; //$NON-NLS-1$, ,     private static final String SAVE_HEADERS = "saveHeaders"; //$NON-NLS-1$, ,     private final String TOTAL_ROW_LABEL = JMeterUtils,             .getResString("aggregate_report_total_label"); //$NON-NLS-1$, ,     private JTable myJTable;, ,     private JScrollPane myScrollPane;, ,     private final JButton saveTable = new JButton(,             JMeterUtils.getResString("aggregate_graph_save_table")); //$NON-NLS-1$, ,     // should header be saved with the data?,     private final JCheckBox saveHeaders = new JCheckBox(,             JMeterUtils.getResString("aggregate_graph_save_table_header"), true); //$NON-NLS-1$, ,     private final JCheckBox useGroupName = new JCheckBox(,             JMeterUtils.getResString("aggregate_graph_use_group_name")); //$NON-NLS-1$, ,     private transient ObjectTableModel model;, ,     /**,      * Lock used to protect tableRows update + model update,      */,     private final transient Object lock = new Object();, ,     private final Map<String, SamplingStatCalculator> tableRows = new ConcurrentHashMap<>();, ,     public StatVisualizer() {,         super();,         model = StatGraphVisualizer.createObjectTableModel();,         clearData();,         init();,     }, ,     /**,      * @return <code>true</code> iff all functors can be found,      * @deprecated - only for use in testing,      * */,     @Deprecated,     public static boolean testFunctors(){,         StatVisualizer instance = new StatVisualizer();,         return instance.model.checkFunctors(null,instance.getClass());,     }, ,     @Override,     public String getLabelResource() {,         return "aggregate_report";  //$NON-NLS-1$,     }, ,     @Override,     public void add(final SampleResult res) {,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 SamplingStatCalculator row = null;,                 final String sampleLabel = res.getSampleLabel(useGroupName.isSelected());,                 synchronized (lock) {,                     row = tableRows.get(sampleLabel);,                     if (row == null) {,                         row = new SamplingStatCalculator(sampleLabel);,                         tableRows.put(row.getLabel(), row);,                         model.insertRow(row, model.getRowCount() - 1);,                     },                 },                 /*,                  * Synch is needed because multiple threads can update the counts.,                  */,                 synchronized(row) {,                     row.addSample(res);,                 },                 SamplingStatCalculator tot = tableRows.get(TOTAL_ROW_LABEL);,                 synchronized(tot) {,                     tot.addSample(res);,                 },                 model.fireTableDataChanged();,             },         });,     }, ,     /**,      * Clears this visualizer and its model, and forces a repaint of the table.,      */,     @Override,     public void clearData() {,         synchronized (lock) {,             model.clearData();,             tableRows.clear();,             tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));,             model.addRow(tableRows.get(TOTAL_ROW_LABEL));,         },     }, ,     /**,      * Main visualizer setup.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         JPanel mainPanel = new JPanel();,         Border margin = new EmptyBorder(10, 10, 5, 10);, ,         mainPanel.setBorder(margin);,         mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));, ,         mainPanel.add(makeTitlePanel());, ,         // SortFilterModel mySortedModel =,         // new SortFilterModel(myStatTableModel);,         myJTable = new JTable(model);,         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(StatGraphVisualizer.COLUMNS_MSG_PARAMETERS));,         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));,         RendererUtils.applyRenderers(myJTable, StatGraphVisualizer.RENDERERS);,         myScrollPane = new JScrollPane(myJTable);,         this.add(mainPanel, BorderLayout.NORTH);,         this.add(myScrollPane, BorderLayout.CENTER);,         saveTable.addActionListener(this);,         JPanel opts = new JPanel();,         opts.add(useGroupName, BorderLayout.WEST);,         opts.add(saveTable, BorderLayout.CENTER);,         opts.add(saveHeaders, BorderLayout.EAST);,         this.add(opts,BorderLayout.SOUTH);,     }, ,     @Override,     public void modifyTestElement(TestElement c) {,         super.modifyTestElement(c);,         c.setProperty(USE_GROUP_NAME, useGroupName.isSelected(), false);,         c.setProperty(SAVE_HEADERS, saveHeaders.isSelected(), true);,     }, ,     @Override,     public void configure(TestElement el) {,         super.configure(el);,         useGroupName.setSelected(el.getPropertyAsBoolean(USE_GROUP_NAME, false));,         saveHeaders.setSelected(el.getPropertyAsBoolean(SAVE_HEADERS, true));,     }, ,     @Override,     public void actionPerformed(ActionEvent ev) {,         if (ev.getSource() == saveTable) {,             JFileChooser chooser = FileDialoger.promptToSaveFile("aggregate.csv");//$NON-NLS-1$,             if (chooser == null) {,                 return;,             },             FileWriter writer = null;,             try {,                 writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?,                 CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, StatGraphVisualizer.FORMATS),writer,,                         saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.COLUMNS) : null);,             } catch (IOException e) {,                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");,             } finally {,                 JOrphanUtils.closeQuietly(writer);,             },         },     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/visualizers/SamplingStatCalculator.java,,33-294,[    private final StatCalculatorLong calculator = new StatCalculatorLong();, ,     private double maxThroughput;, ,     private long firstTime;, ,     private String label;, ,     private volatile Sample currentSample;, ,     public SamplingStatCalculator(){ // Only for use by test code,         this("");,     }, ,     public SamplingStatCalculator(String label) {,         this.label = label;,         init();,     }, ,     private void init() {,         firstTime = Long.MAX_VALUE;,         calculator.clear();,         maxThroughput = Double.MIN_VALUE;,         currentSample = new Sample();,     }, ,     /**,      * Clear the counters (useful for differential stats),      *,      */,     public synchronized void clear() {,         init();,     }, ,     public Sample getCurrentSample() {,         return currentSample;,     }, ,     /**,      * Get the elapsed time for the samples,      *,      * @return how long the samples took,      */,     public long getElapsed() {,         if (getCurrentSample().getEndTime() == 0) {,             return 0;// No samples collected ...,         },         return getCurrentSample().getEndTime() - firstTime;,     }, ,     /**,      * Returns the throughput associated to this sampler in requests per second.,      * May be slightly skewed because it takes the timestamps of the first and,      * last samples as the total time passed, and the test may actually have,      * started before that start time and ended after that end time.,      *,      * @return throughput associated with this sampler per second,      */,     public double getRate() {,         if (calculator.getCount() == 0) {,             return 0.0; // Better behaviour when howLong=0 or lastTime=0,         }, ,         return getCurrentSample().getThroughput();,     }, ,     /**,      * Throughput in bytes / second,      *,      * @return throughput in bytes/second,      */,     public double getBytesPerSecond() {,         // Code duplicated from getPageSize(),         double rate = 0;,         if (this.getElapsed() > 0 && calculator.getTotalBytes() > 0) {,             rate = calculator.getTotalBytes() / ((double) this.getElapsed() / 1000);,         },         if (rate < 0) {,             rate = 0;,         },         return rate;,     }, ,     /**,      * Throughput in kilobytes / second,      *,      * @return Throughput in kilobytes / second,      */,     public double getKBPerSecond() {,         return getBytesPerSecond() / 1024; // 1024=bytes per kb,     }, ,     /**,      * calculates the average page size, which means divide the bytes by number,      * of samples.,      *,      * @return average page size in bytes (0 if sample count is zero),      */,     public double getAvgPageBytes() {,         long count = calculator.getCount();,         if (count == 0) {,             return 0;,         },         return calculator.getTotalBytes() / (double) count;,     }, ,     /**,      * @return the label of this component,      */,     public String getLabel() {,         return label;,     }, ,     /**,      * Records a sample.,      *,      * @param res,      *            the sample to record,      * @return newly created sample with current statistics,      *,      */,     public Sample addSample(SampleResult res) {,         long rtime, cmean, cstdv, cmedian, cpercent, eCount, endTime;,         double throughput;,         boolean rbool;,         synchronized (calculator) {,             calculator.addValue(res.getTime(), res.getSampleCount());,             calculator.addBytes(res.getBytes());,             setStartTime(res);,             eCount = getCurrentSample().getErrorCount();,             eCount += res.getErrorCount();,             endTime = getEndTime(res);,             long howLongRunning = endTime - firstTime;,             throughput = ((double) calculator.getCount() / (double) howLongRunning) * 1000.0;,             if (throughput > maxThroughput) {,                 maxThroughput = throughput;,             }, ,             rtime = res.getTime();,             cmean = (long)calculator.getMean();,             cstdv = (long)calculator.getStandardDeviation();,             cmedian = calculator.getMedian().longValue();,             cpercent = calculator.getPercentPoint( 0.500 ).longValue();, // TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?,             rbool = res.isSuccessful();,         }, ,         long count = calculator.getCount();,         Sample s =,             new Sample( null, rtime, cmean, cstdv, cmedian, cpercent, throughput, eCount, rbool, count, endTime );,         currentSample = s;,         return s;,     }, ,     private long getEndTime(SampleResult res) {,         long endTime = res.getEndTime();,         long lastTime = getCurrentSample().getEndTime();,         if (lastTime < endTime) {,             lastTime = endTime;,         },         return lastTime;,     }, ,     /**,      * @param res,      */,     private void setStartTime(SampleResult res) {,         long startTime = res.getStartTime();,         if (firstTime > startTime) {,             // this is our first sample, set the start time to current timestamp,             firstTime = startTime;,         },     }, ,     /**,      * Returns the raw double value of the percentage of samples with errors,      * that were recorded. (Between 0.0 and 1.0),      *,      * @return the raw double value of the percentage of samples with errors,      *         that were recorded.,      */,     public double getErrorPercentage() {,         double rval = 0.0;, ,         if (calculator.getCount() == 0) {,             return rval;,         },         rval = (double) getCurrentSample().getErrorCount() / (double) calculator.getCount();,         return rval;,     }, ,     /**,      * For debugging purposes, only.,      */,     @Override,     public String toString() {,         StringBuilder mySB = new StringBuilder();, ,         mySB.append("Samples: " + this.getCount() + "  ");,         mySB.append("Avg: " + this.getMean() + "  ");,         mySB.append("Min: " + this.getMin() + "  ");,         mySB.append("Max: " + this.getMax() + "  ");,         mySB.append("Error Rate: " + this.getErrorPercentage() + "  ");,         mySB.append("Sample Rate: " + this.getRate());,         return mySB.toString();,     }, ,     /**,      * @return errorCount,      */,     public long getErrorCount() {,         return getCurrentSample().getErrorCount();,     }, ,     /**,      * @return Returns the maxThroughput.,      */,     public double getMaxThroughput() {,         return maxThroughput;,     }, ,     public Map<Number, Number[]> getDistribution() {,         return calculator.getDistribution();,     }, ,     public Number getPercentPoint(double percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public long getCount() {,         return calculator.getCount();,     }, ,     public Number getMax() {,         return calculator.getMax();,     }, ,     public double getMean() {,         return calculator.getMean();,     }, ,     public Number getMeanAsNumber() {,         return Long.valueOf((long) calculator.getMean());,     }, ,     public Number getMedian() {,         return calculator.getMedian();,     }, ,     public Number getMin() {,         if (calculator.getMin().longValue() < 0) {,             return Long.valueOf(0);,         },         return calculator.getMin();,     }, ,     public Number getPercentPoint(float percent) {,         return calculator.getPercentPoint(percent);,     }, ,     public double getStandardDeviation() {,         return calculator.getStandardDeviation();],,
I18N,DM_DEFAULT_ENCODING,org/apache/jmeter/visualizers/SummaryReport.java,actionPerformed,274-274,[                writer = new FileWriter(chooser.getSelectedFile());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/SummaryReport.java,,63-283,[public class SummaryReport extends AbstractVisualizer implements Clearable, ActionListener {, ,     private static final long serialVersionUID = 240L;, ,     private static final String USE_GROUP_NAME = "useGroupName"; //$NON-NLS-1$, ,     private static final String SAVE_HEADERS   = "saveHeaders"; //$NON-NLS-1$, ,     private static final String[] COLUMNS = {,             "sampler_label",               //$NON-NLS-1$,             "aggregate_report_count",      //$NON-NLS-1$,             "average",                     //$NON-NLS-1$,             "aggregate_report_min",        //$NON-NLS-1$,             "aggregate_report_max",        //$NON-NLS-1$,             "aggregate_report_stddev",     //$NON-NLS-1$,             "aggregate_report_error%",     //$NON-NLS-1$,             "aggregate_report_rate",       //$NON-NLS-1$,             "aggregate_report_bandwidth",  //$NON-NLS-1$,             "average_bytes",               //$NON-NLS-1$,             };, ,     private final String TOTAL_ROW_LABEL,         = JMeterUtils.getResString("aggregate_report_total_label");  //$NON-NLS-1$, ,     private JTable myJTable;, ,     private JScrollPane myScrollPane;, ,     private final JButton saveTable =,         new JButton(JMeterUtils.getResString("aggregate_graph_save_table"));            //$NON-NLS-1$, ,     private final JCheckBox saveHeaders = // should header be saved with the data?,         new JCheckBox(JMeterUtils.getResString("aggregate_graph_save_table_header"),true);    //$NON-NLS-1$, ,     private final JCheckBox useGroupName =,         new JCheckBox(JMeterUtils.getResString("aggregate_graph_use_group_name"));            //$NON-NLS-1$, ,     private transient ObjectTableModel model;, ,     /**,      * Lock used to protect tableRows update + model update,      */,     private final transient Object lock = new Object();, ,     private final Map<String, Calculator> tableRows = new ConcurrentHashMap<>();, ,     // Column renderers,     private static final TableCellRenderer[] RENDERERS =,         new TableCellRenderer[]{,             null, // Label,             null, // count,             null, // Mean,             null, // Min,             null, // Max,             new NumberRenderer("#0.00"), // Std Dev. //$NON-NLS-1$,             new NumberRenderer("#0.00%"), // Error %age //$NON-NLS-1$,             new RateRenderer("#.0"),      // Throughput //$NON-NLS-1$,             new NumberRenderer("#0.00"),  // kB/sec //$NON-NLS-1$,             new NumberRenderer("#.0"),    // avg. pageSize //$NON-NLS-1$,         };,     ,     // Column formats,     static final Format[] FORMATS =,         new Format[]{,             null, // Label,             null, // count,             null, // Mean,             null, // Min,             null, // Max,             new DecimalFormat("#0.00"), // Std Dev. //$NON-NLS-1$,             new DecimalFormat("#0.00%"), // Error %age //$NON-NLS-1$,             new DecimalFormat("#.0"),      // Throughput //$NON-NLS-1$,             new DecimalFormat("#0.00"),  // kB/sec //$NON-NLS-1$,             new DecimalFormat("#.0"),    // avg. pageSize //$NON-NLS-1$,         };, ,     public SummaryReport() {,         super();,         model = new ObjectTableModel(COLUMNS,,                 Calculator.class,// All rows have this class,                 new Functor[] {,                     new Functor("getLabel"),              //$NON-NLS-1$,                     new Functor("getCount"),              //$NON-NLS-1$,                     new Functor("getMeanAsNumber"),       //$NON-NLS-1$,                     new Functor("getMin"),                //$NON-NLS-1$,                     new Functor("getMax"),                //$NON-NLS-1$,                     new Functor("getStandardDeviation"),  //$NON-NLS-1$,                     new Functor("getErrorPercentage"),    //$NON-NLS-1$,                     new Functor("getRate"),               //$NON-NLS-1$,                     new Functor("getKBPerSecond"),        //$NON-NLS-1$,                     new Functor("getAvgPageBytes"),       //$NON-NLS-1$,                 },,                 new Functor[] { null, null, null, null, null, null, null, null , null, null },,                 new Class[] { String.class, Long.class, Long.class, Long.class, Long.class,,                               String.class, String.class, String.class, String.class, String.class });,         clearData();,         init();,     }, ,     /**,      * @return <code>true</code> iff all functors can be found,      * @deprecated - only for use in testing,      * */,     @Deprecated,     public static boolean testFunctors(){,         SummaryReport instance = new SummaryReport();,         return instance.model.checkFunctors(null,instance.getClass());,     }, ,     @Override,     public String getLabelResource() {,         return "summary_report";  //$NON-NLS-1$,     }, ,     @Override,     public void add(final SampleResult res) {,         final String sampleLabel = res.getSampleLabel(useGroupName.isSelected());,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 Calculator row = null;,                 synchronized (lock) {,                     row = tableRows.get(sampleLabel);,                     if (row == null) {,                         row = new Calculator(sampleLabel);,                         tableRows.put(row.getLabel(), row);,                         model.insertRow(row, model.getRowCount() - 1);,                     },                 },                 /*,                  * Synch is needed because multiple threads can update the counts.,                  */,                 synchronized(row) {,                     row.addSample(res);,                 },                 Calculator tot = tableRows.get(TOTAL_ROW_LABEL);,                 synchronized(tot) {,                     tot.addSample(res);,                 },                 model.fireTableDataChanged();                ,             },         });,     }, ,     /**,      * Clears this visualizer and its model, and forces a repaint of the table.,      */,     @Override,     public void clearData() {,         //Synch is needed because a clear can occur while add occurs,         synchronized (lock) {,             model.clearData();,             tableRows.clear();,             tableRows.put(TOTAL_ROW_LABEL, new Calculator(TOTAL_ROW_LABEL));,             model.addRow(tableRows.get(TOTAL_ROW_LABEL));,         },     }, ,     /**,      * Main visualizer setup.,      */,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         JPanel mainPanel = new JPanel();,         Border margin = new EmptyBorder(10, 10, 5, 10);, ,         mainPanel.setBorder(margin);,         mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));, ,         mainPanel.add(makeTitlePanel());, ,         myJTable = new JTable(model);,         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());,         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));,         RendererUtils.applyRenderers(myJTable, RENDERERS);,         myScrollPane = new JScrollPane(myJTable);,         this.add(mainPanel, BorderLayout.NORTH);,         this.add(myScrollPane, BorderLayout.CENTER);,         saveTable.addActionListener(this);,         JPanel opts = new JPanel();,         opts.add(useGroupName, BorderLayout.WEST);,         opts.add(saveTable, BorderLayout.CENTER);,         opts.add(saveHeaders, BorderLayout.EAST);,         this.add(opts,BorderLayout.SOUTH);,     }, ,     @Override,     public void modifyTestElement(TestElement c) {,         super.modifyTestElement(c);,         c.setProperty(USE_GROUP_NAME, useGroupName.isSelected(), false);,         c.setProperty(SAVE_HEADERS, saveHeaders.isSelected(), true);,     }, ,     @Override,     public void configure(TestElement el) {,         super.configure(el);,         useGroupName.setSelected(el.getPropertyAsBoolean(USE_GROUP_NAME, false));,         saveHeaders.setSelected(el.getPropertyAsBoolean(SAVE_HEADERS, true));,     }, ,     @Override,     public void actionPerformed(ActionEvent ev) {,         if (ev.getSource() == saveTable) {,             JFileChooser chooser = FileDialoger.promptToSaveFile("summary.csv");//$NON-NLS-1$,             if (chooser == null) {,                 return;,             },             FileWriter writer = null;,             try {,                 writer = new FileWriter(chooser.getSelectedFile());,                 CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, FORMATS),writer, ,                         saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(COLUMNS) : null);,             } catch (IOException e) {,                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");,             } finally {,                 JOrphanUtils.closeQuietly(writer);,             },         },     }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/jmeter/util/Calculator.java,,34-234,[    private double sum = 0;, ,     private double sumOfSquares = 0;, ,     private double mean = 0;, ,     private double deviation = 0;, ,     private int count = 0;, ,     private long bytes = 0;, ,     private long maximum = Long.MIN_VALUE;, ,     private long minimum = Long.MAX_VALUE;, ,     private int errors = 0;, ,     private final String label;, ,     public Calculator() {,         this("");,     }, ,     public Calculator(String label) {,         this.label = label;,     }, ,     public void clear() {,         maximum = Long.MIN_VALUE;,         minimum = Long.MAX_VALUE;,         sum = 0;,         sumOfSquares = 0;,         mean = 0;,         deviation = 0;,         count = 0;,     }, ,     /**,      * Add the value for a single sample.,      * ,      * @param newValue the value for the new sample,      * ,      * @deprecated Use {@link #addSample(SampleResult)} instead,      */,     @Deprecated,     public void addValue(long newValue) {,         addValue(newValue, 1);,     }, ,     /**,      * Add the value for (possibly multiple) samples.,      * Updates the count, sum, min, max, sumOfSqaures, mean and deviation.,      * ,      * @param newValue the total value for all the samples.,      * @param sampleCount number of samples included in the value,      */,     private void addValue(long newValue, int sampleCount) {,         count += sampleCount;,         double currentVal = newValue;,         sum += currentVal;,         if (sampleCount > 1){,             minimum=Math.min(newValue/sampleCount, minimum);,             maximum=Math.max(newValue/sampleCount, maximum);,             // For n values in an aggregate sample the average value = (val/n),             // So need to add n * (val/n) * (val/n) = val * val / n,             sumOfSquares += (currentVal * currentVal) / (sampleCount);,         } else { // no point dividing by 1,             minimum=Math.min(newValue, minimum);,             maximum=Math.max(newValue, maximum);,             sumOfSquares += currentVal * currentVal;,         },         // Calculate each time, as likely to be called for each add,         mean = sum / count;,         deviation = Math.sqrt((sumOfSquares / count) - (mean * mean));,     }, , ,     public void addBytes(long newValue) {,         bytes += newValue;,     }, ,     private long startTime = 0;,     private long elapsedTime = 0;, ,     /**,      * Add details for a sample result, which may consist of multiple samples.,      * Updates the number of bytes read, error count, startTime and elapsedTime,      * @param res the sample result; might represent multiple values,      */,     public void addSample(SampleResult res) {,         addBytes(res.getBytes());,         addValue(res.getTime(),res.getSampleCount());,         errors+=res.getErrorCount(); // account for multiple samples,         if (startTime == 0){ // not yet intialised,             startTime=res.getStartTime();,         } else {,             startTime = Math.min(startTime, res.getStartTime());,         },         elapsedTime = Math.max(elapsedTime, res.getEndTime()-startTime);,     }, , ,     public long getTotalBytes() {,         return bytes;,     }, , ,     public double getMean() {,         return mean;,     }, ,     public Number getMeanAsNumber() {,         return Long.valueOf((long) mean);,     }, ,     public double getStandardDeviation() {,         return deviation;,     }, ,     public long getMin() {,         return minimum;,     }, ,     public long getMax() {,         return maximum;,     }, ,     public int getCount() {,         return count;,     }, ,     public String getLabel() {,         return label;,     }, ,     /**,      * Returns the raw double value of the percentage of samples with errors,      * that were recorded. (Between 0.0 and 1.0),      *,      * @return the raw double value of the percentage of samples with errors,      *         that were recorded.,      */,     public double getErrorPercentage() {,         double rval = 0.0;, ,         if (count == 0) {,             return (rval);,         },         rval = (double) errors / (double) count;,         return (rval);,     }, ,     /**,      * Returns the throughput associated to this sampler in requests per second.,      * May be slightly skewed because it takes the timestamps of the first and,      * last samples as the total time passed, and the test may actually have,      * started before that start time and ended after that end time.,      *,      * @return throughput associated to this sampler in requests per second,      */,     public double getRate() {,         if (elapsedTime == 0) {,             return 0.0;,         }, ,         return ((double) count / (double) elapsedTime ) * 1000;,     }, ,     /**,      * calculates the average page size, which means divide the bytes by number,      * of samples.,      *,      * @return average page size in bytes,      */,     public double getAvgPageBytes() {,         if (count > 0 && bytes > 0) {,             return (double) bytes / count;,         },         return 0.0;,     }, ,     /**,      * Throughput in bytes / second,      *,      * @return throughput in bytes/second,      */,     public double getBytesPerSecond() {,         if (elapsedTime > 0) {,             return bytes / ((double) elapsedTime / 1000); // 1000 = millisecs/sec,         },         return 0.0;,     }, ,     /**,      * Throughput in kilobytes / second,      *,      * @return Throughput in kilobytes / second,      */,     public double getKBPerSecond() {,         return getBytesPerSecond() / 1024; // 1024=bytes per kb],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/TableVisualizer.java,,60-320,[public class TableVisualizer extends AbstractVisualizer implements Clearable {, ,     private static final long serialVersionUID = 240L;, ,     // Note: the resource string won't respond to locale-changes,,     // however this does not matter as it is only used when pasting to the clipboard,     private static final ImageIcon imageSuccess = JMeterUtils.getImage(,             JMeterUtils.getPropDefault("viewResultsTree.success",  //$NON-NLS-1$,                                        "icon_success_sml.gif"),    //$NON-NLS-1$,             JMeterUtils.getResString("table_visualizer_success")); //$NON-NLS-1$, ,     private static final ImageIcon imageFailure = JMeterUtils.getImage(,             JMeterUtils.getPropDefault("viewResultsTree.failure",  //$NON-NLS-1$,                                        "icon_warning_sml.gif"),    //$NON-NLS-1$,             JMeterUtils.getResString("table_visualizer_warning")); //$NON-NLS-1$, ,     private static final String[] COLUMNS = new String[] {,             "table_visualizer_sample_num",  // $NON-NLS-1$,             "table_visualizer_start_time",  // $NON-NLS-1$,             "table_visualizer_thread_name", // $NON-NLS-1$,             "sampler_label",                // $NON-NLS-1$,             "table_visualizer_sample_time", // $NON-NLS-1$,             "table_visualizer_status",      // $NON-NLS-1$,             "table_visualizer_bytes",       // $NON-NLS-1$,             "table_visualizer_latency",     // $NON-NLS-1$,             "table_visualizer_connect"};    // $NON-NLS-1$, ,     private ObjectTableModel model = null;, ,     private JTable table = null;, ,     private JTextField dataField = null;, ,     private JTextField averageField = null;, ,     private JTextField deviationField = null;, ,     private JTextField noSamplesField = null;, ,     private JScrollPane tableScrollPanel = null;, ,     private JCheckBox autoscroll = null;, ,     private JCheckBox childSamples = null;, ,     private transient Calculator calc = new Calculator();, ,     private Format format = new SimpleDateFormat("HH:mm:ss.SSS"); //$NON-NLS-1$, ,     // Column renderers,     private static final TableCellRenderer[] RENDERERS =,         new TableCellRenderer[]{,             new RightAlignRenderer(), // Sample number (string),             new RightAlignRenderer(), // Start Time,             null, // Thread Name,             null, // Label,             null, // Sample Time,             null, // Status,             null, // Bytes,         };, ,     /**,      * Constructor for the TableVisualizer object.,      */,     public TableVisualizer() {,         super();,         model = new ObjectTableModel(COLUMNS,,                 TableSample.class,         // The object used for each row,                 new Functor[] {,                 new Functor("getSampleNumberString"),  // $NON-NLS-1$,                 new Functor("getStartTimeFormatted",   // $NON-NLS-1$,                         new Object[]{format}),,                 new Functor("getThreadName"),          // $NON-NLS-1$,                 new Functor("getLabel"),               // $NON-NLS-1$,                 new Functor("getElapsed"),             // $NON-NLS-1$,                 new SampleSuccessFunctor("isSuccess"), // $NON-NLS-1$,                 new Functor("getBytes"),               // $NON-NLS-1$,                 new Functor("getLatency"),             // $NON-NLS-1$,                 new Functor("getConnectTime") },       // $NON-NLS-1$,                 new Functor[] { null, null, null, null, null, null, null, null, null },,                 new Class[] {,                 String.class, String.class, String.class, String.class, Long.class, ImageIcon.class, Long.class, Long.class, Long.class });,         init();,     }, ,     public static boolean testFunctors(){,         TableVisualizer instance = new TableVisualizer();,         return instance.model.checkFunctors(null,instance.getClass());,     }, , ,     @Override,     public String getLabelResource() {,         return "view_results_in_table"; // $NON-NLS-1$,     }, ,     protected synchronized void updateTextFields(SampleResult res) {,         noSamplesField.setText(Long.toString(calc.getCount()));,         if(res.getSampleCount() > 0) {,             dataField.setText(Long.toString(res.getTime()/res.getSampleCount()));,         } else {,             dataField.setText("0");,         },         averageField.setText(Long.toString((long) calc.getMean()));,         deviationField.setText(Long.toString((long) calc.getStandardDeviation()));,     }, ,     @Override,     public void add(final SampleResult res) {,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 if (childSamples.isSelected()) {,                     SampleResult[] subResults = res.getSubResults();,                     if (subResults.length > 0) {,                         for (SampleResult sr : subResults) {,                             add(sr);,                         },                         return;,                     },                 },                 synchronized (calc) {,                     calc.addSample(res);,                     int count = calc.getCount();,                     TableSample newS = new TableSample(,                             count, ,                             res.getSampleCount(), ,                             res.getStartTime(), ,                             res.getThreadName(), ,                             res.getSampleLabel(),,                             res.getTime(),,                             res.isSuccessful(),,                             res.getBytes(),,                             res.getLatency(),,                             res.getConnectTime(),                             );,                     model.addRow(newS);,                 },                 updateTextFields(res);,                 if (autoscroll.isSelected()) {,                     table.scrollRectToVisible(table.getCellRect(table.getRowCount() - 1, 0, true));,                 },             },         });,     }, ,     @Override,     public synchronized void clearData() {,         model.clearData();,         calc.clear();,         noSamplesField.setText("0"); // $NON-NLS-1$,         dataField.setText("0"); // $NON-NLS-1$,         averageField.setText("0"); // $NON-NLS-1$,         deviationField.setText("0"); // $NON-NLS-1$,         repaint();,     }, ,     @Override,     public String toString() {,         return "Show the samples in a table";,     }, ,     private void init() {,         this.setLayout(new BorderLayout());, ,         // MAIN PANEL,         JPanel mainPanel = new JPanel();,         Border margin = new EmptyBorder(10, 10, 5, 10);, ,         mainPanel.setBorder(margin);,         mainPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));, ,         // NAME,         mainPanel.add(makeTitlePanel());, ,         // Set up the table itself,         table = new JTable(model);,         table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());,         // table.getTableHeader().setReorderingAllowed(false);,         RendererUtils.applyRenderers(table, RENDERERS);, ,         tableScrollPanel = new JScrollPane(table);,         tableScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));, ,         autoscroll = new JCheckBox(JMeterUtils.getResString("view_results_autoscroll")); //$NON-NLS-1$, ,         childSamples = new JCheckBox(JMeterUtils.getResString("view_results_childsamples")); //$NON-NLS-1$, ,         // Set up footer of table which displays numerics of the graphs,         JPanel dataPanel = new JPanel();,         JLabel dataLabel = new JLabel(JMeterUtils.getResString("graph_results_latest_sample")); // $NON-NLS-1$,         dataLabel.setForeground(Color.black);,         dataField = new JTextField(5);,         dataField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,         dataField.setEditable(false);,         dataField.setForeground(Color.black);,         dataField.setBackground(getBackground());,         dataPanel.add(dataLabel);,         dataPanel.add(dataField);, ,         JPanel averagePanel = new JPanel();,         JLabel averageLabel = new JLabel(JMeterUtils.getResString("graph_results_average")); // $NON-NLS-1$,         averageLabel.setForeground(Color.blue);,         averageField = new JTextField(5);,         averageField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,         averageField.setEditable(false);,         averageField.setForeground(Color.blue);,         averageField.setBackground(getBackground());,         averagePanel.add(averageLabel);,         averagePanel.add(averageField);, ,         JPanel deviationPanel = new JPanel();,         JLabel deviationLabel = new JLabel(JMeterUtils.getResString("graph_results_deviation")); // $NON-NLS-1$,         deviationLabel.setForeground(Color.red);,         deviationField = new JTextField(5);,         deviationField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,         deviationField.setEditable(false);,         deviationField.setForeground(Color.red);,         deviationField.setBackground(getBackground());,         deviationPanel.add(deviationLabel);,         deviationPanel.add(deviationField);, ,         JPanel noSamplesPanel = new JPanel();,         JLabel noSamplesLabel = new JLabel(JMeterUtils.getResString("graph_results_no_samples")); // $NON-NLS-1$, ,         noSamplesField = new JTextField(8);,         noSamplesField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,         noSamplesField.setEditable(false);,         noSamplesField.setForeground(Color.black);,         noSamplesField.setBackground(getBackground());,         noSamplesPanel.add(noSamplesLabel);,         noSamplesPanel.add(noSamplesField);, ,         JPanel tableInfoPanel = new JPanel();,         tableInfoPanel.setLayout(new FlowLayout());,         tableInfoPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));, ,         tableInfoPanel.add(noSamplesPanel);,         tableInfoPanel.add(dataPanel);,         tableInfoPanel.add(averagePanel);,         tableInfoPanel.add(deviationPanel);, ,         JPanel tableControlsPanel = new JPanel(new BorderLayout());,         tableControlsPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));,         JPanel jp = new HorizontalPanel();,         jp.add(autoscroll);,         jp.add(childSamples);,         tableControlsPanel.add(jp, BorderLayout.WEST);,         tableControlsPanel.add(tableInfoPanel, BorderLayout.CENTER);, ,         // Set up the table with footer,         JPanel tablePanel = new JPanel();, ,         tablePanel.setLayout(new BorderLayout());,         tablePanel.add(tableScrollPanel, BorderLayout.CENTER);,         tablePanel.add(tableControlsPanel, BorderLayout.SOUTH);, ,         // Add the main panel and the graph,         this.add(mainPanel, BorderLayout.NORTH);,         this.add(tablePanel, BorderLayout.CENTER);,     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java,createComboRender,335-335,[            } catch (Exception e) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java,,70-450,[public class ViewResultsFullVisualizer extends AbstractVisualizer, implements ActionListener, TreeSelectionListener, Clearable, ItemListener {, ,     private static final long serialVersionUID = 7338676747296593842L;, ,     private static final Logger log = LoggingManager.getLoggerForClass();, ,     public static final Color SERVER_ERROR_COLOR = Color.red;, ,     public static final Color CLIENT_ERROR_COLOR = Color.blue;, ,     public static final Color REDIRECT_COLOR = Color.green;, ,     private  JSplitPane mainSplit;, ,     private DefaultMutableTreeNode root;, ,     private DefaultTreeModel treeModel;, ,     private JTree jTree;, ,     private Component leftSide;, ,     private JTabbedPane rightSide;, ,     private JComboBox<ResultRenderer> selectRenderPanel;, ,     private int selectedTab;, ,     protected static final String COMBO_CHANGE_COMMAND = "change_combo"; // $NON-NLS-1$, ,     private static final ImageIcon imageSuccess = JMeterUtils.getImage(,             JMeterUtils.getPropDefault("viewResultsTree.success",  //$NON-NLS-1$,                     "icon_success_sml.gif")); //$NON-NLS-1$, ,     private static final ImageIcon imageFailure = JMeterUtils.getImage(,             JMeterUtils.getPropDefault("viewResultsTree.failure",  //$NON-NLS-1$,                     "icon_warning_sml.gif")); //$NON-NLS-1$, ,     // Maximum size that we will display,     private static final int MAX_DISPLAY_SIZE =,         JMeterUtils.getPropDefault("view.results.tree.max_size", 200 * 1024); // $NON-NLS-1$, ,     // default display order,     private static final String VIEWERS_ORDER =,         JMeterUtils.getPropDefault("view.results.tree.renderers_order", ""); // $NON-NLS-1$ //$NON-NLS-2$, ,     private ResultRenderer resultsRender = null;, ,     private TreeSelectionEvent lastSelectionEvent;, ,     private JCheckBox autoScrollCB;, ,     /**,      * Constructor,      */,     public ViewResultsFullVisualizer() {,         super();,         init();,     }, ,     /** {@inheritDoc} */,     @Override,     public void add(final SampleResult sample) {,         JMeterUtils.runSafe(new Runnable() {,             @Override,             public void run() {,                 updateGui(sample);,             },         });,     }, ,     /**,      * Update the visualizer with new data.,      */,     private synchronized void updateGui(SampleResult res) {,         // Add sample,         DefaultMutableTreeNode currNode = new DefaultMutableTreeNode(res);,         treeModel.insertNodeInto(currNode, root, root.getChildCount());,         addSubResults(currNode, res);,         // Add any assertion that failed as children of the sample node,         AssertionResult assertionResults[] = res.getAssertionResults();,         int assertionIndex = currNode.getChildCount();,         for (int j = 0; j < assertionResults.length; j++) {,             AssertionResult item = assertionResults[j];, ,             if (item.isFailure() || item.isError()) {,                 DefaultMutableTreeNode assertionNode = new DefaultMutableTreeNode(item);,                 treeModel.insertNodeInto(assertionNode, currNode, assertionIndex++);,             },         }, ,         if (root.getChildCount() == 1) {,             jTree.expandPath(new TreePath(root));,         },         if (autoScrollCB.isSelected() && root.getChildCount() > 1) {,             jTree.scrollPathToVisible(new TreePath(new Object[] { root,,                     treeModel.getChild(root, root.getChildCount() - 1) }));,         },     }, ,     private void addSubResults(DefaultMutableTreeNode currNode, SampleResult res) {,         SampleResult[] subResults = res.getSubResults();, ,         int leafIndex = 0;, ,         for (int i = 0; i < subResults.length; i++) {,             SampleResult child = subResults[i];, ,             if (log.isDebugEnabled()) {,                 log.debug("updateGui1 : child sample result - " + child);,             },             DefaultMutableTreeNode leafNode = new DefaultMutableTreeNode(child);, ,             treeModel.insertNodeInto(leafNode, currNode, leafIndex++);,             addSubResults(leafNode, child);,             // Add any assertion that failed as children of the sample node,             AssertionResult assertionResults[] = child.getAssertionResults();,             int assertionIndex = leafNode.getChildCount();,             for (int j = 0; j < assertionResults.length; j++) {,                 AssertionResult item = assertionResults[j];, ,                 if (item.isFailure() || item.isError()) {,                     DefaultMutableTreeNode assertionNode = new DefaultMutableTreeNode(item);,                     treeModel.insertNodeInto(assertionNode, leafNode, assertionIndex++);,                 },             },         },     }, ,     /** {@inheritDoc} */,     @Override,     public synchronized void clearData() {,         while (root.getChildCount() > 0) {,             // the child to be removed will always be 0 'cos as the nodes are,             // removed the nth node will become (n-1)th,             treeModel.removeNodeFromParent((DefaultMutableTreeNode) root.getChildAt(0));,         },         resultsRender.clearData();,     }, ,     /** {@inheritDoc} */,     @Override,     public String getLabelResource() {,         return "view_results_tree_title"; // $NON-NLS-1$,     }, ,     /**,      * Initialize this visualizer,      */,     protected void init() {,         log.debug("init() - pass");,         setLayout(new BorderLayout(0, 5));,         setBorder(makeBorder());,         add(makeTitlePanel(), BorderLayout.NORTH);, ,         leftSide = createLeftPanel();,         // Prepare the common tab,         rightSide = new JTabbedPane();, ,         // Create the split pane,         mainSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftSide, rightSide);,         add(mainSplit, BorderLayout.CENTER);,         // init right side with first render,         resultsRender.setRightSide(rightSide);,         resultsRender.init();,     }, ,     /** {@inheritDoc} */,     @Override,     public void valueChanged(TreeSelectionEvent e) {,         lastSelectionEvent = e;,         DefaultMutableTreeNode node = null;,         synchronized (this) {,             node = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();,         }, ,         if (node != null) {,             // to restore last tab used,             if (rightSide.getTabCount() > selectedTab) {,                 resultsRender.setLastSelectedTab(rightSide.getSelectedIndex());,             },             Object userObject = node.getUserObject();,             resultsRender.setSamplerResult(userObject);,             resultsRender.setupTabPane(); // Processes Assertions,             // display a SampleResult,             if (userObject instanceof SampleResult) {,                 SampleResult sampleResult = (SampleResult) userObject;,                 if (isTextDataType(sampleResult)){,                     resultsRender.renderResult(sampleResult);,                 } else {,                     byte[] responseBytes = sampleResult.getResponseData();,                     if (responseBytes != null) {,                         resultsRender.renderImage(sampleResult);,                     },                 },             },         },     }, ,     /**,      * @param sampleResult SampleResult,      * @return true if sampleResult is text or has empty content type,      */,     protected static boolean isTextDataType(SampleResult sampleResult) {,         return (SampleResult.TEXT).equals(sampleResult.getDataType()),                 || StringUtils.isEmpty(sampleResult.getDataType());,     }, ,     private synchronized Component createLeftPanel() {,         SampleResult rootSampleResult = new SampleResult();,         rootSampleResult.setSampleLabel("Root");,         rootSampleResult.setSuccessful(true);,         root = new DefaultMutableTreeNode(rootSampleResult);, ,         treeModel = new DefaultTreeModel(root);,         jTree = new JTree(treeModel);,         jTree.setCellRenderer(new ResultsNodeRenderer());,         jTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);,         jTree.addTreeSelectionListener(this);,         jTree.setRootVisible(false);,         jTree.setShowsRootHandles(true);,         JScrollPane treePane = new JScrollPane(jTree);,         treePane.setPreferredSize(new Dimension(200, 300));, ,         VerticalPanel leftPane = new VerticalPanel();,         leftPane.add(treePane, BorderLayout.CENTER);,         leftPane.add(createComboRender(), BorderLayout.NORTH);,         autoScrollCB = new JCheckBox(JMeterUtils.getResString("view_results_autoscroll")); // $NON-NLS-1$,         autoScrollCB.setSelected(false);,         autoScrollCB.addItemListener(this);,         leftPane.add(autoScrollCB, BorderLayout.SOUTH);,         return leftPane;,     }, ,     /**,      * Create the drop-down list to changer render,      * @return List of all render (implement ResultsRender),      */,     private Component createComboRender() {,         ComboBoxModel<ResultRenderer> nodesModel = new DefaultComboBoxModel<>();,         // drop-down list for renderer,         selectRenderPanel = new JComboBox<>(nodesModel);,         selectRenderPanel.setActionCommand(COMBO_CHANGE_COMMAND);,         selectRenderPanel.addActionListener(this);, ,         // if no results render in jmeter.properties, load Standard (default),         List<String> classesToAdd = Collections.<String>emptyList();,         try {,             classesToAdd = JMeterUtils.findClassesThatExtend(ResultRenderer.class);,         } catch (IOException e1) {,             // ignored,         },         String textRenderer = JMeterUtils.getResString("view_results_render_text"); // $NON-NLS-1$,         Object textObject = null;,         Map<String, ResultRenderer> map = new HashMap<>(classesToAdd.size());,         for (String clazz : classesToAdd) {,             try {,                 // Instantiate render classes,                 final ResultRenderer renderer = (ResultRenderer) Class.forName(clazz).newInstance();,                 if (textRenderer.equals(renderer.toString())){,                     textObject=renderer;,                 },                 renderer.setBackgroundColor(getBackground());,                 map.put(renderer.getClass().getName(), renderer);,             } catch (Exception e) {,                 log.warn("Error loading result renderer:" + clazz, e);,             },         },         if(VIEWERS_ORDER.length()>0) {,             String[] keys = VIEWERS_ORDER.split(",");,             for (String key : keys) {,                 if(key.startsWith(".")) {,                     key = "org.apache.jmeter.visualizers"+key; //$NON-NLS-1$,                 },                 ResultRenderer renderer = map.remove(key);,                 if(renderer != null) {,                     selectRenderPanel.addItem(renderer);,                 } else {,                     log.warn("Missing (check spelling error in renderer name) or already added(check doublon) " +,                             "result renderer, check property 'view.results.tree.renderers_order', renderer name:'"+key+"'");,                 },             },         },         // Add remaining (plugins or missed in property),         for (ResultRenderer renderer : map.values()) {,             selectRenderPanel.addItem(renderer);,         },         nodesModel.setSelectedItem(textObject); // preset to "Text" option,         return selectRenderPanel;,     }, ,     /** {@inheritDoc} */,     @Override,     public void actionPerformed(ActionEvent event) {,         String command = event.getActionCommand();,         if (COMBO_CHANGE_COMMAND.equals(command)) {,             JComboBox<?> jcb = (JComboBox<?>) event.getSource();, ,             if (jcb != null) {,                 resultsRender = (ResultRenderer) jcb.getSelectedItem();,                 if (rightSide != null) {,                     // to restore last selected tab (better user-friendly),                     selectedTab = rightSide.getSelectedIndex();,                     // Remove old right side,                     mainSplit.remove(rightSide);, ,                     // create and add a new right side,                     rightSide = new JTabbedPane();,                     mainSplit.add(rightSide);,                     resultsRender.setRightSide(rightSide);,                     resultsRender.setLastSelectedTab(selectedTab);,                     log.debug("selectedTab=" + selectedTab);,                     resultsRender.init();,                     // To display current sampler result before change,                     this.valueChanged(lastSelectionEvent);,                 },             },         },     }, ,     public static String getResponseAsString(SampleResult res) {,         String response = null;,         if (isTextDataType(res)) {,             // Showing large strings can be VERY costly, so we will avoid,             // doing so if the response,             // data is larger than 200K. TODO: instead, we could delay doing,             // the result.setText,             // call until the user chooses the "Response data" tab. Plus we,             // could warn the user,             // if this happens and revert the choice if he doesn't confirm,             // he's ready to wait.,             int len = res.getResponseDataAsString().length();,             if (MAX_DISPLAY_SIZE > 0 && len > MAX_DISPLAY_SIZE) {,                 StringBuilder builder = new StringBuilder(MAX_DISPLAY_SIZE+100);,                 builder.append(JMeterUtils.getResString("view_results_response_too_large_message")) //$NON-NLS-1$,                     .append(len).append(" > Max: ").append(MAX_DISPLAY_SIZE),                     .append(", ").append(JMeterUtils.getResString("view_results_response_partial_message")) // $NON-NLS-1$,                     .append("\n").append(res.getResponseDataAsString().substring(0, MAX_DISPLAY_SIZE)).append("\n...");,                 response = builder.toString();,             } else {,                 response = res.getResponseDataAsString();,             },         },         return response;,     }, ,     private static class ResultsNodeRenderer extends DefaultTreeCellRenderer {,         private static final long serialVersionUID = 4159626601097711565L;, ,         @Override,         public Component getTreeCellRendererComponent(JTree tree, Object value,,                 boolean sel, boolean expanded, boolean leaf, int row, boolean focus) {,             super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, focus);,             boolean failure = true;,             Object userObject = ((DefaultMutableTreeNode) value).getUserObject();,             if (userObject instanceof SampleResult) {,                 failure = !(((SampleResult) userObject).isSuccessful());,             } else if (userObject instanceof AssertionResult) {,                 AssertionResult assertion = (AssertionResult) userObject;,                 failure = assertion.isError() || assertion.isFailure();,             }, ,             // Set the status for the node,             if (failure) {,                 this.setForeground(Color.red);,                 this.setIcon(imageFailure);,             } else {,                 this.setIcon(imageSuccess);,             },             return this;,         },     }, ,     /**,      * Handler for Checkbox,      */,     @Override,     public void itemStateChanged(ItemEvent e) {,         // NOOP state is held by component,     }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/jmeter/visualizers/XMLDefaultMutableTreeNode.java,initTextNode,198-198,[        if (text != null && text.length() > 0) {],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jmeter/visualizers/backend/BackendListener.java,,49-484,[public class BackendListener extends AbstractTestElement,     implements Serializable, SampleListener, TestStateListener, NoThreadClone, Remoteable  {, ,     /**,      * ,      */,     private static final class ListenerClientData {,         private BackendListenerClient client;,         private BlockingQueue<SampleResult> queue;,         private AtomicLong queueWaits; // how many times we had to wait to queue a SampleResult        ,         private AtomicLong queueWaitTime; // how long we had to wait (nanoSeconds),         // @GuardedBy("LOCK"),         private int instanceCount; // number of active tests,         private CountDownLatch latch;,     }, ,     /**,      * ,      */,     private static final long serialVersionUID = 8184103677832024335L;, ,     private static final Logger LOGGER = LoggingManager.getLoggerForClass();, ,     /**,      * Property key representing the classname of the BackendListenerClient to user.,      */,     public static final String CLASSNAME = "classname";, ,     /**,      * Queue size,      */,     public static final String QUEUE_SIZE = "QUEUE_SIZE";, ,     /**,      * Lock used to protect accumulators update + instanceCount update,      */,     private static final Object LOCK = new Object();, ,     /**,      * Property key representing the arguments for the BackendListenerClient.,      */,     public static final String ARGUMENTS = "arguments";, ,     /**,      * The BackendListenerClient class used by this sampler.,      * Created by testStarted; copied to cloned instances.,      */,     private Class<?> clientClass;, ,     public static final String DEFAULT_QUEUE_SIZE = "5000";, ,     // Create unique object as marker for end of queue,     private transient static final SampleResult FINAL_SAMPLE_RESULT = new SampleResult();, ,     // Name of the test element. Set up by testStarted().,     private transient String myName;, ,     // Holds listenerClientData for this test element,     private transient ListenerClientData listenerClientData;, ,     /*,      * This is needed for distributed testing where there is 1 instance,      * per server. But we need the total to be shared.,      */,     //@GuardedBy("LOCK") - needed to ensure consistency between this and instanceCount,     private static final Map<String, ListenerClientData> queuesByTestElementName =,             new ConcurrentHashMap<>();, ,     /**,      * Create a BackendListener.,      */,     public BackendListener() {,         synchronized (LOCK) {,             queuesByTestElementName.clear();,         }, ,         setArguments(new Arguments());,     }, ,     /*,      * Ensure that the required class variables are cloned,,      * as this is not currently done by the super-implementation.,      */,     @Override,     public Object clone() {,         BackendListener clone = (BackendListener) super.clone();,         clone.clientClass = this.clientClass;,         return clone;,     }, ,     private void initClass() {,         String name = getClassname().trim();,         try {,             clientClass = Class.forName(name, false, Thread.currentThread().getContextClassLoader());,         } catch (Exception e) {,             LOGGER.error(whoAmI() + "\tException initialising: " + name, e);,         },     }, ,     /**,      * Generate a String identifier of this instance for debugging purposes.,      *,      * @return a String identifier for this sampler instance,      */,     private String whoAmI() {,         StringBuilder sb = new StringBuilder();,         sb.append(Thread.currentThread().getName());,         sb.append("@");,         sb.append(Integer.toHexString(hashCode()));,         sb.append("-");,         sb.append(getName());,         return sb.toString();,     }, , ,     /* (non-Javadoc),      * @see org.apache.jmeter.samplers.SampleListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent),      */,     @Override,     public void sampleOccurred(SampleEvent event) {,         Arguments args = getArguments();,         BackendListenerContext context = new BackendListenerContext(args);, ,         SampleResult sr = listenerClientData.client.createSampleResult(context, event.getResult());,         if(sr == null) {,             if(LOGGER.isDebugEnabled()) {,                 LOGGER.debug(getName()+"=>Dropping SampleResult:"+event.getResult());,             },             return;,         },         try {,             if (!listenerClientData.queue.offer(sr)){ // we failed to add the element first time,                 listenerClientData.queueWaits.incrementAndGet();,                 long t1 = System.nanoTime();,                 listenerClientData.queue.put(sr);,                 long t2 = System.nanoTime();,                 listenerClientData.queueWaitTime.addAndGet(t2-t1);,             },         } catch (Exception err) {,             LOGGER.error("sampleOccurred, failed to queue the sample", err);,         },     }, ,     /**,      * Thread that dequeus data from queue to send it to {@link BackendListenerClient},      */,     private static final class Worker extends Thread {, ,         private final ListenerClientData listenerClientData;,         private final BackendListenerContext context;,         private final BackendListenerClient backendListenerClient;,         private Worker(BackendListenerClient backendListenerClient, Arguments arguments, ListenerClientData listenerClientData){,             this.listenerClientData = listenerClientData;,             // Allow BackendListenerClient implementations to get access to test element name,             arguments.addArgument(TestElement.NAME, getName());,             context = new BackendListenerContext(arguments);,             this.backendListenerClient = backendListenerClient;,         }, ,         @Override,         public void run() {,             boolean isDebugEnabled = LOGGER.isDebugEnabled();,             List<SampleResult> sampleResults = new ArrayList<>(listenerClientData.queue.size());,             try {,                 try {, ,                     boolean endOfLoop = false;,                     while (!endOfLoop) {,                         if(isDebugEnabled) {,                             LOGGER.debug("Thread:"+Thread.currentThread().getName()+" taking SampleResult from queue:"+listenerClientData.queue.size());,                         },                         SampleResult sampleResult = listenerClientData.queue.take();,                         if(isDebugEnabled) {,                             LOGGER.debug("Thread:"+Thread.currentThread().getName()+" took SampleResult:"+sampleResult+", isFinal:" + (sampleResult==FINAL_SAMPLE_RESULT));,                         },                         while (!(endOfLoop = (sampleResult == FINAL_SAMPLE_RESULT)) && sampleResult != null ) { // try to process as many as possible,                             sampleResults.add(sampleResult);,                             if(isDebugEnabled) {,                                 LOGGER.debug("Thread:"+Thread.currentThread().getName()+" polling from queue:"+listenerClientData.queue.size());,                             },                             sampleResult = listenerClientData.queue.poll(); // returns null if nothing on queue currently,                             if(isDebugEnabled) {,                                 LOGGER.debug("Thread:"+Thread.currentThread().getName()+" took from queue:"+sampleResult+", isFinal:" + (sampleResult==FINAL_SAMPLE_RESULT));,                             },                         },                         if(isDebugEnabled) {,                             LOGGER.debug("Thread:"+Thread.currentThread().getName()+,                                     " exiting with FINAL EVENT:"+(sampleResult == FINAL_SAMPLE_RESULT),                                     +", null:" + (sampleResult==null));,                         },                         sendToListener(backendListenerClient, context, sampleResults);,                         if(!endOfLoop) {,                             LockSupport.parkNanos(100);,                         },                     },                 } catch (InterruptedException e) {,                     // NOOP,                 },                 // We may have been interrupted,                 sendToListener(backendListenerClient, context, sampleResults);,                 LOGGER.info("Worker ended");,             } finally {,                 listenerClientData.latch.countDown();,             },         },     }, ,     /**,      * Send sampleResults to {@link BackendListenerClient},      * @param backendListenerClient {@link BackendListenerClient},      * @param context {@link BackendListenerContext},      * @param sampleResults List of {@link SampleResult},      */,     static final void sendToListener(final BackendListenerClient backendListenerClient, ,             final BackendListenerContext context, ,             final List<SampleResult> sampleResults) {,         if (sampleResults.size() > 0) {,             backendListenerClient.handleSampleResults(sampleResults, context);,             sampleResults.clear();,         },     }, ,     /**,      * Returns reference to {@link BackendListener},      * @param clientClass {@link BackendListenerClient} client class,      * @return BackendListenerClient reference.,      */,     static BackendListenerClient createBackendListenerClientImpl(Class<?> clientClass) {,         if (clientClass == null) { // failed to initialise the class,             return new ErrorBackendListenerClient();,         },         try {,             return (BackendListenerClient) clientClass.newInstance();,         } catch (Exception e) {,             LOGGER.error("Exception creating: " + clientClass, e);,             return new ErrorBackendListenerClient();,         },     }, ,     // TestStateListener implementation,     /**,      *  Implements TestStateListener.testStarted() ,      **/,     @Override,     public void testStarted() {,         testStarted("local"); //$NON-NLS-1$,     }, ,     /** Implements TestStateListener.testStarted(String) ,      **/,     @Override,     public void testStarted(String host) {,         if(LOGGER.isDebugEnabled()){,             LOGGER.debug(whoAmI() + "\ttestStarted(" + host + ")");,         }, ,         int queueSize;,         final String size = getQueueSize();,         try {,             queueSize = Integer.parseInt(size);,         } catch (NumberFormatException nfe) {,             LOGGER.warn("Invalid queue size '" + size + "' defaulting to " + DEFAULT_QUEUE_SIZE);,             queueSize = Integer.parseInt(DEFAULT_QUEUE_SIZE);,         }, ,         synchronized (LOCK) {,             myName = getName();,             listenerClientData = queuesByTestElementName.get(myName);,             if (listenerClientData == null){,                 // We need to do this to ensure in Distributed testing ,                 // that only 1 instance of BackendListenerClient is used,                 initClass();,                 BackendListenerClient backendListenerClient = createBackendListenerClientImpl(clientClass);,                 BackendListenerContext context = new BackendListenerContext((Arguments)getArguments().clone());, ,                 listenerClientData = new ListenerClientData();,                 listenerClientData.queue = new ArrayBlockingQueue<>(queueSize);,                 listenerClientData.queueWaits = new AtomicLong(0L);,                 listenerClientData.queueWaitTime = new AtomicLong(0L);,                 listenerClientData.latch = new CountDownLatch(1);,                 listenerClientData.client = backendListenerClient;,                 LOGGER.info(getName()+":Starting worker with class:"+clientClass +" and queue capacity:"+getQueueSize());,                 Worker worker = new Worker(backendListenerClient, (Arguments) getArguments().clone(), listenerClientData);,                 worker.setDaemon(true);,                 worker.start();,                 LOGGER.info(getName()+": Started  worker with class:"+clientClass);,                 try {,                     backendListenerClient.setupTest(context);,                 } catch (Exception e) {,                     throw new java.lang.IllegalStateException("Failed calling setupTest", e);,                 },                 queuesByTestElementName.put(myName, listenerClientData);,             },             listenerClientData.instanceCount++;,         },     }, ,     /**,      * Method called at the end of the test. This is called only on one instance,      * of BackendListener. This method will loop through all of the other,      * BackendListenerClients which have been registered (automatically in the,      * constructor) and notify them that the test has ended, allowing the,      * BackendListenerClients to cleanup.,      * Implements TestStateListener.testEnded(String),      */,     @Override,     public void testEnded(String host) {,         synchronized (LOCK) {,             ListenerClientData listenerClientData = queuesByTestElementName.get(myName);,             if(LOGGER.isDebugEnabled()) {,                 LOGGER.debug("testEnded called on instance "+myName+"#"+listenerClientData.instanceCount);,             },             listenerClientData.instanceCount--;,             if (listenerClientData.instanceCount > 0){,                 // Not the last instance of myName,                 return;,             },         },         try {,             listenerClientData.queue.put(FINAL_SAMPLE_RESULT);,         } catch (Exception ex) {,             LOGGER.warn("testEnded() with exception:"+ex.getMessage(), ex);,         },         if (listenerClientData.queueWaits.get() > 0) {,             LOGGER.warn("QueueWaits: "+listenerClientData.queueWaits+"; QueueWaitTime: "+listenerClientData.queueWaitTime+,                     " (nanoseconds), you may need to increase queue capacity, see property 'backend_queue_capacity'");,         },         try {,             listenerClientData.latch.await();,             BackendListenerContext context = new BackendListenerContext(getArguments());,             listenerClientData.client.teardownTest(context);,         } catch (Exception e) {,             throw new java.lang.IllegalStateException("Failed calling teardownTest", e);,         },     }, ,     /** Implements TestStateListener.testEnded(String),      **/,     @Override,     public void testEnded() {,         testEnded("local"); //$NON-NLS-1$,     }, ,     /**,      * A {@link BackendListenerClient} implementation used for error handling. If an,      * error occurs while creating the real BackendListenerClient object, it is,      * replaced with an instance of this class. Each time a sample occurs with,      * this class, the result is marked as a failure so the user can see that,      * the test failed.,      */,     static class ErrorBackendListenerClient extends AbstractBackendListenerClient {,         /**,          * Return SampleResult with data on error.,          *,          * @see BackendListenerClient#handleSampleResults(List, BackendListenerContext),          */,         @Override,         public void handleSampleResults(List<SampleResult> sampleResults, BackendListenerContext context) {,             LOGGER.warn("ErrorBackendListenerClient#handleSampleResult called, noop");,             Thread.yield();,         },     }, ,     /* (non-Javadoc),      * @see org.apache.jmeter.samplers.SampleListener#sampleStarted(org.apache.jmeter.samplers.SampleEvent),      */,     @Override,     public void sampleStarted(SampleEvent e) {,         // NOOP,     }, ,     /* (non-Javadoc),      * @see org.apache.jmeter.samplers.SampleListener#sampleStopped(org.apache.jmeter.samplers.SampleEvent),      */,     @Override,     public void sampleStopped(SampleEvent e) {,         // NOOP,     }, ,     /**,      * Set the arguments (parameters) for the BackendListenerClient to be executed,      * with.,      *,      * @param args,      *            the new arguments. These replace any existing arguments.,      */,     public void setArguments(Arguments args) {,         setProperty(new TestElementProperty(ARGUMENTS, args));,     }, ,     /**,      * Get the arguments (parameters) for the BackendListenerClient to be executed,      * with.,      *,      * @return the arguments,      */,     public Arguments getArguments() {,         return (Arguments) getProperty(ARGUMENTS).getObjectValue();,     }, ,     /**,      * Sets the Classname of the BackendListenerClient object,      *,      * @param classname,      *            the new Classname value,      */,     public void setClassname(String classname) {,         setProperty(CLASSNAME, classname);,     }, ,     /**,      * Gets the Classname of the BackendListenerClient object,      *,      * @return the Classname value,      */,     public String getClassname() {,         return getPropertyAsString(CLASSNAME);,     }, ,     /**,      * Sets the queue size,      *,      * @param queueSize the size of the queue,      *,      */,     public void setQueueSize(String queueSize) {,         setProperty(QUEUE_SIZE, queueSize, DEFAULT_QUEUE_SIZE);,     }, ,     /**,      * Gets the queue size,      *,      * @return int queueSize,      */,     public String getQueueSize() {,         return getPropertyAsString(QUEUE_SIZE, DEFAULT_QUEUE_SIZE);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/visualizers/backend/BackendListenerGui.java,configure,236-236,[        queueSize.setText(((BackendListener)config).getQueueSize());],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/visualizers/backend/BackendListenerGui.java,modifyTestElement,266-266,[        BackendListener backendListener = (BackendListener) config;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/visualizers/backend/BackendListenerGui.java,actionPerformed,205-205,[            } catch (Exception e) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/visualizers/backend/SamplerMetric.java,,104-104,[        return successes+failures;],,,122-122,[        return failures;],,,59-59,[            failures+=result.getErrorCount();],,,94-94,[        failures = 0;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/visualizers/backend/SamplerMetric.java,,113-113,[        return successes;],,,104-104,[        return successes+failures;],,,57-57,[            successes+=result.getSampleCount()-result.getErrorCount();],,,93-93,[        successes = 0;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/jmeter/visualizers/backend/SamplerMetric.java,,253-253,[        return hits;],,,80-80,[            hits += 1;                 ],,,95-95,[        hits = 0;],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java,writeAndSendMetrics,113-113,[                Writer pickleWriter = new OutputStreamWriter(out, CHARSET_NAME);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java,writeAndSendMetrics,117-117,[            } catch (Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java,writeAndSendMetrics,122-122,[                        LOG.warn("Exception invalidating socketOutputStream connected to graphite server '"+socketConnectionInfos.getHost()+"':"+socketConnectionInfos.getPort(), e1);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java,destroy,142-142,[        socketOutputStreamPool.close();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java,writeAndSendMetrics,120-120,[                        socketOutputStreamPool.invalidateObject(socketConnectionInfos, out);],,writeAndSendMetrics,110-110,[                out = socketOutputStreamPool.borrowObject(socketConnectionInfos);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java,writeAndSendMetrics,89-89,[                PrintWriter pw = new PrintWriter(new OutputStreamWriter(out, CHARSET_NAME), false);],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/visualizers/gui/AbstractVisualizer.java,configure,288-288,[        ResultCollector rc = (ResultCollector) el;],,
STYLE,BC_UNCONFIRMED_CAST,org/apache/jmeter/visualizers/gui/AbstractVisualizer.java,modifyTestElement,273-273,[        configureTestElement((AbstractListenerElement) c);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jmeter/visualizers/utils/Colors.java,getColors,89-89,[            } catch (java.lang.Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jorphan/collections/Data.java,getDataFromResultSet,385-385,[                    o = new String((byte[]) o); // TODO - charset?],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jorphan/collections/Data.java,getColumnValue,444-444,[        } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jorphan/collections/Data.java,getColumnValue,424-424,[        } catch (Exception e) {],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/jorphan/collections/HashTree.java,clone,638-640,[        HashTree newTree = new HashTree();,         cloneTree(newTree);,         return newTree;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jorphan/collections/HashTree.java,getArray,823-823,[        return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/jorphan/collections/HashTree.java,getArray,857-857,[        return (tree != null) ? tree.getArray() : null;],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/jorphan/collections/ListedHashTree.java,clone,76-78,[        ListedHashTree newTree = new ListedHashTree();,         cloneTree(newTree);,         return newTree;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jorphan/collections/ListedHashTree.java,,41-224,[public class ListedHashTree extends HashTree implements Serializable, Cloneable {,     private static final long serialVersionUID = 240L;, ,     private final List<Object> order;, ,     public ListedHashTree() {,         super();,         order = new LinkedList<>();,     }, ,     public ListedHashTree(Object key) {,         this();,         data.put(key, new ListedHashTree());,         order.add(key);,     }, ,     public ListedHashTree(Collection<?> keys) {,         this();,         for (Object temp : keys) {,             data.put(temp, new ListedHashTree());,             order.add(temp);,         },     }, ,     public ListedHashTree(Object[] keys) {,         this();,         for (int x = 0; x < keys.length; x++) {,             data.put(keys[x], new ListedHashTree());,             order.add(keys[x]);,         },     }, ,     /** {@inheritDoc} */,     @Override,     public Object clone() {,         ListedHashTree newTree = new ListedHashTree();,         cloneTree(newTree);,         return newTree;,     }, ,     /** {@inheritDoc} */,     @Override,     public void set(Object key, Object value) {,         if (!data.containsKey(key)) {,             order.add(key);,         },         super.set(key, value);,     }, ,     /** {@inheritDoc} */,     @Override,     public void set(Object key, HashTree t) {,         if (!data.containsKey(key)) {,             order.add(key);,         },         super.set(key, t);,     }, ,     /** {@inheritDoc} */,     @Override,     public void set(Object key, Object[] values) {,         if (!data.containsKey(key)) {,             order.add(key);,         },         super.set(key, values);,     }, ,     /** {@inheritDoc} */,     @Override,     public void set(Object key, Collection<?> values) {,         if (!data.containsKey(key)) {,             order.add(key);,         },         super.set(key, values);,     }, ,     /** {@inheritDoc} */,     @Override,     public void replaceKey(Object currentKey, Object newKey) {,         HashTree tree = getTree(currentKey);,         data.remove(currentKey);,         data.put(newKey, tree);,         // find order.indexOf(currentKey) using == rather than equals(),         // there may be multiple entries which compare equals (Bug 50898),         // This will be slightly slower than the built-in method,,         // but replace() is not used frequently.,         int entry=-1;,         for (int i=0; i < order.size(); i++) {,             Object ent = order.get(i);,             if (ent == currentKey) {,                 entry = i;,                 break;,             },         },         if (entry == -1) {,             throw new JMeterError("Impossible state, data key not present in order: "+currentKey.getClass());,         },         order.set(entry, newKey);,     }, ,     /** {@inheritDoc} */,     @Override,     public HashTree createNewTree() {,         return new ListedHashTree();,     }, ,     /** {@inheritDoc} */,     @Override,     public HashTree createNewTree(Object key) {,         return new ListedHashTree(key);,     }, ,     /** {@inheritDoc} */,     @Override,     public HashTree createNewTree(Collection<?> values) {,         return new ListedHashTree(values);,     }, ,     /** {@inheritDoc} */,     @Override,     public HashTree add(Object key) {,         if (!data.containsKey(key)) {,             HashTree newTree = createNewTree();,             data.put(key, newTree);,             order.add(key);,             return newTree;,         },         return getTree(key);,     }, ,     /** {@inheritDoc} */,     @Override,     public Collection<Object> list() {,         return order;,     }, ,     /** {@inheritDoc} */,     @Override,     public HashTree remove(Object key) {,         order.remove(key);,         return data.remove(key);,     }, ,     /** {@inheritDoc} */,     @Override,     public Object[] getArray() {,         return order.toArray();,     }, ,     /** {@inheritDoc} */,     // Make sure the hashCode depends on the order as well,     @Override,     public int hashCode() {,         int hc = 17;,         hc = hc * 37 + (order == null ? 0 : order.hashCode());,         hc = hc * 37 + super.hashCode();,         return hc;,     }, ,     /** {@inheritDoc} */,     @Override,     public boolean equals(Object o) {,         if (!(o instanceof ListedHashTree)) {,             return false;,         },         ListedHashTree lht = (ListedHashTree) o;,         return (super.equals(lht) && order.equals(lht.order));,     }, , ,     private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {,         ois.defaultReadObject();,     }, ,     private void writeObject(ObjectOutputStream oos) throws IOException {,         oos.defaultWriteObject();,     }, ,     /** {@inheritDoc} */,     @Override,     public void clear() {,         super.clear();,         order.clear();,     }],,
STYLE,BC_BAD_CAST_TO_CONCRETE_COLLECTION,org/apache/jorphan/collections/SortedHashTree.java,createNewTree,91-91,[        Comparator<? super Object> comparator = ((TreeMap<Object, HashTree>)data).comparator();],,
STYLE,BC_BAD_CAST_TO_CONCRETE_COLLECTION,org/apache/jorphan/collections/SortedHashTree.java,createNewTree,98-98,[        Comparator<? super Object> comparator = ((TreeMap<Object, HashTree>) data).comparator();],,
STYLE,BC_BAD_CAST_TO_CONCRETE_COLLECTION,org/apache/jorphan/collections/SortedHashTree.java,createNewTree,105-105,[        Comparator<? super Object> comparator = ((TreeMap<Object, HashTree>)data).comparator();],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/jorphan/collections/SortedHashTree.java,,42-106,[        super(new TreeMap<Object, HashTree>()); // equivalent to new TreeMap((Comparator)null);,     }, ,     // non-null Comparators don't appear to be used at present,     public SortedHashTree(Comparator<? super Object> comper) {,         super(new TreeMap<Object, HashTree>(comper));,     }, ,     public SortedHashTree(Object key) {,         this();,         data.put(key, new SortedHashTree());,     }, ,     public SortedHashTree(Object key, Comparator<? super Object> comper) {,         this(comper);,         data.put(key, new SortedHashTree(comper));,     }, ,     public SortedHashTree(Collection<?> keys) {,         this();,         for (Object key  : keys) {,             data.put(key, new SortedHashTree());,         },     }, ,     public SortedHashTree(Collection<?> keys, Comparator<? super Object> comper) {,         this(comper);,         for (Object key  : keys) {,             data.put(key, new SortedHashTree(comper));,         },     }, ,     public SortedHashTree(Object[] keys) {,         this();,         for (int x = 0; x < keys.length; x++) {,             data.put(keys[x], new SortedHashTree());,         },     }, ,     public SortedHashTree(Object[] keys, Comparator<? super Object> comper) {,         this(comper);,         for (int x = 0; x < keys.length; x++) {,             data.put(keys[x], new SortedHashTree(comper));,         },     }, ,     /** {@inheritDoc} */,     @Override,     protected HashTree createNewTree() {,         Comparator<? super Object> comparator = ((TreeMap<Object, HashTree>)data).comparator();,         return new SortedHashTree(comparator);,     }, ,     /** {@inheritDoc} */,     @Override,     protected HashTree createNewTree(Object key) {,         Comparator<? super Object> comparator = ((TreeMap<Object, HashTree>) data).comparator();,         return new SortedHashTree(key, comparator);,     }, ,     /** {@inheritDoc} */,     @Override,     protected HashTree createNewTree(Collection<?> values) {,         Comparator<? super Object> comparator = ((TreeMap<Object, HashTree>)data).comparator();,         return new SortedHashTree(values, comparator);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jorphan/exec/StreamGobbler.java,run,50-50,[            br = new BufferedReader(new InputStreamReader(is)); // default charset],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jorphan/exec/SystemCommand.java,run,185-185,[                } catch (Exception ignored) {],,
STYLE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,org/apache/jorphan/gui/MenuScroller.java,refreshMenu,568-568,[            JComponent parent = (JComponent) upItem.getParent();],,
MALICIOUS_CODE,FI_PUBLIC_SHOULD_BE_PROTECTED,org/apache/jorphan/gui/MenuScroller.java,finalize,529-530,[        dispose();,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/jorphan/gui/MenuScroller.java,,645-664,[        public MenuScrollItem(MenuIcon icon, int increment) {,             setIcon(icon);,             setDisabledIcon(icon);,             timer = new MenuScrollTimer(increment, interval);,             addChangeListener(this);,         }, ,         public void setInterval(int interval) {,             timer.setDelay(interval);,         }, ,         @Override,         public void stateChanged(ChangeEvent e) {,             if (isArmed() && !timer.isRunning()) {,                 timer.start();,             },             if (!isArmed() && timer.isRunning()) {,                 timer.stop();,             },         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/jorphan/gui/MenuScroller.java,,627-636,[        public MenuScrollTimer(final int increment, int interval) {,             super(interval, new ActionListener() {, ,                 @Override,                 public void actionPerformed(ActionEvent e) {,                     firstIndex += increment;,                     refreshMenu();,                 },             });,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/jorphan/io/TextFile.java,getText,141-141,[                reader = new FileReader(this);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jorphan/io/TextFile.java,setText,116-116,[                writer = new FileWriter(this);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jorphan/logging/LoggingManager.java,makeWriter,187-187,[            } catch (Exception ignored) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/jorphan/logging/LoggingManager.java,makeWriter,193-193,[            wt = new FileWriter(logFile);],,
I18N,DM_DEFAULT_ENCODING,org/apache/jorphan/logging/LoggingManager.java,makeWriter,198-198,[            wt = new PrintWriter(System.out);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/jorphan/reflect/ClassFinder.java,addJarsInPath,184-184,[                    Collections.addAll(fullList, jars);],,addJarsInPath,178-178,[                    String[] jars = dir.list(new FilenameFilter() {],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/jorphan/reflect/ClassFinder.java,findClassesInPathsDir,562-562,[        for (String aList : list) {],,findClassesInPathsDir,561-561,[        String[] list = dir.list();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jorphan/reflect/Functor.java,checkMethod,386-386,[        } catch (Exception e){],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/jorphan/reflect/Functor.java,checkMethod,409-409,[        } catch (Exception e){],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jorphan/reflect/Functor.java,doCreateMethod,342-342,[            } catch (Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/jorphan/reflect/Functor.java,doInvoke,260-260,[        } catch (Exception e) {],,
